/**
 * Loader generated by glad 2.0.8 on -
 *
 * SPDX-License-Identifier: (WTFPL OR CC0-1.0) AND Apache-2.0
 *
 * Generator: C/C++
 * Specification: vk
 * Extensions: 425
 *
 * APIs:
 *  - vulkan=1.4
 *
 * Options:
 *  - ALIAS = True
 *  - HEADER_ONLY = False
 *  - LOADER = True
 *  - MX = True
 *  - MX_GLOBAL = True
 *  - USE_PFN_RANGES = True
 *
 * Commandline:
 *    --merge --api='vulkan=1.4' --extensions='VK_AMDX_dense_geometry_format,VK_AMDX_shader_enqueue,VK_AMD_anti_lag,VK_AMD_buffer_marker,VK_AMD_device_coherent_memory,VK_AMD_display_native_hdr,VK_AMD_draw_indirect_count,VK_AMD_gcn_shader,VK_AMD_gpu_shader_half_float,VK_AMD_gpu_shader_int16,VK_AMD_memory_overallocation_behavior,VK_AMD_mixed_attachment_samples,VK_AMD_negative_viewport_height,VK_AMD_pipeline_compiler_control,VK_AMD_rasterization_order,VK_AMD_shader_ballot,VK_AMD_shader_core_properties,VK_AMD_shader_core_properties2,VK_AMD_shader_early_and_late_fragment_tests,VK_AMD_shader_explicit_vertex_parameter,VK_AMD_shader_fragment_mask,VK_AMD_shader_image_load_store_lod,VK_AMD_shader_info,VK_AMD_shader_trinary_minmax,VK_AMD_texture_gather_bias_lod,VK_ANDROID_external_format_resolve,VK_ANDROID_external_memory_android_hardware_buffer,VK_ARM_data_graph,VK_ARM_format_pack,VK_ARM_pipeline_opacity_micromap,VK_ARM_rasterization_order_attachment_access,VK_ARM_render_pass_striped,VK_ARM_scheduling_controls,VK_ARM_shader_core_builtins,VK_ARM_shader_core_properties,VK_ARM_tensors,VK_EXT_4444_formats,VK_EXT_acquire_drm_display,VK_EXT_acquire_xlib_display,VK_EXT_astc_decode_mode,VK_EXT_attachment_feedback_loop_dynamic_state,VK_EXT_attachment_feedback_loop_layout,VK_EXT_blend_operation_advanced,VK_EXT_border_color_swizzle,VK_EXT_buffer_device_address,VK_EXT_calibrated_timestamps,VK_EXT_color_write_enable,VK_EXT_conditional_rendering,VK_EXT_conservative_rasterization,VK_EXT_custom_border_color,VK_EXT_debug_marker,VK_EXT_debug_report,VK_EXT_debug_utils,VK_EXT_depth_bias_control,VK_EXT_depth_clamp_control,VK_EXT_depth_clamp_zero_one,VK_EXT_depth_clip_control,VK_EXT_depth_clip_enable,VK_EXT_depth_range_unrestricted,VK_EXT_descriptor_buffer,VK_EXT_descriptor_indexing,VK_EXT_device_address_binding_report,VK_EXT_device_fault,VK_EXT_device_generated_commands,VK_EXT_device_memory_report,VK_EXT_direct_mode_display,VK_EXT_directfb_surface,VK_EXT_discard_rectangles,VK_EXT_display_control,VK_EXT_display_surface_counter,VK_EXT_dynamic_rendering_unused_attachments,VK_EXT_extended_dynamic_state,VK_EXT_extended_dynamic_state2,VK_EXT_extended_dynamic_state3,VK_EXT_external_memory_acquire_unmodified,VK_EXT_external_memory_dma_buf,VK_EXT_external_memory_host,VK_EXT_external_memory_metal,VK_EXT_filter_cubic,VK_EXT_fragment_density_map,VK_EXT_fragment_density_map2,VK_EXT_fragment_density_map_offset,VK_EXT_fragment_shader_interlock,VK_EXT_frame_boundary,VK_EXT_full_screen_exclusive,VK_EXT_global_priority,VK_EXT_global_priority_query,VK_EXT_graphics_pipeline_library,VK_EXT_hdr_metadata,VK_EXT_headless_surface,VK_EXT_host_image_copy,VK_EXT_host_query_reset,VK_EXT_image_2d_view_of_3d,VK_EXT_image_compression_control,VK_EXT_image_compression_control_swapchain,VK_EXT_image_drm_format_modifier,VK_EXT_image_robustness,VK_EXT_image_sliced_view_of_3d,VK_EXT_image_view_min_lod,VK_EXT_index_type_uint8,VK_EXT_inline_uniform_block,VK_EXT_layer_settings,VK_EXT_legacy_dithering,VK_EXT_legacy_vertex_attributes,VK_EXT_line_rasterization,VK_EXT_load_store_op_none,VK_EXT_map_memory_placed,VK_EXT_memory_budget,VK_EXT_memory_priority,VK_EXT_mesh_shader,VK_EXT_metal_objects,VK_EXT_metal_surface,VK_EXT_multi_draw,VK_EXT_multisampled_render_to_single_sampled,VK_EXT_mutable_descriptor_type,VK_EXT_nested_command_buffer,VK_EXT_non_seamless_cube_map,VK_EXT_opacity_micromap,VK_EXT_pageable_device_local_memory,VK_EXT_pci_bus_info,VK_EXT_physical_device_drm,VK_EXT_pipeline_creation_cache_control,VK_EXT_pipeline_creation_feedback,VK_EXT_pipeline_library_group_handles,VK_EXT_pipeline_properties,VK_EXT_pipeline_protected_access,VK_EXT_pipeline_robustness,VK_EXT_post_depth_coverage,VK_EXT_present_mode_fifo_latest_ready,VK_EXT_primitive_topology_list_restart,VK_EXT_primitives_generated_query,VK_EXT_private_data,VK_EXT_provoking_vertex,VK_EXT_queue_family_foreign,VK_EXT_rasterization_order_attachment_access,VK_EXT_rgba10x6_formats,VK_EXT_robustness2,VK_EXT_sample_locations,VK_EXT_sampler_filter_minmax,VK_EXT_scalar_block_layout,VK_EXT_separate_stencil_usage,VK_EXT_shader_atomic_float,VK_EXT_shader_atomic_float2,VK_EXT_shader_demote_to_helper_invocation,VK_EXT_shader_float8,VK_EXT_shader_image_atomic_int64,VK_EXT_shader_module_identifier,VK_EXT_shader_object,VK_EXT_shader_replicated_composites,VK_EXT_shader_stencil_export,VK_EXT_shader_subgroup_ballot,VK_EXT_shader_subgroup_vote,VK_EXT_shader_tile_image,VK_EXT_shader_viewport_index_layer,VK_EXT_subgroup_size_control,VK_EXT_subpass_merge_feedback,VK_EXT_surface_maintenance1,VK_EXT_swapchain_colorspace,VK_EXT_swapchain_maintenance1,VK_EXT_texel_buffer_alignment,VK_EXT_texture_compression_astc_hdr,VK_EXT_tooling_info,VK_EXT_transform_feedback,VK_EXT_validation_cache,VK_EXT_validation_features,VK_EXT_validation_flags,VK_EXT_vertex_attribute_divisor,VK_EXT_vertex_attribute_robustness,VK_EXT_vertex_input_dynamic_state,VK_EXT_ycbcr_2plane_444_formats,VK_EXT_ycbcr_image_arrays,VK_EXT_zero_initialize_device_memory,VK_FUCHSIA_buffer_collection,VK_FUCHSIA_external_memory,VK_FUCHSIA_external_semaphore,VK_FUCHSIA_imagepipe_surface,VK_GGP_frame_token,VK_GGP_stream_descriptor_surface,VK_GOOGLE_decorate_string,VK_GOOGLE_display_timing,VK_GOOGLE_hlsl_functionality1,VK_GOOGLE_surfaceless_query,VK_GOOGLE_user_type,VK_HUAWEI_cluster_culling_shader,VK_HUAWEI_hdr_vivid,VK_HUAWEI_invocation_mask,VK_HUAWEI_subpass_shading,VK_IMG_filter_cubic,VK_IMG_format_pvrtc,VK_IMG_relaxed_line_rasterization,VK_INTEL_performance_query,VK_INTEL_shader_integer_functions2,VK_KHR_16bit_storage,VK_KHR_8bit_storage,VK_KHR_acceleration_structure,VK_KHR_android_surface,VK_KHR_bind_memory2,VK_KHR_buffer_device_address,VK_KHR_calibrated_timestamps,VK_KHR_compute_shader_derivatives,VK_KHR_cooperative_matrix,VK_KHR_copy_commands2,VK_KHR_copy_memory_indirect,VK_KHR_create_renderpass2,VK_KHR_dedicated_allocation,VK_KHR_deferred_host_operations,VK_KHR_depth_clamp_zero_one,VK_KHR_depth_stencil_resolve,VK_KHR_descriptor_update_template,VK_KHR_device_group,VK_KHR_device_group_creation,VK_KHR_display,VK_KHR_display_swapchain,VK_KHR_draw_indirect_count,VK_KHR_driver_properties,VK_KHR_dynamic_rendering,VK_KHR_dynamic_rendering_local_read,VK_KHR_external_fence,VK_KHR_external_fence_capabilities,VK_KHR_external_fence_fd,VK_KHR_external_fence_win32,VK_KHR_external_memory,VK_KHR_external_memory_capabilities,VK_KHR_external_memory_fd,VK_KHR_external_memory_win32,VK_KHR_external_semaphore,VK_KHR_external_semaphore_capabilities,VK_KHR_external_semaphore_fd,VK_KHR_external_semaphore_win32,VK_KHR_format_feature_flags2,VK_KHR_fragment_shader_barycentric,VK_KHR_fragment_shading_rate,VK_KHR_get_display_properties2,VK_KHR_get_memory_requirements2,VK_KHR_get_physical_device_properties2,VK_KHR_get_surface_capabilities2,VK_KHR_global_priority,VK_KHR_image_format_list,VK_KHR_imageless_framebuffer,VK_KHR_incremental_present,VK_KHR_index_type_uint8,VK_KHR_line_rasterization,VK_KHR_load_store_op_none,VK_KHR_maintenance1,VK_KHR_maintenance2,VK_KHR_maintenance3,VK_KHR_maintenance4,VK_KHR_maintenance5,VK_KHR_maintenance6,VK_KHR_maintenance7,VK_KHR_maintenance8,VK_KHR_maintenance9,VK_KHR_map_memory2,VK_KHR_multiview,VK_KHR_performance_query,VK_KHR_pipeline_binary,VK_KHR_pipeline_executable_properties,VK_KHR_pipeline_library,VK_KHR_portability_enumeration,VK_KHR_portability_subset,VK_KHR_present_id,VK_KHR_present_id2,VK_KHR_present_mode_fifo_latest_ready,VK_KHR_present_wait,VK_KHR_present_wait2,VK_KHR_push_descriptor,VK_KHR_ray_query,VK_KHR_ray_tracing_maintenance1,VK_KHR_ray_tracing_pipeline,VK_KHR_ray_tracing_position_fetch,VK_KHR_relaxed_block_layout,VK_KHR_robustness2,VK_KHR_sampler_mirror_clamp_to_edge,VK_KHR_sampler_ycbcr_conversion,VK_KHR_separate_depth_stencil_layouts,VK_KHR_shader_atomic_int64,VK_KHR_shader_bfloat16,VK_KHR_shader_clock,VK_KHR_shader_draw_parameters,VK_KHR_shader_expect_assume,VK_KHR_shader_float16_int8,VK_KHR_shader_float_controls,VK_KHR_shader_float_controls2,VK_KHR_shader_integer_dot_product,VK_KHR_shader_maximal_reconvergence,VK_KHR_shader_non_semantic_info,VK_KHR_shader_quad_control,VK_KHR_shader_relaxed_extended_instruction,VK_KHR_shader_subgroup_extended_types,VK_KHR_shader_subgroup_rotate,VK_KHR_shader_subgroup_uniform_control_flow,VK_KHR_shader_terminate_invocation,VK_KHR_shader_untyped_pointers,VK_KHR_shared_presentable_image,VK_KHR_spirv_1_4,VK_KHR_storage_buffer_storage_class,VK_KHR_surface,VK_KHR_surface_maintenance1,VK_KHR_surface_protected_capabilities,VK_KHR_swapchain,VK_KHR_swapchain_maintenance1,VK_KHR_swapchain_mutable_format,VK_KHR_synchronization2,VK_KHR_timeline_semaphore,VK_KHR_unified_image_layouts,VK_KHR_uniform_buffer_standard_layout,VK_KHR_variable_pointers,VK_KHR_vertex_attribute_divisor,VK_KHR_video_decode_av1,VK_KHR_video_decode_h264,VK_KHR_video_decode_h265,VK_KHR_video_decode_queue,VK_KHR_video_decode_vp9,VK_KHR_video_encode_av1,VK_KHR_video_encode_h264,VK_KHR_video_encode_h265,VK_KHR_video_encode_intra_refresh,VK_KHR_video_encode_quantization_map,VK_KHR_video_encode_queue,VK_KHR_video_maintenance1,VK_KHR_video_maintenance2,VK_KHR_video_queue,VK_KHR_vulkan_memory_model,VK_KHR_wayland_surface,VK_KHR_win32_keyed_mutex,VK_KHR_win32_surface,VK_KHR_workgroup_memory_explicit_layout,VK_KHR_xcb_surface,VK_KHR_xlib_surface,VK_KHR_zero_initialize_workgroup_memory,VK_LUNARG_direct_driver_loading,VK_MESA_image_alignment_control,VK_MSFT_layered_driver,VK_MVK_ios_surface,VK_MVK_macos_surface,VK_NN_vi_surface,VK_NVX_binary_import,VK_NVX_image_view_handle,VK_NVX_multiview_per_view_attributes,VK_NV_acquire_winrt_display,VK_NV_clip_space_w_scaling,VK_NV_cluster_acceleration_structure,VK_NV_command_buffer_inheritance,VK_NV_compute_shader_derivatives,VK_NV_cooperative_matrix,VK_NV_cooperative_matrix2,VK_NV_cooperative_vector,VK_NV_copy_memory_indirect,VK_NV_corner_sampled_image,VK_NV_coverage_reduction_mode,VK_NV_cuda_kernel_launch,VK_NV_dedicated_allocation,VK_NV_dedicated_allocation_image_aliasing,VK_NV_descriptor_pool_overallocation,VK_NV_device_diagnostic_checkpoints,VK_NV_device_diagnostics_config,VK_NV_device_generated_commands,VK_NV_device_generated_commands_compute,VK_NV_displacement_micromap,VK_NV_display_stereo,VK_NV_extended_sparse_address_space,VK_NV_external_compute_queue,VK_NV_external_memory,VK_NV_external_memory_capabilities,VK_NV_external_memory_rdma,VK_NV_external_memory_win32,VK_NV_fill_rectangle,VK_NV_fragment_coverage_to_color,VK_NV_fragment_shader_barycentric,VK_NV_fragment_shading_rate_enums,VK_NV_framebuffer_mixed_samples,VK_NV_geometry_shader_passthrough,VK_NV_glsl_shader,VK_NV_inherited_viewport_scissor,VK_NV_linear_color_attachment,VK_NV_low_latency,VK_NV_low_latency2,VK_NV_memory_decompression,VK_NV_mesh_shader,VK_NV_optical_flow,VK_NV_partitioned_acceleration_structure,VK_NV_per_stage_descriptor_set,VK_NV_present_barrier,VK_NV_present_metering,VK_NV_raw_access_chains,VK_NV_ray_tracing,VK_NV_ray_tracing_invocation_reorder,VK_NV_ray_tracing_linear_swept_spheres,VK_NV_ray_tracing_motion_blur,VK_NV_ray_tracing_validation,VK_NV_representative_fragment_test,VK_NV_sample_mask_override_coverage,VK_NV_scissor_exclusive,VK_NV_shader_atomic_float16_vector,VK_NV_shader_image_footprint,VK_NV_shader_sm_builtins,VK_NV_shader_subgroup_partitioned,VK_NV_shading_rate_image,VK_NV_viewport_array2,VK_NV_viewport_swizzle,VK_NV_win32_keyed_mutex,VK_OHOS_surface,VK_QCOM_filter_cubic_clamp,VK_QCOM_filter_cubic_weights,VK_QCOM_fragment_density_map_offset,VK_QCOM_image_processing,VK_QCOM_image_processing2,VK_QCOM_multiview_per_view_render_areas,VK_QCOM_multiview_per_view_viewports,VK_QCOM_render_pass_shader_resolve,VK_QCOM_render_pass_store_ops,VK_QCOM_render_pass_transform,VK_QCOM_rotated_copy_commands,VK_QCOM_tile_memory_heap,VK_QCOM_tile_properties,VK_QCOM_tile_shading,VK_QCOM_ycbcr_degamma,VK_QNX_external_memory_screen_buffer,VK_QNX_screen_surface,VK_SEC_amigo_profiling,VK_SEC_pipeline_cache_incremental_mode,VK_VALVE_descriptor_set_host_mapping,VK_VALVE_fragment_density_map_layered,VK_VALVE_mutable_descriptor_type,VK_VALVE_video_encode_rgb_conversion' c --alias --loader --mx --mx-global --use-pfn-ranges
 *
 * Online:
 *    http://glad.sh/#api=vulkan%3D1.4&generator=c&options=MERGE%2CALIAS%2CLOADER%2CMX%2CMX_GLOBAL%2CUSE_PFN_RANGES
 *
 */

#ifndef GLAD_VULKAN_H_
#define GLAD_VULKAN_H_


#ifdef VULKAN_H_
  #error  header already included (API: vulkan), remove previous include!
#endif
#define VULKAN_H_ 1

#ifdef VULKAN_CORE_H_
  #error  header already included (API: vulkan), remove previous include!
#endif
#define VULKAN_CORE_H_ 1


#define GLAD_VULKAN
#define GLAD_OPTION_VULKAN_ALIAS
#define GLAD_OPTION_VULKAN_LOADER
#define GLAD_OPTION_VULKAN_MX
#define GLAD_OPTION_VULKAN_MX_GLOBAL
#define GLAD_OPTION_VULKAN_USE_PFN_RANGES

#ifdef __cplusplus
extern "C" {
#endif

#ifndef GLAD_PLATFORM_H_
#define GLAD_PLATFORM_H_

#ifndef GLAD_PLATFORM_WIN32
  #if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__MINGW32__)
    #define GLAD_PLATFORM_WIN32 1
  #else
    #define GLAD_PLATFORM_WIN32 0
  #endif
#endif

#ifndef GLAD_PLATFORM_APPLE
  #ifdef __APPLE__
    #define GLAD_PLATFORM_APPLE 1
  #else
    #define GLAD_PLATFORM_APPLE 0
  #endif
#endif

#ifndef GLAD_PLATFORM_EMSCRIPTEN
  #ifdef __EMSCRIPTEN__
    #define GLAD_PLATFORM_EMSCRIPTEN 1
  #else
    #define GLAD_PLATFORM_EMSCRIPTEN 0
  #endif
#endif

#ifndef GLAD_PLATFORM_UWP
  #if defined(_MSC_VER) && !defined(GLAD_INTERNAL_HAVE_WINAPIFAMILY)
    #ifdef __has_include
      #if __has_include(<winapifamily.h>)
        #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
      #endif
    #elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
      #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
    #endif
  #endif

  #ifdef GLAD_INTERNAL_HAVE_WINAPIFAMILY
    #include <winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
      #define GLAD_PLATFORM_UWP 1
    #endif
  #endif

  #ifndef GLAD_PLATFORM_UWP
    #define GLAD_PLATFORM_UWP 0
  #endif
#endif

#ifdef __GNUC__
  #define GLAD_GNUC_EXTENSION __extension__
#else
  #define GLAD_GNUC_EXTENSION
#endif

#define GLAD_UNUSED(x) (void)(x)

#ifndef GLAD_API_CALL
  #if defined(GLAD_API_CALL_EXPORT)
    #if GLAD_PLATFORM_WIN32 || defined(__CYGWIN__)
      #if defined(GLAD_API_CALL_EXPORT_BUILD)
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllexport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllexport) extern
        #endif
      #else
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllimport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllimport) extern
        #endif
      #endif
    #elif defined(__GNUC__) && defined(GLAD_API_CALL_EXPORT_BUILD)
      #define GLAD_API_CALL __attribute__ ((visibility ("default"))) extern
    #else
      #define GLAD_API_CALL extern
    #endif
  #else
    #define GLAD_API_CALL extern
  #endif
#endif

#ifdef APIENTRY
  #define GLAD_API_PTR APIENTRY
#elif GLAD_PLATFORM_WIN32
  #define GLAD_API_PTR __stdcall
#else
  #define GLAD_API_PTR
#endif

#ifndef GLAPI
#define GLAPI GLAD_API_CALL
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY GLAD_API_PTR
#endif

#define GLAD_MAKE_VERSION(major, minor) (major * 10000 + minor)
#define GLAD_VERSION_MAJOR(version) (version / 10000)
#define GLAD_VERSION_MINOR(version) (version % 10000)

#define GLAD_GENERATOR_VERSION "2.0.8"

typedef void (*GLADapiproc)(void);

typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(void *userptr, const char *name);

typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc, int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...);

#endif /* GLAD_PLATFORM_H_ */

#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_AMDX_DENSE_GEOMETRY_FORMAT_EXTENSION_NAME "VK_AMDX_dense_geometry_format"
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_AMDX_DENSE_GEOMETRY_FORMAT_SPEC_VERSION 1
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_AMDX_SHADER_ENQUEUE_EXTENSION_NAME "VK_AMDX_shader_enqueue"
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_AMDX_SHADER_ENQUEUE_SPEC_VERSION 2
#endif
#define VK_AMD_ANTI_LAG_EXTENSION_NAME "VK_AMD_anti_lag"
#define VK_AMD_ANTI_LAG_SPEC_VERSION 1
#define VK_AMD_BUFFER_MARKER_EXTENSION_NAME "VK_AMD_buffer_marker"
#define VK_AMD_BUFFER_MARKER_SPEC_VERSION 1
#define VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME "VK_AMD_device_coherent_memory"
#define VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION 1
#define VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME "VK_AMD_display_native_hdr"
#define VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION 1
#define VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME "VK_AMD_draw_indirect_count"
#define VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION 2
#define VK_AMD_GCN_SHADER_EXTENSION_NAME "VK_AMD_gcn_shader"
#define VK_AMD_GCN_SHADER_SPEC_VERSION 1
#define VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME "VK_AMD_gpu_shader_half_float"
#define VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION 2
#define VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME "VK_AMD_gpu_shader_int16"
#define VK_AMD_GPU_SHADER_INT16_SPEC_VERSION 2
#define VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME "VK_AMD_memory_overallocation_behavior"
#define VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION 1
#define VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME "VK_AMD_mixed_attachment_samples"
#define VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION 1
#define VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME "VK_AMD_negative_viewport_height"
#define VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION 1
#define VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME "VK_AMD_pipeline_compiler_control"
#define VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION 1
#define VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME "VK_AMD_rasterization_order"
#define VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION 1
#define VK_AMD_SHADER_BALLOT_EXTENSION_NAME "VK_AMD_shader_ballot"
#define VK_AMD_SHADER_BALLOT_SPEC_VERSION 1
#define VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME "VK_AMD_shader_core_properties2"
#define VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION 1
#define VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME "VK_AMD_shader_core_properties"
#define VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION 2
#define VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME "VK_AMD_shader_early_and_late_fragment_tests"
#define VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION 1
#define VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME "VK_AMD_shader_explicit_vertex_parameter"
#define VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION 1
#define VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME "VK_AMD_shader_fragment_mask"
#define VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION 1
#define VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME "VK_AMD_shader_image_load_store_lod"
#define VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION 1
#define VK_AMD_SHADER_INFO_EXTENSION_NAME "VK_AMD_shader_info"
#define VK_AMD_SHADER_INFO_SPEC_VERSION 1
#define VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME "VK_AMD_shader_trinary_minmax"
#define VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION 1
#define VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME "VK_AMD_texture_gather_bias_lod"
#define VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION 1
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
#define VK_ANDROID_EXTERNAL_FORMAT_RESOLVE_EXTENSION_NAME "VK_ANDROID_external_format_resolve"
#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
#define VK_ANDROID_EXTERNAL_FORMAT_RESOLVE_SPEC_VERSION 1
#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
#define VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME "VK_ANDROID_external_memory_android_hardware_buffer"
#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
#define VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION 5
#endif
#define VK_ARM_DATA_GRAPH_EXTENSION_NAME "VK_ARM_data_graph"
#define VK_ARM_DATA_GRAPH_SPEC_VERSION 1
#define VK_ARM_FORMAT_PACK_EXTENSION_NAME "VK_ARM_format_pack"
#define VK_ARM_FORMAT_PACK_SPEC_VERSION 1
#define VK_ARM_PIPELINE_OPACITY_MICROMAP_EXTENSION_NAME "VK_ARM_pipeline_opacity_micromap"
#define VK_ARM_PIPELINE_OPACITY_MICROMAP_SPEC_VERSION 1
#define VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME "VK_ARM_rasterization_order_attachment_access"
#define VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION 1
#define VK_ARM_RENDER_PASS_STRIPED_EXTENSION_NAME "VK_ARM_render_pass_striped"
#define VK_ARM_RENDER_PASS_STRIPED_SPEC_VERSION 1
#define VK_ARM_SCHEDULING_CONTROLS_EXTENSION_NAME "VK_ARM_scheduling_controls"
#define VK_ARM_SCHEDULING_CONTROLS_SPEC_VERSION 1
#define VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME "VK_ARM_shader_core_builtins"
#define VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION 2
#define VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME "VK_ARM_shader_core_properties"
#define VK_ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION 1
#define VK_ARM_TENSORS_EXTENSION_NAME "VK_ARM_tensors"
#define VK_ARM_TENSORS_SPEC_VERSION 1
#define VK_ATTACHMENT_UNUSED (~0U)
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_COMPRESSED_TRIANGLE_FORMAT_DGF1_BYTE_ALIGNMENT_AMDX 128
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_COMPRESSED_TRIANGLE_FORMAT_DGF1_BYTE_STRIDE_AMDX 128
#endif
#define VK_EXT_4444_FORMATS_EXTENSION_NAME "VK_EXT_4444_formats"
#define VK_EXT_4444_FORMATS_SPEC_VERSION 1
#define VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME "VK_EXT_acquire_drm_display"
#define VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION 1
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
#define VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME "VK_EXT_acquire_xlib_display"
#endif
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
#define VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION 1
#endif
#define VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME "VK_EXT_astc_decode_mode"
#define VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION 1
#define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_EXTENSION_NAME "VK_EXT_attachment_feedback_loop_dynamic_state"
#define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_SPEC_VERSION 1
#define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME "VK_EXT_attachment_feedback_loop_layout"
#define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION 2
#define VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME "VK_EXT_blend_operation_advanced"
#define VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION 2
#define VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME "VK_EXT_border_color_swizzle"
#define VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION 1
#define VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME "VK_EXT_buffer_device_address"
#define VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION 2
#define VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME "VK_EXT_calibrated_timestamps"
#define VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION 2
#define VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME "VK_EXT_color_write_enable"
#define VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION 1
#define VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME "VK_EXT_conditional_rendering"
#define VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION 2
#define VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME "VK_EXT_conservative_rasterization"
#define VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION 1
#define VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME "VK_EXT_custom_border_color"
#define VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION 12
#define VK_EXT_DEBUG_MARKER_EXTENSION_NAME "VK_EXT_debug_marker"
#define VK_EXT_DEBUG_MARKER_SPEC_VERSION 4
#define VK_EXT_DEBUG_REPORT_EXTENSION_NAME "VK_EXT_debug_report"
#define VK_EXT_DEBUG_REPORT_SPEC_VERSION 10
#define VK_EXT_DEBUG_UTILS_EXTENSION_NAME "VK_EXT_debug_utils"
#define VK_EXT_DEBUG_UTILS_SPEC_VERSION 2
#define VK_EXT_DEPTH_BIAS_CONTROL_EXTENSION_NAME "VK_EXT_depth_bias_control"
#define VK_EXT_DEPTH_BIAS_CONTROL_SPEC_VERSION 1
#define VK_EXT_DEPTH_CLAMP_CONTROL_EXTENSION_NAME "VK_EXT_depth_clamp_control"
#define VK_EXT_DEPTH_CLAMP_CONTROL_SPEC_VERSION 1
#define VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME "VK_EXT_depth_clamp_zero_one"
#define VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION 1
#define VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME "VK_EXT_depth_clip_control"
#define VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION 1
#define VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME "VK_EXT_depth_clip_enable"
#define VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION 1
#define VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME "VK_EXT_depth_range_unrestricted"
#define VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION 1
#define VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME "VK_EXT_descriptor_buffer"
#define VK_EXT_DESCRIPTOR_BUFFER_SPEC_VERSION 1
#define VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME "VK_EXT_descriptor_indexing"
#define VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION 2
#define VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME "VK_EXT_device_address_binding_report"
#define VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION 1
#define VK_EXT_DEVICE_FAULT_EXTENSION_NAME "VK_EXT_device_fault"
#define VK_EXT_DEVICE_FAULT_SPEC_VERSION 2
#define VK_EXT_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME "VK_EXT_device_generated_commands"
#define VK_EXT_DEVICE_GENERATED_COMMANDS_SPEC_VERSION 1
#define VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME "VK_EXT_device_memory_report"
#define VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION 2
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
#define VK_EXT_DIRECTFB_SURFACE_EXTENSION_NAME "VK_EXT_directfb_surface"
#endif
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
#define VK_EXT_DIRECTFB_SURFACE_SPEC_VERSION 1
#endif
#define VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME "VK_EXT_direct_mode_display"
#define VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION 1
#define VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME "VK_EXT_discard_rectangles"
#define VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION 2
#define VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME "VK_EXT_display_control"
#define VK_EXT_DISPLAY_CONTROL_SPEC_VERSION 1
#define VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME "VK_EXT_display_surface_counter"
#define VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION 1
#define VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_EXTENSION_NAME "VK_EXT_dynamic_rendering_unused_attachments"
#define VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_SPEC_VERSION 1
#define VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME "VK_EXT_extended_dynamic_state2"
#define VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION 1
#define VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME "VK_EXT_extended_dynamic_state3"
#define VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION 2
#define VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME "VK_EXT_extended_dynamic_state"
#define VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION 1
#define VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXTENSION_NAME "VK_EXT_external_memory_acquire_unmodified"
#define VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_SPEC_VERSION 1
#define VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME "VK_EXT_external_memory_dma_buf"
#define VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION 1
#define VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME "VK_EXT_external_memory_host"
#define VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION 1
#if defined(VK_USE_PLATFORM_METAL_EXT)
#define VK_EXT_EXTERNAL_MEMORY_METAL_EXTENSION_NAME "VK_EXT_external_memory_metal"
#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
#define VK_EXT_EXTERNAL_MEMORY_METAL_SPEC_VERSION 1
#endif
#define VK_EXT_FILTER_CUBIC_EXTENSION_NAME "VK_EXT_filter_cubic"
#define VK_EXT_FILTER_CUBIC_SPEC_VERSION 3
#define VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME "VK_EXT_fragment_density_map2"
#define VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION 1
#define VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME "VK_EXT_fragment_density_map"
#define VK_EXT_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME "VK_EXT_fragment_density_map_offset"
#define VK_EXT_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION 1
#define VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION 2
#define VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME "VK_EXT_fragment_shader_interlock"
#define VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION 1
#define VK_EXT_FRAME_BOUNDARY_EXTENSION_NAME "VK_EXT_frame_boundary"
#define VK_EXT_FRAME_BOUNDARY_SPEC_VERSION 1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME "VK_EXT_full_screen_exclusive"
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION 4
#endif
#define VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME "VK_EXT_global_priority"
#define VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME "VK_EXT_global_priority_query"
#define VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION 1
#define VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION 2
#define VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME "VK_EXT_graphics_pipeline_library"
#define VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION 1
#define VK_EXT_HDR_METADATA_EXTENSION_NAME "VK_EXT_hdr_metadata"
#define VK_EXT_HDR_METADATA_SPEC_VERSION 3
#define VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME "VK_EXT_headless_surface"
#define VK_EXT_HEADLESS_SURFACE_SPEC_VERSION 1
#define VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME "VK_EXT_host_image_copy"
#define VK_EXT_HOST_IMAGE_COPY_SPEC_VERSION 1
#define VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME "VK_EXT_host_query_reset"
#define VK_EXT_HOST_QUERY_RESET_SPEC_VERSION 1
#define VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME "VK_EXT_image_2d_view_of_3d"
#define VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION 1
#define VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME "VK_EXT_image_compression_control"
#define VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION 1
#define VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME "VK_EXT_image_compression_control_swapchain"
#define VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION 1
#define VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME "VK_EXT_image_drm_format_modifier"
#define VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION 2
#define VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME "VK_EXT_image_robustness"
#define VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION 1
#define VK_EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME "VK_EXT_image_sliced_view_of_3d"
#define VK_EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION 1
#define VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME "VK_EXT_image_view_min_lod"
#define VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION 1
#define VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME "VK_EXT_index_type_uint8"
#define VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION 1
#define VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME "VK_EXT_inline_uniform_block"
#define VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION 1
#define VK_EXT_LAYER_SETTINGS_EXTENSION_NAME "VK_EXT_layer_settings"
#define VK_EXT_LAYER_SETTINGS_SPEC_VERSION 2
#define VK_EXT_LEGACY_DITHERING_EXTENSION_NAME "VK_EXT_legacy_dithering"
#define VK_EXT_LEGACY_DITHERING_SPEC_VERSION 2
#define VK_EXT_LEGACY_VERTEX_ATTRIBUTES_EXTENSION_NAME "VK_EXT_legacy_vertex_attributes"
#define VK_EXT_LEGACY_VERTEX_ATTRIBUTES_SPEC_VERSION 1
#define VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME "VK_EXT_line_rasterization"
#define VK_EXT_LINE_RASTERIZATION_SPEC_VERSION 1
#define VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME "VK_EXT_load_store_op_none"
#define VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION 1
#define VK_EXT_MAP_MEMORY_PLACED_EXTENSION_NAME "VK_EXT_map_memory_placed"
#define VK_EXT_MAP_MEMORY_PLACED_SPEC_VERSION 1
#define VK_EXT_MEMORY_BUDGET_EXTENSION_NAME "VK_EXT_memory_budget"
#define VK_EXT_MEMORY_BUDGET_SPEC_VERSION 1
#define VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME "VK_EXT_memory_priority"
#define VK_EXT_MEMORY_PRIORITY_SPEC_VERSION 1
#define VK_EXT_MESH_SHADER_EXTENSION_NAME "VK_EXT_mesh_shader"
#define VK_EXT_MESH_SHADER_SPEC_VERSION 1
#if defined(VK_USE_PLATFORM_METAL_EXT)
#define VK_EXT_METAL_OBJECTS_EXTENSION_NAME "VK_EXT_metal_objects"
#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
#define VK_EXT_METAL_OBJECTS_SPEC_VERSION 2
#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
#define VK_EXT_METAL_SURFACE_EXTENSION_NAME "VK_EXT_metal_surface"
#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
#define VK_EXT_METAL_SURFACE_SPEC_VERSION 1
#endif
#define VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME "VK_EXT_multisampled_render_to_single_sampled"
#define VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION 1
#define VK_EXT_MULTI_DRAW_EXTENSION_NAME "VK_EXT_multi_draw"
#define VK_EXT_MULTI_DRAW_SPEC_VERSION 1
#define VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME "VK_EXT_mutable_descriptor_type"
#define VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION 1
#define VK_EXT_NESTED_COMMAND_BUFFER_EXTENSION_NAME "VK_EXT_nested_command_buffer"
#define VK_EXT_NESTED_COMMAND_BUFFER_SPEC_VERSION 1
#define VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME "VK_EXT_non_seamless_cube_map"
#define VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION 1
#define VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME "VK_EXT_opacity_micromap"
#define VK_EXT_OPACITY_MICROMAP_SPEC_VERSION 2
#define VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME "VK_EXT_pageable_device_local_memory"
#define VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION 1
#define VK_EXT_PCI_BUS_INFO_EXTENSION_NAME "VK_EXT_pci_bus_info"
#define VK_EXT_PCI_BUS_INFO_SPEC_VERSION 2
#define VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME "VK_EXT_physical_device_drm"
#define VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION 1
#define VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME "VK_EXT_pipeline_creation_cache_control"
#define VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION 3
#define VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME "VK_EXT_pipeline_creation_feedback"
#define VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION 1
#define VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME "VK_EXT_pipeline_library_group_handles"
#define VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION 1
#define VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME "VK_EXT_pipeline_properties"
#define VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION 1
#define VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME "VK_EXT_pipeline_protected_access"
#define VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION 1
#define VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME "VK_EXT_pipeline_robustness"
#define VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION 1
#define VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME "VK_EXT_post_depth_coverage"
#define VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION 1
#define VK_EXT_PRESENT_MODE_FIFO_LATEST_READY_EXTENSION_NAME "VK_EXT_present_mode_fifo_latest_ready"
#define VK_EXT_PRESENT_MODE_FIFO_LATEST_READY_SPEC_VERSION 1
#define VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME "VK_EXT_primitives_generated_query"
#define VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION 1
#define VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME "VK_EXT_primitive_topology_list_restart"
#define VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION 1
#define VK_EXT_PRIVATE_DATA_EXTENSION_NAME "VK_EXT_private_data"
#define VK_EXT_PRIVATE_DATA_SPEC_VERSION 1
#define VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME "VK_EXT_provoking_vertex"
#define VK_EXT_PROVOKING_VERTEX_SPEC_VERSION 1
#define VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME "VK_EXT_queue_family_foreign"
#define VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION 1
#define VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME "VK_EXT_rasterization_order_attachment_access"
#define VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION 1
#define VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME "VK_EXT_rgba10x6_formats"
#define VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION 1
#define VK_EXT_ROBUSTNESS_2_EXTENSION_NAME "VK_EXT_robustness2"
#define VK_EXT_ROBUSTNESS_2_SPEC_VERSION 1
#define VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME "VK_EXT_sampler_filter_minmax"
#define VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION 2
#define VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME "VK_EXT_sample_locations"
#define VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION 1
#define VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME "VK_EXT_scalar_block_layout"
#define VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION 1
#define VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME "VK_EXT_separate_stencil_usage"
#define VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION 1
#define VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME "VK_EXT_shader_atomic_float2"
#define VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION 1
#define VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME "VK_EXT_shader_atomic_float"
#define VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION 1
#define VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME "VK_EXT_shader_demote_to_helper_invocation"
#define VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION 1
#define VK_EXT_SHADER_FLOAT8_EXTENSION_NAME "VK_EXT_shader_float8"
#define VK_EXT_SHADER_FLOAT8_SPEC_VERSION 1
#define VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME "VK_EXT_shader_image_atomic_int64"
#define VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION 1
#define VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME "VK_EXT_shader_module_identifier"
#define VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION 1
#define VK_EXT_SHADER_OBJECT_EXTENSION_NAME "VK_EXT_shader_object"
#define VK_EXT_SHADER_OBJECT_SPEC_VERSION 1
#define VK_EXT_SHADER_REPLICATED_COMPOSITES_EXTENSION_NAME "VK_EXT_shader_replicated_composites"
#define VK_EXT_SHADER_REPLICATED_COMPOSITES_SPEC_VERSION 1
#define VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME "VK_EXT_shader_stencil_export"
#define VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION 1
#define VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME "VK_EXT_shader_subgroup_ballot"
#define VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION 1
#define VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME "VK_EXT_shader_subgroup_vote"
#define VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION 1
#define VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME "VK_EXT_shader_tile_image"
#define VK_EXT_SHADER_TILE_IMAGE_SPEC_VERSION 1
#define VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME "VK_EXT_shader_viewport_index_layer"
#define VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION 1
#define VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME "VK_EXT_subgroup_size_control"
#define VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION 2
#define VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME "VK_EXT_subpass_merge_feedback"
#define VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION 2
#define VK_EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME "VK_EXT_surface_maintenance1"
#define VK_EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION 1
#define VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME "VK_EXT_swapchain_colorspace"
#define VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION 5
#define VK_EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME "VK_EXT_swapchain_maintenance1"
#define VK_EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION 1
#define VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME "VK_EXT_texel_buffer_alignment"
#define VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION 1
#define VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME "VK_EXT_texture_compression_astc_hdr"
#define VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION 1
#define VK_EXT_TOOLING_INFO_EXTENSION_NAME "VK_EXT_tooling_info"
#define VK_EXT_TOOLING_INFO_SPEC_VERSION 1
#define VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME "VK_EXT_transform_feedback"
#define VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION 1
#define VK_EXT_VALIDATION_CACHE_EXTENSION_NAME "VK_EXT_validation_cache"
#define VK_EXT_VALIDATION_CACHE_SPEC_VERSION 1
#define VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME "VK_EXT_validation_features"
#define VK_EXT_VALIDATION_FEATURES_SPEC_VERSION 6
#define VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME "VK_EXT_validation_flags"
#define VK_EXT_VALIDATION_FLAGS_SPEC_VERSION 3
#define VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME "VK_EXT_vertex_attribute_divisor"
#define VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION 3
#define VK_EXT_VERTEX_ATTRIBUTE_ROBUSTNESS_EXTENSION_NAME "VK_EXT_vertex_attribute_robustness"
#define VK_EXT_VERTEX_ATTRIBUTE_ROBUSTNESS_SPEC_VERSION 1
#define VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME "VK_EXT_vertex_input_dynamic_state"
#define VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION 2
#define VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME "VK_EXT_ycbcr_2plane_444_formats"
#define VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION 1
#define VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME "VK_EXT_ycbcr_image_arrays"
#define VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION 1
#define VK_EXT_ZERO_INITIALIZE_DEVICE_MEMORY_EXTENSION_NAME "VK_EXT_zero_initialize_device_memory"
#define VK_EXT_ZERO_INITIALIZE_DEVICE_MEMORY_SPEC_VERSION 1
#define VK_FALSE 0
#if defined(VK_USE_PLATFORM_FUCHSIA)
#define VK_FUCHSIA_BUFFER_COLLECTION_EXTENSION_NAME "VK_FUCHSIA_buffer_collection"
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
#define VK_FUCHSIA_BUFFER_COLLECTION_SPEC_VERSION 2
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
#define VK_FUCHSIA_EXTERNAL_MEMORY_EXTENSION_NAME "VK_FUCHSIA_external_memory"
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
#define VK_FUCHSIA_EXTERNAL_MEMORY_SPEC_VERSION 1
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
#define VK_FUCHSIA_EXTERNAL_SEMAPHORE_EXTENSION_NAME "VK_FUCHSIA_external_semaphore"
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
#define VK_FUCHSIA_EXTERNAL_SEMAPHORE_SPEC_VERSION 1
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
#define VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME "VK_FUCHSIA_imagepipe_surface"
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
#define VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION 1
#endif
#if defined(VK_USE_PLATFORM_GGP)
#define VK_GGP_FRAME_TOKEN_EXTENSION_NAME "VK_GGP_frame_token"
#endif
#if defined(VK_USE_PLATFORM_GGP)
#define VK_GGP_FRAME_TOKEN_SPEC_VERSION 1
#endif
#if defined(VK_USE_PLATFORM_GGP)
#define VK_GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME "VK_GGP_stream_descriptor_surface"
#endif
#if defined(VK_USE_PLATFORM_GGP)
#define VK_GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION 1
#endif
#define VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME "VK_GOOGLE_decorate_string"
#define VK_GOOGLE_DECORATE_STRING_SPEC_VERSION 1
#define VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME "VK_GOOGLE_display_timing"
#define VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION 1
#define VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME "VK_GOOGLE_hlsl_functionality1"
#define VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION 1
#define VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME "VK_GOOGLE_hlsl_functionality1"
#define VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION 1
#define VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME "VK_GOOGLE_surfaceless_query"
#define VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION 2
#define VK_GOOGLE_USER_TYPE_EXTENSION_NAME "VK_GOOGLE_user_type"
#define VK_GOOGLE_USER_TYPE_SPEC_VERSION 1
#define VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME "VK_HUAWEI_cluster_culling_shader"
#define VK_HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION 3
#define VK_HUAWEI_HDR_VIVID_EXTENSION_NAME "VK_HUAWEI_hdr_vivid"
#define VK_HUAWEI_HDR_VIVID_SPEC_VERSION 1
#define VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME "VK_HUAWEI_invocation_mask"
#define VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION 1
#define VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME "VK_HUAWEI_subpass_shading"
#define VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION 3
#define VK_IMG_FILTER_CUBIC_EXTENSION_NAME "VK_IMG_filter_cubic"
#define VK_IMG_FILTER_CUBIC_SPEC_VERSION 1
#define VK_IMG_FORMAT_PVRTC_EXTENSION_NAME "VK_IMG_format_pvrtc"
#define VK_IMG_FORMAT_PVRTC_SPEC_VERSION 1
#define VK_IMG_RELAXED_LINE_RASTERIZATION_EXTENSION_NAME "VK_IMG_relaxed_line_rasterization"
#define VK_IMG_RELAXED_LINE_RASTERIZATION_SPEC_VERSION 1
#define VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME "VK_INTEL_performance_query"
#define VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION 2
#define VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME "VK_INTEL_shader_integer_functions2"
#define VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION 1
#define VK_KHR_16BIT_STORAGE_EXTENSION_NAME "VK_KHR_16bit_storage"
#define VK_KHR_16BIT_STORAGE_SPEC_VERSION 1
#define VK_KHR_8BIT_STORAGE_EXTENSION_NAME "VK_KHR_8bit_storage"
#define VK_KHR_8BIT_STORAGE_SPEC_VERSION 1
#define VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME "VK_KHR_acceleration_structure"
#define VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION 13
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
#define VK_KHR_ANDROID_SURFACE_EXTENSION_NAME "VK_KHR_android_surface"
#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
#define VK_KHR_ANDROID_SURFACE_SPEC_VERSION 6
#endif
#define VK_KHR_BIND_MEMORY_2_EXTENSION_NAME "VK_KHR_bind_memory2"
#define VK_KHR_BIND_MEMORY_2_SPEC_VERSION 1
#define VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME "VK_KHR_buffer_device_address"
#define VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION 1
#define VK_KHR_CALIBRATED_TIMESTAMPS_EXTENSION_NAME "VK_KHR_calibrated_timestamps"
#define VK_KHR_CALIBRATED_TIMESTAMPS_SPEC_VERSION 1
#define VK_KHR_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME "VK_KHR_compute_shader_derivatives"
#define VK_KHR_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION 1
#define VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME "VK_KHR_cooperative_matrix"
#define VK_KHR_COOPERATIVE_MATRIX_SPEC_VERSION 2
#define VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME "VK_KHR_copy_commands2"
#define VK_KHR_COPY_COMMANDS_2_SPEC_VERSION 1
#define VK_KHR_COPY_MEMORY_INDIRECT_EXTENSION_NAME "VK_KHR_copy_memory_indirect"
#define VK_KHR_COPY_MEMORY_INDIRECT_SPEC_VERSION 1
#define VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME "VK_KHR_create_renderpass2"
#define VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION 1
#define VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME "VK_KHR_dedicated_allocation"
#define VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION 3
#define VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME "VK_KHR_deferred_host_operations"
#define VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION 4
#define VK_KHR_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME "VK_KHR_depth_clamp_zero_one"
#define VK_KHR_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION 1
#define VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME "VK_KHR_depth_stencil_resolve"
#define VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION 1
#define VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME "VK_KHR_descriptor_update_template"
#define VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION 1
#define VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME "VK_KHR_device_group_creation"
#define VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION 1
#define VK_KHR_DEVICE_GROUP_EXTENSION_NAME "VK_KHR_device_group"
#define VK_KHR_DEVICE_GROUP_SPEC_VERSION 4
#define VK_KHR_DISPLAY_EXTENSION_NAME "VK_KHR_display"
#define VK_KHR_DISPLAY_SPEC_VERSION 23
#define VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME "VK_KHR_display_swapchain"
#define VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION 10
#define VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME "VK_KHR_draw_indirect_count"
#define VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION 1
#define VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME "VK_KHR_driver_properties"
#define VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION 1
#define VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME "VK_KHR_dynamic_rendering"
#define VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_EXTENSION_NAME "VK_KHR_dynamic_rendering_local_read"
#define VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_SPEC_VERSION 1
#define VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME "VK_KHR_external_fence_capabilities"
#define VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME "VK_KHR_external_fence"
#define VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME "VK_KHR_external_fence_fd"
#define VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_FENCE_SPEC_VERSION 1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME "VK_KHR_external_fence_win32"
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION 1
#endif
#define VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME "VK_KHR_external_memory_capabilities"
#define VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME "VK_KHR_external_memory"
#define VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME "VK_KHR_external_memory_fd"
#define VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION 1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME "VK_KHR_external_memory_win32"
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION 1
#endif
#define VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME "VK_KHR_external_semaphore_capabilities"
#define VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME "VK_KHR_external_semaphore"
#define VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME "VK_KHR_external_semaphore_fd"
#define VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION 1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME "VK_KHR_external_semaphore_win32"
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION 1
#endif
#define VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME "VK_KHR_format_feature_flags2"
#define VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION 2
#define VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME "VK_KHR_fragment_shader_barycentric"
#define VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION 1
#define VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME "VK_KHR_fragment_shading_rate"
#define VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION 2
#define VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME "VK_KHR_get_display_properties2"
#define VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION 1
#define VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME "VK_KHR_get_memory_requirements2"
#define VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION 1
#define VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME "VK_KHR_get_physical_device_properties2"
#define VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION 2
#define VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME "VK_KHR_get_surface_capabilities2"
#define VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION 1
#define VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME "VK_KHR_global_priority"
#define VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION 1
#define VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME "VK_KHR_imageless_framebuffer"
#define VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION 1
#define VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME "VK_KHR_image_format_list"
#define VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION 1
#define VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME "VK_KHR_incremental_present"
#define VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION 2
#define VK_KHR_INDEX_TYPE_UINT8_EXTENSION_NAME "VK_KHR_index_type_uint8"
#define VK_KHR_INDEX_TYPE_UINT8_SPEC_VERSION 1
#define VK_KHR_LINE_RASTERIZATION_EXTENSION_NAME "VK_KHR_line_rasterization"
#define VK_KHR_LINE_RASTERIZATION_SPEC_VERSION 1
#define VK_KHR_LOAD_STORE_OP_NONE_EXTENSION_NAME "VK_KHR_load_store_op_none"
#define VK_KHR_LOAD_STORE_OP_NONE_SPEC_VERSION 1
#define VK_KHR_MAINTENANCE1_EXTENSION_NAME "VK_KHR_maintenance1"
#define VK_KHR_MAINTENANCE1_SPEC_VERSION 2
#define VK_KHR_MAINTENANCE2_EXTENSION_NAME "VK_KHR_maintenance2"
#define VK_KHR_MAINTENANCE2_SPEC_VERSION 1
#define VK_KHR_MAINTENANCE3_EXTENSION_NAME "VK_KHR_maintenance3"
#define VK_KHR_MAINTENANCE3_SPEC_VERSION 1
#define VK_KHR_MAINTENANCE_1_EXTENSION_NAME "VK_KHR_maintenance1"
#define VK_KHR_MAINTENANCE_1_SPEC_VERSION 2
#define VK_KHR_MAINTENANCE_2_EXTENSION_NAME "VK_KHR_maintenance2"
#define VK_KHR_MAINTENANCE_2_SPEC_VERSION 1
#define VK_KHR_MAINTENANCE_3_EXTENSION_NAME "VK_KHR_maintenance3"
#define VK_KHR_MAINTENANCE_3_SPEC_VERSION 1
#define VK_KHR_MAINTENANCE_4_EXTENSION_NAME "VK_KHR_maintenance4"
#define VK_KHR_MAINTENANCE_4_SPEC_VERSION 2
#define VK_KHR_MAINTENANCE_5_EXTENSION_NAME "VK_KHR_maintenance5"
#define VK_KHR_MAINTENANCE_5_SPEC_VERSION 1
#define VK_KHR_MAINTENANCE_6_EXTENSION_NAME "VK_KHR_maintenance6"
#define VK_KHR_MAINTENANCE_6_SPEC_VERSION 1
#define VK_KHR_MAINTENANCE_7_EXTENSION_NAME "VK_KHR_maintenance7"
#define VK_KHR_MAINTENANCE_7_SPEC_VERSION 1
#define VK_KHR_MAINTENANCE_8_EXTENSION_NAME "VK_KHR_maintenance8"
#define VK_KHR_MAINTENANCE_8_SPEC_VERSION 1
#define VK_KHR_MAINTENANCE_9_EXTENSION_NAME "VK_KHR_maintenance9"
#define VK_KHR_MAINTENANCE_9_SPEC_VERSION 1
#define VK_KHR_MAP_MEMORY_2_EXTENSION_NAME "VK_KHR_map_memory2"
#define VK_KHR_MAP_MEMORY_2_SPEC_VERSION 1
#define VK_KHR_MULTIVIEW_EXTENSION_NAME "VK_KHR_multiview"
#define VK_KHR_MULTIVIEW_SPEC_VERSION 1
#define VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME "VK_KHR_performance_query"
#define VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION 1
#define VK_KHR_PIPELINE_BINARY_EXTENSION_NAME "VK_KHR_pipeline_binary"
#define VK_KHR_PIPELINE_BINARY_SPEC_VERSION 1
#define VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME "VK_KHR_pipeline_executable_properties"
#define VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION 1
#define VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME "VK_KHR_pipeline_library"
#define VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION 1
#define VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME "VK_KHR_portability_enumeration"
#define VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION 1
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_KHR_PORTABILITY_SUBSET_EXTENSION_NAME "VK_KHR_portability_subset"
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_KHR_PORTABILITY_SUBSET_SPEC_VERSION 1
#endif
#define VK_KHR_PRESENT_ID_2_EXTENSION_NAME "VK_KHR_present_id2"
#define VK_KHR_PRESENT_ID_2_SPEC_VERSION 1
#define VK_KHR_PRESENT_ID_EXTENSION_NAME "VK_KHR_present_id"
#define VK_KHR_PRESENT_ID_SPEC_VERSION 1
#define VK_KHR_PRESENT_MODE_FIFO_LATEST_READY_EXTENSION_NAME "VK_KHR_present_mode_fifo_latest_ready"
#define VK_KHR_PRESENT_MODE_FIFO_LATEST_READY_SPEC_VERSION 1
#define VK_KHR_PRESENT_WAIT_2_EXTENSION_NAME "VK_KHR_present_wait2"
#define VK_KHR_PRESENT_WAIT_2_SPEC_VERSION 1
#define VK_KHR_PRESENT_WAIT_EXTENSION_NAME "VK_KHR_present_wait"
#define VK_KHR_PRESENT_WAIT_SPEC_VERSION 1
#define VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME "VK_KHR_push_descriptor"
#define VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION 2
#define VK_KHR_RAY_QUERY_EXTENSION_NAME "VK_KHR_ray_query"
#define VK_KHR_RAY_QUERY_SPEC_VERSION 1
#define VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME "VK_KHR_ray_tracing_maintenance1"
#define VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION 1
#define VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME "VK_KHR_ray_tracing_pipeline"
#define VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION 1
#define VK_KHR_RAY_TRACING_POSITION_FETCH_EXTENSION_NAME "VK_KHR_ray_tracing_position_fetch"
#define VK_KHR_RAY_TRACING_POSITION_FETCH_SPEC_VERSION 1
#define VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME "VK_KHR_relaxed_block_layout"
#define VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION 1
#define VK_KHR_ROBUSTNESS_2_EXTENSION_NAME "VK_KHR_robustness2"
#define VK_KHR_ROBUSTNESS_2_SPEC_VERSION 1
#define VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME "VK_KHR_sampler_mirror_clamp_to_edge"
#define VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION 3
#define VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME "VK_KHR_sampler_ycbcr_conversion"
#define VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION 14
#define VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME "VK_KHR_separate_depth_stencil_layouts"
#define VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION 1
#define VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME "VK_KHR_shader_atomic_int64"
#define VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION 1
#define VK_KHR_SHADER_BFLOAT16_EXTENSION_NAME "VK_KHR_shader_bfloat16"
#define VK_KHR_SHADER_BFLOAT16_SPEC_VERSION 1
#define VK_KHR_SHADER_CLOCK_EXTENSION_NAME "VK_KHR_shader_clock"
#define VK_KHR_SHADER_CLOCK_SPEC_VERSION 1
#define VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME "VK_KHR_shader_draw_parameters"
#define VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION 1
#define VK_KHR_SHADER_EXPECT_ASSUME_EXTENSION_NAME "VK_KHR_shader_expect_assume"
#define VK_KHR_SHADER_EXPECT_ASSUME_SPEC_VERSION 1
#define VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME "VK_KHR_shader_float16_int8"
#define VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION 1
#define VK_KHR_SHADER_FLOAT_CONTROLS_2_EXTENSION_NAME "VK_KHR_shader_float_controls2"
#define VK_KHR_SHADER_FLOAT_CONTROLS_2_SPEC_VERSION 1
#define VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME "VK_KHR_shader_float_controls"
#define VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION 4
#define VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME "VK_KHR_shader_integer_dot_product"
#define VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION 1
#define VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_EXTENSION_NAME "VK_KHR_shader_maximal_reconvergence"
#define VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_SPEC_VERSION 1
#define VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME "VK_KHR_shader_non_semantic_info"
#define VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION 1
#define VK_KHR_SHADER_QUAD_CONTROL_EXTENSION_NAME "VK_KHR_shader_quad_control"
#define VK_KHR_SHADER_QUAD_CONTROL_SPEC_VERSION 1
#define VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_EXTENSION_NAME "VK_KHR_shader_relaxed_extended_instruction"
#define VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_SPEC_VERSION 1
#define VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME "VK_KHR_shader_subgroup_extended_types"
#define VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION 1
#define VK_KHR_SHADER_SUBGROUP_ROTATE_EXTENSION_NAME "VK_KHR_shader_subgroup_rotate"
#define VK_KHR_SHADER_SUBGROUP_ROTATE_SPEC_VERSION 2
#define VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME "VK_KHR_shader_subgroup_uniform_control_flow"
#define VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION 1
#define VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME "VK_KHR_shader_terminate_invocation"
#define VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION 1
#define VK_KHR_SHADER_UNTYPED_POINTERS_EXTENSION_NAME "VK_KHR_shader_untyped_pointers"
#define VK_KHR_SHADER_UNTYPED_POINTERS_SPEC_VERSION 1
#define VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME "VK_KHR_shared_presentable_image"
#define VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION 1
#define VK_KHR_SPIRV_1_4_EXTENSION_NAME "VK_KHR_spirv_1_4"
#define VK_KHR_SPIRV_1_4_SPEC_VERSION 1
#define VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME "VK_KHR_storage_buffer_storage_class"
#define VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION 1
#define VK_KHR_SURFACE_EXTENSION_NAME "VK_KHR_surface"
#define VK_KHR_SURFACE_MAINTENANCE_1_EXTENSION_NAME "VK_KHR_surface_maintenance1"
#define VK_KHR_SURFACE_MAINTENANCE_1_SPEC_VERSION 1
#define VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME "VK_KHR_surface_protected_capabilities"
#define VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION 1
#define VK_KHR_SURFACE_SPEC_VERSION 25
#define VK_KHR_SWAPCHAIN_EXTENSION_NAME "VK_KHR_swapchain"
#define VK_KHR_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME "VK_KHR_swapchain_maintenance1"
#define VK_KHR_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION 1
#define VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME "VK_KHR_swapchain_mutable_format"
#define VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION 1
#define VK_KHR_SWAPCHAIN_SPEC_VERSION 70
#define VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME "VK_KHR_synchronization2"
#define VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION 1
#define VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME "VK_KHR_timeline_semaphore"
#define VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION 2
#define VK_KHR_UNIFIED_IMAGE_LAYOUTS_EXTENSION_NAME "VK_KHR_unified_image_layouts"
#define VK_KHR_UNIFIED_IMAGE_LAYOUTS_SPEC_VERSION 1
#define VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME "VK_KHR_uniform_buffer_standard_layout"
#define VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION 1
#define VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME "VK_KHR_variable_pointers"
#define VK_KHR_VARIABLE_POINTERS_SPEC_VERSION 1
#define VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME "VK_KHR_vertex_attribute_divisor"
#define VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION 1
#define VK_KHR_VIDEO_DECODE_AV1_EXTENSION_NAME "VK_KHR_video_decode_av1"
#define VK_KHR_VIDEO_DECODE_AV1_SPEC_VERSION 1
#define VK_KHR_VIDEO_DECODE_H264_EXTENSION_NAME "VK_KHR_video_decode_h264"
#define VK_KHR_VIDEO_DECODE_H264_SPEC_VERSION 9
#define VK_KHR_VIDEO_DECODE_H265_EXTENSION_NAME "VK_KHR_video_decode_h265"
#define VK_KHR_VIDEO_DECODE_H265_SPEC_VERSION 8
#define VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME "VK_KHR_video_decode_queue"
#define VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION 8
#define VK_KHR_VIDEO_DECODE_VP9_EXTENSION_NAME "VK_KHR_video_decode_vp9"
#define VK_KHR_VIDEO_DECODE_VP9_SPEC_VERSION 1
#define VK_KHR_VIDEO_ENCODE_AV1_EXTENSION_NAME "VK_KHR_video_encode_av1"
#define VK_KHR_VIDEO_ENCODE_AV1_SPEC_VERSION 1
#define VK_KHR_VIDEO_ENCODE_H264_EXTENSION_NAME "VK_KHR_video_encode_h264"
#define VK_KHR_VIDEO_ENCODE_H264_SPEC_VERSION 14
#define VK_KHR_VIDEO_ENCODE_H265_EXTENSION_NAME "VK_KHR_video_encode_h265"
#define VK_KHR_VIDEO_ENCODE_H265_SPEC_VERSION 14
#define VK_KHR_VIDEO_ENCODE_INTRA_REFRESH_EXTENSION_NAME "VK_KHR_video_encode_intra_refresh"
#define VK_KHR_VIDEO_ENCODE_INTRA_REFRESH_SPEC_VERSION 1
#define VK_KHR_VIDEO_ENCODE_QUANTIZATION_MAP_EXTENSION_NAME "VK_KHR_video_encode_quantization_map"
#define VK_KHR_VIDEO_ENCODE_QUANTIZATION_MAP_SPEC_VERSION 2
#define VK_KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME "VK_KHR_video_encode_queue"
#define VK_KHR_VIDEO_ENCODE_QUEUE_SPEC_VERSION 12
#define VK_KHR_VIDEO_MAINTENANCE_1_EXTENSION_NAME "VK_KHR_video_maintenance1"
#define VK_KHR_VIDEO_MAINTENANCE_1_SPEC_VERSION 1
#define VK_KHR_VIDEO_MAINTENANCE_2_EXTENSION_NAME "VK_KHR_video_maintenance2"
#define VK_KHR_VIDEO_MAINTENANCE_2_SPEC_VERSION 1
#define VK_KHR_VIDEO_QUEUE_EXTENSION_NAME "VK_KHR_video_queue"
#define VK_KHR_VIDEO_QUEUE_SPEC_VERSION 8
#define VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME "VK_KHR_vulkan_memory_model"
#define VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION 3
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
#define VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME "VK_KHR_wayland_surface"
#endif
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
#define VK_KHR_WAYLAND_SURFACE_SPEC_VERSION 6
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME "VK_KHR_win32_keyed_mutex"
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION 1
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_KHR_WIN32_SURFACE_EXTENSION_NAME "VK_KHR_win32_surface"
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_KHR_WIN32_SURFACE_SPEC_VERSION 6
#endif
#define VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME "VK_KHR_workgroup_memory_explicit_layout"
#define VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION 1
#if defined(VK_USE_PLATFORM_XCB_KHR)
#define VK_KHR_XCB_SURFACE_EXTENSION_NAME "VK_KHR_xcb_surface"
#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
#define VK_KHR_XCB_SURFACE_SPEC_VERSION 6
#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
#define VK_KHR_XLIB_SURFACE_EXTENSION_NAME "VK_KHR_xlib_surface"
#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
#define VK_KHR_XLIB_SURFACE_SPEC_VERSION 6
#endif
#define VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME "VK_KHR_zero_initialize_workgroup_memory"
#define VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION 1
#define VK_LOD_CLAMP_NONE 1000.0F
#define VK_LUID_SIZE 8
#define VK_LUID_SIZE_KHR 8
#define VK_LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME "VK_LUNARG_direct_driver_loading"
#define VK_LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION 1
#define VK_MAX_DESCRIPTION_SIZE 256
#define VK_MAX_DEVICE_GROUP_SIZE 32
#define VK_MAX_DEVICE_GROUP_SIZE_KHR 32
#define VK_MAX_DRIVER_INFO_SIZE 256
#define VK_MAX_DRIVER_INFO_SIZE_KHR 256
#define VK_MAX_DRIVER_NAME_SIZE 256
#define VK_MAX_DRIVER_NAME_SIZE_KHR 256
#define VK_MAX_EXTENSION_NAME_SIZE 256
#define VK_MAX_GLOBAL_PRIORITY_SIZE 16
#define VK_MAX_GLOBAL_PRIORITY_SIZE_EXT 16
#define VK_MAX_GLOBAL_PRIORITY_SIZE_KHR 16
#define VK_MAX_MEMORY_HEAPS 16
#define VK_MAX_MEMORY_TYPES 32
#define VK_MAX_PHYSICAL_DEVICE_DATA_GRAPH_OPERATION_SET_NAME_SIZE_ARM 128
#define VK_MAX_PHYSICAL_DEVICE_NAME_SIZE 256
#define VK_MAX_PIPELINE_BINARY_KEY_SIZE_KHR 32
#define VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT 32
#define VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR 7
#define VK_MAX_VIDEO_VP9_REFERENCES_PER_FRAME_KHR 3
#define VK_MESA_IMAGE_ALIGNMENT_CONTROL_EXTENSION_NAME "VK_MESA_image_alignment_control"
#define VK_MESA_IMAGE_ALIGNMENT_CONTROL_SPEC_VERSION 1
#define VK_MSFT_LAYERED_DRIVER_EXTENSION_NAME "VK_MSFT_layered_driver"
#define VK_MSFT_LAYERED_DRIVER_SPEC_VERSION 1
#if defined(VK_USE_PLATFORM_IOS_MVK)
#define VK_MVK_IOS_SURFACE_EXTENSION_NAME "VK_MVK_ios_surface"
#endif
#if defined(VK_USE_PLATFORM_IOS_MVK)
#define VK_MVK_IOS_SURFACE_SPEC_VERSION 3
#endif
#if defined(VK_USE_PLATFORM_MACOS_MVK)
#define VK_MVK_MACOS_SURFACE_EXTENSION_NAME "VK_MVK_macos_surface"
#endif
#if defined(VK_USE_PLATFORM_MACOS_MVK)
#define VK_MVK_MACOS_SURFACE_SPEC_VERSION 3
#endif
#if defined(VK_USE_PLATFORM_VI_NN)
#define VK_NN_VI_SURFACE_EXTENSION_NAME "VK_NN_vi_surface"
#endif
#if defined(VK_USE_PLATFORM_VI_NN)
#define VK_NN_VI_SURFACE_SPEC_VERSION 1
#endif
#define VK_NVX_BINARY_IMPORT_EXTENSION_NAME "VK_NVX_binary_import"
#define VK_NVX_BINARY_IMPORT_SPEC_VERSION 2
#define VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME "VK_NVX_image_view_handle"
#define VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION 3
#define VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME "VK_NVX_multiview_per_view_attributes"
#define VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION 1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_NV_ACQUIRE_WINRT_DISPLAY_EXTENSION_NAME "VK_NV_acquire_winrt_display"
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_NV_ACQUIRE_WINRT_DISPLAY_SPEC_VERSION 1
#endif
#define VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME "VK_NV_clip_space_w_scaling"
#define VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION 1
#define VK_NV_CLUSTER_ACCELERATION_STRUCTURE_EXTENSION_NAME "VK_NV_cluster_acceleration_structure"
#define VK_NV_CLUSTER_ACCELERATION_STRUCTURE_SPEC_VERSION 4
#define VK_NV_COMMAND_BUFFER_INHERITANCE_EXTENSION_NAME "VK_NV_command_buffer_inheritance"
#define VK_NV_COMMAND_BUFFER_INHERITANCE_SPEC_VERSION 1
#define VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME "VK_NV_compute_shader_derivatives"
#define VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION 1
#define VK_NV_COOPERATIVE_MATRIX_2_EXTENSION_NAME "VK_NV_cooperative_matrix2"
#define VK_NV_COOPERATIVE_MATRIX_2_SPEC_VERSION 1
#define VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME "VK_NV_cooperative_matrix"
#define VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION 1
#define VK_NV_COOPERATIVE_VECTOR_EXTENSION_NAME "VK_NV_cooperative_vector"
#define VK_NV_COOPERATIVE_VECTOR_SPEC_VERSION 4
#define VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME "VK_NV_copy_memory_indirect"
#define VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION 1
#define VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME "VK_NV_corner_sampled_image"
#define VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION 2
#define VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME "VK_NV_coverage_reduction_mode"
#define VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION 1
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_NV_CUDA_KERNEL_LAUNCH_EXTENSION_NAME "VK_NV_cuda_kernel_launch"
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_NV_CUDA_KERNEL_LAUNCH_SPEC_VERSION 2
#endif
#define VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME "VK_NV_dedicated_allocation"
#define VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME "VK_NV_dedicated_allocation_image_aliasing"
#define VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION 1
#define VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION 1
#define VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_EXTENSION_NAME "VK_NV_descriptor_pool_overallocation"
#define VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_SPEC_VERSION 1
#define VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME "VK_NV_device_diagnostics_config"
#define VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION 2
#define VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME "VK_NV_device_diagnostic_checkpoints"
#define VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION 2
#define VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_EXTENSION_NAME "VK_NV_device_generated_commands_compute"
#define VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_SPEC_VERSION 2
#define VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME "VK_NV_device_generated_commands"
#define VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION 3
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_NV_DISPLACEMENT_MICROMAP_EXTENSION_NAME "VK_NV_displacement_micromap"
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_NV_DISPLACEMENT_MICROMAP_SPEC_VERSION 2
#endif
#define VK_NV_DISPLAY_STEREO_EXTENSION_NAME "VK_NV_display_stereo"
#define VK_NV_DISPLAY_STEREO_SPEC_VERSION 1
#define VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_EXTENSION_NAME "VK_NV_extended_sparse_address_space"
#define VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_SPEC_VERSION 1
#define VK_NV_EXTERNAL_COMPUTE_QUEUE_EXTENSION_NAME "VK_NV_external_compute_queue"
#define VK_NV_EXTERNAL_COMPUTE_QUEUE_SPEC_VERSION 1
#define VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME "VK_NV_external_memory_capabilities"
#define VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION 1
#define VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME "VK_NV_external_memory"
#define VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME "VK_NV_external_memory_rdma"
#define VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION 1
#define VK_NV_EXTERNAL_MEMORY_SPEC_VERSION 1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME "VK_NV_external_memory_win32"
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION 1
#endif
#define VK_NV_FILL_RECTANGLE_EXTENSION_NAME "VK_NV_fill_rectangle"
#define VK_NV_FILL_RECTANGLE_SPEC_VERSION 1
#define VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME "VK_NV_fragment_coverage_to_color"
#define VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION 1
#define VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME "VK_NV_fragment_shader_barycentric"
#define VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION 1
#define VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME "VK_NV_fragment_shading_rate_enums"
#define VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION 1
#define VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME "VK_NV_framebuffer_mixed_samples"
#define VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION 1
#define VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME "VK_NV_geometry_shader_passthrough"
#define VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION 1
#define VK_NV_GLSL_SHADER_EXTENSION_NAME "VK_NV_glsl_shader"
#define VK_NV_GLSL_SHADER_SPEC_VERSION 1
#define VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME "VK_NV_inherited_viewport_scissor"
#define VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION 1
#define VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME "VK_NV_linear_color_attachment"
#define VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION 1
#define VK_NV_LOW_LATENCY_2_EXTENSION_NAME "VK_NV_low_latency2"
#define VK_NV_LOW_LATENCY_2_SPEC_VERSION 2
#define VK_NV_LOW_LATENCY_EXTENSION_NAME "VK_NV_low_latency"
#define VK_NV_LOW_LATENCY_SPEC_VERSION 1
#define VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME "VK_NV_memory_decompression"
#define VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION 1
#define VK_NV_MESH_SHADER_EXTENSION_NAME "VK_NV_mesh_shader"
#define VK_NV_MESH_SHADER_SPEC_VERSION 1
#define VK_NV_OPTICAL_FLOW_EXTENSION_NAME "VK_NV_optical_flow"
#define VK_NV_OPTICAL_FLOW_SPEC_VERSION 1
#define VK_NV_PARTITIONED_ACCELERATION_STRUCTURE_EXTENSION_NAME "VK_NV_partitioned_acceleration_structure"
#define VK_NV_PARTITIONED_ACCELERATION_STRUCTURE_SPEC_VERSION 1
#define VK_NV_PER_STAGE_DESCRIPTOR_SET_EXTENSION_NAME "VK_NV_per_stage_descriptor_set"
#define VK_NV_PER_STAGE_DESCRIPTOR_SET_SPEC_VERSION 1
#define VK_NV_PRESENT_BARRIER_EXTENSION_NAME "VK_NV_present_barrier"
#define VK_NV_PRESENT_BARRIER_SPEC_VERSION 1
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_NV_PRESENT_METERING_EXTENSION_NAME "VK_NV_present_metering"
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_NV_PRESENT_METERING_SPEC_VERSION 1
#endif
#define VK_NV_RAW_ACCESS_CHAINS_EXTENSION_NAME "VK_NV_raw_access_chains"
#define VK_NV_RAW_ACCESS_CHAINS_SPEC_VERSION 1
#define VK_NV_RAY_TRACING_EXTENSION_NAME "VK_NV_ray_tracing"
#define VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME "VK_NV_ray_tracing_invocation_reorder"
#define VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION 1
#define VK_NV_RAY_TRACING_LINEAR_SWEPT_SPHERES_EXTENSION_NAME "VK_NV_ray_tracing_linear_swept_spheres"
#define VK_NV_RAY_TRACING_LINEAR_SWEPT_SPHERES_SPEC_VERSION 1
#define VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME "VK_NV_ray_tracing_motion_blur"
#define VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION 1
#define VK_NV_RAY_TRACING_SPEC_VERSION 3
#define VK_NV_RAY_TRACING_VALIDATION_EXTENSION_NAME "VK_NV_ray_tracing_validation"
#define VK_NV_RAY_TRACING_VALIDATION_SPEC_VERSION 1
#define VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME "VK_NV_representative_fragment_test"
#define VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION 2
#define VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME "VK_NV_sample_mask_override_coverage"
#define VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION 1
#define VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME "VK_NV_scissor_exclusive"
#define VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION 2
#define VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_EXTENSION_NAME "VK_NV_shader_atomic_float16_vector"
#define VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_SPEC_VERSION 1
#define VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME "VK_NV_shader_image_footprint"
#define VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION 2
#define VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME "VK_NV_shader_sm_builtins"
#define VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION 1
#define VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME "VK_NV_shader_subgroup_partitioned"
#define VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION 1
#define VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME "VK_NV_shading_rate_image"
#define VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION 3
#define VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME "VK_NV_viewport_array2"
#define VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION 1
#define VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME "VK_NV_viewport_array2"
#define VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION 1
#define VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME "VK_NV_viewport_swizzle"
#define VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION 1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME "VK_NV_win32_keyed_mutex"
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION 2
#endif
#if defined(VK_USE_PLATFORM_OHOS)
#define VK_OHOS_SURFACE_EXTENSION_NAME "VK_OHOS_surface"
#endif
#if defined(VK_USE_PLATFORM_OHOS)
#define VK_OHOS_SURFACE_SPEC_VERSION 1
#endif
#define VK_PARTITIONED_ACCELERATION_STRUCTURE_PARTITION_INDEX_GLOBAL_NV (~0U)
#define VK_QCOM_FILTER_CUBIC_CLAMP_EXTENSION_NAME "VK_QCOM_filter_cubic_clamp"
#define VK_QCOM_FILTER_CUBIC_CLAMP_SPEC_VERSION 1
#define VK_QCOM_FILTER_CUBIC_WEIGHTS_EXTENSION_NAME "VK_QCOM_filter_cubic_weights"
#define VK_QCOM_FILTER_CUBIC_WEIGHTS_SPEC_VERSION 1
#define VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME "VK_QCOM_fragment_density_map_offset"
#define VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION 3
#define VK_QCOM_IMAGE_PROCESSING_2_EXTENSION_NAME "VK_QCOM_image_processing2"
#define VK_QCOM_IMAGE_PROCESSING_2_SPEC_VERSION 1
#define VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME "VK_QCOM_image_processing"
#define VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION 1
#define VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME "VK_QCOM_multiview_per_view_render_areas"
#define VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION 1
#define VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME "VK_QCOM_multiview_per_view_viewports"
#define VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION 1
#define VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME "VK_QCOM_render_pass_shader_resolve"
#define VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION 4
#define VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME "VK_QCOM_render_pass_store_ops"
#define VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION 2
#define VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME "VK_QCOM_render_pass_transform"
#define VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION 5
#define VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME "VK_QCOM_rotated_copy_commands"
#define VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION 2
#define VK_QCOM_TILE_MEMORY_HEAP_EXTENSION_NAME "VK_QCOM_tile_memory_heap"
#define VK_QCOM_TILE_MEMORY_HEAP_SPEC_VERSION 1
#define VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME "VK_QCOM_tile_properties"
#define VK_QCOM_TILE_PROPERTIES_SPEC_VERSION 1
#define VK_QCOM_TILE_SHADING_EXTENSION_NAME "VK_QCOM_tile_shading"
#define VK_QCOM_TILE_SHADING_SPEC_VERSION 2
#define VK_QCOM_YCBCR_DEGAMMA_EXTENSION_NAME "VK_QCOM_ycbcr_degamma"
#define VK_QCOM_YCBCR_DEGAMMA_SPEC_VERSION 1
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
#define VK_QNX_EXTERNAL_MEMORY_SCREEN_BUFFER_EXTENSION_NAME "VK_QNX_external_memory_screen_buffer"
#endif
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
#define VK_QNX_EXTERNAL_MEMORY_SCREEN_BUFFER_SPEC_VERSION 1
#endif
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
#define VK_QNX_SCREEN_SURFACE_EXTENSION_NAME "VK_QNX_screen_surface"
#endif
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
#define VK_QNX_SCREEN_SURFACE_SPEC_VERSION 1
#endif
#define VK_QUEUE_FAMILY_EXTERNAL (~1U)
#define VK_QUEUE_FAMILY_EXTERNAL_KHR (~1U)
#define VK_QUEUE_FAMILY_FOREIGN_EXT (~2U)
#define VK_QUEUE_FAMILY_IGNORED (~0U)
#define VK_REMAINING_3D_SLICES_EXT (~0U)
#define VK_REMAINING_ARRAY_LAYERS (~0U)
#define VK_REMAINING_MIP_LEVELS (~0U)
#define VK_SEC_AMIGO_PROFILING_EXTENSION_NAME "VK_SEC_amigo_profiling"
#define VK_SEC_AMIGO_PROFILING_SPEC_VERSION 1
#define VK_SEC_PIPELINE_CACHE_INCREMENTAL_MODE_EXTENSION_NAME "VK_SEC_pipeline_cache_incremental_mode"
#define VK_SEC_PIPELINE_CACHE_INCREMENTAL_MODE_SPEC_VERSION 1
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_SHADER_INDEX_UNUSED_AMDX (~0U)
#endif
#define VK_SHADER_UNUSED_KHR (~0U)
#define VK_SHADER_UNUSED_NV (~0U)
#define VK_SUBPASS_EXTERNAL (~0U)
#define VK_TRUE 1
#define VK_UUID_SIZE 16
#define VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME "VK_VALVE_descriptor_set_host_mapping"
#define VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION 1
#define VK_VALVE_FRAGMENT_DENSITY_MAP_LAYERED_EXTENSION_NAME "VK_VALVE_fragment_density_map_layered"
#define VK_VALVE_FRAGMENT_DENSITY_MAP_LAYERED_SPEC_VERSION 1
#define VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME "VK_VALVE_mutable_descriptor_type"
#define VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION 1
#define VK_VALVE_VIDEO_ENCODE_RGB_CONVERSION_EXTENSION_NAME "VK_VALVE_video_encode_rgb_conversion"
#define VK_VALVE_VIDEO_ENCODE_RGB_CONVERSION_SPEC_VERSION 1
#define VK_WHOLE_SIZE (~0ULL)

#include "vk_video/vulkan_video_codecs_common.h"

#include "vk_platform.h"

#if defined(VK_USE_PLATFORM_XLIB_KHR) || defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
#include <X11/Xlib.h>
#endif

#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
#include <X11/extensions/Xrandr.h>
#endif

#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
#include <wayland-client.h>
#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
#include <windows.h>
#endif

#if defined(VK_USE_PLATFORM_XCB_KHR)
#include <xcb/xcb.h>
#endif

#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
#include <directfb.h>
#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
#include <zircon/types.h>
#endif

#if defined(VK_USE_PLATFORM_GGP)
#include <ggp_c/vulkan_types.h>
#endif

#if defined(VK_USE_PLATFORM_SCREEN_QNX)
#include <screen/screen.h>
#endif

#define VK_MAKE_VERSION(major, minor, patch) \
    ((((uint32_t)(major)) << 22U) | (((uint32_t)(minor)) << 12U) | ((uint32_t)(patch)))

#define VK_VERSION_MAJOR(version) ((uint32_t)(version) >> 22U)

#define VK_VERSION_MINOR(version) (((uint32_t)(version) >> 12U) & 0x3FFU)

#define VK_VERSION_PATCH(version) ((uint32_t)(version) & 0xFFFU)

#define VK_MAKE_API_VERSION(variant, major, minor, patch) \
    ((((uint32_t)(variant)) << 29U) | (((uint32_t)(major)) << 22U) | (((uint32_t)(minor)) << 12U) | ((uint32_t)(patch)))

#define VK_API_VERSION_VARIANT(version) ((uint32_t)(version) >> 29U)

#define VK_API_VERSION_MAJOR(version) (((uint32_t)(version) >> 22U) & 0x7FU)

#define VK_API_VERSION_MINOR(version) (((uint32_t)(version) >> 12U) & 0x3FFU)

#define VK_API_VERSION_PATCH(version) ((uint32_t)(version) & 0xFFFU)

/*#define VK_API_VERSION VK_MAKE_API_VERSION(0, 1, 0, 0) // Patch version should always be set to 0 */

/* Vulkan 1.0 version number */
#define VK_API_VERSION_1_0 VK_MAKE_API_VERSION(0, 1, 0, 0)/* Patch version should always be set to 0 */

/* Vulkan 1.1 version number */
#define VK_API_VERSION_1_1 VK_MAKE_API_VERSION(0, 1, 1, 0)/* Patch version should always be set to 0 */

/* Vulkan 1.2 version number */
#define VK_API_VERSION_1_2 VK_MAKE_API_VERSION(0, 1, 2, 0)/* Patch version should always be set to 0 */

/* Vulkan 1.3 version number */
#define VK_API_VERSION_1_3 VK_MAKE_API_VERSION(0, 1, 3, 0)/* Patch version should always be set to 0 */

/* Vulkan 1.4 version number */
#define VK_API_VERSION_1_4 VK_MAKE_API_VERSION(0, 1, 4, 0)/* Patch version should always be set to 0 */

/* Version of this file */
#define VK_HEADER_VERSION 328

#define VK_DEFINE_HANDLE(object) typedef struct object##_T* object;

#ifndef VK_USE_64_BIT_PTR_DEFINES
    #if defined(__LP64__) || defined(_WIN64) || (defined(__x86_64__) && !defined(__ILP32__) ) || defined(_M_X64) || defined(__ia64) || defined (_M_IA64) || defined(__aarch64__) || defined(__powerpc64__) || (defined(__riscv) && __riscv_xlen == 64)
        #define VK_USE_64_BIT_PTR_DEFINES 1
    #else
        #define VK_USE_64_BIT_PTR_DEFINES 0
    #endif
#endif

#ifndef VK_DEFINE_NON_DISPATCHABLE_HANDLE
    #if (VK_USE_64_BIT_PTR_DEFINES==1)
        #if (defined(__cplusplus) && (__cplusplus >= 201103L)) || (defined(_MSVC_LANG) && (_MSVC_LANG >= 201103L))
            #define VK_NULL_HANDLE nullptr
        #else
            #define VK_NULL_HANDLE ((void*)0)
        #endif
    #else
        #define VK_NULL_HANDLE 0ULL
    #endif
#endif
#ifndef VK_NULL_HANDLE
    #define VK_NULL_HANDLE 0
#endif

#ifndef VK_DEFINE_NON_DISPATCHABLE_HANDLE
    #if (VK_USE_64_BIT_PTR_DEFINES==1)
        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef struct object##_T *object;
    #else
        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef uint64_t object;
    #endif
#endif

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
struct ANativeWindow;
#endif

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
struct AHardwareBuffer;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
#ifdef __OBJC__
@class CAMetalLayer;
#else
typedef void CAMetalLayer;
#endif
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
#ifdef __OBJC__
@protocol MTLDevice;
typedef __unsafe_unretained id<MTLDevice> MTLDevice_id;
#else
typedef void* MTLDevice_id;
#endif
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
#ifdef __OBJC__
@protocol MTLCommandQueue;
typedef __unsafe_unretained id<MTLCommandQueue> MTLCommandQueue_id;
#else
typedef void* MTLCommandQueue_id;
#endif
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
#ifdef __OBJC__
@protocol MTLBuffer;
typedef __unsafe_unretained id<MTLBuffer> MTLBuffer_id;
#else
typedef void* MTLBuffer_id;
#endif
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
#ifdef __OBJC__
@protocol MTLTexture;
typedef __unsafe_unretained id<MTLTexture> MTLTexture_id;
#else
typedef void* MTLTexture_id;
#endif
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
#ifdef __OBJC__
@protocol MTLSharedEvent;
typedef __unsafe_unretained id<MTLSharedEvent> MTLSharedEvent_id;
#else
typedef void* MTLSharedEvent_id;
#endif
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct __IOSurface* IOSurfaceRef;
#endif

#if defined(VK_USE_PLATFORM_OHOS)
typedef struct NativeWindow OHNativeWindow;
#endif

VK_DEFINE_HANDLE(VkInstance)

VK_DEFINE_HANDLE(VkPhysicalDevice)

VK_DEFINE_HANDLE(VkDevice)

VK_DEFINE_HANDLE(VkQueue)

VK_DEFINE_HANDLE(VkCommandBuffer)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDeviceMemory)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCommandPool)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBuffer)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBufferView)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkImage)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkImageView)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkShaderModule)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipeline)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipelineLayout)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSampler)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorSet)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorSetLayout)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorPool)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkFence)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSemaphore)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkEvent)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkQueryPool)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkFramebuffer)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkRenderPass)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipelineCache)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipelineBinaryKHR)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkIndirectCommandsLayoutNV)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkIndirectCommandsLayoutEXT)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkIndirectExecutionSetEXT)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorUpdateTemplate)

#define VkDescriptorUpdateTemplateKHR VkDescriptorUpdateTemplate
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSamplerYcbcrConversion)

#define VkSamplerYcbcrConversionKHR VkSamplerYcbcrConversion
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkValidationCacheEXT)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkAccelerationStructureKHR)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkAccelerationStructureNV)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPerformanceConfigurationINTEL)

#if defined(VK_USE_PLATFORM_FUCHSIA)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBufferCollectionFUCHSIA)
#endif

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDeferredOperationKHR)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPrivateDataSlot)

#define VkPrivateDataSlotEXT VkPrivateDataSlot
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCuModuleNVX)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCuFunctionNVX)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkOpticalFlowSessionNV)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkMicromapEXT)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkShaderEXT)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkTensorARM)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkTensorViewARM)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDataGraphPipelineSessionARM)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDisplayKHR)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDisplayModeKHR)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSurfaceKHR)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSwapchainKHR)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDebugReportCallbackEXT)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDebugUtilsMessengerEXT)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkVideoSessionKHR)

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkVideoSessionParametersKHR)

typedef enum VkAttachmentLoadOp {
    VK_ATTACHMENT_LOAD_OP_LOAD = 0,
    VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
    VK_ATTACHMENT_LOAD_OP_NONE = 1000400000,
    VK_ATTACHMENT_LOAD_OP_NONE_EXT = VK_ATTACHMENT_LOAD_OP_NONE,
    VK_ATTACHMENT_LOAD_OP_NONE_KHR = VK_ATTACHMENT_LOAD_OP_NONE,
    VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 0x7FFFFFFF
} VkAttachmentLoadOp;

typedef enum VkAttachmentStoreOp {
    VK_ATTACHMENT_STORE_OP_STORE = 0,
    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
    VK_ATTACHMENT_STORE_OP_NONE = 1000301000,
    VK_ATTACHMENT_STORE_OP_NONE_KHR = VK_ATTACHMENT_STORE_OP_NONE,
    VK_ATTACHMENT_STORE_OP_NONE_QCOM = VK_ATTACHMENT_STORE_OP_NONE,
    VK_ATTACHMENT_STORE_OP_NONE_EXT = VK_ATTACHMENT_STORE_OP_NONE,
    VK_ATTACHMENT_STORE_OP_MAX_ENUM = 0x7FFFFFFF
} VkAttachmentStoreOp;

typedef enum VkBlendFactor {
    VK_BLEND_FACTOR_ZERO = 0,
    VK_BLEND_FACTOR_ONE = 1,
    VK_BLEND_FACTOR_SRC_COLOR = 2,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
    VK_BLEND_FACTOR_DST_COLOR = 4,
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
    VK_BLEND_FACTOR_SRC_ALPHA = 6,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
    VK_BLEND_FACTOR_DST_ALPHA = 8,
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
    VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
    VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
    VK_BLEND_FACTOR_SRC1_COLOR = 15,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
    VK_BLEND_FACTOR_SRC1_ALPHA = 17,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
    VK_BLEND_FACTOR_MAX_ENUM = 0x7FFFFFFF
} VkBlendFactor;

typedef enum VkBlendOp {
    VK_BLEND_OP_ADD = 0,
    VK_BLEND_OP_SUBTRACT = 1,
    VK_BLEND_OP_REVERSE_SUBTRACT = 2,
    VK_BLEND_OP_MIN = 3,
    VK_BLEND_OP_MAX = 4,
    VK_BLEND_OP_ZERO_EXT = 1000148000,
    VK_BLEND_OP_SRC_EXT = 1000148001,
    VK_BLEND_OP_DST_EXT = 1000148002,
    VK_BLEND_OP_SRC_OVER_EXT = 1000148003,
    VK_BLEND_OP_DST_OVER_EXT = 1000148004,
    VK_BLEND_OP_SRC_IN_EXT = 1000148005,
    VK_BLEND_OP_DST_IN_EXT = 1000148006,
    VK_BLEND_OP_SRC_OUT_EXT = 1000148007,
    VK_BLEND_OP_DST_OUT_EXT = 1000148008,
    VK_BLEND_OP_SRC_ATOP_EXT = 1000148009,
    VK_BLEND_OP_DST_ATOP_EXT = 1000148010,
    VK_BLEND_OP_XOR_EXT = 1000148011,
    VK_BLEND_OP_MULTIPLY_EXT = 1000148012,
    VK_BLEND_OP_SCREEN_EXT = 1000148013,
    VK_BLEND_OP_OVERLAY_EXT = 1000148014,
    VK_BLEND_OP_DARKEN_EXT = 1000148015,
    VK_BLEND_OP_LIGHTEN_EXT = 1000148016,
    VK_BLEND_OP_COLORDODGE_EXT = 1000148017,
    VK_BLEND_OP_COLORBURN_EXT = 1000148018,
    VK_BLEND_OP_HARDLIGHT_EXT = 1000148019,
    VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020,
    VK_BLEND_OP_DIFFERENCE_EXT = 1000148021,
    VK_BLEND_OP_EXCLUSION_EXT = 1000148022,
    VK_BLEND_OP_INVERT_EXT = 1000148023,
    VK_BLEND_OP_INVERT_RGB_EXT = 1000148024,
    VK_BLEND_OP_LINEARDODGE_EXT = 1000148025,
    VK_BLEND_OP_LINEARBURN_EXT = 1000148026,
    VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
    VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028,
    VK_BLEND_OP_PINLIGHT_EXT = 1000148029,
    VK_BLEND_OP_HARDMIX_EXT = 1000148030,
    VK_BLEND_OP_HSL_HUE_EXT = 1000148031,
    VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032,
    VK_BLEND_OP_HSL_COLOR_EXT = 1000148033,
    VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
    VK_BLEND_OP_PLUS_EXT = 1000148035,
    VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
    VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038,
    VK_BLEND_OP_MINUS_EXT = 1000148039,
    VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
    VK_BLEND_OP_CONTRAST_EXT = 1000148041,
    VK_BLEND_OP_INVERT_OVG_EXT = 1000148042,
    VK_BLEND_OP_RED_EXT = 1000148043,
    VK_BLEND_OP_GREEN_EXT = 1000148044,
    VK_BLEND_OP_BLUE_EXT = 1000148045,
    VK_BLEND_OP_MAX_ENUM = 0x7FFFFFFF
} VkBlendOp;

typedef enum VkBorderColor {
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
    VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
    VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
    VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003,
    VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004,
    VK_BORDER_COLOR_MAX_ENUM = 0x7FFFFFFF
} VkBorderColor;

typedef enum VkFramebufferCreateFlagBits {
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1,
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT,
    VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkFramebufferCreateFlagBits;

typedef enum VkQueryPoolCreateFlagBits {
    VK_QUERY_POOL_CREATE_RESET_BIT_KHR = 1,
    VK_QUERY_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkQueryPoolCreateFlagBits;

typedef enum VkRenderPassCreateFlagBits {
    VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2,
    VK_RENDER_PASS_CREATE_PER_LAYER_FRAGMENT_DENSITY_BIT_VALVE = 4,
    VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkRenderPassCreateFlagBits;

typedef enum VkSamplerCreateFlagBits {
    VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1,
    VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2,
    VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8,
    VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT = 4,
    VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM = 16,
    VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSamplerCreateFlagBits;

typedef enum VkPipelineCacheHeaderVersion {
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
    VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 0x7FFFFFFF
} VkPipelineCacheHeaderVersion;

typedef enum VkPipelineCacheCreateFlagBits {
    VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 1,
    VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT,
    VK_PIPELINE_CACHE_CREATE_INTERNALLY_SYNCHRONIZED_MERGE_BIT_KHR = 8,
    VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineCacheCreateFlagBits;

typedef enum VkPipelineShaderStageCreateFlagBits {
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = 1,
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = 2,
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT,
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT,
    VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineShaderStageCreateFlagBits;

typedef enum VkDescriptorSetLayoutCreateFlagBits {
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT = 1,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 16,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT = 32,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = 4,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV = 128,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT = 4,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV = 64,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkDescriptorSetLayoutCreateFlagBits;

typedef enum VkInstanceCreateFlagBits {
    VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR = 1,
    VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkInstanceCreateFlagBits;

typedef enum VkDeviceQueueCreateFlagBits {
    VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1,
    VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkDeviceQueueCreateFlagBits;

typedef enum VkBufferCreateFlagBits {
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1,
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2,
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4,
    VK_BUFFER_CREATE_PROTECTED_BIT = 8,
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16,
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
    VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 32,
    VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR = 64,
    VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkBufferCreateFlagBits;

typedef enum VkBufferUsageFlagBits {
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1,
    VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2,
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4,
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8,
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16,
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32,
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64,
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128,
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256,
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072,
    VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 8192,
    VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = 16384,
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048,
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096,
    VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512,
    VK_BUFFER_USAGE_EXECUTION_GRAPH_SCRATCH_BIT_AMDX = 33554432,
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288,
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576,
    VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 1024,
    VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR,
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
    VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 32768,
    VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 65536,
    VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 2097152,
    VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 4194304,
    VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 67108864,
    VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 8388608,
    VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = 16777216,
    VK_BUFFER_USAGE_TILE_MEMORY_BIT_QCOM = 134217728,
    VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkBufferUsageFlagBits;

typedef enum VkColorComponentFlagBits {
    VK_COLOR_COMPONENT_R_BIT = 1,
    VK_COLOR_COMPONENT_G_BIT = 2,
    VK_COLOR_COMPONENT_B_BIT = 4,
    VK_COLOR_COMPONENT_A_BIT = 8,
    VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkColorComponentFlagBits;

typedef enum VkComponentSwizzle {
    VK_COMPONENT_SWIZZLE_IDENTITY = 0,
    VK_COMPONENT_SWIZZLE_ZERO = 1,
    VK_COMPONENT_SWIZZLE_ONE = 2,
    VK_COMPONENT_SWIZZLE_R = 3,
    VK_COMPONENT_SWIZZLE_G = 4,
    VK_COMPONENT_SWIZZLE_B = 5,
    VK_COMPONENT_SWIZZLE_A = 6,
    VK_COMPONENT_SWIZZLE_MAX_ENUM = 0x7FFFFFFF
} VkComponentSwizzle;

typedef enum VkCommandPoolCreateFlagBits {
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1,
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2,
    VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4,
    VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkCommandPoolCreateFlagBits;

typedef enum VkCommandPoolResetFlagBits {
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1,
    VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkCommandPoolResetFlagBits;

typedef enum VkCommandBufferResetFlagBits {
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1,
    VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkCommandBufferResetFlagBits;

typedef enum VkCommandBufferLevel {
    VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
    VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 0x7FFFFFFF
} VkCommandBufferLevel;

typedef enum VkCommandBufferUsageFlagBits {
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1,
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2,
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4,
    VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkCommandBufferUsageFlagBits;

typedef enum VkCompareOp {
    VK_COMPARE_OP_NEVER = 0,
    VK_COMPARE_OP_LESS = 1,
    VK_COMPARE_OP_EQUAL = 2,
    VK_COMPARE_OP_LESS_OR_EQUAL = 3,
    VK_COMPARE_OP_GREATER = 4,
    VK_COMPARE_OP_NOT_EQUAL = 5,
    VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
    VK_COMPARE_OP_ALWAYS = 7,
    VK_COMPARE_OP_MAX_ENUM = 0x7FFFFFFF
} VkCompareOp;

typedef enum VkCullModeFlagBits {
    VK_CULL_MODE_NONE = 0,
    VK_CULL_MODE_FRONT_BIT = 1,
    VK_CULL_MODE_BACK_BIT = 2,
    VK_CULL_MODE_FRONT_AND_BACK = 0x00000003,
    VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkCullModeFlagBits;

typedef enum VkDescriptorType {
    VK_DESCRIPTOR_TYPE_SAMPLER = 0,
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1000138000,
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK,
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
    VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000,
    VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM = 1000440000,
    VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM = 1000440001,
    VK_DESCRIPTOR_TYPE_TENSOR_ARM = 1000460000,
    VK_DESCRIPTOR_TYPE_MUTABLE_EXT = 1000351000,
    VK_DESCRIPTOR_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_NV = 1000570000,
    VK_DESCRIPTOR_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkDescriptorType;

typedef enum VkDynamicState {
    VK_DYNAMIC_STATE_VIEWPORT = 0,
    VK_DYNAMIC_STATE_SCISSOR = 1,
    VK_DYNAMIC_STATE_LINE_WIDTH = 2,
    VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
    VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
    VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
    VK_DYNAMIC_STATE_CULL_MODE = 1000267000,
    VK_DYNAMIC_STATE_FRONT_FACE = 1000267001,
    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 1000267002,
    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 1000267003,
    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = 1000267004,
    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 1000267005,
    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = 1000267006,
    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 1000267007,
    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = 1000267008,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 1000267009,
    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = 1000267010,
    VK_DYNAMIC_STATE_STENCIL_OP = 1000267011,
    VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = 1000377001,
    VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = 1000377002,
    VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = 1000377004,
    VK_DYNAMIC_STATE_LINE_STIPPLE = 1000259000,
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT = 1000099001,
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT = 1000099002,
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
    VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000,
    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
    VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV = 1000205000,
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
    VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000,
    VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = VK_DYNAMIC_STATE_LINE_STIPPLE,
    VK_DYNAMIC_STATE_CULL_MODE_EXT = VK_DYNAMIC_STATE_CULL_MODE,
    VK_DYNAMIC_STATE_FRONT_FACE_EXT = VK_DYNAMIC_STATE_FRONT_FACE,
    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY,
    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT,
    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT,
    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE,
    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE,
    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE,
    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = VK_DYNAMIC_STATE_DEPTH_COMPARE_OP,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE,
    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE,
    VK_DYNAMIC_STATE_STENCIL_OP_EXT = VK_DYNAMIC_STATE_STENCIL_OP,
    VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000,
    VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000,
    VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE,
    VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE,
    VK_DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003,
    VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE,
    VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000,
    VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT = 1000455003,
    VK_DYNAMIC_STATE_POLYGON_MODE_EXT = 1000455004,
    VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT = 1000455005,
    VK_DYNAMIC_STATE_SAMPLE_MASK_EXT = 1000455006,
    VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT = 1000455007,
    VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT = 1000455008,
    VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT = 1000455009,
    VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT = 1000455010,
    VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT = 1000455011,
    VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT = 1000455012,
    VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT = 1000455002,
    VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT = 1000455013,
    VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT = 1000455014,
    VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT = 1000455015,
    VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT = 1000455016,
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT = 1000455017,
    VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT = 1000455018,
    VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT = 1000455019,
    VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT = 1000455020,
    VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT = 1000455021,
    VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT = 1000455022,
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV = 1000455023,
    VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV = 1000455024,
    VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV = 1000455025,
    VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV = 1000455026,
    VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV = 1000455027,
    VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV = 1000455028,
    VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV = 1000455029,
    VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV = 1000455030,
    VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV = 1000455031,
    VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV = 1000455032,
    VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT = 1000524000,
    VK_DYNAMIC_STATE_LINE_STIPPLE_KHR = VK_DYNAMIC_STATE_LINE_STIPPLE,
    VK_DYNAMIC_STATE_DEPTH_CLAMP_RANGE_EXT = 1000582000,
    VK_DYNAMIC_STATE_MAX_ENUM = 0x7FFFFFFF
} VkDynamicState;

typedef enum VkFenceCreateFlagBits {
    VK_FENCE_CREATE_SIGNALED_BIT = 1,
    VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkFenceCreateFlagBits;

typedef enum VkPolygonMode {
    VK_POLYGON_MODE_FILL = 0,
    VK_POLYGON_MODE_LINE = 1,
    VK_POLYGON_MODE_POINT = 2,
    VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
    VK_POLYGON_MODE_MAX_ENUM = 0x7FFFFFFF
} VkPolygonMode;

typedef enum VkFormat {
    VK_FORMAT_UNDEFINED = 0,
    VK_FORMAT_R4G4_UNORM_PACK8 = 1,
    VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
    VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
    VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
    VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
    VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
    VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
    VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
    VK_FORMAT_R8_UNORM = 9,
    VK_FORMAT_R8_SNORM = 10,
    VK_FORMAT_R8_USCALED = 11,
    VK_FORMAT_R8_SSCALED = 12,
    VK_FORMAT_R8_UINT = 13,
    VK_FORMAT_R8_SINT = 14,
    VK_FORMAT_R8_SRGB = 15,
    VK_FORMAT_R8G8_UNORM = 16,
    VK_FORMAT_R8G8_SNORM = 17,
    VK_FORMAT_R8G8_USCALED = 18,
    VK_FORMAT_R8G8_SSCALED = 19,
    VK_FORMAT_R8G8_UINT = 20,
    VK_FORMAT_R8G8_SINT = 21,
    VK_FORMAT_R8G8_SRGB = 22,
    VK_FORMAT_R8G8B8_UNORM = 23,
    VK_FORMAT_R8G8B8_SNORM = 24,
    VK_FORMAT_R8G8B8_USCALED = 25,
    VK_FORMAT_R8G8B8_SSCALED = 26,
    VK_FORMAT_R8G8B8_UINT = 27,
    VK_FORMAT_R8G8B8_SINT = 28,
    VK_FORMAT_R8G8B8_SRGB = 29,
    VK_FORMAT_B8G8R8_UNORM = 30,
    VK_FORMAT_B8G8R8_SNORM = 31,
    VK_FORMAT_B8G8R8_USCALED = 32,
    VK_FORMAT_B8G8R8_SSCALED = 33,
    VK_FORMAT_B8G8R8_UINT = 34,
    VK_FORMAT_B8G8R8_SINT = 35,
    VK_FORMAT_B8G8R8_SRGB = 36,
    VK_FORMAT_R8G8B8A8_UNORM = 37,
    VK_FORMAT_R8G8B8A8_SNORM = 38,
    VK_FORMAT_R8G8B8A8_USCALED = 39,
    VK_FORMAT_R8G8B8A8_SSCALED = 40,
    VK_FORMAT_R8G8B8A8_UINT = 41,
    VK_FORMAT_R8G8B8A8_SINT = 42,
    VK_FORMAT_R8G8B8A8_SRGB = 43,
    VK_FORMAT_B8G8R8A8_UNORM = 44,
    VK_FORMAT_B8G8R8A8_SNORM = 45,
    VK_FORMAT_B8G8R8A8_USCALED = 46,
    VK_FORMAT_B8G8R8A8_SSCALED = 47,
    VK_FORMAT_B8G8R8A8_UINT = 48,
    VK_FORMAT_B8G8R8A8_SINT = 49,
    VK_FORMAT_B8G8R8A8_SRGB = 50,
    VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
    VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
    VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
    VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
    VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
    VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
    VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
    VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
    VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
    VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
    VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
    VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
    VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
    VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
    VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
    VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
    VK_FORMAT_R16_UNORM = 70,
    VK_FORMAT_R16_SNORM = 71,
    VK_FORMAT_R16_USCALED = 72,
    VK_FORMAT_R16_SSCALED = 73,
    VK_FORMAT_R16_UINT = 74,
    VK_FORMAT_R16_SINT = 75,
    VK_FORMAT_R16_SFLOAT = 76,
    VK_FORMAT_R16G16_UNORM = 77,
    VK_FORMAT_R16G16_SNORM = 78,
    VK_FORMAT_R16G16_USCALED = 79,
    VK_FORMAT_R16G16_SSCALED = 80,
    VK_FORMAT_R16G16_UINT = 81,
    VK_FORMAT_R16G16_SINT = 82,
    VK_FORMAT_R16G16_SFLOAT = 83,
    VK_FORMAT_R16G16B16_UNORM = 84,
    VK_FORMAT_R16G16B16_SNORM = 85,
    VK_FORMAT_R16G16B16_USCALED = 86,
    VK_FORMAT_R16G16B16_SSCALED = 87,
    VK_FORMAT_R16G16B16_UINT = 88,
    VK_FORMAT_R16G16B16_SINT = 89,
    VK_FORMAT_R16G16B16_SFLOAT = 90,
    VK_FORMAT_R16G16B16A16_UNORM = 91,
    VK_FORMAT_R16G16B16A16_SNORM = 92,
    VK_FORMAT_R16G16B16A16_USCALED = 93,
    VK_FORMAT_R16G16B16A16_SSCALED = 94,
    VK_FORMAT_R16G16B16A16_UINT = 95,
    VK_FORMAT_R16G16B16A16_SINT = 96,
    VK_FORMAT_R16G16B16A16_SFLOAT = 97,
    VK_FORMAT_R32_UINT = 98,
    VK_FORMAT_R32_SINT = 99,
    VK_FORMAT_R32_SFLOAT = 100,
    VK_FORMAT_R32G32_UINT = 101,
    VK_FORMAT_R32G32_SINT = 102,
    VK_FORMAT_R32G32_SFLOAT = 103,
    VK_FORMAT_R32G32B32_UINT = 104,
    VK_FORMAT_R32G32B32_SINT = 105,
    VK_FORMAT_R32G32B32_SFLOAT = 106,
    VK_FORMAT_R32G32B32A32_UINT = 107,
    VK_FORMAT_R32G32B32A32_SINT = 108,
    VK_FORMAT_R32G32B32A32_SFLOAT = 109,
    VK_FORMAT_R64_UINT = 110,
    VK_FORMAT_R64_SINT = 111,
    VK_FORMAT_R64_SFLOAT = 112,
    VK_FORMAT_R64G64_UINT = 113,
    VK_FORMAT_R64G64_SINT = 114,
    VK_FORMAT_R64G64_SFLOAT = 115,
    VK_FORMAT_R64G64B64_UINT = 116,
    VK_FORMAT_R64G64B64_SINT = 117,
    VK_FORMAT_R64G64B64_SFLOAT = 118,
    VK_FORMAT_R64G64B64A64_UINT = 119,
    VK_FORMAT_R64G64B64A64_SINT = 120,
    VK_FORMAT_R64G64B64A64_SFLOAT = 121,
    VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
    VK_FORMAT_D16_UNORM = 124,
    VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
    VK_FORMAT_D32_SFLOAT = 126,
    VK_FORMAT_S8_UINT = 127,
    VK_FORMAT_D16_UNORM_S8_UINT = 128,
    VK_FORMAT_D24_UNORM_S8_UINT = 129,
    VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
    VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
    VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
    VK_FORMAT_BC2_UNORM_BLOCK = 135,
    VK_FORMAT_BC2_SRGB_BLOCK = 136,
    VK_FORMAT_BC3_UNORM_BLOCK = 137,
    VK_FORMAT_BC3_SRGB_BLOCK = 138,
    VK_FORMAT_BC4_UNORM_BLOCK = 139,
    VK_FORMAT_BC4_SNORM_BLOCK = 140,
    VK_FORMAT_BC5_UNORM_BLOCK = 141,
    VK_FORMAT_BC5_SNORM_BLOCK = 142,
    VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
    VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
    VK_FORMAT_BC7_UNORM_BLOCK = 145,
    VK_FORMAT_BC7_SRGB_BLOCK = 146,
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
    VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
    VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
    VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
    VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
    VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
    VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
    VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
    VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
    VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = 1000330000,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1000330001,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 1000330002,
    VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = 1000330003,
    VK_FORMAT_A4R4G4B4_UNORM_PACK16 = 1000340000,
    VK_FORMAT_A4B4G4R4_UNORM_PACK16 = 1000340001,
    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = 1000066000,
    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = 1000066001,
    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = 1000066002,
    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = 1000066003,
    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = 1000066004,
    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = 1000066005,
    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = 1000066006,
    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = 1000066007,
    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = 1000066008,
    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = 1000066009,
    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = 1000066010,
    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = 1000066011,
    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = 1000066012,
    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = 1000066013,
    VK_FORMAT_A1B5G5R5_UNORM_PACK16 = 1000470000,
    VK_FORMAT_A8_UNORM = 1000470001,
    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK,
    VK_FORMAT_G8B8G8R8_422_UNORM_KHR = VK_FORMAT_G8B8G8R8_422_UNORM,
    VK_FORMAT_B8G8R8G8_422_UNORM_KHR = VK_FORMAT_B8G8R8G8_422_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
    VK_FORMAT_R10X6_UNORM_PACK16_KHR = VK_FORMAT_R10X6_UNORM_PACK16,
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
    VK_FORMAT_R12X4_UNORM_PACK16_KHR = VK_FORMAT_R12X4_UNORM_PACK16,
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
    VK_FORMAT_G16B16G16R16_422_UNORM_KHR = VK_FORMAT_G16B16G16R16_422_UNORM,
    VK_FORMAT_B16G16R16G16_422_UNORM_KHR = VK_FORMAT_B16G16R16G16_422_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
    VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = VK_FORMAT_G8_B8R8_2PLANE_444_UNORM,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16,
    VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = VK_FORMAT_G16_B16R16_2PLANE_444_UNORM,
    VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = VK_FORMAT_A4R4G4B4_UNORM_PACK16,
    VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = VK_FORMAT_A4B4G4R4_UNORM_PACK16,
    VK_FORMAT_R8_BOOL_ARM = 1000460000,
    VK_FORMAT_R16G16_SFIXED5_NV = 1000464000,
    VK_FORMAT_R16G16_S10_5_NV = VK_FORMAT_R16G16_SFIXED5_NV,
    VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR = VK_FORMAT_A1B5G5R5_UNORM_PACK16,
    VK_FORMAT_A8_UNORM_KHR = VK_FORMAT_A8_UNORM,
    VK_FORMAT_R10X6_UINT_PACK16_ARM = 1000609000,
    VK_FORMAT_R10X6G10X6_UINT_2PACK16_ARM = 1000609001,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UINT_4PACK16_ARM = 1000609002,
    VK_FORMAT_R12X4_UINT_PACK16_ARM = 1000609003,
    VK_FORMAT_R12X4G12X4_UINT_2PACK16_ARM = 1000609004,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UINT_4PACK16_ARM = 1000609005,
    VK_FORMAT_R14X2_UINT_PACK16_ARM = 1000609006,
    VK_FORMAT_R14X2G14X2_UINT_2PACK16_ARM = 1000609007,
    VK_FORMAT_R14X2G14X2B14X2A14X2_UINT_4PACK16_ARM = 1000609008,
    VK_FORMAT_R14X2_UNORM_PACK16_ARM = 1000609009,
    VK_FORMAT_R14X2G14X2_UNORM_2PACK16_ARM = 1000609010,
    VK_FORMAT_R14X2G14X2B14X2A14X2_UNORM_4PACK16_ARM = 1000609011,
    VK_FORMAT_G14X2_B14X2R14X2_2PLANE_420_UNORM_3PACK16_ARM = 1000609012,
    VK_FORMAT_G14X2_B14X2R14X2_2PLANE_422_UNORM_3PACK16_ARM = 1000609013,
    VK_FORMAT_MAX_ENUM = 0x7FFFFFFF
} VkFormat;

typedef enum VkFormatFeatureFlagBits {
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4,
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32,
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256,
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512,
    VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024,
    VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152,
    VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192,
    VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR = 33554432,
    VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR = 67108864,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_SRC_BIT,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT,
    VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT,
    VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = VK_FORMAT_FEATURE_DISJOINT_BIT,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192,
    VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216,
    VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824,
    VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR = 134217728,
    VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR = 268435456,
    VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkFormatFeatureFlagBits;

typedef enum VkFrontFace {
    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
    VK_FRONT_FACE_CLOCKWISE = 1,
    VK_FRONT_FACE_MAX_ENUM = 0x7FFFFFFF
} VkFrontFace;

typedef enum VkMemoryMapFlagBits {
    VK_MEMORY_MAP_PLACED_BIT_EXT = 1,
    VK_MEMORY_MAP_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkMemoryMapFlagBits;

typedef enum VkImageAspectFlagBits {
    VK_IMAGE_ASPECT_COLOR_BIT = 1,
    VK_IMAGE_ASPECT_DEPTH_BIT = 2,
    VK_IMAGE_ASPECT_STENCIL_BIT = 4,
    VK_IMAGE_ASPECT_METADATA_BIT = 8,
    VK_IMAGE_ASPECT_PLANE_0_BIT = 16,
    VK_IMAGE_ASPECT_PLANE_1_BIT = 32,
    VK_IMAGE_ASPECT_PLANE_2_BIT = 64,
    VK_IMAGE_ASPECT_NONE = 0,
    VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = VK_IMAGE_ASPECT_PLANE_0_BIT,
    VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = VK_IMAGE_ASPECT_PLANE_1_BIT,
    VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = VK_IMAGE_ASPECT_PLANE_2_BIT,
    VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128,
    VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256,
    VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512,
    VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024,
    VK_IMAGE_ASPECT_NONE_KHR = VK_IMAGE_ASPECT_NONE,
    VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkImageAspectFlagBits;

typedef enum VkImageCreateFlagBits {
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1,
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2,
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4,
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8,
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16,
    VK_IMAGE_CREATE_ALIAS_BIT = 1024,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256,
    VK_IMAGE_CREATE_PROTECTED_BIT = 2048,
    VK_IMAGE_CREATE_DISJOINT_BIT = 512,
    VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = VK_IMAGE_CREATE_EXTENDED_USAGE_BIT,
    VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096,
    VK_IMAGE_CREATE_DISJOINT_BIT_KHR = VK_IMAGE_CREATE_DISJOINT_BIT,
    VK_IMAGE_CREATE_ALIAS_BIT_KHR = VK_IMAGE_CREATE_ALIAS_BIT,
    VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384,
    VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 65536,
    VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT = 262144,
    VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT = 131072,
    VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM = 32768,
    VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR = 1048576,
    VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_EXT = 32768,
    VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkImageCreateFlagBits;

typedef enum VkImageLayout {
    VK_IMAGE_LAYOUT_UNDEFINED = 0,
    VK_IMAGE_LAYOUT_GENERAL = 1,
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
    VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001,
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002,
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003,
    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 1000314000,
    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1000314001,
    VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ = 1000232000,
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
    VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = 1000024000,
    VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = 1000024001,
    VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = 1000024002,
    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003,
    VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
    VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1000164003,
    VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR = VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR = 1000299000,
    VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR = 1000299001,
    VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR = 1000299002,
    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT = 1000339000,
    VK_IMAGE_LAYOUT_TENSOR_ALIASING_ARM = 1000460000,
    VK_IMAGE_LAYOUT_VIDEO_ENCODE_QUANTIZATION_MAP_KHR = 1000553000,
    VK_IMAGE_LAYOUT_ZERO_INITIALIZED_EXT = 1000620000,
    VK_IMAGE_LAYOUT_MAX_ENUM = 0x7FFFFFFF
} VkImageLayout;

typedef enum VkImageTiling {
    VK_IMAGE_TILING_OPTIMAL = 0,
    VK_IMAGE_TILING_LINEAR = 1,
    VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
    VK_IMAGE_TILING_MAX_ENUM = 0x7FFFFFFF
} VkImageTiling;

typedef enum VkImageType {
    VK_IMAGE_TYPE_1D = 0,
    VK_IMAGE_TYPE_2D = 1,
    VK_IMAGE_TYPE_3D = 2,
    VK_IMAGE_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkImageType;

typedef enum VkImageUsageFlagBits {
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1,
    VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2,
    VK_IMAGE_USAGE_SAMPLED_BIT = 4,
    VK_IMAGE_USAGE_STORAGE_BIT = 8,
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16,
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32,
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64,
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128,
    VK_IMAGE_USAGE_HOST_TRANSFER_BIT = 4194304,
    VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR = 1024,
    VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 2048,
    VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR = 4096,
    VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256,
    VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512,
    VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 256,
    VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT = VK_IMAGE_USAGE_HOST_TRANSFER_BIT,
    VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 8192,
    VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 16384,
    VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR = 32768,
    VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 524288,
    VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI = 262144,
    VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM = 1048576,
    VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM = 2097152,
    VK_IMAGE_USAGE_TENSOR_ALIASING_BIT_ARM = 8388608,
    VK_IMAGE_USAGE_TILE_MEMORY_BIT_QCOM = 134217728,
    VK_IMAGE_USAGE_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR = 33554432,
    VK_IMAGE_USAGE_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR = 67108864,
    VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkImageUsageFlagBits;

typedef enum VkImageViewCreateFlagBits {
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1,
    VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 4,
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2,
    VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkImageViewCreateFlagBits;

typedef enum VkImageViewType {
    VK_IMAGE_VIEW_TYPE_1D = 0,
    VK_IMAGE_VIEW_TYPE_2D = 1,
    VK_IMAGE_VIEW_TYPE_3D = 2,
    VK_IMAGE_VIEW_TYPE_CUBE = 3,
    VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
    VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
    VK_IMAGE_VIEW_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkImageViewType;

typedef enum VkIndirectCommandsTokenTypeEXT {
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_EXECUTION_SET_EXT = 0,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_EXT = 1,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_SEQUENCE_INDEX_EXT = 2,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_EXT = 3,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_EXT = 4,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_EXT = 5,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_EXT = 6,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_COUNT_EXT = 7,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_COUNT_EXT = 8,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_EXT = 9,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV_EXT = 1000202002,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_NV_EXT = 1000202003,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_EXT = 1000328000,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_EXT = 1000328001,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_TRACE_RAYS2_EXT = 1000386004,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkIndirectCommandsTokenTypeEXT;

typedef enum VkSharingMode {
    VK_SHARING_MODE_EXCLUSIVE = 0,
    VK_SHARING_MODE_CONCURRENT = 1,
    VK_SHARING_MODE_MAX_ENUM = 0x7FFFFFFF
} VkSharingMode;

typedef enum VkIndexType {
    VK_INDEX_TYPE_UINT16 = 0,
    VK_INDEX_TYPE_UINT32 = 1,
    VK_INDEX_TYPE_UINT8 = 1000265000,
    VK_INDEX_TYPE_NONE_KHR = 1000165000,
    VK_INDEX_TYPE_NONE_NV = VK_INDEX_TYPE_NONE_KHR,
    VK_INDEX_TYPE_UINT8_EXT = VK_INDEX_TYPE_UINT8,
    VK_INDEX_TYPE_UINT8_KHR = VK_INDEX_TYPE_UINT8,
    VK_INDEX_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkIndexType;

typedef enum VkLogicOp {
    VK_LOGIC_OP_CLEAR = 0,
    VK_LOGIC_OP_AND = 1,
    VK_LOGIC_OP_AND_REVERSE = 2,
    VK_LOGIC_OP_COPY = 3,
    VK_LOGIC_OP_AND_INVERTED = 4,
    VK_LOGIC_OP_NO_OP = 5,
    VK_LOGIC_OP_XOR = 6,
    VK_LOGIC_OP_OR = 7,
    VK_LOGIC_OP_NOR = 8,
    VK_LOGIC_OP_EQUIVALENT = 9,
    VK_LOGIC_OP_INVERT = 10,
    VK_LOGIC_OP_OR_REVERSE = 11,
    VK_LOGIC_OP_COPY_INVERTED = 12,
    VK_LOGIC_OP_OR_INVERTED = 13,
    VK_LOGIC_OP_NAND = 14,
    VK_LOGIC_OP_SET = 15,
    VK_LOGIC_OP_MAX_ENUM = 0x7FFFFFFF
} VkLogicOp;

typedef enum VkMemoryHeapFlagBits {
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = VK_MEMORY_HEAP_MULTI_INSTANCE_BIT,
    VK_MEMORY_HEAP_TILE_MEMORY_BIT_QCOM = 8,
    VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkMemoryHeapFlagBits;

typedef enum VkAccessFlagBits {
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1,
    VK_ACCESS_INDEX_READ_BIT = 2,
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4,
    VK_ACCESS_UNIFORM_READ_BIT = 8,
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16,
    VK_ACCESS_SHADER_READ_BIT = 32,
    VK_ACCESS_SHADER_WRITE_BIT = 64,
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128,
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024,
    VK_ACCESS_TRANSFER_READ_BIT = 2048,
    VK_ACCESS_TRANSFER_WRITE_BIT = 4096,
    VK_ACCESS_HOST_READ_BIT = 8192,
    VK_ACCESS_HOST_WRITE_BIT = 16384,
    VK_ACCESS_MEMORY_READ_BIT = 32768,
    VK_ACCESS_MEMORY_WRITE_BIT = 65536,
    VK_ACCESS_NONE = 0,
    VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728,
    VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576,
    VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288,
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152,
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304,
    VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608,
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR,
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,
    VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216,
    VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608,
    VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072,
    VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144,
    VK_ACCESS_NONE_KHR = VK_ACCESS_NONE,
    VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_EXT = 131072,
    VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_EXT = 262144,
    VK_ACCESS_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkAccessFlagBits;

typedef enum VkMemoryPropertyFlagBits {
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1,
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2,
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4,
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8,
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16,
    VK_MEMORY_PROPERTY_PROTECTED_BIT = 32,
    VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64,
    VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128,
    VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = 256,
    VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkMemoryPropertyFlagBits;

typedef enum VkPhysicalDeviceType {
    VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
    VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
    VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkPhysicalDeviceType;

typedef enum VkPipelineBindPoint {
    VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
    VK_PIPELINE_BIND_POINT_COMPUTE = 1,
    VK_PIPELINE_BIND_POINT_EXECUTION_GRAPH_AMDX = 1000134000,
    VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000,
    VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR,
    VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = 1000369003,
    VK_PIPELINE_BIND_POINT_DATA_GRAPH_ARM = 1000507000,
    VK_PIPELINE_BIND_POINT_MAX_ENUM = 0x7FFFFFFF
} VkPipelineBindPoint;

typedef enum VkPipelineCreateFlagBits {
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1,
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2,
    VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8,
    VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 16,
    VK_PIPELINE_CREATE_DISPATCH_BASE = VK_PIPELINE_CREATE_DISPATCH_BASE_BIT,
    VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 256,
    VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = 512,
    VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT = 134217728,
    VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT = 1073741824,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
    VK_PIPELINE_CREATE_DISPATCH_BASE_BIT_KHR = VK_PIPELINE_CREATE_DISPATCH_BASE_BIT,
    VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = VK_PIPELINE_CREATE_DISPATCH_BASE_BIT,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072,
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096,
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192,
    VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288,
    VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32,
    VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304,
    VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT,
    VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152,
    VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
    VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64,
    VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128,
    VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144,
    VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048,
    VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT,
    VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT,
    VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 536870912,
    VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 8388608,
    VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = 1024,
    VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = 1048576,
    VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 33554432,
    VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 67108864,
    VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 16777216,
    VK_PIPELINE_CREATE_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV = 268435456,
    VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT = VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT,
    VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT = VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT,
    VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineCreateFlagBits;

typedef enum VkPrimitiveTopology {
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
    VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 0x7FFFFFFF
} VkPrimitiveTopology;

typedef enum VkQueryControlFlagBits {
    VK_QUERY_CONTROL_PRECISE_BIT = 1,
    VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkQueryControlFlagBits;

typedef enum VkQueryPipelineStatisticFlagBits {
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1,
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2,
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64,
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512,
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024,
    VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT = 2048,
    VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT = 4096,
    VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI = 8192,
    VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkQueryPipelineStatisticFlagBits;

typedef enum VkQueryResultFlagBits {
    VK_QUERY_RESULT_64_BIT = 1,
    VK_QUERY_RESULT_WAIT_BIT = 2,
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4,
    VK_QUERY_RESULT_PARTIAL_BIT = 8,
    VK_QUERY_RESULT_WITH_STATUS_BIT_KHR = 16,
    VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkQueryResultFlagBits;

typedef enum VkQueryType {
    VK_QUERY_TYPE_OCCLUSION = 0,
    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
    VK_QUERY_TYPE_TIMESTAMP = 2,
    VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = 1000023000,
    VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004,
    VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000,
    VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000,
    VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR = 1000299000,
    VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT = 1000328000,
    VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT = 1000382000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR = 1000386000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR = 1000386001,
    VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT = 1000396000,
    VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT = 1000396001,
    VK_QUERY_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkQueryType;

typedef enum VkQueueFlagBits {
    VK_QUEUE_GRAPHICS_BIT = 1,
    VK_QUEUE_COMPUTE_BIT = 2,
    VK_QUEUE_TRANSFER_BIT = 4,
    VK_QUEUE_SPARSE_BINDING_BIT = 8,
    VK_QUEUE_PROTECTED_BIT = 16,
    VK_QUEUE_VIDEO_DECODE_BIT_KHR = 32,
    VK_QUEUE_VIDEO_ENCODE_BIT_KHR = 64,
    VK_QUEUE_OPTICAL_FLOW_BIT_NV = 256,
    VK_QUEUE_DATA_GRAPH_BIT_ARM = 1024,
    VK_QUEUE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkQueueFlagBits;

typedef enum VkSubpassContents {
    VK_SUBPASS_CONTENTS_INLINE = 0,
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
    VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_EXT = 1000451000,
    VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR = 1000451000,
    VK_SUBPASS_CONTENTS_MAX_ENUM = 0x7FFFFFFF
} VkSubpassContents;

typedef enum VkResult {
    VK_SUCCESS = 0,
    VK_NOT_READY = 1,
    VK_TIMEOUT = 2,
    VK_EVENT_SET = 3,
    VK_EVENT_RESET = 4,
    VK_INCOMPLETE = 5,
    VK_ERROR_OUT_OF_HOST_MEMORY = -1,
    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
    VK_ERROR_INITIALIZATION_FAILED = -3,
    VK_ERROR_DEVICE_LOST = -4,
    VK_ERROR_MEMORY_MAP_FAILED = -5,
    VK_ERROR_LAYER_NOT_PRESENT = -6,
    VK_ERROR_EXTENSION_NOT_PRESENT = -7,
    VK_ERROR_FEATURE_NOT_PRESENT = -8,
    VK_ERROR_INCOMPATIBLE_DRIVER = -9,
    VK_ERROR_TOO_MANY_OBJECTS = -10,
    VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
    VK_ERROR_FRAGMENTED_POOL = -12,
    VK_ERROR_UNKNOWN = -13,
    VK_ERROR_VALIDATION_FAILED = -1000011001,
    VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
    VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
    VK_ERROR_FRAGMENTATION = -1000161000,
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000,
    VK_PIPELINE_COMPILE_REQUIRED = 1000297000,
    VK_ERROR_NOT_PERMITTED = -1000174001,
    VK_ERROR_SURFACE_LOST_KHR = -1000000000,
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
    VK_SUBOPTIMAL_KHR = 1000001003,
    VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
    VK_ERROR_VALIDATION_FAILED_EXT = VK_ERROR_VALIDATION_FAILED,
    VK_ERROR_INVALID_SHADER_NV = -1000012000,
    VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR = -1000023000,
    VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR = -1000023001,
    VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR = -1000023002,
    VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR = -1000023003,
    VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR = -1000023004,
    VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR = -1000023005,
    VK_ERROR_OUT_OF_POOL_MEMORY_KHR = VK_ERROR_OUT_OF_POOL_MEMORY,
    VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VK_ERROR_INVALID_EXTERNAL_HANDLE,
    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
    VK_ERROR_FRAGMENTATION_EXT = VK_ERROR_FRAGMENTATION,
    VK_ERROR_NOT_PERMITTED_EXT = VK_ERROR_NOT_PERMITTED,
    VK_ERROR_NOT_PERMITTED_KHR = VK_ERROR_NOT_PERMITTED,
    VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000,
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
    VK_THREAD_IDLE_KHR = 1000268000,
    VK_THREAD_DONE_KHR = 1000268001,
    VK_OPERATION_DEFERRED_KHR = 1000268002,
    VK_OPERATION_NOT_DEFERRED_KHR = 1000268003,
    VK_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED,
    VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED,
    VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR = -1000299000,
    VK_ERROR_COMPRESSION_EXHAUSTED_EXT = -1000338000,
    VK_INCOMPATIBLE_SHADER_BINARY_EXT = 1000482000,
    VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT = VK_INCOMPATIBLE_SHADER_BINARY_EXT,
    VK_PIPELINE_BINARY_MISSING_KHR = 1000483000,
    VK_ERROR_NOT_ENOUGH_SPACE_KHR = -1000483000,
    VK_RESULT_MAX_ENUM = 0x7FFFFFFF
} VkResult;

typedef enum VkShaderStageFlagBits {
    VK_SHADER_STAGE_VERTEX_BIT = 1,
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2,
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4,
    VK_SHADER_STAGE_GEOMETRY_BIT = 8,
    VK_SHADER_STAGE_FRAGMENT_BIT = 16,
    VK_SHADER_STAGE_COMPUTE_BIT = 32,
    VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
    VK_SHADER_STAGE_ALL = 0x7FFFFFFF,
    VK_SHADER_STAGE_RAYGEN_BIT_KHR = 256,
    VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 512,
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024,
    VK_SHADER_STAGE_MISS_BIT_KHR = 2048,
    VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 4096,
    VK_SHADER_STAGE_CALLABLE_BIT_KHR = 8192,
    VK_SHADER_STAGE_RAYGEN_BIT_NV = VK_SHADER_STAGE_RAYGEN_BIT_KHR,
    VK_SHADER_STAGE_ANY_HIT_BIT_NV = VK_SHADER_STAGE_ANY_HIT_BIT_KHR,
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR,
    VK_SHADER_STAGE_MISS_BIT_NV = VK_SHADER_STAGE_MISS_BIT_KHR,
    VK_SHADER_STAGE_INTERSECTION_BIT_NV = VK_SHADER_STAGE_INTERSECTION_BIT_KHR,
    VK_SHADER_STAGE_CALLABLE_BIT_NV = VK_SHADER_STAGE_CALLABLE_BIT_KHR,
    VK_SHADER_STAGE_TASK_BIT_NV = 64,
    VK_SHADER_STAGE_MESH_BIT_NV = 128,
    VK_SHADER_STAGE_TASK_BIT_EXT = 64,
    VK_SHADER_STAGE_MESH_BIT_EXT = 128,
    VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 16384,
    VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI = 524288,
    VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkShaderStageFlagBits;

typedef enum VkSparseMemoryBindFlagBits {
    VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1,
    VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSparseMemoryBindFlagBits;

typedef enum VkStencilFaceFlagBits {
    VK_STENCIL_FACE_FRONT_BIT = 1,
    VK_STENCIL_FACE_BACK_BIT = 2,
    VK_STENCIL_FACE_FRONT_AND_BACK = 0x00000003,
    VK_STENCIL_FRONT_AND_BACK = VK_STENCIL_FACE_FRONT_AND_BACK,
    VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkStencilFaceFlagBits;

typedef enum VkStencilOp {
    VK_STENCIL_OP_KEEP = 0,
    VK_STENCIL_OP_ZERO = 1,
    VK_STENCIL_OP_REPLACE = 2,
    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
    VK_STENCIL_OP_INVERT = 5,
    VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
    VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
    VK_STENCIL_OP_MAX_ENUM = 0x7FFFFFFF
} VkStencilOp;

typedef enum VkStructureType {
    VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
    VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002,
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004,
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005,
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000,
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000,
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002,
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001,
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002,
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003,
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004,
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001,
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002,
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = 53,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = 54,
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 1000192000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = 1000215000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = 1000245000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 1000276000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 1000295000,
    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = 1000295001,
    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = 1000295002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 1000297000,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = 1000314000,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = 1000314001,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = 1000314002,
    VK_STRUCTURE_TYPE_DEPENDENCY_INFO = 1000314003,
    VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = 1000314004,
    VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = 1000314005,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = 1000314006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = 1000314007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = 1000325000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 1000335000,
    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = 1000337000,
    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = 1000337001,
    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = 1000337002,
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = 1000337003,
    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = 1000337004,
    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = 1000337005,
    VK_STRUCTURE_TYPE_BUFFER_COPY_2 = 1000337006,
    VK_STRUCTURE_TYPE_IMAGE_COPY_2 = 1000337007,
    VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = 1000337008,
    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = 1000337009,
    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = 1000337010,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 1000225000,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1000225001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 1000225002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 1000138000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1000138001,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 1000138002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 1000138003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 1000066000,
    VK_STRUCTURE_TYPE_RENDERING_INFO = 1000044000,
    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = 1000044001,
    VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = 1000044002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = 1000044003,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = 1000044004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = 1000280000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = 1000280001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1000281001,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = 1000360000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 1000413000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1000413001,
    VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = 1000413002,
    VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = 1000413003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_FEATURES = 55,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_PROPERTIES = 56,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO = 1000174000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES = 1000388000,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES = 1000388001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES = 1000416000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES = 1000528000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES = 1000544000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES = 1000259000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO = 1000259001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES = 1000259002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES = 1000525000,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO = 1000190001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES = 1000190002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES = 1000265000,
    VK_STRUCTURE_TYPE_MEMORY_MAP_INFO = 1000271000,
    VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO = 1000271001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES = 1000470000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES = 1000470001,
    VK_STRUCTURE_TYPE_RENDERING_AREA_INFO = 1000470003,
    VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO = 1000470004,
    VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2 = 1000338002,
    VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2 = 1000338003,
    VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO = 1000470005,
    VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO = 1000470006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES = 1000080000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES = 1000232000,
    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO = 1000232001,
    VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO = 1000232002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES = 1000545000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES = 1000545001,
    VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS = 1000545002,
    VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO = 1000545003,
    VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO = 1000545004,
    VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO = 1000545005,
    VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO = 1000545006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES = 1000466000,
    VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO = 1000068000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES = 1000068001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES = 1000068002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES = 1000270000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES = 1000270001,
    VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY = 1000270002,
    VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY = 1000270003,
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO = 1000270004,
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO = 1000270005,
    VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO = 1000270006,
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO = 1000270007,
    VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE = 1000270008,
    VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY = 1000270009,
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
    VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR = 1000023000,
    VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = 1000023001,
    VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR = 1000023002,
    VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR = 1000023003,
    VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR = 1000023004,
    VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = 1000023005,
    VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000023006,
    VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = 1000023007,
    VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = 1000023008,
    VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = 1000023009,
    VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = 1000023010,
    VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR = 1000023011,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR = 1000023012,
    VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR = 1000023013,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = 1000023014,
    VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = 1000023015,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR = 1000023016,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR = 1000024000,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR = 1000024001,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR = 1000024002,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
    VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = 1000029000,
    VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = 1000029001,
    VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = 1000029002,
    VK_STRUCTURE_TYPE_CU_MODULE_TEXTURING_MODE_CREATE_INFO_NVX = 1000029004,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR = 1000038000,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000038001,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = 1000038002,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR = 1000038003,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR = 1000038004,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR = 1000038005,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR = 1000038006,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR = 1000038007,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR = 1000038008,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR = 1000038009,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR = 1000038010,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR = 1000038011,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR = 1000038012,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000038013,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR = 1000039000,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000039001,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = 1000039002,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR = 1000039003,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR = 1000039004,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR = 1000039005,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR = 1000039006,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR = 1000039007,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR = 1000039009,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR = 1000039010,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR = 1000039011,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR = 1000039012,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR = 1000039013,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000039014,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR = 1000040000,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR = 1000040001,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR = 1000040003,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000040004,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = 1000040005,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR = 1000040006,
    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
    VK_STRUCTURE_TYPE_RENDERING_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_INFO,
    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO,
    VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
    VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
    VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
    VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = 1000044009,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
    VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_END_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG = 1000110000,
    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001,
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002,
    VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003,
    VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004,
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005,
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006,
    VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_RESERVATION_INFO_KHR = 1000116007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,
    VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = 1000129006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_FEATURES_AMDX = 1000134000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_PROPERTIES_AMDX = 1000134001,
    VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_SCRATCH_SIZE_AMDX = 1000134002,
    VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_CREATE_INFO_AMDX = 1000134003,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_NODE_CREATE_INFO_AMDX = 1000134004,
    VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD = 1000044008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_BFLOAT16_FEATURES_KHR = 1000141000,
    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009,
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010,
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011,
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015,
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
    VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV = VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = 1000158006,
    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR = 1000163000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR = 1000163001,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
    VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
    VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
    VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
    VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
    VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000,
    VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000,
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR = 1000187000,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000187001,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = 1000187002,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR = 1000187003,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR = 1000187004,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR = 1000187005,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES,
    VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008,
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1000314009,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000,
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
    VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001,
    VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002,
    VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003,
    VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004,
    VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
    VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
    VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
    VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES,
    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
    VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = 1000044007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES,
    VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000,
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004,
    VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000044006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES,
    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO,
    VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR = 1000235000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
    VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
    VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES,
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1000248000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1000254000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1000254001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1000254002,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
    VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000,
    VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES,
    VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT = VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY,
    VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT = VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY,
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT = VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO,
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT = VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO,
    VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT = VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO,
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT = VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO,
    VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT = VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE,
    VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT = VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY,
    VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_MAP_INFO,
    VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT = 1000272000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT = 1000272001,
    VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT = 1000272002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = 1000273000,
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT = 1000274000,
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT = 1000274001,
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT = 1000274002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT = 1000275000,
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT = 1000275001,
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT = 1000275002,
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT = 1000275003,
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT = 1000275004,
    VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT = 1000275005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000,
    VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004,
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005,
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1000278000,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1000278001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000,
    VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT = 1000283000,
    VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT = 1000283001,
    VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT = 1000283002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000,
    VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001,
    VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002,
    VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV = 1000292000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV = 1000292001,
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV = 1000292002,
    VK_STRUCTURE_TYPE_PRESENT_ID_KHR = 1000294000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = 1000294001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES,
    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO,
    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR = 1000299000,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR = 1000299001,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR = 1000299002,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR = 1000299003,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR = 1000299004,
    VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR = 1000299005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = 1000299006,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR = 1000299007,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = 1000299008,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR = 1000299009,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000299010,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000,
    VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001,
    VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV = 1000307000,
    VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV = 1000307001,
    VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV = 1000307002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV = 1000307003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV = 1000307004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_SHADING_FEATURES_QCOM = 1000309000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_SHADING_PROPERTIES_QCOM = 1000309001,
    VK_STRUCTURE_TYPE_RENDER_PASS_TILE_SHADING_CREATE_INFO_QCOM = 1000309002,
    VK_STRUCTURE_TYPE_PER_TILE_BEGIN_INFO_QCOM = 1000309003,
    VK_STRUCTURE_TYPE_PER_TILE_END_INFO_QCOM = 1000309004,
    VK_STRUCTURE_TYPE_DISPATCH_TILE_INFO_QCOM = 1000309005,
    VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV = 1000310000,
    VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT = 1000311000,
    VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT = 1000311001,
    VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT = 1000311002,
    VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT = 1000311003,
    VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT = 1000311004,
    VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT = 1000311005,
    VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT = 1000311006,
    VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT = 1000311007,
    VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT = 1000311008,
    VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT = 1000311009,
    VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311010,
    VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311011,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_MEMORY_BARRIER_2,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2,
    VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = VK_STRUCTURE_TYPE_DEPENDENCY_INFO,
    VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = VK_STRUCTURE_TYPE_SUBMIT_INFO_2,
    VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT = 1000316000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT = 1000316001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT = 1000316002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT = 1000316003,
    VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT = 1000316004,
    VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316005,
    VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316006,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316007,
    VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316008,
    VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT = 1000316010,
    VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT = 1000316011,
    VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT = 1000316012,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316009,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT = 1000320000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT = 1000320001,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT = 1000320002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD = 1000321000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR = 1000203000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR = 1000322000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR = 1000323000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001,
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = 1000327000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = 1000327001,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = 1000327002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT = 1000328000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT = 1000328001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1000330000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001,
    VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000,
    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2,
    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2,
    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2,
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2,
    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2,
    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2,
    VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = VK_STRUCTURE_TYPE_BUFFER_COPY_2,
    VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = VK_STRUCTURE_TYPE_IMAGE_COPY_2,
    VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = VK_STRUCTURE_TYPE_IMAGE_BLIT_2,
    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2,
    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT = 1000338000,
    VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT = 1000338001,
    VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT = VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2,
    VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT = VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2,
    VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT = 1000338004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT = 1000339000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT = 1000341000,
    VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT = 1000341001,
    VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT = 1000341002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM = 1000342000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = 1000344000,
    VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = 1000351000,
    VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = 1000351002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1000352000,
    VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001,
    VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = 1000353000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT = 1000354000,
    VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT = 1000354001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = 1000355000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = 1000355001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = 1000356000,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_MODE_FIFO_LATEST_READY_FEATURES_EXT = 1000361000,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364000,
    VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1000364001,
    VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364002,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365000,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365001,
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 1000366000,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1000366001,
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 1000366002,
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 1000366003,
    VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = 1000366004,
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 1000366005,
    VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = 1000366006,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 1000366007,
    VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = 1000366008,
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 1000366009,
    VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = 1000369000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = 1000369001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = 1000369002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = 1000370000,
    VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = 1000371000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = 1000371001,
    VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT = 1000372000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT = 1000372001,
    VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT = 1000375000,
    VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT = 1000375001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT = 1000376000,
    VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT = 1000376001,
    VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT = 1000376002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1000377000,
    VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 1000378000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1000381000,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1000381001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT = 1000382000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR = 1000386000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_UNTYPED_POINTERS_FEATURES_KHR = 1000387000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT = VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_RGB_CONVERSION_FEATURES_VALVE = 1000390000,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_RGB_CONVERSION_CAPABILITIES_VALVE = 1000390001,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_PROFILE_RGB_CONVERSION_INFO_VALVE = 1000390002,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_RGB_CONVERSION_CREATE_INFO_VALVE = 1000390003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = 1000391000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = 1000391001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = 1000392000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = 1000392001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT = 1000393000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT = 1000395000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT = 1000395001,
    VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT = 1000396000,
    VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT = 1000396001,
    VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT = 1000396002,
    VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT = 1000396003,
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT = 1000396004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT = 1000396005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT = 1000396006,
    VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT = 1000396007,
    VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT = 1000396008,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT = 1000396009,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV = 1000397000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_PROPERTIES_NV = 1000397001,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_DISPLACEMENT_MICROMAP_NV = 1000397002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI = 1000404000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI = 1000404001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI = 1000404002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = 1000411000,
    VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = 1000411001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = 1000412000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES,
    VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS,
    VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM = 1000415000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM = 1000417000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM = 1000417001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM = 1000417002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT = 1000418000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT = 1000418001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = 1000420000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = 1000420001,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = 1000420002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT = 1000421000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT = 1000422000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM = 1000424000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM = 1000424001,
    VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM = 1000424002,
    VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM = 1000424003,
    VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM = 1000424004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = 1000425000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = 1000425001,
    VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = 1000425002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV = 1000426000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV = 1000426001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV = 1000427000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV = 1000427001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV = 1000428000,
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV = 1000428001,
    VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV = 1000428002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_LINEAR_SWEPT_SPHERES_FEATURES_NV = 1000429008,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_LINEAR_SWEPT_SPHERES_DATA_NV = 1000429009,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_SPHERES_DATA_NV = 1000429010,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = 1000430000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR = 1000434000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT = 1000437000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM = 1000440000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM = 1000440001,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM = 1000440002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT = 1000451000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT = 1000451001,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT = 1000453000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT = 1000455000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT = 1000455001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT = 1000458000,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT = 1000458001,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000458002,
    VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT = 1000458003,
    VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG = 1000459000,
    VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG = 1000459001,
    VK_STRUCTURE_TYPE_TENSOR_CREATE_INFO_ARM = 1000460000,
    VK_STRUCTURE_TYPE_TENSOR_VIEW_CREATE_INFO_ARM = 1000460001,
    VK_STRUCTURE_TYPE_BIND_TENSOR_MEMORY_INFO_ARM = 1000460002,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_TENSOR_ARM = 1000460003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TENSOR_PROPERTIES_ARM = 1000460004,
    VK_STRUCTURE_TYPE_TENSOR_FORMAT_PROPERTIES_ARM = 1000460005,
    VK_STRUCTURE_TYPE_TENSOR_DESCRIPTION_ARM = 1000460006,
    VK_STRUCTURE_TYPE_TENSOR_MEMORY_REQUIREMENTS_INFO_ARM = 1000460007,
    VK_STRUCTURE_TYPE_TENSOR_MEMORY_BARRIER_ARM = 1000460008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TENSOR_FEATURES_ARM = 1000460009,
    VK_STRUCTURE_TYPE_DEVICE_TENSOR_MEMORY_REQUIREMENTS_ARM = 1000460010,
    VK_STRUCTURE_TYPE_COPY_TENSOR_INFO_ARM = 1000460011,
    VK_STRUCTURE_TYPE_TENSOR_COPY_ARM = 1000460012,
    VK_STRUCTURE_TYPE_TENSOR_DEPENDENCY_INFO_ARM = 1000460013,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_TENSOR_ARM = 1000460014,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_TENSOR_INFO_ARM = 1000460015,
    VK_STRUCTURE_TYPE_EXTERNAL_TENSOR_PROPERTIES_ARM = 1000460016,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_TENSOR_CREATE_INFO_ARM = 1000460017,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_TENSOR_FEATURES_ARM = 1000460018,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_TENSOR_PROPERTIES_ARM = 1000460019,
    VK_STRUCTURE_TYPE_DESCRIPTOR_GET_TENSOR_INFO_ARM = 1000460020,
    VK_STRUCTURE_TYPE_TENSOR_CAPTURE_DESCRIPTOR_DATA_INFO_ARM = 1000460021,
    VK_STRUCTURE_TYPE_TENSOR_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_ARM = 1000460022,
    VK_STRUCTURE_TYPE_FRAME_BOUNDARY_TENSORS_ARM = 1000460023,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT = 1000462000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT = 1000462001,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT = 1000462002,
    VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT = 1000462003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT = 1000342000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV = 1000464000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV = 1000464001,
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV = 1000464002,
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV = 1000464003,
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV = 1000464004,
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV = 1000464005,
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV = 1000464010,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT = 1000465000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID = 1000468000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID = 1000468001,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID = 1000468002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES,
    VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_AREA_INFO,
    VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO,
    VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR = VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2,
    VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR = VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2,
    VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO,
    VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ANTI_LAG_FEATURES_AMD = 1000476000,
    VK_STRUCTURE_TYPE_ANTI_LAG_DATA_AMD = 1000476001,
    VK_STRUCTURE_TYPE_ANTI_LAG_PRESENTATION_INFO_AMD = 1000476002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DENSE_GEOMETRY_FORMAT_FEATURES_AMDX = 1000478000,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DENSE_GEOMETRY_FORMAT_TRIANGLES_DATA_AMDX = 1000478001,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_ID_2_KHR = 1000479000,
    VK_STRUCTURE_TYPE_PRESENT_ID_2_KHR = 1000479001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_2_FEATURES_KHR = 1000479002,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_WAIT_2_KHR = 1000480000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_2_FEATURES_KHR = 1000480001,
    VK_STRUCTURE_TYPE_PRESENT_WAIT_2_INFO_KHR = 1000480002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR = 1000481000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT = 1000482000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT = 1000482001,
    VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT = 1000482002,
    VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_FEATURES_KHR = 1000483000,
    VK_STRUCTURE_TYPE_PIPELINE_BINARY_CREATE_INFO_KHR = 1000483001,
    VK_STRUCTURE_TYPE_PIPELINE_BINARY_INFO_KHR = 1000483002,
    VK_STRUCTURE_TYPE_PIPELINE_BINARY_KEY_KHR = 1000483003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_PROPERTIES_KHR = 1000483004,
    VK_STRUCTURE_TYPE_RELEASE_CAPTURED_PIPELINE_DATA_INFO_KHR = 1000483005,
    VK_STRUCTURE_TYPE_PIPELINE_BINARY_DATA_INFO_KHR = 1000483006,
    VK_STRUCTURE_TYPE_PIPELINE_CREATE_INFO_KHR = 1000483007,
    VK_STRUCTURE_TYPE_DEVICE_PIPELINE_BINARY_INTERNAL_CACHE_CONTROL_KHR = 1000483008,
    VK_STRUCTURE_TYPE_PIPELINE_BINARY_HANDLES_INFO_KHR = 1000483009,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM = 1000484000,
    VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM = 1000484001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC = 1000485000,
    VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC = 1000485001,
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_KHR = 1000274000,
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_KHR = 1000274001,
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_KHR = 1000274002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_KHR = 1000275000,
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_KHR = 1000275001,
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_KHR = 1000275002,
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_KHR = 1000275003,
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_KHR = 1000275004,
    VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_KHR = 1000275005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM = 1000488000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV = 1000490000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV = 1000490001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_FEATURES_NV = 1000491000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_PROPERTIES_NV = 1000491001,
    VK_STRUCTURE_TYPE_COOPERATIVE_VECTOR_PROPERTIES_NV = 1000491002,
    VK_STRUCTURE_TYPE_CONVERT_COOPERATIVE_VECTOR_MATRIX_INFO_NV = 1000491004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV = 1000492000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV = 1000492001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT = 1000351000,
    VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT = 1000351002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT = 1000495000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT = 1000495001,
    VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT = 1000496000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM = 1000497000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM = 1000497001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT = 1000498000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT = 1000499000,
    VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV = 1000505000,
    VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV = 1000505001,
    VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV = 1000505002,
    VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV = 1000505003,
    VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV = 1000505004,
    VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV = 1000505005,
    VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV = 1000505006,
    VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV = 1000505007,
    VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV = 1000505008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR = 1000506000,
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR = 1000506001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR = 1000506002,
    VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_CREATE_INFO_ARM = 1000507000,
    VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_SESSION_CREATE_INFO_ARM = 1000507001,
    VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_RESOURCE_INFO_ARM = 1000507002,
    VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_CONSTANT_ARM = 1000507003,
    VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_SESSION_MEMORY_REQUIREMENTS_INFO_ARM = 1000507004,
    VK_STRUCTURE_TYPE_BIND_DATA_GRAPH_PIPELINE_SESSION_MEMORY_INFO_ARM = 1000507005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DATA_GRAPH_FEATURES_ARM = 1000507006,
    VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_SHADER_MODULE_CREATE_INFO_ARM = 1000507007,
    VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_PROPERTY_QUERY_RESULT_ARM = 1000507008,
    VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_INFO_ARM = 1000507009,
    VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_COMPILER_CONTROL_CREATE_INFO_ARM = 1000507010,
    VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_SESSION_BIND_POINT_REQUIREMENTS_INFO_ARM = 1000507011,
    VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_SESSION_BIND_POINT_REQUIREMENT_ARM = 1000507012,
    VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_IDENTIFIER_CREATE_INFO_ARM = 1000507013,
    VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_DISPATCH_INFO_ARM = 1000507014,
    VK_STRUCTURE_TYPE_DATA_GRAPH_PROCESSING_ENGINE_CREATE_INFO_ARM = 1000507016,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_DATA_GRAPH_PROCESSING_ENGINE_PROPERTIES_ARM = 1000507017,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_DATA_GRAPH_PROPERTIES_ARM = 1000507018,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_QUEUE_FAMILY_DATA_GRAPH_PROCESSING_ENGINE_INFO_ARM = 1000507019,
    VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_CONSTANT_TENSOR_SEMI_STRUCTURED_SPARSITY_INFO_ARM = 1000507015,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM = 1000510000,
    VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM = 1000510001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_KHR = 1000201000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_PROPERTIES_KHR = 1000511000,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_CAPABILITIES_KHR = 1000512000,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PICTURE_INFO_KHR = 1000512001,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PROFILE_INFO_KHR = 1000512003,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000512004,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR = 1000512005,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_CAPABILITIES_KHR = 1000513000,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000513001,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PICTURE_INFO_KHR = 1000513002,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_DPB_SLOT_INFO_KHR = 1000513003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_AV1_FEATURES_KHR = 1000513004,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PROFILE_INFO_KHR = 1000513005,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_INFO_KHR = 1000513006,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_LAYER_INFO_KHR = 1000513007,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUALITY_LEVEL_PROPERTIES_KHR = 1000513008,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_CREATE_INFO_KHR = 1000513009,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_GOP_REMAINING_FRAME_INFO_KHR = 1000513010,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_DECODE_VP9_FEATURES_KHR = 1000514000,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_VP9_CAPABILITIES_KHR = 1000514001,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_VP9_PICTURE_INFO_KHR = 1000514002,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_VP9_PROFILE_INFO_KHR = 1000514003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR = 1000515000,
    VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR = 1000515001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV = 1000516000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM = 1000518000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM = 1000518001,
    VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM = 1000518002,
    VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM = 1000519000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM = 1000519001,
    VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM = 1000519002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM = 1000520000,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM = 1000520001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM = 1000521000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT = 1000524000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFIED_IMAGE_LAYOUTS_FEATURES_KHR = 1000527000,
    VK_STRUCTURE_TYPE_ATTACHMENT_FEEDBACK_LOOP_INFO_EXT = 1000527001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES,
    VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX = 1000529000,
    VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX = 1000529001,
    VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX = 1000529002,
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX = 1000529003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX = 1000529004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT = 1000530000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES,
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR = 1000184000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES,
    VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR = VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS,
    VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR = VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO,
    VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR = VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO,
    VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR = VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO,
    VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR = VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO,
    VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT = 1000545007,
    VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT = 1000545008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV = 1000546000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_MEMORY_HEAP_FEATURES_QCOM = 1000547000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_MEMORY_HEAP_PROPERTIES_QCOM = 1000547001,
    VK_STRUCTURE_TYPE_TILE_MEMORY_REQUIREMENTS_QCOM = 1000547002,
    VK_STRUCTURE_TYPE_TILE_MEMORY_BIND_INFO_QCOM = 1000547003,
    VK_STRUCTURE_TYPE_TILE_MEMORY_SIZE_INFO_QCOM = 1000547004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_KHR = 1000549000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_KHR = 1000426001,
    VK_STRUCTURE_TYPE_COPY_MEMORY_INDIRECT_INFO_KHR = 1000549002,
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INDIRECT_INFO_KHR = 1000549003,
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_STEREO_CREATE_INFO_NV = 1000551000,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_STEREO_PROPERTIES_NV = 1000551001,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_INTRA_REFRESH_CAPABILITIES_KHR = 1000552000,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_INTRA_REFRESH_CREATE_INFO_KHR = 1000552001,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_INTRA_REFRESH_INFO_KHR = 1000552002,
    VK_STRUCTURE_TYPE_VIDEO_REFERENCE_INTRA_REFRESH_INFO_KHR = 1000552003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_INTRA_REFRESH_FEATURES_KHR = 1000552004,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_CAPABILITIES_KHR = 1000553000,
    VK_STRUCTURE_TYPE_VIDEO_FORMAT_QUANTIZATION_MAP_PROPERTIES_KHR = 1000553001,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_INFO_KHR = 1000553002,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000553005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUANTIZATION_MAP_FEATURES_KHR = 1000553009,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUANTIZATION_MAP_CAPABILITIES_KHR = 1000553003,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUANTIZATION_MAP_CAPABILITIES_KHR = 1000553004,
    VK_STRUCTURE_TYPE_VIDEO_FORMAT_H265_QUANTIZATION_MAP_PROPERTIES_KHR = 1000553006,
    VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUANTIZATION_MAP_CAPABILITIES_KHR = 1000553007,
    VK_STRUCTURE_TYPE_VIDEO_FORMAT_AV1_QUANTIZATION_MAP_PROPERTIES_KHR = 1000553008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV = 1000555000,
    VK_STRUCTURE_TYPE_EXTERNAL_COMPUTE_QUEUE_DEVICE_CREATE_INFO_NV = 1000556000,
    VK_STRUCTURE_TYPE_EXTERNAL_COMPUTE_QUEUE_CREATE_INFO_NV = 1000556001,
    VK_STRUCTURE_TYPE_EXTERNAL_COMPUTE_QUEUE_DATA_PARAMS_NV = 1000556002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_COMPUTE_QUEUE_PROPERTIES_NV = 1000556003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR = 1000558000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMMAND_BUFFER_INHERITANCE_FEATURES_NV = 1000559000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR = 1000562000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR = 1000562001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR = 1000562002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_KHR = 1000562003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_VULKAN_PROPERTIES_KHR = 1000562004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV = 1000563000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT = 1000564000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT8_FEATURES_EXT = 1000567000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV = 1000568000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_FEATURES_NV = 1000569000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_PROPERTIES_NV = 1000569001,
    VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_CLUSTERS_BOTTOM_LEVEL_INPUT_NV = 1000569002,
    VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_TRIANGLE_CLUSTER_INPUT_NV = 1000569003,
    VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_MOVE_OBJECTS_INPUT_NV = 1000569004,
    VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_INPUT_INFO_NV = 1000569005,
    VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_COMMANDS_INFO_NV = 1000569006,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CLUSTER_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000569007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_FEATURES_NV = 1000570000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_PROPERTIES_NV = 1000570001,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_PARTITIONED_ACCELERATION_STRUCTURE_NV = 1000570002,
    VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCES_INPUT_NV = 1000570003,
    VK_STRUCTURE_TYPE_BUILD_PARTITIONED_ACCELERATION_STRUCTURE_INFO_NV = 1000570004,
    VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_FLAGS_NV = 1000570005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_EXT = 1000572000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_EXT = 1000572001,
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_EXT = 1000572002,
    VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_CREATE_INFO_EXT = 1000572003,
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_EXT = 1000572004,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_EXT = 1000572006,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_EXT = 1000572007,
    VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_PIPELINE_EXT = 1000572008,
    VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_SHADER_EXT = 1000572009,
    VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_PIPELINE_INFO_EXT = 1000572010,
    VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_INFO_EXT = 1000572011,
    VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_LAYOUT_INFO_EXT = 1000572012,
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_PIPELINE_INFO_EXT = 1000572013,
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_SHADER_INFO_EXT = 1000572014,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_8_FEATURES_KHR = 1000574000,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER_ACCESS_FLAGS_3_KHR = 1000574002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA = 1000575000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA = 1000575001,
    VK_STRUCTURE_TYPE_IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA = 1000575002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_CONTROL_FEATURES_EXT = 1000582000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLAMP_CONTROL_CREATE_INFO_EXT = 1000582001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_9_FEATURES_KHR = 1000584000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_9_PROPERTIES_KHR = 1000584001,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_OWNERSHIP_TRANSFER_PROPERTIES_KHR = 1000584002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_2_FEATURES_KHR = 1000586000,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_INLINE_SESSION_PARAMETERS_INFO_KHR = 1000586001,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_INLINE_SESSION_PARAMETERS_INFO_KHR = 1000586002,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_INLINE_SESSION_PARAMETERS_INFO_KHR = 1000586003,
    VK_STRUCTURE_TYPE_SURFACE_CREATE_INFO_OHOS = 1000685000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HDR_VIVID_FEATURES_HUAWEI = 1000590000,
    VK_STRUCTURE_TYPE_HDR_VIVID_DYNAMIC_METADATA_HUAWEI = 1000590001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_FEATURES_NV = 1000593000,
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_PROPERTIES_NV = 1000593001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_PROPERTIES_NV = 1000593002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_OPACITY_MICROMAP_FEATURES_ARM = 1000596000,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_METAL_HANDLE_INFO_EXT = 1000602000,
    VK_STRUCTURE_TYPE_MEMORY_METAL_HANDLE_PROPERTIES_EXT = 1000602001,
    VK_STRUCTURE_TYPE_MEMORY_GET_METAL_HANDLE_INFO_EXT = 1000602002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_KHR = 1000421000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_ROBUSTNESS_FEATURES_EXT = 1000608000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FORMAT_PACK_FEATURES_ARM = 1000609000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_LAYERED_FEATURES_VALVE = 1000611000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_LAYERED_PROPERTIES_VALVE = 1000611001,
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_DENSITY_MAP_LAYERED_CREATE_INFO_VALVE = 1000611002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_KHR = 1000286000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_KHR = 1000286001,
    VK_STRUCTURE_TYPE_SET_PRESENT_CONFIG_NV = 1000613000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_METERING_FEATURES_NV = 1000613001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_EXT = 1000425000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_EXT = 1000425001,
    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_EXT = 1000425002,
    VK_STRUCTURE_TYPE_RENDERING_END_INFO_EXT = 1000619003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_DEVICE_MEMORY_FEATURES_EXT = 1000620000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_MODE_FIFO_LATEST_READY_FEATURES_KHR = 1000361000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CACHE_INCREMENTAL_MODE_FEATURES_SEC = 1000637000,
    VK_STRUCTURE_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkStructureType;

typedef enum VkSystemAllocationScope {
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
    VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 0x7FFFFFFF
} VkSystemAllocationScope;

typedef enum VkInternalAllocationType {
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
    VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkInternalAllocationType;

typedef enum VkSamplerAddressMode {
    VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
    VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 0x7FFFFFFF
} VkSamplerAddressMode;

typedef enum VkFilter {
    VK_FILTER_NEAREST = 0,
    VK_FILTER_LINEAR = 1,
    VK_FILTER_CUBIC_IMG = 1000015000,
    VK_FILTER_CUBIC_EXT = 1000015000,
    VK_FILTER_MAX_ENUM = 0x7FFFFFFF
} VkFilter;

typedef enum VkSamplerMipmapMode {
    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
    VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
    VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 0x7FFFFFFF
} VkSamplerMipmapMode;

typedef enum VkVertexInputRate {
    VK_VERTEX_INPUT_RATE_VERTEX = 0,
    VK_VERTEX_INPUT_RATE_INSTANCE = 1,
    VK_VERTEX_INPUT_RATE_MAX_ENUM = 0x7FFFFFFF
} VkVertexInputRate;

typedef enum VkPipelineStageFlagBits {
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1,
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2,
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4,
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8,
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16,
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32,
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64,
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128,
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256,
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512,
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024,
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048,
    VK_PIPELINE_STAGE_TRANSFER_BIT = 4096,
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192,
    VK_PIPELINE_STAGE_HOST_BIT = 16384,
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768,
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536,
    VK_PIPELINE_STAGE_NONE = 0,
    VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216,
    VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144,
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432,
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152,
    VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304,
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR,
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288,
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576,
    VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608,
    VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304,
    VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072,
    VK_PIPELINE_STAGE_NONE_KHR = VK_PIPELINE_STAGE_NONE,
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT = 524288,
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT = 1048576,
    VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_EXT = 131072,
    VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineStageFlagBits;

typedef enum VkSparseImageFormatFlagBits {
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1,
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2,
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4,
    VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSparseImageFormatFlagBits;

typedef enum VkClusterAccelerationStructureIndexFormatFlagBitsNV {
    VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_8BIT_NV = 1,
    VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_16BIT_NV = 2,
    VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_32BIT_NV = 4,
    VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkClusterAccelerationStructureIndexFormatFlagBitsNV;

typedef enum VkClusterAccelerationStructureTypeNV {
    VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_CLUSTERS_BOTTOM_LEVEL_NV = 0,
    VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_TRIANGLE_CLUSTER_NV = 1,
    VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_TRIANGLE_CLUSTER_TEMPLATE_NV = 2,
    VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkClusterAccelerationStructureTypeNV;

typedef enum VkClusterAccelerationStructureOpTypeNV {
    VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_MOVE_OBJECTS_NV = 0,
    VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_CLUSTERS_BOTTOM_LEVEL_NV = 1,
    VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_NV = 2,
    VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_TEMPLATE_NV = 3,
    VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_INSTANTIATE_TRIANGLE_CLUSTER_NV = 4,
    VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_GET_CLUSTER_TEMPLATE_INDICES_NV = 5,
    VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkClusterAccelerationStructureOpTypeNV;

typedef enum VkClusterAccelerationStructureOpModeNV {
    VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_IMPLICIT_DESTINATIONS_NV = 0,
    VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_EXPLICIT_DESTINATIONS_NV = 1,
    VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_COMPUTE_SIZES_NV = 2,
    VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_MAX_ENUM_NV = 0x7FFFFFFF
} VkClusterAccelerationStructureOpModeNV;

typedef enum VkSampleCountFlagBits {
    VK_SAMPLE_COUNT_1_BIT = 1,
    VK_SAMPLE_COUNT_2_BIT = 2,
    VK_SAMPLE_COUNT_4_BIT = 4,
    VK_SAMPLE_COUNT_8_BIT = 8,
    VK_SAMPLE_COUNT_16_BIT = 16,
    VK_SAMPLE_COUNT_32_BIT = 32,
    VK_SAMPLE_COUNT_64_BIT = 64,
    VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSampleCountFlagBits;

typedef enum VkAttachmentDescriptionFlagBits {
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1,
    VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkAttachmentDescriptionFlagBits;

typedef enum VkDescriptorPoolCreateFlagBits {
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1,
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2,
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT,
    VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = 4,
    VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT = 4,
    VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV = 8,
    VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV = 16,
    VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkDescriptorPoolCreateFlagBits;

typedef enum VkDependencyFlagBits {
    VK_DEPENDENCY_BY_REGION_BIT = 1,
    VK_DEPENDENCY_DEVICE_GROUP_BIT = 4,
    VK_DEPENDENCY_VIEW_LOCAL_BIT = 2,
    VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = VK_DEPENDENCY_VIEW_LOCAL_BIT,
    VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = VK_DEPENDENCY_DEVICE_GROUP_BIT,
    VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT = 8,
    VK_DEPENDENCY_QUEUE_FAMILY_OWNERSHIP_TRANSFER_USE_ALL_STAGES_BIT_KHR = 32,
    VK_DEPENDENCY_ASYMMETRIC_EVENT_BIT_KHR = 64,
    VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkDependencyFlagBits;

typedef enum VkObjectType {
    VK_OBJECT_TYPE_UNKNOWN = 0,
    VK_OBJECT_TYPE_INSTANCE = 1,
    VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
    VK_OBJECT_TYPE_DEVICE = 3,
    VK_OBJECT_TYPE_QUEUE = 4,
    VK_OBJECT_TYPE_SEMAPHORE = 5,
    VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
    VK_OBJECT_TYPE_FENCE = 7,
    VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
    VK_OBJECT_TYPE_BUFFER = 9,
    VK_OBJECT_TYPE_IMAGE = 10,
    VK_OBJECT_TYPE_EVENT = 11,
    VK_OBJECT_TYPE_QUERY_POOL = 12,
    VK_OBJECT_TYPE_BUFFER_VIEW = 13,
    VK_OBJECT_TYPE_IMAGE_VIEW = 14,
    VK_OBJECT_TYPE_SHADER_MODULE = 15,
    VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
    VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
    VK_OBJECT_TYPE_RENDER_PASS = 18,
    VK_OBJECT_TYPE_PIPELINE = 19,
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
    VK_OBJECT_TYPE_SAMPLER = 21,
    VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
    VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
    VK_OBJECT_TYPE_FRAMEBUFFER = 24,
    VK_OBJECT_TYPE_COMMAND_POOL = 25,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = 1000295000,
    VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
    VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
    VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000,
    VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
    VK_OBJECT_TYPE_VIDEO_SESSION_KHR = 1000023000,
    VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = 1000023001,
    VK_OBJECT_TYPE_CU_MODULE_NVX = 1000029000,
    VK_OBJECT_TYPE_CU_FUNCTION_NVX = 1000029001,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
    VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
    VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000,
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000,
    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = VK_OBJECT_TYPE_PRIVATE_DATA_SLOT,
    VK_OBJECT_TYPE_CUDA_MODULE_NV = 1000307000,
    VK_OBJECT_TYPE_CUDA_FUNCTION_NV = 1000307001,
    VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = 1000366000,
    VK_OBJECT_TYPE_MICROMAP_EXT = 1000396000,
    VK_OBJECT_TYPE_TENSOR_ARM = 1000460000,
    VK_OBJECT_TYPE_TENSOR_VIEW_ARM = 1000460001,
    VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV = 1000464000,
    VK_OBJECT_TYPE_SHADER_EXT = 1000482000,
    VK_OBJECT_TYPE_PIPELINE_BINARY_KHR = 1000483000,
    VK_OBJECT_TYPE_DATA_GRAPH_PIPELINE_SESSION_ARM = 1000507000,
    VK_OBJECT_TYPE_EXTERNAL_COMPUTE_QUEUE_NV = 1000556000,
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_EXT = 1000572000,
    VK_OBJECT_TYPE_INDIRECT_EXECUTION_SET_EXT = 1000572001,
    VK_OBJECT_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkObjectType;

typedef enum VkEventCreateFlagBits {
    VK_EVENT_CREATE_DEVICE_ONLY_BIT = 1,
    VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = VK_EVENT_CREATE_DEVICE_ONLY_BIT,
    VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkEventCreateFlagBits;

typedef enum VkPipelineLayoutCreateFlagBits {
    VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT = 2,
    VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineLayoutCreateFlagBits;

typedef enum VkRayTracingInvocationReorderModeNV {
    VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = 0,
    VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = 1,
    VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV = 0x7FFFFFFF
} VkRayTracingInvocationReorderModeNV;

typedef enum VkIndirectCommandsLayoutUsageFlagBitsNV {
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkIndirectCommandsLayoutUsageFlagBitsNV;

typedef enum VkIndirectCommandsTokenTypeNV {
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV = 1000328000,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV = 1000428003,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV = 1000428004,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkIndirectCommandsTokenTypeNV;

typedef enum VkIndirectStateFlagBitsNV {
    VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1,
    VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkIndirectStateFlagBitsNV;

typedef enum VkDescriptorUpdateTemplateType {
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS = 1,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkDescriptorUpdateTemplateType;

typedef enum VkDescriptorUpdateTemplateType VkDescriptorUpdateTemplateTypeKHR;

typedef enum VkViewportCoordinateSwizzleNV {
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
    VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 0x7FFFFFFF
} VkViewportCoordinateSwizzleNV;

typedef enum VkDiscardRectangleModeEXT {
    VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
    VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
    VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDiscardRectangleModeEXT;

typedef enum VkSubpassDescriptionFlagBits {
    VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1,
    VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2,
    VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4,
    VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8,
    VK_SUBPASS_DESCRIPTION_TILE_SHADING_APRON_BIT_QCOM = 256,
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = 16,
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 32,
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 64,
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT = 16,
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 32,
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 64,
    VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT = 128,
    VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSubpassDescriptionFlagBits;

typedef enum VkPointClippingBehavior {
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,
    VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 0x7FFFFFFF
} VkPointClippingBehavior;

typedef enum VkPointClippingBehavior VkPointClippingBehaviorKHR;

typedef enum VkCoverageModulationModeNV {
    VK_COVERAGE_MODULATION_MODE_NONE_NV = 0,
    VK_COVERAGE_MODULATION_MODE_RGB_NV = 1,
    VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2,
    VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3,
    VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 0x7FFFFFFF
} VkCoverageModulationModeNV;

typedef enum VkCoverageReductionModeNV {
    VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0,
    VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1,
    VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 0x7FFFFFFF
} VkCoverageReductionModeNV;

typedef enum VkValidationCacheHeaderVersionEXT {
    VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1,
    VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 0x7FFFFFFF
} VkValidationCacheHeaderVersionEXT;

typedef enum VkShaderInfoTypeAMD {
    VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0,
    VK_SHADER_INFO_TYPE_BINARY_AMD = 1,
    VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
    VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 0x7FFFFFFF
} VkShaderInfoTypeAMD;

typedef enum VkQueueGlobalPriority {
    VK_QUEUE_GLOBAL_PRIORITY_LOW = 128,
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM = 256,
    VK_QUEUE_GLOBAL_PRIORITY_HIGH = 512,
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME = 1024,
    VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = VK_QUEUE_GLOBAL_PRIORITY_LOW,
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = VK_QUEUE_GLOBAL_PRIORITY_MEDIUM,
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = VK_QUEUE_GLOBAL_PRIORITY_HIGH,
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = VK_QUEUE_GLOBAL_PRIORITY_REALTIME,
    VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = VK_QUEUE_GLOBAL_PRIORITY_LOW,
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = VK_QUEUE_GLOBAL_PRIORITY_MEDIUM,
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = VK_QUEUE_GLOBAL_PRIORITY_HIGH,
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = VK_QUEUE_GLOBAL_PRIORITY_REALTIME,
    VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM = 0x7FFFFFFF
} VkQueueGlobalPriority;

typedef enum VkQueueGlobalPriority VkQueueGlobalPriorityKHR;

typedef enum VkQueueGlobalPriority VkQueueGlobalPriorityEXT;

typedef enum VkTimeDomainKHR {
    VK_TIME_DOMAIN_DEVICE_KHR = 0,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR = 1,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR = 2,
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR = 3,
    VK_TIME_DOMAIN_DEVICE_EXT = VK_TIME_DOMAIN_DEVICE_KHR,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR,
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR,
    VK_TIME_DOMAIN_MAX_ENUM_KHR = 0x7FFFFFFF
} VkTimeDomainKHR;

typedef enum VkTimeDomainKHR VkTimeDomainEXT;

typedef enum VkConservativeRasterizationModeEXT {
    VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,
    VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,
    VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
    VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkConservativeRasterizationModeEXT;

typedef enum VkResolveModeFlagBits {
    VK_RESOLVE_MODE_NONE = 0,
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 1,
    VK_RESOLVE_MODE_AVERAGE_BIT = 2,
    VK_RESOLVE_MODE_MIN_BIT = 4,
    VK_RESOLVE_MODE_MAX_BIT = 8,
    VK_RESOLVE_MODE_NONE_KHR = VK_RESOLVE_MODE_NONE,
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = VK_RESOLVE_MODE_SAMPLE_ZERO_BIT,
    VK_RESOLVE_MODE_AVERAGE_BIT_KHR = VK_RESOLVE_MODE_AVERAGE_BIT,
    VK_RESOLVE_MODE_MIN_BIT_KHR = VK_RESOLVE_MODE_MIN_BIT,
    VK_RESOLVE_MODE_MAX_BIT_KHR = VK_RESOLVE_MODE_MAX_BIT,
    VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_BIT_ANDROID = 16,
    VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID = VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_BIT_ANDROID,
    VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkResolveModeFlagBits;

typedef enum VkResolveModeFlagBits VkResolveModeFlagBitsKHR;

typedef enum VkDescriptorBindingFlagBits {
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1,
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2,
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4,
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8,
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT,
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT,
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT,
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT,
    VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkDescriptorBindingFlagBits;

typedef enum VkDescriptorBindingFlagBits VkDescriptorBindingFlagBitsEXT;

typedef enum VkConditionalRenderingFlagBitsEXT {
    VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1,
    VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkConditionalRenderingFlagBitsEXT;

typedef enum VkSemaphoreType {
    VK_SEMAPHORE_TYPE_BINARY = 0,
    VK_SEMAPHORE_TYPE_TIMELINE = 1,
    VK_SEMAPHORE_TYPE_BINARY_KHR = VK_SEMAPHORE_TYPE_BINARY,
    VK_SEMAPHORE_TYPE_TIMELINE_KHR = VK_SEMAPHORE_TYPE_TIMELINE,
    VK_SEMAPHORE_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkSemaphoreType;

typedef enum VkSemaphoreType VkSemaphoreTypeKHR;

typedef enum VkGeometryFlagBitsKHR {
    VK_GEOMETRY_OPAQUE_BIT_KHR = 1,
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2,
    VK_GEOMETRY_OPAQUE_BIT_NV = VK_GEOMETRY_OPAQUE_BIT_KHR,
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR,
    VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkGeometryFlagBitsKHR;

typedef enum VkGeometryFlagBitsKHR VkGeometryFlagBitsNV;

typedef enum VkGeometryInstanceFlagBitsKHR {
    VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1,
    VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 2,
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4,
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8,
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR,
    VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR,
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR,
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR,
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR,
    VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_BIT_EXT = 16,
    VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_BIT_EXT,
    VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_BIT_EXT = 32,
    VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_BIT_EXT,
    VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkGeometryInstanceFlagBitsKHR;

typedef enum VkGeometryInstanceFlagBitsKHR VkGeometryInstanceFlagBitsNV;

typedef enum VkClusterAccelerationStructureAddressResolutionFlagBitsNV {
    VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_NONE_NV = 0,
    VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_IMPLICIT_DATA_BIT_NV = 1,
    VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SCRATCH_DATA_BIT_NV = 2,
    VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_ADDRESS_ARRAY_BIT_NV = 4,
    VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_SIZES_ARRAY_BIT_NV = 8,
    VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_ARRAY_BIT_NV = 16,
    VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_COUNT_BIT_NV = 32,
    VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkClusterAccelerationStructureAddressResolutionFlagBitsNV;

typedef enum VkClusterAccelerationStructureGeometryFlagBitsNV {
    VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_CULL_DISABLE_BIT_NV = 1,
    VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_NO_DUPLICATE_ANYHIT_INVOCATION_BIT_NV = 2,
    VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_OPAQUE_BIT_NV = 4,
    VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkClusterAccelerationStructureGeometryFlagBitsNV;

typedef enum VkClusterAccelerationStructureClusterFlagBitsNV {
    VK_CLUSTER_ACCELERATION_STRUCTURE_CLUSTER_ALLOW_DISABLE_OPACITY_MICROMAPS_NV = 1,
    VK_CLUSTER_ACCELERATION_STRUCTURE_CLUSTER_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkClusterAccelerationStructureClusterFlagBitsNV;

typedef enum VkBuildAccelerationStructureFlagBitsKHR {
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8,
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = 32,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_BIT_EXT = 64,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_BIT_EXT,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_BIT_EXT = 128,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_BIT_EXT,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_BIT_EXT = 256,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_BIT_EXT,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISPLACEMENT_MICROMAP_UPDATE_BIT_NV = 512,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISPLACEMENT_MICROMAP_UPDATE_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISPLACEMENT_MICROMAP_UPDATE_BIT_NV,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_BIT_KHR = 2048,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_CLUSTER_OPACITY_MICROMAPS_BIT_NV = 4096,
    VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkBuildAccelerationStructureFlagBitsKHR;

typedef enum VkBuildAccelerationStructureFlagBitsKHR VkBuildAccelerationStructureFlagBitsNV;

typedef enum VkAccelerationStructureCreateFlagBitsKHR {
    VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 1,
    VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8,
    VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = 4,
    VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkAccelerationStructureCreateFlagBitsKHR;

typedef enum VkBuildAccelerationStructureModeKHR {
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0,
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1,
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkBuildAccelerationStructureModeKHR;

typedef enum VkCopyAccelerationStructureModeKHR {
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkCopyAccelerationStructureModeKHR;

typedef enum VkCopyAccelerationStructureModeKHR VkCopyAccelerationStructureModeNV;

typedef enum VkAccelerationStructureTypeKHR {
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0,
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1,
    VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2,
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR,
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR,
    VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkAccelerationStructureTypeKHR;

typedef enum VkAccelerationStructureTypeKHR VkAccelerationStructureTypeNV;

typedef enum VkGeometryTypeKHR {
    VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0,
    VK_GEOMETRY_TYPE_AABBS_KHR = 1,
    VK_GEOMETRY_TYPE_INSTANCES_KHR = 2,
    VK_GEOMETRY_TYPE_TRIANGLES_NV = VK_GEOMETRY_TYPE_TRIANGLES_KHR,
    VK_GEOMETRY_TYPE_AABBS_NV = VK_GEOMETRY_TYPE_AABBS_KHR,
    VK_GEOMETRY_TYPE_SPHERES_NV = 1000429004,
    VK_GEOMETRY_TYPE_LINEAR_SWEPT_SPHERES_NV = 1000429005,
    VK_GEOMETRY_TYPE_DENSE_GEOMETRY_FORMAT_TRIANGLES_AMDX = 1000478000,
    VK_GEOMETRY_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkGeometryTypeKHR;

typedef enum VkGeometryTypeKHR VkGeometryTypeNV;

typedef enum VkRayTracingShaderGroupTypeKHR {
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkRayTracingShaderGroupTypeKHR;

typedef enum VkRayTracingShaderGroupTypeKHR VkRayTracingShaderGroupTypeNV;

typedef enum VkAccelerationStructureMemoryRequirementsTypeNV {
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkAccelerationStructureMemoryRequirementsTypeNV;

typedef enum VkAccelerationStructureBuildTypeKHR {
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0,
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1,
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2,
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkAccelerationStructureBuildTypeKHR;

typedef enum VkAccelerationStructureCompatibilityKHR {
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0,
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1,
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR = 0x7FFFFFFF
} VkAccelerationStructureCompatibilityKHR;

typedef enum VkRayTracingLssIndexingModeNV {
    VK_RAY_TRACING_LSS_INDEXING_MODE_LIST_NV = 0,
    VK_RAY_TRACING_LSS_INDEXING_MODE_SUCCESSIVE_NV = 1,
    VK_RAY_TRACING_LSS_INDEXING_MODE_MAX_ENUM_NV = 0x7FFFFFFF
} VkRayTracingLssIndexingModeNV;

typedef enum VkRayTracingLssPrimitiveEndCapsModeNV {
    VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_NONE_NV = 0,
    VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_CHAINED_NV = 1,
    VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_MAX_ENUM_NV = 0x7FFFFFFF
} VkRayTracingLssPrimitiveEndCapsModeNV;

typedef enum VkShaderGroupShaderKHR {
    VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0,
    VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1,
    VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2,
    VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3,
    VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR = 0x7FFFFFFF
} VkShaderGroupShaderKHR;

typedef enum VkMemoryOverallocationBehaviorAMD {
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 0x7FFFFFFF
} VkMemoryOverallocationBehaviorAMD;

typedef enum VkDeviceDiagnosticsConfigFlagBitsNV {
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1,
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2,
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4,
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = 8,
    VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkDeviceDiagnosticsConfigFlagBitsNV;

typedef enum VkPipelineCreationFeedbackFlagBits {
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = 1,
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = 2,
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = 4,
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT,
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT,
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT,
    VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineCreationFeedbackFlagBits;

typedef enum VkPipelineCreationFeedbackFlagBits VkPipelineCreationFeedbackFlagBitsEXT;

typedef enum VkPerformanceCounterScopeKHR {
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0,
    VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1,
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2,
    VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR,
    VK_QUERY_SCOPE_RENDER_PASS_KHR = VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR,
    VK_QUERY_SCOPE_COMMAND_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR,
    VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkPerformanceCounterScopeKHR;

typedef enum VkPerformanceCounterUnitKHR {
    VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0,
    VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1,
    VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2,
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3,
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4,
    VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5,
    VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6,
    VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7,
    VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8,
    VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9,
    VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10,
    VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 0x7FFFFFFF
} VkPerformanceCounterUnitKHR;

typedef enum VkPerformanceCounterStorageKHR {
    VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0,
    VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1,
    VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2,
    VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3,
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4,
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5,
    VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkPerformanceCounterStorageKHR;

typedef enum VkPerformanceCounterDescriptionFlagBitsKHR {
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1,
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR,
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2,
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR,
    VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkPerformanceCounterDescriptionFlagBitsKHR;

typedef enum VkSemaphoreWaitFlagBits {
    VK_SEMAPHORE_WAIT_ANY_BIT = 1,
    VK_SEMAPHORE_WAIT_ANY_BIT_KHR = VK_SEMAPHORE_WAIT_ANY_BIT,
    VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSemaphoreWaitFlagBits;

typedef enum VkSemaphoreWaitFlagBits VkSemaphoreWaitFlagBitsKHR;

typedef enum VkPerformanceConfigurationTypeINTEL {
    VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0,
    VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF
} VkPerformanceConfigurationTypeINTEL;

typedef enum VkQueryPoolSamplingModeINTEL {
    VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0,
    VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 0x7FFFFFFF
} VkQueryPoolSamplingModeINTEL;

typedef enum VkPerformanceOverrideTypeINTEL {
    VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0,
    VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1,
    VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF
} VkPerformanceOverrideTypeINTEL;

typedef enum VkPerformanceParameterTypeINTEL {
    VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0,
    VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1,
    VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF
} VkPerformanceParameterTypeINTEL;

typedef enum VkPerformanceValueTypeINTEL {
    VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0,
    VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1,
    VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2,
    VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3,
    VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4,
    VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF
} VkPerformanceValueTypeINTEL;

typedef enum VkLineRasterizationMode {
    VK_LINE_RASTERIZATION_MODE_DEFAULT = 0,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR = 1,
    VK_LINE_RASTERIZATION_MODE_BRESENHAM = 2,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH = 3,
    VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = VK_LINE_RASTERIZATION_MODE_DEFAULT,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = VK_LINE_RASTERIZATION_MODE_RECTANGULAR,
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = VK_LINE_RASTERIZATION_MODE_BRESENHAM,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH,
    VK_LINE_RASTERIZATION_MODE_DEFAULT_KHR = VK_LINE_RASTERIZATION_MODE_DEFAULT,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR = VK_LINE_RASTERIZATION_MODE_RECTANGULAR,
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_KHR = VK_LINE_RASTERIZATION_MODE_BRESENHAM,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_KHR = VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH,
    VK_LINE_RASTERIZATION_MODE_MAX_ENUM = 0x7FFFFFFF
} VkLineRasterizationMode;

typedef enum VkLineRasterizationMode VkLineRasterizationModeKHR;

typedef enum VkLineRasterizationMode VkLineRasterizationModeEXT;

typedef enum VkToolPurposeFlagBits {
    VK_TOOL_PURPOSE_VALIDATION_BIT = 1,
    VK_TOOL_PURPOSE_PROFILING_BIT = 2,
    VK_TOOL_PURPOSE_TRACING_BIT = 4,
    VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = 8,
    VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = 16,
    VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = VK_TOOL_PURPOSE_VALIDATION_BIT,
    VK_TOOL_PURPOSE_PROFILING_BIT_EXT = VK_TOOL_PURPOSE_PROFILING_BIT,
    VK_TOOL_PURPOSE_TRACING_BIT_EXT = VK_TOOL_PURPOSE_TRACING_BIT,
    VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT,
    VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT,
    VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32,
    VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64,
    VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkToolPurposeFlagBits;

typedef enum VkToolPurposeFlagBits VkToolPurposeFlagBitsEXT;

typedef enum VkFragmentShadingRateNV {
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10,
    VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11,
    VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12,
    VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13,
    VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14,
    VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15,
    VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = 0x7FFFFFFF
} VkFragmentShadingRateNV;

typedef enum VkFragmentShadingRateTypeNV {
    VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0,
    VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1,
    VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkFragmentShadingRateTypeNV;

typedef enum VkSubpassMergeStatusEXT {
    VK_SUBPASS_MERGE_STATUS_MERGED_EXT = 0,
    VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT = 1,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = 2,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = 3,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = 4,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = 5,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = 6,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = 7,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = 8,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = 9,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = 10,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = 11,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = 12,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = 13,
    VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkSubpassMergeStatusEXT;

typedef uint64_t VkAccessFlagBits2;
static const VkAccessFlagBits2 VK_ACCESS_2_NONE = 0;
static const VkAccessFlagBits2 VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT = 1;
static const VkAccessFlagBits2 VK_ACCESS_2_INDEX_READ_BIT = 2;
static const VkAccessFlagBits2 VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT = 4;
static const VkAccessFlagBits2 VK_ACCESS_2_UNIFORM_READ_BIT = 8;
static const VkAccessFlagBits2 VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT = 16;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_READ_BIT = 32;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_WRITE_BIT = 64;
static const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT = 128;
static const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT = 256;
static const VkAccessFlagBits2 VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512;
static const VkAccessFlagBits2 VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024;
static const VkAccessFlagBits2 VK_ACCESS_2_TRANSFER_READ_BIT = 2048;
static const VkAccessFlagBits2 VK_ACCESS_2_TRANSFER_WRITE_BIT = 4096;
static const VkAccessFlagBits2 VK_ACCESS_2_HOST_READ_BIT = 8192;
static const VkAccessFlagBits2 VK_ACCESS_2_HOST_WRITE_BIT = 16384;
static const VkAccessFlagBits2 VK_ACCESS_2_MEMORY_READ_BIT = 32768;
static const VkAccessFlagBits2 VK_ACCESS_2_MEMORY_WRITE_BIT = 65536;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_SAMPLED_READ_BIT = 4294967296;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_STORAGE_READ_BIT = 8589934592;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT = 17179869184;
static const VkAccessFlagBits2 VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR = 34359738368;
static const VkAccessFlagBits2 VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR = 68719476736;
static const VkAccessFlagBits2 VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR = 137438953472;
static const VkAccessFlagBits2 VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR = 274877906944;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_TILE_ATTACHMENT_READ_BIT_QCOM = 2251799813685248;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_TILE_ATTACHMENT_WRITE_BIT_QCOM = 4503599627370496;
static const VkAccessFlagBits2 VK_ACCESS_2_NONE_KHR = 0;
static const VkAccessFlagBits2 VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR = 1;
static const VkAccessFlagBits2 VK_ACCESS_2_INDEX_READ_BIT_KHR = 2;
static const VkAccessFlagBits2 VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR = 4;
static const VkAccessFlagBits2 VK_ACCESS_2_UNIFORM_READ_BIT_KHR = 8;
static const VkAccessFlagBits2 VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR = 16;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_READ_BIT_KHR = 32;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_WRITE_BIT_KHR = 64;
static const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR = 128;
static const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR = 256;
static const VkAccessFlagBits2 VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR = 512;
static const VkAccessFlagBits2 VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR = 1024;
static const VkAccessFlagBits2 VK_ACCESS_2_TRANSFER_READ_BIT_KHR = 2048;
static const VkAccessFlagBits2 VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR = 4096;
static const VkAccessFlagBits2 VK_ACCESS_2_HOST_READ_BIT_KHR = 8192;
static const VkAccessFlagBits2 VK_ACCESS_2_HOST_WRITE_BIT_KHR = 16384;
static const VkAccessFlagBits2 VK_ACCESS_2_MEMORY_READ_BIT_KHR = 32768;
static const VkAccessFlagBits2 VK_ACCESS_2_MEMORY_WRITE_BIT_KHR = 65536;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR = 4294967296;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR = 8589934592;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR = 17179869184;
static const VkAccessFlagBits2 VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432;
static const VkAccessFlagBits2 VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864;
static const VkAccessFlagBits2 VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728;
static const VkAccessFlagBits2 VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576;
static const VkAccessFlagBits2 VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV = 131072;
static const VkAccessFlagBits2 VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144;
static const VkAccessFlagBits2 VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_EXT = 131072;
static const VkAccessFlagBits2 VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_EXT = 262144;
static const VkAccessFlagBits2 VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608;
static const VkAccessFlagBits2 VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152;
static const VkAccessFlagBits2 VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304;
static const VkAccessFlagBits2 VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152;
static const VkAccessFlagBits2 VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304;
static const VkAccessFlagBits2 VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216;
static const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288;
static const VkAccessFlagBits2 VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT = 2199023255552;
static const VkAccessFlagBits2 VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI = 549755813888;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR = 1099511627776;
static const VkAccessFlagBits2 VK_ACCESS_2_MICROMAP_READ_BIT_EXT = 17592186044416;
static const VkAccessFlagBits2 VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT = 35184372088832;
static const VkAccessFlagBits2 VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV = 4398046511104;
static const VkAccessFlagBits2 VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV = 8796093022208;
static const VkAccessFlagBits2 VK_ACCESS_2_DATA_GRAPH_READ_BIT_ARM = 140737488355328;
static const VkAccessFlagBits2 VK_ACCESS_2_DATA_GRAPH_WRITE_BIT_ARM = 281474976710656;

typedef VkAccessFlagBits2 VkAccessFlagBits2KHR;

typedef uint64_t VkPipelineStageFlagBits2;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_NONE = 0;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT = 1;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT = 2;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT = 4;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT = 8;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT = 16;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT = 32;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT = 64;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT = 128;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT = 256;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT = 512;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT = 1024;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT = 2048;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT = 4096;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TRANSFER_BIT = 4096;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT = 8192;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_HOST_BIT = 16384;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT = 32768;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT = 65536;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COPY_BIT = 4294967296;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_RESOLVE_BIT = 8589934592;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_BLIT_BIT = 17179869184;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_CLEAR_BIT = 34359738368;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT = 68719476736;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT = 137438953472;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT = 274877906944;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR = 67108864;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR = 134217728;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_NONE_KHR = 0;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR = 1;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR = 2;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR = 4;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR = 8;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR = 16;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR = 32;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR = 64;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR = 128;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR = 256;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR = 512;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR = 1024;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR = 2048;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR = 4096;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR = 4096;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR = 8192;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_HOST_BIT_KHR = 16384;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR = 32768;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR = 65536;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COPY_BIT_KHR = 4294967296;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR = 8589934592;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_BLIT_BIT_KHR = 17179869184;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR = 34359738368;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR = 68719476736;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR = 137438953472;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR = 274877906944;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT = 16777216;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT = 262144;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV = 131072;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_EXT = 131072;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV = 4194304;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR = 2097152;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV = 2097152;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV = 524288;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV = 1048576;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT = 524288;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT = 1048576;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI = 549755813888;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI = 549755813888;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI = 1099511627776;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR = 268435456;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT = 1073741824;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI = 2199023255552;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV = 536870912;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_CONVERT_COOPERATIVE_VECTOR_MATRIX_BIT_NV = 17592186044416;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_DATA_GRAPH_BIT_ARM = 4398046511104;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COPY_INDIRECT_BIT_KHR = 70368744177664;

typedef VkPipelineStageFlagBits2 VkPipelineStageFlagBits2KHR;

typedef enum VkProvokingVertexModeEXT {
    VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0,
    VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1,
    VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkProvokingVertexModeEXT;

typedef enum VkHostImageCopyFlagBits {
    VK_HOST_IMAGE_COPY_MEMCPY_BIT = 1,
    VK_HOST_IMAGE_COPY_MEMCPY = VK_HOST_IMAGE_COPY_MEMCPY_BIT,
    VK_HOST_IMAGE_COPY_MEMCPY_BIT_EXT = VK_HOST_IMAGE_COPY_MEMCPY_BIT,
    VK_HOST_IMAGE_COPY_MEMCPY_EXT = VK_HOST_IMAGE_COPY_MEMCPY_BIT,
    VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkHostImageCopyFlagBits;

typedef enum VkHostImageCopyFlagBits VkHostImageCopyFlagBitsEXT;

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef enum VkImageConstraintsInfoFlagBitsFUCHSIA {
    VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_RARELY_FUCHSIA = 1,
    VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_OFTEN_FUCHSIA = 2,
    VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_RARELY_FUCHSIA = 4,
    VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_OFTEN_FUCHSIA = 8,
    VK_IMAGE_CONSTRAINTS_INFO_PROTECTED_OPTIONAL_FUCHSIA = 16,
    VK_IMAGE_CONSTRAINTS_INFO_FLAG_BITS_MAX_ENUM_FUCHSIA = 0x7FFFFFFF
} VkImageConstraintsInfoFlagBitsFUCHSIA;
#endif

typedef uint64_t VkFormatFeatureFlagBits2;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT = 1;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT = 2;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT = 4;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT = 8;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT = 16;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT = 64;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT = 128;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT = 256;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT = 512;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLIT_SRC_BIT = 1024;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLIT_DST_BIT = 2048;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT = 16384;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT = 32768;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT = 131072;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_DISJOINT_BIT = 4194304;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT = 8388608;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT = 2147483648;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT = 4294967296;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT = 8589934592;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT = 8192;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT = 70368744177664;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR = 33554432;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR = 67108864;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT = 70368744177664;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR = 134217728;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR = 268435456;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR = 1;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR = 2;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR = 4;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR = 8;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR = 16;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR = 32;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR = 64;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR = 128;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR = 256;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR = 512;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR = 1024;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR = 2048;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR = 4096;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR = 16384;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR = 32768;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 131072;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 262144;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 524288;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 1048576;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 2097152;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR = 4194304;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR = 8388608;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR = 2147483648;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR = 4294967296;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR = 8589934592;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR = 65536;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_RADIUS_BUFFER_BIT_NV = 2251799813685248;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV = 274877906944;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM = 17179869184;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM = 34359738368;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM = 68719476736;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM = 137438953472;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TENSOR_SHADER_BIT_ARM = 549755813888;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TENSOR_IMAGE_ALIASING_BIT_ARM = 8796093022208;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV = 1099511627776;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV = 2199023255552;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV = 4398046511104;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TENSOR_DATA_GRAPH_BIT_ARM = 281474976710656;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COPY_IMAGE_INDIRECT_DST_BIT_KHR = 576460752303423488;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR = 562949953421312;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR = 1125899906842624;

typedef VkFormatFeatureFlagBits2 VkFormatFeatureFlagBits2KHR;

typedef enum VkRenderingFlagBits {
    VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = 1,
    VK_RENDERING_SUSPENDING_BIT = 2,
    VK_RENDERING_RESUMING_BIT = 4,
    VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR = VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT,
    VK_RENDERING_SUSPENDING_BIT_KHR = VK_RENDERING_SUSPENDING_BIT,
    VK_RENDERING_RESUMING_BIT_KHR = VK_RENDERING_RESUMING_BIT,
    VK_RENDERING_CONTENTS_INLINE_BIT_EXT = 16,
    VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT = 8,
    VK_RENDERING_CONTENTS_INLINE_BIT_KHR = 16,
    VK_RENDERING_PER_LAYER_FRAGMENT_DENSITY_BIT_VALVE = 32,
    VK_RENDERING_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkRenderingFlagBits;

typedef enum VkRenderingFlagBits VkRenderingFlagBitsKHR;

typedef enum VkPipelineDepthStencilStateCreateFlagBits {
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 1,
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 2,
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 1,
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 2,
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineDepthStencilStateCreateFlagBits;

typedef enum VkPipelineColorBlendStateCreateFlagBits {
    VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = 1,
    VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT = 1,
    VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineColorBlendStateCreateFlagBits;

typedef enum VkImageCompressionFlagBitsEXT {
    VK_IMAGE_COMPRESSION_DEFAULT_EXT = 0,
    VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 1,
    VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = 2,
    VK_IMAGE_COMPRESSION_DISABLED_EXT = 4,
    VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkImageCompressionFlagBitsEXT;

typedef enum VkImageCompressionFixedRateFlagBitsEXT {
    VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = 0,
    VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = 1,
    VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = 2,
    VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = 4,
    VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = 8,
    VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = 16,
    VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = 32,
    VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = 64,
    VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = 128,
    VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = 256,
    VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = 512,
    VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = 1024,
    VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = 2048,
    VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = 4096,
    VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = 8192,
    VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = 16384,
    VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = 32768,
    VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = 65536,
    VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = 131072,
    VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = 262144,
    VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = 524288,
    VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = 1048576,
    VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = 2097152,
    VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = 4194304,
    VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = 8388608,
    VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkImageCompressionFixedRateFlagBitsEXT;

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef enum VkExportMetalObjectTypeFlagBitsEXT {
    VK_EXPORT_METAL_OBJECT_TYPE_METAL_DEVICE_BIT_EXT = 1,
    VK_EXPORT_METAL_OBJECT_TYPE_METAL_COMMAND_QUEUE_BIT_EXT = 2,
    VK_EXPORT_METAL_OBJECT_TYPE_METAL_BUFFER_BIT_EXT = 4,
    VK_EXPORT_METAL_OBJECT_TYPE_METAL_TEXTURE_BIT_EXT = 8,
    VK_EXPORT_METAL_OBJECT_TYPE_METAL_IOSURFACE_BIT_EXT = 16,
    VK_EXPORT_METAL_OBJECT_TYPE_METAL_SHARED_EVENT_BIT_EXT = 32,
    VK_EXPORT_METAL_OBJECT_TYPE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkExportMetalObjectTypeFlagBitsEXT;
#endif

typedef enum VkPipelineRobustnessBufferBehavior {
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT = 0,
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED = 1,
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS = 2,
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2 = 3,
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT,
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED,
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS,
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2,
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM = 0x7FFFFFFF
} VkPipelineRobustnessBufferBehavior;

typedef enum VkPipelineRobustnessBufferBehavior VkPipelineRobustnessBufferBehaviorEXT;

typedef enum VkPipelineRobustnessImageBehavior {
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT = 0,
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED = 1,
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS = 2,
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2 = 3,
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT,
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED,
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS,
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2,
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM = 0x7FFFFFFF
} VkPipelineRobustnessImageBehavior;

typedef enum VkPipelineRobustnessImageBehavior VkPipelineRobustnessImageBehaviorEXT;

typedef enum VkDeviceAddressBindingFlagBitsEXT {
    VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = 1,
    VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDeviceAddressBindingFlagBitsEXT;

typedef enum VkDeviceAddressBindingTypeEXT {
    VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = 0,
    VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = 1,
    VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDeviceAddressBindingTypeEXT;

typedef enum VkMicromapTypeEXT {
    VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT = 0,
    VK_MICROMAP_TYPE_DISPLACEMENT_MICROMAP_NV = 1000397000,
    VK_MICROMAP_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkMicromapTypeEXT;

typedef enum VkBuildMicromapModeEXT {
    VK_BUILD_MICROMAP_MODE_BUILD_EXT = 0,
    VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkBuildMicromapModeEXT;

typedef enum VkCopyMicromapModeEXT {
    VK_COPY_MICROMAP_MODE_CLONE_EXT = 0,
    VK_COPY_MICROMAP_MODE_SERIALIZE_EXT = 1,
    VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT = 2,
    VK_COPY_MICROMAP_MODE_COMPACT_EXT = 3,
    VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkCopyMicromapModeEXT;

typedef enum VkBuildMicromapFlagBitsEXT {
    VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT = 1,
    VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT = 2,
    VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT = 4,
    VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkBuildMicromapFlagBitsEXT;

typedef enum VkMicromapCreateFlagBitsEXT {
    VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 1,
    VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkMicromapCreateFlagBitsEXT;

typedef enum VkOpacityMicromapFormatEXT {
    VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT = 1,
    VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT = 2,
    VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT = 0x7FFFFFFF
} VkOpacityMicromapFormatEXT;

typedef enum VkOpacityMicromapSpecialIndexEXT {
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = -1,
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = -2,
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = -3,
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = -4,
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_CLUSTER_GEOMETRY_DISABLE_OPACITY_MICROMAP_NV = -5,
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT = 0x7FFFFFFF
} VkOpacityMicromapSpecialIndexEXT;

typedef enum VkDeviceFaultVendorBinaryHeaderVersionEXT {
    VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = 1,
    VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDeviceFaultVendorBinaryHeaderVersionEXT;

typedef enum VkIndirectCommandsLayoutUsageFlagBitsEXT {
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_EXT = 1,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_EXT = 2,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkIndirectCommandsLayoutUsageFlagBitsEXT;

typedef enum VkIndirectExecutionSetInfoTypeEXT {
    VK_INDIRECT_EXECUTION_SET_INFO_TYPE_PIPELINES_EXT = 0,
    VK_INDIRECT_EXECUTION_SET_INFO_TYPE_SHADER_OBJECTS_EXT = 1,
    VK_INDIRECT_EXECUTION_SET_INFO_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkIndirectExecutionSetInfoTypeEXT;

typedef enum VkIndirectCommandsInputModeFlagBitsEXT {
    VK_INDIRECT_COMMANDS_INPUT_MODE_VULKAN_INDEX_BUFFER_EXT = 1,
    VK_INDIRECT_COMMANDS_INPUT_MODE_DXGI_INDEX_BUFFER_EXT = 2,
    VK_INDIRECT_COMMANDS_INPUT_MODE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkIndirectCommandsInputModeFlagBitsEXT;

typedef enum VkFrameBoundaryFlagBitsEXT {
    VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT = 1,
    VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkFrameBoundaryFlagBitsEXT;

typedef uint64_t VkMemoryDecompressionMethodFlagBitsNV;
static const VkMemoryDecompressionMethodFlagBitsNV VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV = 1;

typedef enum VkDepthBiasRepresentationEXT {
    VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT = 0,
    VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT = 1,
    VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT = 2,
    VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDepthBiasRepresentationEXT;

typedef enum VkDirectDriverLoadingModeLUNARG {
    VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG = 0,
    VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG = 1,
    VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG = 0x7FFFFFFF
} VkDirectDriverLoadingModeLUNARG;

typedef uint64_t VkPipelineCreateFlagBits2;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT = 1;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT = 2;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_DERIVATIVE_BIT = 4;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT = 16;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 256;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT = 512;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT = 134217728;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT = 1073741824;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_EXECUTION_GRAPH_BIT_AMDX = 4294967296;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_BUILT_IN_PRIMITIVES_BIT_KHR = 4096;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_SPHERES_AND_LINEAR_SWEPT_SPHERES_BIT_NV = 8589934592;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_ENABLE_LEGACY_DITHERING_BIT_EXT = 17179869184;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR = 1;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR = 2;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR = 4;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 8;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR = 16;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV = 32;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR = 64;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR = 256;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR = 512;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT = 1024;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 8388608;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_LIBRARY_BIT_KHR = 2048;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV = 262144;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV = 1048576;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 16777216;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 33554432;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 67108864;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT = 134217728;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT = 1073741824;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV = 268435456;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT = 536870912;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_DISALLOW_OPACITY_MICROMAP_BIT_ARM = 137438953472;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_CAPTURE_DATA_BIT_KHR = 2147483648;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_EXT = 274877906944;
static const VkPipelineCreateFlagBits2 VK_PIPELINE_CREATE_2_PER_LAYER_FRAGMENT_DENSITY_BIT_VALVE = 1099511627776;

typedef VkPipelineCreateFlagBits2 VkPipelineCreateFlagBits2KHR;

typedef uint64_t VkBufferUsageFlagBits2;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT = 1;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_TRANSFER_DST_BIT = 2;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT = 4;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT = 8;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT = 16;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT = 32;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT = 64;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT = 128;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT = 256;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT = 131072;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_EXECUTION_GRAPH_SCRATCH_BIT_AMDX = 33554432;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR = 1;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR = 2;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR = 4;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR = 8;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR = 16;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR = 32;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR = 64;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR = 128;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR = 256;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_CONDITIONAL_RENDERING_BIT_EXT = 512;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR = 1024;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_RAY_TRACING_BIT_NV = 1024;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_VIDEO_DECODE_SRC_BIT_KHR = 8192;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_VIDEO_DECODE_DST_BIT_KHR = 16384;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_VIDEO_ENCODE_DST_BIT_KHR = 32768;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_VIDEO_ENCODE_SRC_BIT_KHR = 65536;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT_KHR = 131072;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 2097152;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 4194304;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 67108864;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 8388608;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_MICROMAP_STORAGE_BIT_EXT = 16777216;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_COMPRESSED_DATA_DGF1_BIT_AMDX = 8589934592;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_DATA_GRAPH_FOREIGN_DESCRIPTOR_BIT_ARM = 536870912;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_TILE_MEMORY_BIT_QCOM = 134217728;
static const VkBufferUsageFlagBits2 VK_BUFFER_USAGE_2_PREPROCESS_BUFFER_BIT_EXT = 2147483648;

typedef VkBufferUsageFlagBits2 VkBufferUsageFlagBits2KHR;

typedef enum VkPartitionedAccelerationStructureOpTypeNV {
    VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_WRITE_INSTANCE_NV = 0,
    VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_UPDATE_INSTANCE_NV = 1,
    VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_WRITE_PARTITION_TRANSLATION_NV = 2,
    VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkPartitionedAccelerationStructureOpTypeNV;

typedef enum VkPartitionedAccelerationStructureInstanceFlagBitsNV {
    VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FACING_CULL_DISABLE_BIT_NV = 1,
    VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FLIP_FACING_BIT_NV = 2,
    VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_OPAQUE_BIT_NV = 4,
    VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_NO_OPAQUE_BIT_NV = 8,
    VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_ENABLE_EXPLICIT_BOUNDING_BOX_NV = 16,
    VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkPartitionedAccelerationStructureInstanceFlagBitsNV;

typedef enum VkAntiLagModeAMD {
    VK_ANTI_LAG_MODE_DRIVER_CONTROL_AMD = 0,
    VK_ANTI_LAG_MODE_ON_AMD = 1,
    VK_ANTI_LAG_MODE_OFF_AMD = 2,
    VK_ANTI_LAG_MODE_MAX_ENUM_AMD = 0x7FFFFFFF
} VkAntiLagModeAMD;

typedef enum VkAntiLagStageAMD {
    VK_ANTI_LAG_STAGE_INPUT_AMD = 0,
    VK_ANTI_LAG_STAGE_PRESENT_AMD = 1,
    VK_ANTI_LAG_STAGE_MAX_ENUM_AMD = 0x7FFFFFFF
} VkAntiLagStageAMD;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef enum VkDisplacementMicromapFormatNV {
    VK_DISPLACEMENT_MICROMAP_FORMAT_64_TRIANGLES_64_BYTES_NV = 1,
    VK_DISPLACEMENT_MICROMAP_FORMAT_256_TRIANGLES_128_BYTES_NV = 2,
    VK_DISPLACEMENT_MICROMAP_FORMAT_1024_TRIANGLES_128_BYTES_NV = 3,
    VK_DISPLACEMENT_MICROMAP_FORMAT_MAX_ENUM_NV = 0x7FFFFFFF
} VkDisplacementMicromapFormatNV;
#endif

typedef enum VkShaderCreateFlagBitsEXT {
    VK_SHADER_CREATE_LINK_STAGE_BIT_EXT = 1,
    VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 2,
    VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 4,
    VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT = 8,
    VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT = 16,
    VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT = 32,
    VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 64,
    VK_SHADER_CREATE_INDIRECT_BINDABLE_BIT_EXT = 128,
    VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkShaderCreateFlagBitsEXT;

typedef enum VkShaderCodeTypeEXT {
    VK_SHADER_CODE_TYPE_BINARY_EXT = 0,
    VK_SHADER_CODE_TYPE_SPIRV_EXT = 1,
    VK_SHADER_CODE_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkShaderCodeTypeEXT;

typedef enum VkScopeKHR {
    VK_SCOPE_DEVICE_KHR = 1,
    VK_SCOPE_WORKGROUP_KHR = 2,
    VK_SCOPE_SUBGROUP_KHR = 3,
    VK_SCOPE_QUEUE_FAMILY_KHR = 5,
    VK_SCOPE_DEVICE_NV = VK_SCOPE_DEVICE_KHR,
    VK_SCOPE_WORKGROUP_NV = VK_SCOPE_WORKGROUP_KHR,
    VK_SCOPE_SUBGROUP_NV = VK_SCOPE_SUBGROUP_KHR,
    VK_SCOPE_QUEUE_FAMILY_NV = VK_SCOPE_QUEUE_FAMILY_KHR,
    VK_SCOPE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkScopeKHR;

typedef enum VkComponentTypeKHR {
    VK_COMPONENT_TYPE_FLOAT16_KHR = 0,
    VK_COMPONENT_TYPE_FLOAT32_KHR = 1,
    VK_COMPONENT_TYPE_FLOAT64_KHR = 2,
    VK_COMPONENT_TYPE_SINT8_KHR = 3,
    VK_COMPONENT_TYPE_SINT16_KHR = 4,
    VK_COMPONENT_TYPE_SINT32_KHR = 5,
    VK_COMPONENT_TYPE_SINT64_KHR = 6,
    VK_COMPONENT_TYPE_UINT8_KHR = 7,
    VK_COMPONENT_TYPE_UINT16_KHR = 8,
    VK_COMPONENT_TYPE_UINT32_KHR = 9,
    VK_COMPONENT_TYPE_UINT64_KHR = 10,
    VK_COMPONENT_TYPE_BFLOAT16_KHR = 1000141000,
    VK_COMPONENT_TYPE_FLOAT16_NV = VK_COMPONENT_TYPE_FLOAT16_KHR,
    VK_COMPONENT_TYPE_FLOAT32_NV = VK_COMPONENT_TYPE_FLOAT32_KHR,
    VK_COMPONENT_TYPE_FLOAT64_NV = VK_COMPONENT_TYPE_FLOAT64_KHR,
    VK_COMPONENT_TYPE_SINT8_NV = VK_COMPONENT_TYPE_SINT8_KHR,
    VK_COMPONENT_TYPE_SINT16_NV = VK_COMPONENT_TYPE_SINT16_KHR,
    VK_COMPONENT_TYPE_SINT32_NV = VK_COMPONENT_TYPE_SINT32_KHR,
    VK_COMPONENT_TYPE_SINT64_NV = VK_COMPONENT_TYPE_SINT64_KHR,
    VK_COMPONENT_TYPE_UINT8_NV = VK_COMPONENT_TYPE_UINT8_KHR,
    VK_COMPONENT_TYPE_UINT16_NV = VK_COMPONENT_TYPE_UINT16_KHR,
    VK_COMPONENT_TYPE_UINT32_NV = VK_COMPONENT_TYPE_UINT32_KHR,
    VK_COMPONENT_TYPE_UINT64_NV = VK_COMPONENT_TYPE_UINT64_KHR,
    VK_COMPONENT_TYPE_SINT8_PACKED_NV = 1000491000,
    VK_COMPONENT_TYPE_UINT8_PACKED_NV = 1000491001,
    VK_COMPONENT_TYPE_FLOAT_E4M3_NV = 1000491002,
    VK_COMPONENT_TYPE_FLOAT_E5M2_NV = 1000491003,
    VK_COMPONENT_TYPE_FLOAT8_E4M3_EXT = 1000491002,
    VK_COMPONENT_TYPE_FLOAT8_E5M2_EXT = 1000491003,
    VK_COMPONENT_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkComponentTypeKHR;

typedef enum VkScopeKHR VkScopeNV;

typedef enum VkComponentTypeKHR VkComponentTypeNV;

typedef enum VkCubicFilterWeightsQCOM {
    VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM = 0,
    VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM = 1,
    VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM = 2,
    VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM = 3,
    VK_CUBIC_FILTER_WEIGHTS_MAX_ENUM_QCOM = 0x7FFFFFFF
} VkCubicFilterWeightsQCOM;

typedef enum VkBlockMatchWindowCompareModeQCOM {
    VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM = 0,
    VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM = 1,
    VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_ENUM_QCOM = 0x7FFFFFFF
} VkBlockMatchWindowCompareModeQCOM;

typedef enum VkLayeredDriverUnderlyingApiMSFT {
    VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT = 0,
    VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT = 1,
    VK_LAYERED_DRIVER_UNDERLYING_API_MAX_ENUM_MSFT = 0x7FFFFFFF
} VkLayeredDriverUnderlyingApiMSFT;

typedef enum VkPhysicalDeviceLayeredApiKHR {
    VK_PHYSICAL_DEVICE_LAYERED_API_VULKAN_KHR = 0,
    VK_PHYSICAL_DEVICE_LAYERED_API_D3D12_KHR = 1,
    VK_PHYSICAL_DEVICE_LAYERED_API_METAL_KHR = 2,
    VK_PHYSICAL_DEVICE_LAYERED_API_OPENGL_KHR = 3,
    VK_PHYSICAL_DEVICE_LAYERED_API_OPENGLES_KHR = 4,
    VK_PHYSICAL_DEVICE_LAYERED_API_MAX_ENUM_KHR = 0x7FFFFFFF
} VkPhysicalDeviceLayeredApiKHR;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef enum VkCompressedTriangleFormatAMDX {
    VK_COMPRESSED_TRIANGLE_FORMAT_DGF1_AMDX = 0,
    VK_COMPRESSED_TRIANGLE_FORMAT_MAX_ENUM_AMDX = 0x7FFFFFFF
} VkCompressedTriangleFormatAMDX;
#endif

typedef enum VkDepthClampModeEXT {
    VK_DEPTH_CLAMP_MODE_VIEWPORT_RANGE_EXT = 0,
    VK_DEPTH_CLAMP_MODE_USER_DEFINED_RANGE_EXT = 1,
    VK_DEPTH_CLAMP_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDepthClampModeEXT;

typedef enum VkTileShadingRenderPassFlagBitsQCOM {
    VK_TILE_SHADING_RENDER_PASS_ENABLE_BIT_QCOM = 1,
    VK_TILE_SHADING_RENDER_PASS_PER_TILE_EXECUTION_BIT_QCOM = 2,
    VK_TILE_SHADING_RENDER_PASS_FLAG_BITS_MAX_ENUM_QCOM = 0x7FFFFFFF
} VkTileShadingRenderPassFlagBitsQCOM;

typedef enum VkCooperativeVectorMatrixLayoutNV {
    VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_ROW_MAJOR_NV = 0,
    VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_COLUMN_MAJOR_NV = 1,
    VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_INFERENCING_OPTIMAL_NV = 2,
    VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_TRAINING_OPTIMAL_NV = 3,
    VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_MAX_ENUM_NV = 0x7FFFFFFF
} VkCooperativeVectorMatrixLayoutNV;

typedef enum VkAddressCopyFlagBitsKHR {
    VK_ADDRESS_COPY_DEVICE_LOCAL_BIT_KHR = 1,
    VK_ADDRESS_COPY_SPARSE_BIT_KHR = 2,
    VK_ADDRESS_COPY_PROTECTED_BIT_KHR = 4,
    VK_ADDRESS_COPY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkAddressCopyFlagBitsKHR;

typedef uint64_t VkTensorCreateFlagBitsARM;
static const VkTensorCreateFlagBitsARM VK_TENSOR_CREATE_MUTABLE_FORMAT_BIT_ARM = 1;
static const VkTensorCreateFlagBitsARM VK_TENSOR_CREATE_PROTECTED_BIT_ARM = 2;
static const VkTensorCreateFlagBitsARM VK_TENSOR_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_ARM = 4;

typedef uint64_t VkTensorUsageFlagBitsARM;
static const VkTensorUsageFlagBitsARM VK_TENSOR_USAGE_SHADER_BIT_ARM = 2;
static const VkTensorUsageFlagBitsARM VK_TENSOR_USAGE_TRANSFER_SRC_BIT_ARM = 4;
static const VkTensorUsageFlagBitsARM VK_TENSOR_USAGE_TRANSFER_DST_BIT_ARM = 8;
static const VkTensorUsageFlagBitsARM VK_TENSOR_USAGE_IMAGE_ALIASING_BIT_ARM = 16;
static const VkTensorUsageFlagBitsARM VK_TENSOR_USAGE_DATA_GRAPH_BIT_ARM = 32;

typedef enum VkTensorTilingARM {
    VK_TENSOR_TILING_OPTIMAL_ARM = 0,
    VK_TENSOR_TILING_LINEAR_ARM = 1,
    VK_TENSOR_TILING_MAX_ENUM_ARM = 0x7FFFFFFF
} VkTensorTilingARM;

typedef uint64_t VkTensorViewCreateFlagBitsARM;
static const VkTensorViewCreateFlagBitsARM VK_TENSOR_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_ARM = 1;

typedef uint64_t VkDataGraphPipelineSessionCreateFlagBitsARM;
static const VkDataGraphPipelineSessionCreateFlagBitsARM VK_DATA_GRAPH_PIPELINE_SESSION_CREATE_PROTECTED_BIT_ARM = 1;

typedef enum VkDataGraphPipelinePropertyARM {
    VK_DATA_GRAPH_PIPELINE_PROPERTY_CREATION_LOG_ARM = 0,
    VK_DATA_GRAPH_PIPELINE_PROPERTY_IDENTIFIER_ARM = 1,
    VK_DATA_GRAPH_PIPELINE_PROPERTY_MAX_ENUM_ARM = 0x7FFFFFFF
} VkDataGraphPipelinePropertyARM;

typedef enum VkDataGraphPipelineSessionBindPointARM {
    VK_DATA_GRAPH_PIPELINE_SESSION_BIND_POINT_TRANSIENT_ARM = 0,
    VK_DATA_GRAPH_PIPELINE_SESSION_BIND_POINT_MAX_ENUM_ARM = 0x7FFFFFFF
} VkDataGraphPipelineSessionBindPointARM;

typedef enum VkDataGraphPipelineSessionBindPointTypeARM {
    VK_DATA_GRAPH_PIPELINE_SESSION_BIND_POINT_TYPE_MEMORY_ARM = 0,
    VK_DATA_GRAPH_PIPELINE_SESSION_BIND_POINT_TYPE_MAX_ENUM_ARM = 0x7FFFFFFF
} VkDataGraphPipelineSessionBindPointTypeARM;

typedef enum VkPhysicalDeviceDataGraphProcessingEngineTypeARM {
    VK_PHYSICAL_DEVICE_DATA_GRAPH_PROCESSING_ENGINE_TYPE_DEFAULT_ARM = 0,
    VK_PHYSICAL_DEVICE_DATA_GRAPH_PROCESSING_ENGINE_TYPE_MAX_ENUM_ARM = 0x7FFFFFFF
} VkPhysicalDeviceDataGraphProcessingEngineTypeARM;

typedef enum VkPhysicalDeviceDataGraphOperationTypeARM {
    VK_PHYSICAL_DEVICE_DATA_GRAPH_OPERATION_TYPE_SPIRV_EXTENDED_INSTRUCTION_SET_ARM = 0,
    VK_PHYSICAL_DEVICE_DATA_GRAPH_OPERATION_TYPE_MAX_ENUM_ARM = 0x7FFFFFFF
} VkPhysicalDeviceDataGraphOperationTypeARM;

typedef enum VkVideoEncodeRgbModelConversionFlagBitsVALVE {
    VK_VIDEO_ENCODE_RGB_MODEL_CONVERSION_RGB_IDENTITY_BIT_VALVE = 1,
    VK_VIDEO_ENCODE_RGB_MODEL_CONVERSION_YCBCR_IDENTITY_BIT_VALVE = 2,
    VK_VIDEO_ENCODE_RGB_MODEL_CONVERSION_YCBCR_709_BIT_VALVE = 4,
    VK_VIDEO_ENCODE_RGB_MODEL_CONVERSION_YCBCR_601_BIT_VALVE = 8,
    VK_VIDEO_ENCODE_RGB_MODEL_CONVERSION_YCBCR_2020_BIT_VALVE = 16,
    VK_VIDEO_ENCODE_RGB_MODEL_CONVERSION_FLAG_BITS_MAX_ENUM_VALVE = 0x7FFFFFFF
} VkVideoEncodeRgbModelConversionFlagBitsVALVE;

typedef enum VkVideoEncodeRgbRangeCompressionFlagBitsVALVE {
    VK_VIDEO_ENCODE_RGB_RANGE_COMPRESSION_FULL_RANGE_BIT_VALVE = 1,
    VK_VIDEO_ENCODE_RGB_RANGE_COMPRESSION_NARROW_RANGE_BIT_VALVE = 2,
    VK_VIDEO_ENCODE_RGB_RANGE_COMPRESSION_FLAG_BITS_MAX_ENUM_VALVE = 0x7FFFFFFF
} VkVideoEncodeRgbRangeCompressionFlagBitsVALVE;

typedef enum VkVideoEncodeRgbChromaOffsetFlagBitsVALVE {
    VK_VIDEO_ENCODE_RGB_CHROMA_OFFSET_COSITED_EVEN_BIT_VALVE = 1,
    VK_VIDEO_ENCODE_RGB_CHROMA_OFFSET_MIDPOINT_BIT_VALVE = 2,
    VK_VIDEO_ENCODE_RGB_CHROMA_OFFSET_FLAG_BITS_MAX_ENUM_VALVE = 0x7FFFFFFF
} VkVideoEncodeRgbChromaOffsetFlagBitsVALVE;

typedef enum VkColorSpaceKHR {
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
    VK_COLORSPACE_SRGB_NONLINEAR_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
    VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001,
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
    VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003,
    VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004,
    VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005,
    VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006,
    VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007,
    VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008,
    VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009,
    VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010,
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011,
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012,
    VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013,
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
    VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT,
    VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000,
    VK_COLOR_SPACE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkColorSpaceKHR;

typedef enum VkCompositeAlphaFlagBitsKHR {
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1,
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2,
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4,
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8,
    VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkCompositeAlphaFlagBitsKHR;

typedef enum VkDisplayPlaneAlphaFlagBitsKHR {
    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1,
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8,
    VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkDisplayPlaneAlphaFlagBitsKHR;

typedef enum VkPresentModeKHR {
    VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
    VK_PRESENT_MODE_MAILBOX_KHR = 1,
    VK_PRESENT_MODE_FIFO_KHR = 2,
    VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000,
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
    VK_PRESENT_MODE_FIFO_LATEST_READY_EXT = 1000361000,
    VK_PRESENT_MODE_FIFO_LATEST_READY_KHR = 1000361000,
    VK_PRESENT_MODE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkPresentModeKHR;

typedef enum VkSurfaceTransformFlagBitsKHR {
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1,
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2,
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4,
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128,
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256,
    VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkSurfaceTransformFlagBitsKHR;

typedef enum VkDisplaySurfaceStereoTypeNV {
    VK_DISPLAY_SURFACE_STEREO_TYPE_NONE_NV = 0,
    VK_DISPLAY_SURFACE_STEREO_TYPE_ONBOARD_DIN_NV = 1,
    VK_DISPLAY_SURFACE_STEREO_TYPE_HDMI_3D_NV = 2,
    VK_DISPLAY_SURFACE_STEREO_TYPE_INBAND_DISPLAYPORT_NV = 3,
    VK_DISPLAY_SURFACE_STEREO_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkDisplaySurfaceStereoTypeNV;

typedef enum VkDebugReportFlagBitsEXT {
    VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1,
    VK_DEBUG_REPORT_WARNING_BIT_EXT = 2,
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4,
    VK_DEBUG_REPORT_ERROR_BIT_EXT = 8,
    VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16,
    VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDebugReportFlagBitsEXT;

typedef enum VkDebugReportObjectTypeEXT {
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
    VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = 1000029000,
    VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = 1000029001,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000,
    VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT = 1000307000,
    VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT = 1000307001,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 1000366000,
    VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDebugReportObjectTypeEXT;

typedef enum VkDeviceMemoryReportEventTypeEXT {
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDeviceMemoryReportEventTypeEXT;

typedef enum VkRasterizationOrderAMD {
    VK_RASTERIZATION_ORDER_STRICT_AMD = 0,
    VK_RASTERIZATION_ORDER_RELAXED_AMD = 1,
    VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 0x7FFFFFFF
} VkRasterizationOrderAMD;

typedef enum VkExternalMemoryHandleTypeFlagBitsNV {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkExternalMemoryHandleTypeFlagBitsNV;

typedef enum VkExternalMemoryFeatureFlagBitsNV {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4,
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkExternalMemoryFeatureFlagBitsNV;

typedef enum VkValidationCheckEXT {
    VK_VALIDATION_CHECK_ALL_EXT = 0,
    VK_VALIDATION_CHECK_SHADERS_EXT = 1,
    VK_VALIDATION_CHECK_MAX_ENUM_EXT = 0x7FFFFFFF
} VkValidationCheckEXT;

typedef enum VkValidationFeatureEnableEXT {
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
    VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2,
    VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3,
    VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4,
    VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkValidationFeatureEnableEXT;

typedef enum VkValidationFeatureDisableEXT {
    VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,
    VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,
    VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,
    VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,
    VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
    VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,
    VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,
    VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7,
    VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkValidationFeatureDisableEXT;

typedef enum VkExternalMemoryHandleTypeFlagBits {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = 2048,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = 4096,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX = 16384,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLBUFFER_BIT_EXT = 65536,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLTEXTURE_BIT_EXT = 131072,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLHEAP_BIT_EXT = 262144,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalMemoryHandleTypeFlagBits;

typedef enum VkExternalMemoryHandleTypeFlagBits VkExternalMemoryHandleTypeFlagBitsKHR;

typedef enum VkExternalMemoryFeatureFlagBits {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4,
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalMemoryFeatureFlagBits;

typedef enum VkExternalMemoryFeatureFlagBits VkExternalMemoryFeatureFlagBitsKHR;

typedef enum VkExternalSemaphoreHandleTypeFlagBits {
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 128,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalSemaphoreHandleTypeFlagBits;

typedef enum VkExternalSemaphoreHandleTypeFlagBits VkExternalSemaphoreHandleTypeFlagBitsKHR;

typedef enum VkExternalSemaphoreFeatureFlagBits {
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2,
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalSemaphoreFeatureFlagBits;

typedef enum VkExternalSemaphoreFeatureFlagBits VkExternalSemaphoreFeatureFlagBitsKHR;

typedef enum VkSemaphoreImportFlagBits {
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1,
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
    VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSemaphoreImportFlagBits;

typedef enum VkSemaphoreImportFlagBits VkSemaphoreImportFlagBitsKHR;

typedef enum VkExternalFenceHandleTypeFlagBits {
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalFenceHandleTypeFlagBits;

typedef enum VkExternalFenceHandleTypeFlagBits VkExternalFenceHandleTypeFlagBitsKHR;

typedef enum VkExternalFenceFeatureFlagBits {
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2,
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalFenceFeatureFlagBits;

typedef enum VkExternalFenceFeatureFlagBits VkExternalFenceFeatureFlagBitsKHR;

typedef enum VkFenceImportFlagBits {
    VK_FENCE_IMPORT_TEMPORARY_BIT = 1,
    VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = VK_FENCE_IMPORT_TEMPORARY_BIT,
    VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkFenceImportFlagBits;

typedef enum VkFenceImportFlagBits VkFenceImportFlagBitsKHR;

typedef enum VkSurfaceCounterFlagBitsEXT {
    VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 1,
    VK_SURFACE_COUNTER_VBLANK_EXT = VK_SURFACE_COUNTER_VBLANK_BIT_EXT,
    VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkSurfaceCounterFlagBitsEXT;

typedef enum VkDisplayPowerStateEXT {
    VK_DISPLAY_POWER_STATE_OFF_EXT = 0,
    VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
    VK_DISPLAY_POWER_STATE_ON_EXT = 2,
    VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDisplayPowerStateEXT;

typedef enum VkDeviceEventTypeEXT {
    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
    VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDeviceEventTypeEXT;

typedef enum VkDisplayEventTypeEXT {
    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
    VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDisplayEventTypeEXT;

typedef enum VkPeerMemoryFeatureFlagBits {
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8,
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
    VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPeerMemoryFeatureFlagBits;

typedef enum VkPeerMemoryFeatureFlagBits VkPeerMemoryFeatureFlagBitsKHR;

typedef enum VkMemoryAllocateFlagBits {
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4,
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
    VK_MEMORY_ALLOCATE_ZERO_INITIALIZE_BIT_EXT = 8,
    VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkMemoryAllocateFlagBits;

typedef enum VkMemoryAllocateFlagBits VkMemoryAllocateFlagBitsKHR;

typedef enum VkDeviceGroupPresentModeFlagBitsKHR {
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1,
    VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2,
    VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4,
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8,
    VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkDeviceGroupPresentModeFlagBitsKHR;

typedef enum VkSwapchainCreateFlagBitsKHR {
    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1,
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2,
    VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4,
    VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT = 8,
    VK_SWAPCHAIN_CREATE_PRESENT_ID_2_BIT_KHR = 64,
    VK_SWAPCHAIN_CREATE_PRESENT_WAIT_2_BIT_KHR = 128,
    VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_KHR = 8,
    VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkSwapchainCreateFlagBitsKHR;

typedef enum VkSubgroupFeatureFlagBits {
    VK_SUBGROUP_FEATURE_BASIC_BIT = 1,
    VK_SUBGROUP_FEATURE_VOTE_BIT = 2,
    VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4,
    VK_SUBGROUP_FEATURE_BALLOT_BIT = 8,
    VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16,
    VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32,
    VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64,
    VK_SUBGROUP_FEATURE_QUAD_BIT = 128,
    VK_SUBGROUP_FEATURE_ROTATE_BIT = 512,
    VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT = 1024,
    VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256,
    VK_SUBGROUP_FEATURE_ROTATE_BIT_KHR = VK_SUBGROUP_FEATURE_ROTATE_BIT,
    VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT_KHR = VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT,
    VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSubgroupFeatureFlagBits;

typedef enum VkTessellationDomainOrigin {
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
    VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 0x7FFFFFFF
} VkTessellationDomainOrigin;

typedef enum VkTessellationDomainOrigin VkTessellationDomainOriginKHR;

typedef enum VkSamplerYcbcrModelConversion {
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 0x7FFFFFFF
} VkSamplerYcbcrModelConversion;

typedef enum VkSamplerYcbcrModelConversion VkSamplerYcbcrModelConversionKHR;

typedef enum VkSamplerYcbcrRange {
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,
    VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 0x7FFFFFFF
} VkSamplerYcbcrRange;

typedef enum VkSamplerYcbcrRange VkSamplerYcbcrRangeKHR;

typedef enum VkChromaLocation {
    VK_CHROMA_LOCATION_COSITED_EVEN = 0,
    VK_CHROMA_LOCATION_MIDPOINT = 1,
    VK_CHROMA_LOCATION_COSITED_EVEN_KHR = VK_CHROMA_LOCATION_COSITED_EVEN,
    VK_CHROMA_LOCATION_MIDPOINT_KHR = VK_CHROMA_LOCATION_MIDPOINT,
    VK_CHROMA_LOCATION_MAX_ENUM = 0x7FFFFFFF
} VkChromaLocation;

typedef enum VkChromaLocation VkChromaLocationKHR;

typedef enum VkSamplerReductionMode {
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0,
    VK_SAMPLER_REDUCTION_MODE_MIN = 1,
    VK_SAMPLER_REDUCTION_MODE_MAX = 2,
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE,
    VK_SAMPLER_REDUCTION_MODE_MIN_EXT = VK_SAMPLER_REDUCTION_MODE_MIN,
    VK_SAMPLER_REDUCTION_MODE_MAX_EXT = VK_SAMPLER_REDUCTION_MODE_MAX,
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM = 1000521000,
    VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = 0x7FFFFFFF
} VkSamplerReductionMode;

typedef enum VkSamplerReductionMode VkSamplerReductionModeEXT;

typedef enum VkBlendOverlapEXT {
    VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,
    VK_BLEND_OVERLAP_DISJOINT_EXT = 1,
    VK_BLEND_OVERLAP_CONJOINT_EXT = 2,
    VK_BLEND_OVERLAP_MAX_ENUM_EXT = 0x7FFFFFFF
} VkBlendOverlapEXT;

typedef enum VkDebugUtilsMessageSeverityFlagBitsEXT {
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDebugUtilsMessageSeverityFlagBitsEXT;

typedef enum VkDebugUtilsMessageTypeFlagBitsEXT {
    VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1,
    VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2,
    VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4,
    VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT = 8,
    VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDebugUtilsMessageTypeFlagBitsEXT;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef enum VkFullScreenExclusiveEXT {
    VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0,
    VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1,
    VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2,
    VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3,
    VK_FULL_SCREEN_EXCLUSIVE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkFullScreenExclusiveEXT;
#endif

typedef enum VkShaderFloatControlsIndependence {
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 0x7FFFFFFF
} VkShaderFloatControlsIndependence;

typedef enum VkShaderFloatControlsIndependence VkShaderFloatControlsIndependenceKHR;

typedef enum VkFragmentShadingRateCombinerOpKHR {
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = 0x7FFFFFFF
} VkFragmentShadingRateCombinerOpKHR;

typedef enum VkSubmitFlagBits {
    VK_SUBMIT_PROTECTED_BIT = 1,
    VK_SUBMIT_PROTECTED_BIT_KHR = VK_SUBMIT_PROTECTED_BIT,
    VK_SUBMIT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSubmitFlagBits;

typedef enum VkSubmitFlagBits VkSubmitFlagBitsKHR;

typedef enum VkGraphicsPipelineLibraryFlagBitsEXT {
    VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = 1,
    VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = 2,
    VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = 4,
    VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = 8,
    VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkGraphicsPipelineLibraryFlagBitsEXT;

typedef enum VkOpticalFlowGridSizeFlagBitsNV {
    VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV = 0,
    VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV = 1,
    VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV = 2,
    VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV = 4,
    VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV = 8,
    VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkOpticalFlowGridSizeFlagBitsNV;

typedef enum VkOpticalFlowUsageFlagBitsNV {
    VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV = 0,
    VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV = 1,
    VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV = 2,
    VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV = 4,
    VK_OPTICAL_FLOW_USAGE_COST_BIT_NV = 8,
    VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV = 16,
    VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkOpticalFlowUsageFlagBitsNV;

typedef enum VkOpticalFlowPerformanceLevelNV {
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = 0,
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = 1,
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = 2,
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = 3,
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV = 0x7FFFFFFF
} VkOpticalFlowPerformanceLevelNV;

typedef enum VkOpticalFlowSessionBindingPointNV {
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = 0,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = 1,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = 2,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = 3,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = 4,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = 5,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = 6,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = 7,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = 8,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV = 0x7FFFFFFF
} VkOpticalFlowSessionBindingPointNV;

typedef enum VkOpticalFlowSessionCreateFlagBitsNV {
    VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV = 1,
    VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV = 2,
    VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV = 4,
    VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV = 8,
    VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV = 16,
    VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkOpticalFlowSessionCreateFlagBitsNV;

typedef enum VkOpticalFlowExecuteFlagBitsNV {
    VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV = 1,
    VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkOpticalFlowExecuteFlagBitsNV;

typedef enum VkDeviceFaultAddressTypeEXT {
    VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = 0,
    VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = 1,
    VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = 2,
    VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = 3,
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = 4,
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = 5,
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = 6,
    VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDeviceFaultAddressTypeEXT;

typedef enum VkPresentScalingFlagBitsKHR {
    VK_PRESENT_SCALING_ONE_TO_ONE_BIT_KHR = 1,
    VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT = VK_PRESENT_SCALING_ONE_TO_ONE_BIT_KHR,
    VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_KHR = 2,
    VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT = VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_KHR,
    VK_PRESENT_SCALING_STRETCH_BIT_KHR = 4,
    VK_PRESENT_SCALING_STRETCH_BIT_EXT = VK_PRESENT_SCALING_STRETCH_BIT_KHR,
    VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkPresentScalingFlagBitsKHR;

typedef enum VkPresentScalingFlagBitsKHR VkPresentScalingFlagBitsEXT;

typedef enum VkPresentGravityFlagBitsKHR {
    VK_PRESENT_GRAVITY_MIN_BIT_KHR = 1,
    VK_PRESENT_GRAVITY_MIN_BIT_EXT = VK_PRESENT_GRAVITY_MIN_BIT_KHR,
    VK_PRESENT_GRAVITY_MAX_BIT_KHR = 2,
    VK_PRESENT_GRAVITY_MAX_BIT_EXT = VK_PRESENT_GRAVITY_MAX_BIT_KHR,
    VK_PRESENT_GRAVITY_CENTERED_BIT_KHR = 4,
    VK_PRESENT_GRAVITY_CENTERED_BIT_EXT = VK_PRESENT_GRAVITY_CENTERED_BIT_KHR,
    VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkPresentGravityFlagBitsKHR;

typedef enum VkPresentGravityFlagBitsKHR VkPresentGravityFlagBitsEXT;

typedef enum VkLayerSettingTypeEXT {
    VK_LAYER_SETTING_TYPE_BOOL32_EXT = 0,
    VK_LAYER_SETTING_TYPE_INT32_EXT = 1,
    VK_LAYER_SETTING_TYPE_INT64_EXT = 2,
    VK_LAYER_SETTING_TYPE_UINT32_EXT = 3,
    VK_LAYER_SETTING_TYPE_UINT64_EXT = 4,
    VK_LAYER_SETTING_TYPE_FLOAT32_EXT = 5,
    VK_LAYER_SETTING_TYPE_FLOAT64_EXT = 6,
    VK_LAYER_SETTING_TYPE_STRING_EXT = 7,
    VK_LAYER_SETTING_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkLayerSettingTypeEXT;

typedef enum VkLatencyMarkerNV {
    VK_LATENCY_MARKER_SIMULATION_START_NV = 0,
    VK_LATENCY_MARKER_SIMULATION_END_NV = 1,
    VK_LATENCY_MARKER_RENDERSUBMIT_START_NV = 2,
    VK_LATENCY_MARKER_RENDERSUBMIT_END_NV = 3,
    VK_LATENCY_MARKER_PRESENT_START_NV = 4,
    VK_LATENCY_MARKER_PRESENT_END_NV = 5,
    VK_LATENCY_MARKER_INPUT_SAMPLE_NV = 6,
    VK_LATENCY_MARKER_TRIGGER_FLASH_NV = 7,
    VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV = 8,
    VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV = 9,
    VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV = 10,
    VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV = 11,
    VK_LATENCY_MARKER_MAX_ENUM_NV = 0x7FFFFFFF
} VkLatencyMarkerNV;

typedef enum VkOutOfBandQueueTypeNV {
    VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV = 0,
    VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV = 1,
    VK_OUT_OF_BAND_QUEUE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkOutOfBandQueueTypeNV;

typedef uint64_t VkPhysicalDeviceSchedulingControlsFlagBitsARM;
static const VkPhysicalDeviceSchedulingControlsFlagBitsARM VK_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM = 1;

typedef enum VkMemoryUnmapFlagBits {
    VK_MEMORY_UNMAP_RESERVE_BIT_EXT = 1,
    VK_MEMORY_UNMAP_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkMemoryUnmapFlagBits;

typedef enum VkMemoryUnmapFlagBits VkMemoryUnmapFlagBitsKHR;

typedef enum VkVendorId {
    VK_VENDOR_ID_KHRONOS = 0x10000,
    VK_VENDOR_ID_VIV = 0x10001,
    VK_VENDOR_ID_VSI = 0x10002,
    VK_VENDOR_ID_KAZAN = 0x10003,
    VK_VENDOR_ID_CODEPLAY = 0x10004,
    VK_VENDOR_ID_MESA = 0x10005,
    VK_VENDOR_ID_POCL = 0x10006,
    VK_VENDOR_ID_MOBILEYE = 0x10007,
    VK_VENDOR_ID_MAX_ENUM = 0x7FFFFFFF
} VkVendorId;

typedef enum VkDriverId {
    VK_DRIVER_ID_AMD_PROPRIETARY = 1,
    VK_DRIVER_ID_AMD_OPEN_SOURCE = 2,
    VK_DRIVER_ID_MESA_RADV = 3,
    VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4,
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5,
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6,
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7,
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8,
    VK_DRIVER_ID_ARM_PROPRIETARY = 9,
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10,
    VK_DRIVER_ID_GGP_PROPRIETARY = 11,
    VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12,
    VK_DRIVER_ID_MESA_LLVMPIPE = 13,
    VK_DRIVER_ID_MOLTENVK = 14,
    VK_DRIVER_ID_COREAVI_PROPRIETARY = 15,
    VK_DRIVER_ID_JUICE_PROPRIETARY = 16,
    VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17,
    VK_DRIVER_ID_MESA_TURNIP = 18,
    VK_DRIVER_ID_MESA_V3DV = 19,
    VK_DRIVER_ID_MESA_PANVK = 20,
    VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 21,
    VK_DRIVER_ID_MESA_VENUS = 22,
    VK_DRIVER_ID_MESA_DOZEN = 23,
    VK_DRIVER_ID_MESA_NVK = 24,
    VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = 25,
    VK_DRIVER_ID_MESA_HONEYKRISP = 26,
    VK_DRIVER_ID_VULKAN_SC_EMULATION_ON_VULKAN = 27,
    VK_DRIVER_ID_AMD_PROPRIETARY_KHR = VK_DRIVER_ID_AMD_PROPRIETARY,
    VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = VK_DRIVER_ID_AMD_OPEN_SOURCE,
    VK_DRIVER_ID_MESA_RADV_KHR = VK_DRIVER_ID_MESA_RADV,
    VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = VK_DRIVER_ID_NVIDIA_PROPRIETARY,
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS,
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA,
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = VK_DRIVER_ID_IMAGINATION_PROPRIETARY,
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = VK_DRIVER_ID_QUALCOMM_PROPRIETARY,
    VK_DRIVER_ID_ARM_PROPRIETARY_KHR = VK_DRIVER_ID_ARM_PROPRIETARY,
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = VK_DRIVER_ID_GOOGLE_SWIFTSHADER,
    VK_DRIVER_ID_GGP_PROPRIETARY_KHR = VK_DRIVER_ID_GGP_PROPRIETARY,
    VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = VK_DRIVER_ID_BROADCOM_PROPRIETARY,
    VK_DRIVER_ID_MAX_ENUM = 0x7FFFFFFF
} VkDriverId;

typedef enum VkDriverId VkDriverIdKHR;

typedef enum VkShadingRatePaletteEntryNV {
    VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0,
    VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1,
    VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2,
    VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3,
    VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11,
    VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 0x7FFFFFFF
} VkShadingRatePaletteEntryNV;

typedef enum VkCoarseSampleOrderTypeNV {
    VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0,
    VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1,
    VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2,
    VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,
    VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkCoarseSampleOrderTypeNV;

typedef enum VkPipelineExecutableStatisticFormatKHR {
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 0x7FFFFFFF
} VkPipelineExecutableStatisticFormatKHR;

typedef enum VkVideoCodecOperationFlagBitsKHR {
    VK_VIDEO_CODEC_OPERATION_NONE_KHR = 0,
    VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR = 65536,
    VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR = 131072,
    VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR = 1,
    VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR = 2,
    VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR = 4,
    VK_VIDEO_CODEC_OPERATION_ENCODE_AV1_BIT_KHR = 262144,
    VK_VIDEO_CODEC_OPERATION_DECODE_VP9_BIT_KHR = 8,
    VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoCodecOperationFlagBitsKHR;

typedef enum VkVideoChromaSubsamplingFlagBitsKHR {
    VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = 0,
    VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = 1,
    VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = 2,
    VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = 4,
    VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = 8,
    VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoChromaSubsamplingFlagBitsKHR;

typedef enum VkVideoComponentBitDepthFlagBitsKHR {
    VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = 0,
    VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = 1,
    VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = 4,
    VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = 16,
    VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoComponentBitDepthFlagBitsKHR;

typedef enum VkVideoCapabilityFlagBitsKHR {
    VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = 1,
    VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = 2,
    VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoCapabilityFlagBitsKHR;

typedef enum VkVideoSessionCreateFlagBitsKHR {
    VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = 1,
    VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR = 2,
    VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR = 4,
    VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR = 8,
    VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_EMPHASIS_MAP_BIT_KHR = 16,
    VK_VIDEO_SESSION_CREATE_INLINE_SESSION_PARAMETERS_BIT_KHR = 32,
    VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoSessionCreateFlagBitsKHR;

typedef enum VkVideoSessionParametersCreateFlagBitsKHR {
    VK_VIDEO_SESSION_PARAMETERS_CREATE_QUANTIZATION_MAP_COMPATIBLE_BIT_KHR = 1,
    VK_VIDEO_SESSION_PARAMETERS_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoSessionParametersCreateFlagBitsKHR;

typedef enum VkVideoCodingControlFlagBitsKHR {
    VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR = 1,
    VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR = 2,
    VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR = 4,
    VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoCodingControlFlagBitsKHR;

typedef enum VkQueryResultStatusKHR {
    VK_QUERY_RESULT_STATUS_ERROR_KHR = -1,
    VK_QUERY_RESULT_STATUS_NOT_READY_KHR = 0,
    VK_QUERY_RESULT_STATUS_COMPLETE_KHR = 1,
    VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR = -1000299000,
    VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkQueryResultStatusKHR;

typedef enum VkVideoDecodeUsageFlagBitsKHR {
    VK_VIDEO_DECODE_USAGE_DEFAULT_KHR = 0,
    VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = 1,
    VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = 2,
    VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = 4,
    VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoDecodeUsageFlagBitsKHR;

typedef enum VkVideoDecodeCapabilityFlagBitsKHR {
    VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = 1,
    VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = 2,
    VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoDecodeCapabilityFlagBitsKHR;

typedef enum VkVideoDecodeH264PictureLayoutFlagBitsKHR {
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR = 0,
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR = 1,
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR = 2,
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoDecodeH264PictureLayoutFlagBitsKHR;

typedef enum VkVideoEncodeFlagBitsKHR {
    VK_VIDEO_ENCODE_INTRA_REFRESH_BIT_KHR = 4,
    VK_VIDEO_ENCODE_WITH_QUANTIZATION_DELTA_MAP_BIT_KHR = 1,
    VK_VIDEO_ENCODE_WITH_EMPHASIS_MAP_BIT_KHR = 2,
    VK_VIDEO_ENCODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeFlagBitsKHR;

typedef enum VkVideoEncodeUsageFlagBitsKHR {
    VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR = 0,
    VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR = 1,
    VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR = 2,
    VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR = 4,
    VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR = 8,
    VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeUsageFlagBitsKHR;

typedef enum VkVideoEncodeContentFlagBitsKHR {
    VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR = 0,
    VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR = 1,
    VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR = 2,
    VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR = 4,
    VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeContentFlagBitsKHR;

typedef enum VkVideoEncodeTuningModeKHR {
    VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR = 0,
    VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR = 1,
    VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR = 2,
    VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR = 3,
    VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR = 4,
    VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeTuningModeKHR;

typedef enum VkVideoEncodeCapabilityFlagBitsKHR {
    VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR = 1,
    VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR = 2,
    VK_VIDEO_ENCODE_CAPABILITY_QUANTIZATION_DELTA_MAP_BIT_KHR = 4,
    VK_VIDEO_ENCODE_CAPABILITY_EMPHASIS_MAP_BIT_KHR = 8,
    VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeCapabilityFlagBitsKHR;

typedef enum VkVideoEncodeFeedbackFlagBitsKHR {
    VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR = 1,
    VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR = 2,
    VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR = 4,
    VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeFeedbackFlagBitsKHR;

typedef enum VkVideoEncodeRateControlModeFlagBitsKHR {
    VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR = 0,
    VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR = 1,
    VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR = 2,
    VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR = 4,
    VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeRateControlModeFlagBitsKHR;

typedef enum VkVideoEncodeIntraRefreshModeFlagBitsKHR {
    VK_VIDEO_ENCODE_INTRA_REFRESH_MODE_NONE_KHR = 0,
    VK_VIDEO_ENCODE_INTRA_REFRESH_MODE_PER_PICTURE_PARTITION_BIT_KHR = 1,
    VK_VIDEO_ENCODE_INTRA_REFRESH_MODE_BLOCK_BASED_BIT_KHR = 2,
    VK_VIDEO_ENCODE_INTRA_REFRESH_MODE_BLOCK_ROW_BASED_BIT_KHR = 4,
    VK_VIDEO_ENCODE_INTRA_REFRESH_MODE_BLOCK_COLUMN_BASED_BIT_KHR = 8,
    VK_VIDEO_ENCODE_INTRA_REFRESH_MODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeIntraRefreshModeFlagBitsKHR;

typedef enum VkVideoEncodeH264CapabilityFlagBitsKHR {
    VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 1,
    VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 2,
    VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR = 4,
    VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR = 8,
    VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 16,
    VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 32,
    VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 64,
    VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR = 128,
    VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR = 256,
    VK_VIDEO_ENCODE_H264_CAPABILITY_B_PICTURE_INTRA_REFRESH_BIT_KHR = 1024,
    VK_VIDEO_ENCODE_H264_CAPABILITY_MB_QP_DIFF_WRAPAROUND_BIT_KHR = 512,
    VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeH264CapabilityFlagBitsKHR;

typedef enum VkVideoEncodeH264StdFlagBitsKHR {
    VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 1,
    VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR = 2,
    VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR = 4,
    VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 8,
    VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 16,
    VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR = 32,
    VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 64,
    VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR = 128,
    VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR = 256,
    VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR = 512,
    VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR = 1024,
    VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR = 2048,
    VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR = 4096,
    VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR = 8192,
    VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 16384,
    VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR = 32768,
    VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR = 65536,
    VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR = 131072,
    VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR = 524288,
    VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 1048576,
    VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeH264StdFlagBitsKHR;

typedef enum VkVideoEncodeH264RateControlFlagBitsKHR {
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 1,
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 2,
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 4,
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 8,
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR = 16,
    VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeH264RateControlFlagBitsKHR;

typedef enum VkVideoEncodeH265CapabilityFlagBitsKHR {
    VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 1,
    VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 2,
    VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR = 4,
    VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR = 8,
    VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 16,
    VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 32,
    VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 64,
    VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR = 128,
    VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR = 256,
    VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR = 512,
    VK_VIDEO_ENCODE_H265_CAPABILITY_B_PICTURE_INTRA_REFRESH_BIT_KHR = 2048,
    VK_VIDEO_ENCODE_H265_CAPABILITY_CU_QP_DIFF_WRAPAROUND_BIT_KHR = 1024,
    VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeH265CapabilityFlagBitsKHR;

typedef enum VkVideoEncodeH265StdFlagBitsKHR {
    VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 1,
    VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR = 2,
    VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR = 4,
    VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR = 8,
    VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR = 16,
    VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR = 32,
    VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 64,
    VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR = 128,
    VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR = 256,
    VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR = 512,
    VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR = 1024,
    VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR = 2048,
    VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR = 4096,
    VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR = 8192,
    VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 16384,
    VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR = 32768,
    VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR = 65536,
    VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR = 131072,
    VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR = 262144,
    VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR = 524288,
    VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 1048576,
    VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeH265StdFlagBitsKHR;

typedef enum VkVideoEncodeH265RateControlFlagBitsKHR {
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 1,
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 2,
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 4,
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 8,
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR = 16,
    VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeH265RateControlFlagBitsKHR;

typedef enum VkVideoEncodeH265CtbSizeFlagBitsKHR {
    VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR = 1,
    VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR = 2,
    VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR = 4,
    VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeH265CtbSizeFlagBitsKHR;

typedef enum VkVideoEncodeH265TransformBlockSizeFlagBitsKHR {
    VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR = 1,
    VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR = 2,
    VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR = 4,
    VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR = 8,
    VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeH265TransformBlockSizeFlagBitsKHR;

typedef enum VkVideoEncodeAV1CapabilityFlagBitsKHR {
    VK_VIDEO_ENCODE_AV1_CAPABILITY_PER_RATE_CONTROL_GROUP_MIN_MAX_Q_INDEX_BIT_KHR = 1,
    VK_VIDEO_ENCODE_AV1_CAPABILITY_GENERATE_OBU_EXTENSION_HEADER_BIT_KHR = 2,
    VK_VIDEO_ENCODE_AV1_CAPABILITY_PRIMARY_REFERENCE_CDF_ONLY_BIT_KHR = 4,
    VK_VIDEO_ENCODE_AV1_CAPABILITY_FRAME_SIZE_OVERRIDE_BIT_KHR = 8,
    VK_VIDEO_ENCODE_AV1_CAPABILITY_MOTION_VECTOR_SCALING_BIT_KHR = 16,
    VK_VIDEO_ENCODE_AV1_CAPABILITY_COMPOUND_PREDICTION_INTRA_REFRESH_BIT_KHR = 32,
    VK_VIDEO_ENCODE_AV1_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeAV1CapabilityFlagBitsKHR;

typedef enum VkVideoEncodeAV1StdFlagBitsKHR {
    VK_VIDEO_ENCODE_AV1_STD_UNIFORM_TILE_SPACING_FLAG_SET_BIT_KHR = 1,
    VK_VIDEO_ENCODE_AV1_STD_SKIP_MODE_PRESENT_UNSET_BIT_KHR = 2,
    VK_VIDEO_ENCODE_AV1_STD_PRIMARY_REF_FRAME_BIT_KHR = 4,
    VK_VIDEO_ENCODE_AV1_STD_DELTA_Q_BIT_KHR = 8,
    VK_VIDEO_ENCODE_AV1_STD_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeAV1StdFlagBitsKHR;

typedef enum VkVideoEncodeAV1RateControlFlagBitsKHR {
    VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 1,
    VK_VIDEO_ENCODE_AV1_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR = 2,
    VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 4,
    VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 8,
    VK_VIDEO_ENCODE_AV1_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeAV1RateControlFlagBitsKHR;

typedef enum VkVideoEncodeAV1SuperblockSizeFlagBitsKHR {
    VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_64_BIT_KHR = 1,
    VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_128_BIT_KHR = 2,
    VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeAV1SuperblockSizeFlagBitsKHR;

typedef enum VkVideoEncodeAV1PredictionModeKHR {
    VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_INTRA_ONLY_KHR = 0,
    VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_SINGLE_REFERENCE_KHR = 1,
    VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_UNIDIRECTIONAL_COMPOUND_KHR = 2,
    VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_BIDIRECTIONAL_COMPOUND_KHR = 3,
    VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeAV1PredictionModeKHR;

typedef enum VkVideoEncodeAV1RateControlGroupKHR {
    VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_INTRA_KHR = 0,
    VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_PREDICTIVE_KHR = 1,
    VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_BIPREDICTIVE_KHR = 2,
    VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeAV1RateControlGroupKHR;

typedef uint64_t VkAccessFlagBits3KHR;
static const VkAccessFlagBits3KHR VK_ACCESS_3_NONE_KHR = 0;

typedef enum VkDefaultVertexAttributeValueKHR {
    VK_DEFAULT_VERTEX_ATTRIBUTE_VALUE_ZERO_ZERO_ZERO_ZERO_KHR = 0,
    VK_DEFAULT_VERTEX_ATTRIBUTE_VALUE_ZERO_ZERO_ZERO_ONE_KHR = 1,
    VK_DEFAULT_VERTEX_ATTRIBUTE_VALUE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkDefaultVertexAttributeValueKHR;

typedef void (VKAPI_PTR *PFN_vkInternalAllocationNotification)(
    void*                                       pUserData,
    size_t                                      size,
    VkInternalAllocationType                    allocationType,
    VkSystemAllocationScope                     allocationScope);

typedef void (VKAPI_PTR *PFN_vkInternalFreeNotification)(
    void*                                       pUserData,
    size_t                                      size,
    VkInternalAllocationType                    allocationType,
    VkSystemAllocationScope                     allocationScope);

typedef void* (VKAPI_PTR *PFN_vkReallocationFunction)(
    void*                                       pUserData,
    void*                                       pOriginal,
    size_t                                      size,
    size_t                                      alignment,
    VkSystemAllocationScope                     allocationScope);

typedef void* (VKAPI_PTR *PFN_vkAllocationFunction)(
    void*                                       pUserData,
    size_t                                      size,
    size_t                                      alignment,
    VkSystemAllocationScope                     allocationScope);

typedef void (VKAPI_PTR *PFN_vkFreeFunction)(
    void*                                       pUserData,
    void*                                       pMemory);

typedef void (VKAPI_PTR *PFN_vkVoidFunction)(void);

typedef PFN_vkVoidFunction (VKAPI_PTR *PFN_vkGetInstanceProcAddrLUNARG)(
    VkInstance instance, const char* pName);

typedef struct VkBaseOutStructure {
    VkStructureType   sType;
    struct  VkBaseOutStructure *  pNext;
} VkBaseOutStructure;

typedef struct VkBaseInStructure {
    VkStructureType   sType;
    const struct  VkBaseInStructure *  pNext;
} VkBaseInStructure;

typedef struct VkOffset2D {
    int32_t          x;
    int32_t          y;
} VkOffset2D;

typedef struct VkOffset3D {
    int32_t          x;
    int32_t          y;
    int32_t          z;
} VkOffset3D;

typedef struct VkExtent2D {
    uint32_t          width;
    uint32_t          height;
} VkExtent2D;

typedef struct VkExtent3D {
    uint32_t          width;
    uint32_t          height;
    uint32_t          depth;
} VkExtent3D;

typedef struct VkViewport {
    float   x;
    float   y;
    float   width;
    float   height;
    float                         minDepth;
    float                         maxDepth;
} VkViewport;

typedef struct VkRect2D {
    VkOffset2D       offset;
    VkExtent2D       extent;
} VkRect2D;

typedef struct VkClearRect {
    VkRect2D         rect;
    uint32_t         baseArrayLayer;
    uint32_t         layerCount;
} VkClearRect;

typedef struct VkComponentMapping {
    VkComponentSwizzle   r;
    VkComponentSwizzle   g;
    VkComponentSwizzle   b;
    VkComponentSwizzle   a;
} VkComponentMapping;

typedef struct VkExtensionProperties {
    char   extensionName [ VK_MAX_EXTENSION_NAME_SIZE ];
    uint32_t                     specVersion;
} VkExtensionProperties;

typedef struct VkLayerProperties {
    char   layerName [ VK_MAX_EXTENSION_NAME_SIZE ];
    uint32_t                     specVersion;
    uint32_t                     implementationVersion;
    char   description [ VK_MAX_DESCRIPTION_SIZE ];
} VkLayerProperties;

typedef struct VkApplicationInfo {
    VkStructureType   sType;
    const  void *      pNext;
    const  char *      pApplicationName;
    uint32_t          applicationVersion;
    const  char *      pEngineName;
    uint32_t          engineVersion;
    uint32_t          apiVersion;
} VkApplicationInfo;

typedef struct VkAllocationCallbacks {
    void *            pUserData;
    PFN_vkAllocationFunction     pfnAllocation;
    PFN_vkReallocationFunction   pfnReallocation;
    PFN_vkFreeFunction      pfnFree;
    PFN_vkInternalAllocationNotification   pfnInternalAllocation;
    PFN_vkInternalFreeNotification   pfnInternalFree;
} VkAllocationCallbacks;

typedef struct VkDescriptorImageInfo {
    VkSampler         sampler;
    VkImageView       imageView;
    VkImageLayout     imageLayout;
} VkDescriptorImageInfo;

typedef struct VkCopyDescriptorSet {
    VkStructureType   sType;
    const  void *             pNext;
    VkDescriptorSet          srcSet;
    uint32_t                 srcBinding;
    uint32_t                 srcArrayElement;
    VkDescriptorSet          dstSet;
    uint32_t                 dstBinding;
    uint32_t                 dstArrayElement;
    uint32_t                 descriptorCount;
} VkCopyDescriptorSet;

typedef struct VkDescriptorPoolSize {
    VkDescriptorType         type;
    uint32_t                 descriptorCount;
} VkDescriptorPoolSize;

typedef struct VkDescriptorSetAllocateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkDescriptorPool         descriptorPool;
    uint32_t                 descriptorSetCount;
    const  VkDescriptorSetLayout *  pSetLayouts;
} VkDescriptorSetAllocateInfo;

typedef struct VkSpecializationMapEntry {
    uint32_t                       constantID;
    uint32_t                       offset;
    size_t   size;
} VkSpecializationMapEntry;

typedef struct VkSpecializationInfo {
    uint32_t                 mapEntryCount;
    const  VkSpecializationMapEntry *  pMapEntries;
    size_t                   dataSize;
    const  void *             pData;
} VkSpecializationInfo;

typedef struct VkVertexInputBindingDescription {
    uint32_t                 binding;
    uint32_t                 stride;
    VkVertexInputRate        inputRate;
} VkVertexInputBindingDescription;

typedef struct VkVertexInputAttributeDescription {
    uint32_t                 location;
    uint32_t                 binding;
    VkFormat                 format;
    uint32_t                 offset;
} VkVertexInputAttributeDescription;

typedef struct VkStencilOpState {
    VkStencilOp              failOp;
    VkStencilOp              passOp;
    VkStencilOp              depthFailOp;
    VkCompareOp              compareOp;
    uint32_t                 compareMask;
    uint32_t                 writeMask;
    uint32_t                 reference;
} VkStencilOpState;

typedef struct VkPipelineCacheHeaderVersionOne {
    uint32_t                 headerSize;
    VkPipelineCacheHeaderVersion   headerVersion;
    uint32_t                 vendorID;
    uint32_t                 deviceID;
    uint8_t                  pipelineCacheUUID [ VK_UUID_SIZE ];
} VkPipelineCacheHeaderVersionOne;

typedef struct VkPipelineBinaryHandlesInfoKHR {
    VkStructureType   sType;
    const  void *                                     pNext;
    uint32_t                                   pipelineBinaryCount;
    VkPipelineBinaryKHR *  pPipelineBinaries;
} VkPipelineBinaryHandlesInfoKHR;

typedef struct VkPipelineBinaryDataKHR {
    size_t                                 dataSize;
    void *                  pData;
} VkPipelineBinaryDataKHR;

typedef struct VkPipelineBinaryKeyKHR {
    VkStructureType   sType;
    void *           pNext;
    uint32_t   keySize;
    uint8_t                          key [ VK_MAX_PIPELINE_BINARY_KEY_SIZE_KHR ];
} VkPipelineBinaryKeyKHR;

typedef struct VkPipelineBinaryInfoKHR {
    VkStructureType   sType;
    const  void *                                          pNext;
    uint32_t                                                              binaryCount;
    const  VkPipelineBinaryKHR *                         pPipelineBinaries;
} VkPipelineBinaryInfoKHR;

typedef struct VkReleaseCapturedPipelineDataInfoKHR {
    VkStructureType   sType;
    void *           pNext;
    VkPipeline      pipeline;
} VkReleaseCapturedPipelineDataInfoKHR;

typedef struct VkPipelineBinaryDataInfoKHR {
    VkStructureType   sType;
    void *           pNext;
    VkPipelineBinaryKHR      pipelineBinary;
} VkPipelineBinaryDataInfoKHR;

typedef struct VkPipelineCreateInfoKHR {
    VkStructureType   sType;
    void *           pNext;
} VkPipelineCreateInfoKHR;

typedef struct VkCommandBufferAllocateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkCommandPool            commandPool;
    VkCommandBufferLevel     level;
    uint32_t                 commandBufferCount;
} VkCommandBufferAllocateInfo;

typedef union VkClearColorValue {
    float                    float32 [4];
    int32_t                  int32 [4];
    uint32_t                 uint32 [4];
} VkClearColorValue;

typedef struct VkClearDepthStencilValue {
    float                    depth;
    uint32_t                 stencil;
} VkClearDepthStencilValue;

typedef union VkClearValue {
    VkClearColorValue        color;
    VkClearDepthStencilValue   depthStencil;
} VkClearValue;

typedef struct VkAttachmentReference {
    uint32_t                 attachment;
    VkImageLayout            layout;
} VkAttachmentReference;

typedef struct VkDrawIndirectCommand {
    uint32_t                         vertexCount;
    uint32_t                         instanceCount;
    uint32_t                         firstVertex;
    uint32_t   firstInstance;
} VkDrawIndirectCommand;

typedef struct VkDrawIndexedIndirectCommand {
    uint32_t                         indexCount;
    uint32_t                         instanceCount;
    uint32_t                         firstIndex;
    int32_t                          vertexOffset;
    uint32_t   firstInstance;
} VkDrawIndexedIndirectCommand;

typedef struct VkDispatchIndirectCommand {
    uint32_t   x;
    uint32_t   y;
    uint32_t   z;
} VkDispatchIndirectCommand;

typedef struct VkMultiDrawInfoEXT {
    uint32_t   firstVertex;
    uint32_t   vertexCount;
} VkMultiDrawInfoEXT;

typedef struct VkMultiDrawIndexedInfoEXT {
    uint32_t   firstIndex;
    uint32_t   indexCount;
    int32_t   vertexOffset;
} VkMultiDrawIndexedInfoEXT;

typedef struct VkDisplayPlanePropertiesKHR {
    VkDisplayKHR                       currentDisplay;
    uint32_t                           currentStackIndex;
} VkDisplayPlanePropertiesKHR;

typedef struct VkDisplayModeParametersKHR {
    VkExtent2D                         visibleRegion;
    uint32_t     refreshRate;
} VkDisplayModeParametersKHR;

typedef struct VkDisplayModePropertiesKHR {
    VkDisplayModeKHR                   displayMode;
    VkDisplayModeParametersKHR         parameters;
} VkDisplayModePropertiesKHR;

typedef struct VkDisplaySurfaceStereoCreateInfoNV {
    VkStructureType   sType;
    const  void *       pNext;
    VkDisplaySurfaceStereoTypeNV       stereoType;
} VkDisplaySurfaceStereoCreateInfoNV;

typedef struct VkSurfaceFormatKHR {
    VkFormat                           format;
    VkColorSpaceKHR                    colorSpace;
} VkSurfaceFormatKHR;

typedef struct VkPresentInfoKHR {
    VkStructureType   sType;
    const  void *   pNext;
    uint32_t           waitSemaphoreCount;
    const  VkSemaphore *  pWaitSemaphores;
    uint32_t                           swapchainCount;
    const  VkSwapchainKHR *  pSwapchains;
    const  uint32_t *  pImageIndices;
    VkResult *  pResults;
} VkPresentInfoKHR;

typedef struct VkValidationFlagsEXT {
    VkStructureType                    sType;
    const  void *                       pNext;
    uint32_t                           disabledValidationCheckCount;
    const  VkValidationCheckEXT *  pDisabledValidationChecks;
} VkValidationFlagsEXT;

typedef struct VkValidationFeaturesEXT {
    VkStructureType    sType;
    const  void *                       pNext;
    uint32_t                           enabledValidationFeatureCount;
    const  VkValidationFeatureEnableEXT *  pEnabledValidationFeatures;
    uint32_t                           disabledValidationFeatureCount;
    const  VkValidationFeatureDisableEXT *  pDisabledValidationFeatures;
} VkValidationFeaturesEXT;

typedef struct VkLayerSettingEXT {
    const  char *  pLayerName;
    const  char *  pSettingName;
    VkLayerSettingTypeEXT         type;
    uint32_t                           valueCount;
    const  void *  pValues;
} VkLayerSettingEXT;

typedef struct VkPipelineRasterizationStateRasterizationOrderAMD {
    VkStructureType   sType;
    const  void *                       pNext;
    VkRasterizationOrderAMD            rasterizationOrder;
} VkPipelineRasterizationStateRasterizationOrderAMD;

typedef struct VkDebugMarkerObjectNameInfoEXT {
    VkStructureType   sType;
    const  void *                       pNext;
    VkDebugReportObjectTypeEXT         objectType;
    uint64_t                           object;
    const  char *  pObjectName;
} VkDebugMarkerObjectNameInfoEXT;

typedef struct VkDebugMarkerObjectTagInfoEXT {
    VkStructureType   sType;
    const  void *                       pNext;
    VkDebugReportObjectTypeEXT         objectType;
    uint64_t                           object;
    uint64_t                           tagName;
    size_t                             tagSize;
    const  void *         pTag;
} VkDebugMarkerObjectTagInfoEXT;

typedef struct VkDebugMarkerMarkerInfoEXT {
    VkStructureType   sType;
    const  void *                       pNext;
    const  char *  pMarkerName;
    float              color [4];
} VkDebugMarkerMarkerInfoEXT;

typedef struct VkDedicatedAllocationMemoryAllocateInfoNV {
    VkStructureType   sType;
    const  void *                       pNext;
    VkImage            image;
    VkBuffer           buffer;
} VkDedicatedAllocationMemoryAllocateInfoNV;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkExportMemoryWin32HandleInfoNV {
    VkStructureType   sType;
    const  void *                       pNext;
    const  SECURITY_ATTRIBUTES *        pAttributes;
    DWORD                              dwAccess;
} VkExportMemoryWin32HandleInfoNV;
#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkWin32KeyedMutexAcquireReleaseInfoNV {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t                           acquireCount;
    const  VkDeviceMemory *             pAcquireSyncs;
    const  uint64_t *                   pAcquireKeys;
    const  uint32_t *                   pAcquireTimeoutMilliseconds;
    uint32_t                           releaseCount;
    const  VkDeviceMemory *             pReleaseSyncs;
    const  uint64_t *                   pReleaseKeys;
} VkWin32KeyedMutexAcquireReleaseInfoNV;
#endif

typedef struct VkDevicePrivateDataCreateInfo {
    VkStructureType   sType;
    const  void *                             pNext;
    uint32_t                                 privateDataSlotRequestCount;
} VkDevicePrivateDataCreateInfo;

typedef struct VkDevicePrivateDataCreateInfo  VkDevicePrivateDataCreateInfoEXT;

typedef struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    VkStructureType   sType;
    void *     pNext;
    uint32_t           maxGraphicsShaderGroupCount;
    uint32_t           maxIndirectSequenceCount;
    uint32_t           maxIndirectCommandsTokenCount;
    uint32_t           maxIndirectCommandsStreamCount;
    uint32_t           maxIndirectCommandsTokenOffset;
    uint32_t           maxIndirectCommandsStreamStride;
    uint32_t           minSequencesCountBufferOffsetAlignment;
    uint32_t           minSequencesIndexBufferOffsetAlignment;
    uint32_t           minIndirectCommandsBufferOffsetAlignment;
} VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV;

typedef struct VkPhysicalDeviceClusterAccelerationStructurePropertiesNV {
    VkStructureType   sType;
    void *     pNext;
    uint32_t                         maxVerticesPerCluster;
    uint32_t                         maxTrianglesPerCluster;
    uint32_t                         clusterScratchByteAlignment;
    uint32_t                         clusterByteAlignment;
    uint32_t                         clusterTemplateByteAlignment;
    uint32_t                         clusterBottomLevelByteAlignment;
    uint32_t                         clusterTemplateBoundsByteAlignment;
    uint32_t                         maxClusterGeometryIndex;
} VkPhysicalDeviceClusterAccelerationStructurePropertiesNV;

typedef struct VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV {
    uint32_t                             geometryIndex :24;
    uint32_t                             reserved :5;
    uint32_t                             geometryFlags :3;
} VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV;

typedef struct VkClusterAccelerationStructureClustersBottomLevelInputNV {
    VkStructureType   sType;
    void *                           pNext;
    uint32_t                                         maxTotalClusterCount;
    uint32_t                                         maxClusterCountPerAccelerationStructure;
} VkClusterAccelerationStructureClustersBottomLevelInputNV;

typedef struct VkClusterAccelerationStructureTriangleClusterInputNV {
    VkStructureType   sType;
    void *                           pNext;
    VkFormat                                         vertexFormat;
    uint32_t                                         maxGeometryIndexValue;
    uint32_t                                         maxClusterUniqueGeometryCount;
    uint32_t                                         maxClusterTriangleCount;
    uint32_t                                         maxClusterVertexCount;
    uint32_t                                         maxTotalTriangleCount;
    uint32_t                                         maxTotalVertexCount;
    uint32_t                                         minPositionTruncateBitCount;
} VkClusterAccelerationStructureTriangleClusterInputNV;

typedef struct VkPhysicalDeviceMultiDrawPropertiesEXT {
    VkStructureType   sType;
    void *     pNext;
    uint32_t           maxMultiDrawCount;
} VkPhysicalDeviceMultiDrawPropertiesEXT;

typedef struct VkBindShaderGroupIndirectCommandNV {
    uint32_t           groupIndex;
} VkBindShaderGroupIndirectCommandNV;

typedef struct VkSetStateFlagsIndirectCommandNV {
    uint32_t            data;
} VkSetStateFlagsIndirectCommandNV;

typedef struct VkGeneratedCommandsMemoryRequirementsInfoNV {
    VkStructureType   sType;
    const  void *                  pNext;
    VkPipelineBindPoint           pipelineBindPoint;
    VkPipeline    pipeline;
    VkIndirectCommandsLayoutNV    indirectCommandsLayout;
    uint32_t                      maxSequencesCount;
} VkGeneratedCommandsMemoryRequirementsInfoNV;

typedef struct VkPipelineIndirectDeviceAddressInfoNV {
    VkStructureType   sType;
    const  void *    pNext;
    VkPipelineBindPoint             pipelineBindPoint;
    VkPipeline                      pipeline;
} VkPipelineIndirectDeviceAddressInfoNV;

typedef struct VkPhysicalDevicePushDescriptorProperties {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t                           maxPushDescriptors;
} VkPhysicalDevicePushDescriptorProperties;

typedef struct VkPhysicalDevicePushDescriptorProperties  VkPhysicalDevicePushDescriptorPropertiesKHR;

typedef struct VkConformanceVersion {
    uint8_t                            major;
    uint8_t                            minor;
    uint8_t                            subminor;
    uint8_t                            patch;
} VkConformanceVersion;

typedef struct VkConformanceVersion  VkConformanceVersionKHR;

typedef struct VkPhysicalDeviceDriverProperties {
    VkStructureType   sType;
    void *                             pNext;
    VkDriverId                    driverID;
    char    driverName [ VK_MAX_DRIVER_NAME_SIZE ];
    char    driverInfo [ VK_MAX_DRIVER_INFO_SIZE ];
    VkConformanceVersion          conformanceVersion;
} VkPhysicalDeviceDriverProperties;

typedef struct VkPhysicalDeviceDriverProperties  VkPhysicalDeviceDriverPropertiesKHR;

typedef struct VkRectLayerKHR {
    VkOffset2D                         offset;
    VkExtent2D   extent;
    uint32_t                           layer;
} VkRectLayerKHR;

typedef struct VkPhysicalDeviceExternalImageFormatInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkExternalMemoryHandleTypeFlagBits   handleType;
} VkPhysicalDeviceExternalImageFormatInfo;

typedef struct VkPhysicalDeviceExternalImageFormatInfo  VkPhysicalDeviceExternalImageFormatInfoKHR;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkImportMemoryWin32HandleInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkExternalMemoryHandleTypeFlagBits   handleType;
    HANDLE             handle;
    LPCWSTR            name;
} VkImportMemoryWin32HandleInfoKHR;
#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkExportMemoryWin32HandleInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    const  SECURITY_ATTRIBUTES *  pAttributes;
    DWORD                              dwAccess;
    LPCWSTR                            name;
} VkExportMemoryWin32HandleInfoKHR;
#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkImportMemoryZirconHandleInfoFUCHSIA {
    VkStructureType   sType;
    const  void *                       pNext;
    VkExternalMemoryHandleTypeFlagBits   handleType;
    zx_handle_t             handle;
} VkImportMemoryZirconHandleInfoFUCHSIA;
#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkMemoryZirconHandlePropertiesFUCHSIA {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t                           memoryTypeBits;
} VkMemoryZirconHandlePropertiesFUCHSIA;
#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkMemoryGetZirconHandleInfoFUCHSIA {
    VkStructureType   sType;
    const  void *                       pNext;
    VkDeviceMemory                     memory;
    VkExternalMemoryHandleTypeFlagBits   handleType;
} VkMemoryGetZirconHandleInfoFUCHSIA;
#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkMemoryWin32HandlePropertiesKHR {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t                           memoryTypeBits;
} VkMemoryWin32HandlePropertiesKHR;
#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkMemoryGetWin32HandleInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkDeviceMemory                     memory;
    VkExternalMemoryHandleTypeFlagBits   handleType;
} VkMemoryGetWin32HandleInfoKHR;
#endif

typedef struct VkImportMemoryFdInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkExternalMemoryHandleTypeFlagBits   handleType;
    int                                fd;
} VkImportMemoryFdInfoKHR;

typedef struct VkMemoryFdPropertiesKHR {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t                           memoryTypeBits;
} VkMemoryFdPropertiesKHR;

typedef struct VkMemoryGetFdInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkDeviceMemory                     memory;
    VkExternalMemoryHandleTypeFlagBits   handleType;
} VkMemoryGetFdInfoKHR;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkWin32KeyedMutexAcquireReleaseInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t           acquireCount;
    const  VkDeviceMemory *  pAcquireSyncs;
    const  uint64_t *  pAcquireKeys;
    const  uint32_t *  pAcquireTimeouts;
    uint32_t           releaseCount;
    const  VkDeviceMemory *  pReleaseSyncs;
    const  uint64_t *  pReleaseKeys;
} VkWin32KeyedMutexAcquireReleaseInfoKHR;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkImportMemoryMetalHandleInfoEXT {
    VkStructureType   sType;
    const  void *                       pNext;
    VkExternalMemoryHandleTypeFlagBits   handleType;
    void *            handle;
} VkImportMemoryMetalHandleInfoEXT;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkMemoryMetalHandlePropertiesEXT {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t                           memoryTypeBits;
} VkMemoryMetalHandlePropertiesEXT;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkMemoryGetMetalHandleInfoEXT {
    VkStructureType   sType;
    const  void *                       pNext;
    VkDeviceMemory                     memory;
    VkExternalMemoryHandleTypeFlagBits   handleType;
} VkMemoryGetMetalHandleInfoEXT;
#endif

typedef struct VkPhysicalDeviceExternalSemaphoreInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkExternalSemaphoreHandleTypeFlagBits   handleType;
} VkPhysicalDeviceExternalSemaphoreInfo;

typedef struct VkPhysicalDeviceExternalSemaphoreInfo  VkPhysicalDeviceExternalSemaphoreInfoKHR;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkExportSemaphoreWin32HandleInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    const  SECURITY_ATTRIBUTES *        pAttributes;
    DWORD                              dwAccess;
    LPCWSTR                            name;
} VkExportSemaphoreWin32HandleInfoKHR;
#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkD3D12FenceSubmitInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t           waitSemaphoreValuesCount;
    const  uint64_t *  pWaitSemaphoreValues;
    uint32_t           signalSemaphoreValuesCount;
    const  uint64_t *  pSignalSemaphoreValues;
} VkD3D12FenceSubmitInfoKHR;
#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkSemaphoreGetWin32HandleInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkSemaphore                        semaphore;
    VkExternalSemaphoreHandleTypeFlagBits   handleType;
} VkSemaphoreGetWin32HandleInfoKHR;
#endif

typedef struct VkSemaphoreGetFdInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkSemaphore                        semaphore;
    VkExternalSemaphoreHandleTypeFlagBits   handleType;
} VkSemaphoreGetFdInfoKHR;

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkSemaphoreGetZirconHandleInfoFUCHSIA {
    VkStructureType   sType;
    const  void *                       pNext;
    VkSemaphore                        semaphore;
    VkExternalSemaphoreHandleTypeFlagBits   handleType;
} VkSemaphoreGetZirconHandleInfoFUCHSIA;
#endif

typedef struct VkPhysicalDeviceExternalFenceInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkExternalFenceHandleTypeFlagBits   handleType;
} VkPhysicalDeviceExternalFenceInfo;

typedef struct VkPhysicalDeviceExternalFenceInfo  VkPhysicalDeviceExternalFenceInfoKHR;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkExportFenceWin32HandleInfoKHR {
    VkStructureType   sType;
    const  void *                                 pNext;
    const  SECURITY_ATTRIBUTES *  pAttributes;
    DWORD                                        dwAccess;
    LPCWSTR                                      name;
} VkExportFenceWin32HandleInfoKHR;
#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkFenceGetWin32HandleInfoKHR {
    VkStructureType   sType;
    const  void *                             pNext;
    VkFence                                  fence;
    VkExternalFenceHandleTypeFlagBits     handleType;
} VkFenceGetWin32HandleInfoKHR;
#endif

typedef struct VkFenceGetFdInfoKHR {
    VkStructureType   sType;
    const  void *                             pNext;
    VkFence                                  fence;
    VkExternalFenceHandleTypeFlagBits     handleType;
} VkFenceGetFdInfoKHR;

typedef struct VkPhysicalDeviceMultiviewProperties {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t                           maxMultiviewViewCount;
    uint32_t                           maxMultiviewInstanceIndex;
} VkPhysicalDeviceMultiviewProperties;

typedef struct VkPhysicalDeviceMultiviewProperties  VkPhysicalDeviceMultiviewPropertiesKHR;

typedef struct VkRenderPassMultiviewCreateInfo {
    VkStructureType          sType;
    const  void *             pNext;
    uint32_t                 subpassCount;
    const  uint32_t *      pViewMasks;
    uint32_t                 dependencyCount;
    const  int32_t *    pViewOffsets;
    uint32_t                 correlationMaskCount;
    const  uint32_t *  pCorrelationMasks;
} VkRenderPassMultiviewCreateInfo;

typedef struct VkRenderPassMultiviewCreateInfo  VkRenderPassMultiviewCreateInfoKHR;

typedef struct VkDisplayPowerInfoEXT {
    VkStructureType   sType;
    const  void *                       pNext;
    VkDisplayPowerStateEXT             powerState;
} VkDisplayPowerInfoEXT;

typedef struct VkDeviceEventInfoEXT {
    VkStructureType   sType;
    const  void *                       pNext;
    VkDeviceEventTypeEXT               deviceEvent;
} VkDeviceEventInfoEXT;

typedef struct VkDisplayEventInfoEXT {
    VkStructureType   sType;
    const  void *                       pNext;
    VkDisplayEventTypeEXT              displayEvent;
} VkDisplayEventInfoEXT;

typedef struct VkBindBufferMemoryDeviceGroupInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t           deviceIndexCount;
    const  uint32_t *   pDeviceIndices;
} VkBindBufferMemoryDeviceGroupInfo;

typedef struct VkBindBufferMemoryDeviceGroupInfo  VkBindBufferMemoryDeviceGroupInfoKHR;

typedef struct VkBindImageMemoryDeviceGroupInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t           deviceIndexCount;
    const  uint32_t *   pDeviceIndices;
    uint32_t           splitInstanceBindRegionCount;
    const  VkRect2D *   pSplitInstanceBindRegions;
} VkBindImageMemoryDeviceGroupInfo;

typedef struct VkBindImageMemoryDeviceGroupInfo  VkBindImageMemoryDeviceGroupInfoKHR;

typedef struct VkDeviceGroupRenderPassBeginInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t                           deviceMask;
    uint32_t           deviceRenderAreaCount;
    const  VkRect2D *   pDeviceRenderAreas;
} VkDeviceGroupRenderPassBeginInfo;

typedef struct VkDeviceGroupRenderPassBeginInfo  VkDeviceGroupRenderPassBeginInfoKHR;

typedef struct VkDeviceGroupCommandBufferBeginInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t                           deviceMask;
} VkDeviceGroupCommandBufferBeginInfo;

typedef struct VkDeviceGroupCommandBufferBeginInfo  VkDeviceGroupCommandBufferBeginInfoKHR;

typedef struct VkDeviceGroupSubmitInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t           waitSemaphoreCount;
    const  uint32_t *     pWaitSemaphoreDeviceIndices;
    uint32_t           commandBufferCount;
    const  uint32_t *     pCommandBufferDeviceMasks;
    uint32_t           signalSemaphoreCount;
    const  uint32_t *   pSignalSemaphoreDeviceIndices;
} VkDeviceGroupSubmitInfo;

typedef struct VkDeviceGroupSubmitInfo  VkDeviceGroupSubmitInfoKHR;

typedef struct VkDeviceGroupBindSparseInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t                           resourceDeviceIndex;
    uint32_t                           memoryDeviceIndex;
} VkDeviceGroupBindSparseInfo;

typedef struct VkDeviceGroupBindSparseInfo  VkDeviceGroupBindSparseInfoKHR;

typedef struct VkImageSwapchainCreateInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkSwapchainKHR     swapchain;
} VkImageSwapchainCreateInfoKHR;

typedef struct VkBindImageMemorySwapchainInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkSwapchainKHR   swapchain;
    uint32_t                           imageIndex;
} VkBindImageMemorySwapchainInfoKHR;

typedef struct VkAcquireNextImageInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkSwapchainKHR   swapchain;
    uint64_t                           timeout;
    VkSemaphore   semaphore;
    VkFence   fence;
    uint32_t                           deviceMask;
} VkAcquireNextImageInfoKHR;

typedef struct VkDeviceGroupPresentInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t           swapchainCount;
    const  uint32_t *  pDeviceMasks;
    VkDeviceGroupPresentModeFlagBitsKHR   mode;
} VkDeviceGroupPresentInfoKHR;

typedef struct VkDeviceGroupDeviceCreateInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t                           physicalDeviceCount;
    const  VkPhysicalDevice *   pPhysicalDevices;
} VkDeviceGroupDeviceCreateInfo;

typedef struct VkDeviceGroupDeviceCreateInfo  VkDeviceGroupDeviceCreateInfoKHR;

typedef struct VkDescriptorUpdateTemplateEntry {
    uint32_t                           dstBinding;
    uint32_t                           dstArrayElement;
    uint32_t                           descriptorCount;
    VkDescriptorType                   descriptorType;
    size_t                             offset;
    size_t                             stride;
} VkDescriptorUpdateTemplateEntry;

typedef struct VkDescriptorUpdateTemplateEntry  VkDescriptorUpdateTemplateEntryKHR;

typedef struct VkXYColorEXT {
    float     x;
    float     y;
} VkXYColorEXT;

typedef struct VkPresentIdKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t                           swapchainCount;
    const  uint64_t *  pPresentIds;
} VkPresentIdKHR;

typedef struct VkPresentId2KHR {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t                           swapchainCount;
    const  uint64_t *  pPresentIds;
} VkPresentId2KHR;

typedef struct VkPresentWait2InfoKHR {
    VkStructureType   sType;
    const  void *            pNext;
    uint64_t                                presentId;
    uint64_t                                timeout;
} VkPresentWait2InfoKHR;

typedef struct VkHdrMetadataEXT {
    VkStructureType   sType;
    const  void *     pNext;
    VkXYColorEXT     displayPrimaryRed;
    VkXYColorEXT     displayPrimaryGreen;
    VkXYColorEXT     displayPrimaryBlue;
    VkXYColorEXT     whitePoint;
    float            maxLuminance;
    float            minLuminance;
    float            maxContentLightLevel;
    float            maxFrameAverageLightLevel;
} VkHdrMetadataEXT;

typedef struct VkHdrVividDynamicMetadataHUAWEI {
    VkStructureType   sType;
    const  void *                                          pNext;
    size_t                                       dynamicMetadataSize;
    const  void *    pDynamicMetadata;
} VkHdrVividDynamicMetadataHUAWEI;

typedef struct VkRefreshCycleDurationGOOGLE {
    uint64_t                           refreshDuration;
} VkRefreshCycleDurationGOOGLE;

typedef struct VkPastPresentationTimingGOOGLE {
    uint32_t                           presentID;
    uint64_t                           desiredPresentTime;
    uint64_t                           actualPresentTime;
    uint64_t                           earliestPresentTime;
    uint64_t                           presentMargin;
} VkPastPresentationTimingGOOGLE;

typedef struct VkPresentTimeGOOGLE {
    uint32_t                           presentID;
    uint64_t                           desiredPresentTime;
} VkPresentTimeGOOGLE;

typedef struct VkViewportWScalingNV {
    float            xcoeff;
    float            ycoeff;
} VkViewportWScalingNV;

typedef struct VkViewportSwizzleNV {
    VkViewportCoordinateSwizzleNV            x;
    VkViewportCoordinateSwizzleNV            y;
    VkViewportCoordinateSwizzleNV            z;
    VkViewportCoordinateSwizzleNV            w;
} VkViewportSwizzleNV;

typedef struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    VkStructureType   sType;
    void *                   pNext;
    uint32_t                 maxDiscardRectangles;
} VkPhysicalDeviceDiscardRectanglePropertiesEXT;

typedef struct VkPhysicalDeviceSurfaceInfo2KHR {
    VkStructureType   sType;
    const  void *  pNext;
    VkSurfaceKHR   surface;
} VkPhysicalDeviceSurfaceInfo2KHR;

typedef struct VkSurfaceFormat2KHR {
    VkStructureType   sType;
    void *  pNext;
    VkSurfaceFormatKHR   surfaceFormat;
} VkSurfaceFormat2KHR;

typedef struct VkDisplayPlaneProperties2KHR {
    VkStructureType   sType;
    void *  pNext;
    VkDisplayPlanePropertiesKHR   displayPlaneProperties;
} VkDisplayPlaneProperties2KHR;

typedef struct VkDisplayModeProperties2KHR {
    VkStructureType   sType;
    void *  pNext;
    VkDisplayModePropertiesKHR   displayModeProperties;
} VkDisplayModeProperties2KHR;

typedef struct VkDisplayPlaneInfo2KHR {
    VkStructureType   sType;
    const  void *  pNext;
    VkDisplayModeKHR   mode;
    uint32_t   planeIndex;
} VkDisplayPlaneInfo2KHR;

typedef struct VkBufferMemoryRequirementsInfo2 {
    VkStructureType   sType;
    const  void *                                                           pNext;
    VkBuffer                                                               buffer;
} VkBufferMemoryRequirementsInfo2;

typedef struct VkBufferMemoryRequirementsInfo2  VkBufferMemoryRequirementsInfo2KHR;

typedef struct VkImageMemoryRequirementsInfo2 {
    VkStructureType   sType;
    const  void *                                                           pNext;
    VkImage                                                                image;
} VkImageMemoryRequirementsInfo2;

typedef struct VkImageMemoryRequirementsInfo2  VkImageMemoryRequirementsInfo2KHR;

typedef struct VkImageSparseMemoryRequirementsInfo2 {
    VkStructureType   sType;
    const  void *                                                           pNext;
    VkImage                                                                image;
} VkImageSparseMemoryRequirementsInfo2;

typedef struct VkImageSparseMemoryRequirementsInfo2  VkImageSparseMemoryRequirementsInfo2KHR;

typedef struct VkPhysicalDevicePointClippingProperties {
    VkStructureType   sType;
    void *                             pNext;
    VkPointClippingBehavior       pointClippingBehavior;
} VkPhysicalDevicePointClippingProperties;

typedef struct VkPhysicalDevicePointClippingProperties  VkPhysicalDevicePointClippingPropertiesKHR;

typedef struct VkMemoryDedicatedAllocateInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkImage            image;
    VkBuffer           buffer;
} VkMemoryDedicatedAllocateInfo;

typedef struct VkMemoryDedicatedAllocateInfo  VkMemoryDedicatedAllocateInfoKHR;

typedef struct VkImageViewSlicedCreateInfoEXT {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t   sliceOffset;
    uint32_t   sliceCount;
} VkImageViewSlicedCreateInfoEXT;

typedef struct VkPipelineTessellationDomainOriginStateCreateInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkTessellationDomainOrigin      domainOrigin;
} VkPipelineTessellationDomainOriginStateCreateInfo;

typedef struct VkPipelineTessellationDomainOriginStateCreateInfo  VkPipelineTessellationDomainOriginStateCreateInfoKHR;

typedef struct VkSamplerYcbcrConversionInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkSamplerYcbcrConversion        conversion;
} VkSamplerYcbcrConversionInfo;

typedef struct VkSamplerYcbcrConversionInfo  VkSamplerYcbcrConversionInfoKHR;

typedef struct VkBindImagePlaneMemoryInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkImageAspectFlagBits              planeAspect;
} VkBindImagePlaneMemoryInfo;

typedef struct VkBindImagePlaneMemoryInfo  VkBindImagePlaneMemoryInfoKHR;

typedef struct VkImagePlaneMemoryRequirementsInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkImageAspectFlagBits              planeAspect;
} VkImagePlaneMemoryRequirementsInfo;

typedef struct VkImagePlaneMemoryRequirementsInfo  VkImagePlaneMemoryRequirementsInfoKHR;

typedef struct VkSamplerYcbcrConversionImageFormatProperties {
    VkStructureType   sType;
    void *       pNext;
    uint32_t                           combinedImageSamplerDescriptorCount;
} VkSamplerYcbcrConversionImageFormatProperties;

typedef struct VkSamplerYcbcrConversionImageFormatProperties  VkSamplerYcbcrConversionImageFormatPropertiesKHR;

typedef struct VkSampleLocationEXT {
    float                              x;
    float                              y;
} VkSampleLocationEXT;

typedef struct VkSampleLocationsInfoEXT {
    VkStructureType   sType;
    const  void *                             pNext;
    VkSampleCountFlagBits    sampleLocationsPerPixel;
    VkExtent2D                               sampleLocationGridSize;
    uint32_t                 sampleLocationsCount;
    const  VkSampleLocationEXT *  pSampleLocations;
} VkSampleLocationsInfoEXT;

typedef struct VkAttachmentSampleLocationsEXT {
    uint32_t                           attachmentIndex;
    VkSampleLocationsInfoEXT           sampleLocationsInfo;
} VkAttachmentSampleLocationsEXT;

typedef struct VkSubpassSampleLocationsEXT {
    uint32_t                           subpassIndex;
    VkSampleLocationsInfoEXT           sampleLocationsInfo;
} VkSubpassSampleLocationsEXT;

typedef struct VkRenderPassSampleLocationsBeginInfoEXT {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t           attachmentInitialSampleLocationsCount;
    const  VkAttachmentSampleLocationsEXT *  pAttachmentInitialSampleLocations;
    uint32_t           postSubpassSampleLocationsCount;
    const  VkSubpassSampleLocationsEXT *  pPostSubpassSampleLocations;
} VkRenderPassSampleLocationsBeginInfoEXT;

typedef struct VkMultisamplePropertiesEXT {
    VkStructureType   sType;
    void *                             pNext;
    VkExtent2D                         maxSampleLocationGridSize;
} VkMultisamplePropertiesEXT;

typedef struct VkSamplerReductionModeCreateInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkSamplerReductionMode             reductionMode;
} VkSamplerReductionModeCreateInfo;

typedef struct VkSamplerReductionModeCreateInfo  VkSamplerReductionModeCreateInfoEXT;

typedef struct VkPhysicalDeviceInlineUniformBlockProperties {
    VkStructureType   sType;
    void *                   pNext;
    uint32_t                 maxInlineUniformBlockSize;
    uint32_t                 maxPerStageDescriptorInlineUniformBlocks;
    uint32_t                 maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
    uint32_t                 maxDescriptorSetInlineUniformBlocks;
    uint32_t                 maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
} VkPhysicalDeviceInlineUniformBlockProperties;

typedef struct VkPhysicalDeviceInlineUniformBlockProperties  VkPhysicalDeviceInlineUniformBlockPropertiesEXT;

typedef struct VkWriteDescriptorSetInlineUniformBlock {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t                      dataSize;
    const  void *   pData;
} VkWriteDescriptorSetInlineUniformBlock;

typedef struct VkWriteDescriptorSetInlineUniformBlock  VkWriteDescriptorSetInlineUniformBlockEXT;

typedef struct VkDescriptorPoolInlineUniformBlockCreateInfo {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t                      maxInlineUniformBlockBindings;
} VkDescriptorPoolInlineUniformBlockCreateInfo;

typedef struct VkDescriptorPoolInlineUniformBlockCreateInfo  VkDescriptorPoolInlineUniformBlockCreateInfoEXT;

typedef struct VkImageFormatListCreateInfo {
    VkStructureType   sType;
    const  void *                             pNext;
    uint32_t                 viewFormatCount;
    const  VkFormat *   pViewFormats;
} VkImageFormatListCreateInfo;

typedef struct VkImageFormatListCreateInfo  VkImageFormatListCreateInfoKHR;

typedef struct VkShaderModuleValidationCacheCreateInfoEXT {
    VkStructureType   sType;
    const  void *             pNext;
    VkValidationCacheEXT      validationCache;
} VkShaderModuleValidationCacheCreateInfoEXT;

typedef struct VkPhysicalDeviceLayeredApiPropertiesKHR {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t                        vendorID;
    uint32_t                        deviceID;
    VkPhysicalDeviceLayeredApiKHR   layeredAPI;
    char                            deviceName [ VK_MAX_PHYSICAL_DEVICE_NAME_SIZE ];
} VkPhysicalDeviceLayeredApiPropertiesKHR;

typedef struct VkQueueFamilyOwnershipTransferPropertiesKHR {
    VkStructureType   sType;
    void *                                                                      pNext;
    uint32_t                                                                optimalImageTransferToQueueFamilies;
} VkQueueFamilyOwnershipTransferPropertiesKHR;

typedef struct VkRenderingAreaInfo {
    VkStructureType   sType;
    const  void *                                                 pNext;
    uint32_t                                                                     viewMask;
    uint32_t                                                     colorAttachmentCount;
    const  VkFormat *            pColorAttachmentFormats;
    VkFormat                                               depthAttachmentFormat;
    VkFormat                                               stencilAttachmentFormat;
} VkRenderingAreaInfo;

typedef struct VkRenderingAreaInfo  VkRenderingAreaInfoKHR;

typedef struct VkShaderResourceUsageAMD {
    uint32_t   numUsedVgprs;
    uint32_t   numUsedSgprs;
    uint32_t   ldsSizePerLocalWorkGroup;
    size_t   ldsUsageSizeInBytes;
    size_t   scratchMemUsageInBytes;
} VkShaderResourceUsageAMD;

typedef struct VkDeviceQueueGlobalPriorityCreateInfo {
    VkStructureType   sType;
    const  void *     pNext;
    VkQueueGlobalPriority            globalPriority;
} VkDeviceQueueGlobalPriorityCreateInfo;

typedef struct VkDeviceQueueGlobalPriorityCreateInfo  VkDeviceQueueGlobalPriorityCreateInfoKHR;

typedef struct VkDeviceQueueGlobalPriorityCreateInfo  VkDeviceQueueGlobalPriorityCreateInfoEXT;

typedef struct VkQueueFamilyGlobalPriorityProperties {
    VkStructureType   sType;
    void *                                             pNext;
    uint32_t                                           priorityCount;
    VkQueueGlobalPriority   priorities [ VK_MAX_GLOBAL_PRIORITY_SIZE ];
} VkQueueFamilyGlobalPriorityProperties;

typedef struct VkQueueFamilyGlobalPriorityProperties  VkQueueFamilyGlobalPriorityPropertiesKHR;

typedef struct VkQueueFamilyGlobalPriorityProperties  VkQueueFamilyGlobalPriorityPropertiesEXT;

typedef struct VkDebugUtilsObjectNameInfoEXT {
    VkStructureType   sType;
    const  void *                                             pNext;
    VkObjectType                                             objectType;
    uint64_t                         objectHandle;
    const  char *       pObjectName;
} VkDebugUtilsObjectNameInfoEXT;

typedef struct VkDebugUtilsObjectTagInfoEXT {
    VkStructureType   sType;
    const  void *                             pNext;
    VkObjectType                             objectType;
    uint64_t                                 objectHandle;
    uint64_t                                 tagName;
    size_t                                   tagSize;
    const  void *               pTag;
} VkDebugUtilsObjectTagInfoEXT;

typedef struct VkDebugUtilsLabelEXT {
    VkStructureType   sType;
    const  void *                             pNext;
    const  char *       pLabelName;
    float                    color [4];
} VkDebugUtilsLabelEXT;

typedef struct VkImportMemoryHostPointerInfoEXT {
    VkStructureType   sType;
    const  void *  pNext;
    VkExternalMemoryHandleTypeFlagBits   handleType;
    void *  pHostPointer;
} VkImportMemoryHostPointerInfoEXT;

typedef struct VkMemoryHostPointerPropertiesEXT {
    VkStructureType   sType;
    void *  pNext;
    uint32_t   memoryTypeBits;
} VkMemoryHostPointerPropertiesEXT;

typedef struct VkCalibratedTimestampInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkTimeDomainKHR                          timeDomain;
} VkCalibratedTimestampInfoKHR;

typedef struct VkCalibratedTimestampInfoKHR  VkCalibratedTimestampInfoEXT;

typedef struct VkPhysicalDeviceShaderCorePropertiesAMD {
    VkStructureType   sType;
    void *     pNext;
    uint32_t   shaderEngineCount;
    uint32_t   shaderArraysPerEngineCount;
    uint32_t   computeUnitsPerShaderArray;
    uint32_t   simdPerComputeUnit;
    uint32_t   wavefrontsPerSimd;
    uint32_t        wavefrontSize;
    uint32_t   sgprsPerSimd;
    uint32_t        minSgprAllocation;
    uint32_t        maxSgprAllocation;
    uint32_t     sgprAllocationGranularity;
    uint32_t   vgprsPerSimd;
    uint32_t        minVgprAllocation;
    uint32_t        maxVgprAllocation;
    uint32_t     vgprAllocationGranularity;
} VkPhysicalDeviceShaderCorePropertiesAMD;

typedef struct VkDescriptorSetVariableDescriptorCountAllocateInfo {
    VkStructureType   sType;
    const  void *                             pNext;
    uint32_t                 descriptorSetCount;
    const  uint32_t *  pDescriptorCounts;
} VkDescriptorSetVariableDescriptorCountAllocateInfo;

typedef struct VkDescriptorSetVariableDescriptorCountAllocateInfo  VkDescriptorSetVariableDescriptorCountAllocateInfoEXT;

typedef struct VkDescriptorSetVariableDescriptorCountLayoutSupport {
    VkStructureType   sType;
    void *             pNext;
    uint32_t           maxVariableDescriptorCount;
} VkDescriptorSetVariableDescriptorCountLayoutSupport;

typedef struct VkDescriptorSetVariableDescriptorCountLayoutSupport  VkDescriptorSetVariableDescriptorCountLayoutSupportEXT;

typedef struct VkSubpassBeginInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkSubpassContents        contents;
} VkSubpassBeginInfo;

typedef struct VkSubpassBeginInfo  VkSubpassBeginInfoKHR;

typedef struct VkSubpassEndInfo {
    VkStructureType   sType;
    const  void *             pNext;
} VkSubpassEndInfo;

typedef struct VkSubpassEndInfo  VkSubpassEndInfoKHR;

typedef struct VkPhysicalDeviceTimelineSemaphoreProperties {
    VkStructureType   sType;
    void *                   pNext;
    uint64_t                 maxTimelineSemaphoreValueDifference;
} VkPhysicalDeviceTimelineSemaphoreProperties;

typedef struct VkPhysicalDeviceTimelineSemaphoreProperties  VkPhysicalDeviceTimelineSemaphorePropertiesKHR;

typedef struct VkSemaphoreTypeCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkSemaphoreType          semaphoreType;
    uint64_t                 initialValue;
} VkSemaphoreTypeCreateInfo;

typedef struct VkSemaphoreTypeCreateInfo  VkSemaphoreTypeCreateInfoKHR;

typedef struct VkTimelineSemaphoreSubmitInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t           waitSemaphoreValueCount;
    const  uint64_t *  pWaitSemaphoreValues;
    uint32_t           signalSemaphoreValueCount;
    const  uint64_t *  pSignalSemaphoreValues;
} VkTimelineSemaphoreSubmitInfo;

typedef struct VkTimelineSemaphoreSubmitInfo  VkTimelineSemaphoreSubmitInfoKHR;

typedef struct VkSemaphoreSignalInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkSemaphore              semaphore;
    uint64_t                 value;
} VkSemaphoreSignalInfo;

typedef struct VkSemaphoreSignalInfo  VkSemaphoreSignalInfoKHR;

typedef struct VkVertexInputBindingDivisorDescription {
    uint32_t            binding;
    uint32_t            divisor;
} VkVertexInputBindingDivisorDescription;

typedef struct VkVertexInputBindingDivisorDescription  VkVertexInputBindingDivisorDescriptionKHR;

typedef struct VkVertexInputBindingDivisorDescription  VkVertexInputBindingDivisorDescriptionEXT;

typedef struct VkPipelineVertexInputDivisorStateCreateInfo {
    VkStructureType   sType;
    const  void *                          pNext;
    uint32_t                              vertexBindingDivisorCount;
    const  VkVertexInputBindingDivisorDescription *          pVertexBindingDivisors;
} VkPipelineVertexInputDivisorStateCreateInfo;

typedef struct VkPipelineVertexInputDivisorStateCreateInfo  VkPipelineVertexInputDivisorStateCreateInfoKHR;

typedef struct VkPipelineVertexInputDivisorStateCreateInfo  VkPipelineVertexInputDivisorStateCreateInfoEXT;

typedef struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    VkStructureType   sType;
    void *                   pNext;
    uint32_t                 maxVertexAttribDivisor;
} VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;

typedef struct VkPhysicalDevicePCIBusInfoPropertiesEXT {
    VkStructureType   sType;
    void *                   pNext;
    uint32_t                 pciDomain;
    uint32_t                 pciBus;
    uint32_t                 pciDevice;
    uint32_t                 pciFunction;
} VkPhysicalDevicePCIBusInfoPropertiesEXT;

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkImportAndroidHardwareBufferInfoANDROID {
    VkStructureType   sType;
    const  void *                         pNext;
    struct  AHardwareBuffer *             buffer;
} VkImportAndroidHardwareBufferInfoANDROID;
#endif

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkAndroidHardwareBufferUsageANDROID {
    VkStructureType   sType;
    void *                               pNext;
    uint64_t                             androidHardwareBufferUsage;
} VkAndroidHardwareBufferUsageANDROID;
#endif

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkMemoryGetAndroidHardwareBufferInfoANDROID {
    VkStructureType   sType;
    const  void *                         pNext;
    VkDeviceMemory                       memory;
} VkMemoryGetAndroidHardwareBufferInfoANDROID;
#endif

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkExternalFormatANDROID {
    VkStructureType   sType;
    void *                               pNext;
    uint64_t                             externalFormat;
} VkExternalFormatANDROID;
#endif

typedef struct VkCheckpointDataNV {
    VkStructureType   sType;
    void *                   pNext;
    VkPipelineStageFlagBits     stage;
    void *  pCheckpointMarker;
} VkCheckpointDataNV;

typedef struct VkImageViewASTCDecodeModeEXT {
    VkStructureType   sType;
    const  void *                       pNext;
    VkFormat                           decodeMode;
} VkImageViewASTCDecodeModeEXT;

typedef struct VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    VkStructureType   sType;
    const  void *                                                        pNext;
    uint32_t                                            exclusiveScissorCount;
    const  VkRect2D *  pExclusiveScissors;
} VkPipelineViewportExclusiveScissorStateCreateInfoNV;

typedef struct VkShadingRatePaletteNV {
    uint32_t                                                                 shadingRatePaletteEntryCount;
    const  VkShadingRatePaletteEntryNV *   pShadingRatePaletteEntries;
} VkShadingRatePaletteNV;

typedef struct VkPhysicalDeviceShadingRateImagePropertiesNV {
    VkStructureType   sType;
    void *                                pNext;
    VkExtent2D                       shadingRateTexelSize;
    uint32_t                              shadingRatePaletteSize;
    uint32_t                              shadingRateMaxCoarseSamples;
} VkPhysicalDeviceShadingRateImagePropertiesNV;

typedef struct VkCoarseSampleLocationNV {
    uint32_t                              pixelX;
    uint32_t                              pixelY;
    uint32_t                              sample;
} VkCoarseSampleLocationNV;

typedef struct VkCoarseSampleOrderCustomNV {
    VkShadingRatePaletteEntryNV           shadingRate;
    uint32_t                              sampleCount;
    uint32_t                              sampleLocationCount;
    const  VkCoarseSampleLocationNV *  pSampleLocations;
} VkCoarseSampleOrderCustomNV;

typedef struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    VkStructureType   sType;
    const  void *                                                             pNext;
    VkCoarseSampleOrderTypeNV                                                sampleOrderType;
    uint32_t                                                 customSampleOrderCount;
    const  VkCoarseSampleOrderCustomNV *         pCustomSampleOrders;
} VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;

typedef struct VkPhysicalDeviceMeshShaderPropertiesNV {
    VkStructureType   sType;
    void *                                pNext;
    uint32_t                              maxDrawMeshTasksCount;
    uint32_t                              maxTaskWorkGroupInvocations;
    uint32_t                              maxTaskWorkGroupSize [3];
    uint32_t                              maxTaskTotalMemorySize;
    uint32_t                              maxTaskOutputCount;
    uint32_t                              maxMeshWorkGroupInvocations;
    uint32_t                              maxMeshWorkGroupSize [3];
    uint32_t                              maxMeshTotalMemorySize;
    uint32_t                              maxMeshOutputVertices;
    uint32_t                              maxMeshOutputPrimitives;
    uint32_t                              maxMeshMultiviewViewCount;
    uint32_t                           meshOutputPerVertexGranularity;
    uint32_t                           meshOutputPerPrimitiveGranularity;
} VkPhysicalDeviceMeshShaderPropertiesNV;

typedef struct VkDrawMeshTasksIndirectCommandNV {
    uint32_t                 taskCount;
    uint32_t                 firstTask;
} VkDrawMeshTasksIndirectCommandNV;

typedef struct VkDrawMeshTasksIndirectCommandEXT {
    uint32_t   groupCountX;
    uint32_t   groupCountY;
    uint32_t   groupCountZ;
} VkDrawMeshTasksIndirectCommandEXT;

typedef struct VkRayTracingShaderGroupCreateInfoNV {
    VkStructureType   sType;
    const  void *             pNext;
    VkRayTracingShaderGroupTypeKHR   type;
    uint32_t                 generalShader;
    uint32_t                 closestHitShader;
    uint32_t                 anyHitShader;
    uint32_t                 intersectionShader;
} VkRayTracingShaderGroupCreateInfoNV;

typedef struct VkRayTracingShaderGroupCreateInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkRayTracingShaderGroupTypeKHR   type;
    uint32_t                 generalShader;
    uint32_t                 closestHitShader;
    uint32_t                 anyHitShader;
    uint32_t                 intersectionShader;
    const  void *  pShaderGroupCaptureReplayHandle;
} VkRayTracingShaderGroupCreateInfoKHR;

typedef struct VkWriteDescriptorSetAccelerationStructureKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t                           accelerationStructureCount;
    const  VkAccelerationStructureKHR *  pAccelerationStructures;
} VkWriteDescriptorSetAccelerationStructureKHR;

typedef struct VkWriteDescriptorSetAccelerationStructureNV {
    VkStructureType   sType;
    const  void *       pNext;
    uint32_t                           accelerationStructureCount;
    const  VkAccelerationStructureNV *  pAccelerationStructures;
} VkWriteDescriptorSetAccelerationStructureNV;

typedef struct VkAccelerationStructureMemoryRequirementsInfoNV {
    VkStructureType   sType;
    const  void *                                                           pNext;
    VkAccelerationStructureMemoryRequirementsTypeNV                       type;
    VkAccelerationStructureNV                                             accelerationStructure;
} VkAccelerationStructureMemoryRequirementsInfoNV;

typedef struct VkPhysicalDeviceAccelerationStructurePropertiesKHR {
    VkStructureType   sType;
    void *             pNext;
    uint64_t                           maxGeometryCount;
    uint64_t                           maxInstanceCount;
    uint64_t                           maxPrimitiveCount;
    uint32_t                           maxPerStageDescriptorAccelerationStructures;
    uint32_t                           maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
    uint32_t                           maxDescriptorSetAccelerationStructures;
    uint32_t                           maxDescriptorSetUpdateAfterBindAccelerationStructures;
    uint32_t                           minAccelerationStructureScratchOffsetAlignment;
} VkPhysicalDeviceAccelerationStructurePropertiesKHR;

typedef struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR {
    VkStructureType   sType;
    void *             pNext;
    uint32_t                      shaderGroupHandleSize;
    uint32_t                           maxRayRecursionDepth;
    uint32_t                           maxShaderGroupStride;
    uint32_t                      shaderGroupBaseAlignment;
    uint32_t                      shaderGroupHandleCaptureReplaySize;
    uint32_t                           maxRayDispatchInvocationCount;
    uint32_t                        shaderGroupHandleAlignment;
    uint32_t                           maxRayHitAttributeSize;
} VkPhysicalDeviceRayTracingPipelinePropertiesKHR;

typedef struct VkPhysicalDeviceRayTracingPropertiesNV {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t                      shaderGroupHandleSize;
    uint32_t                           maxRecursionDepth;
    uint32_t                           maxShaderGroupStride;
    uint32_t                      shaderGroupBaseAlignment;
    uint64_t                           maxGeometryCount;
    uint64_t                           maxInstanceCount;
    uint64_t                           maxTriangleCount;
    uint32_t                           maxDescriptorSetAccelerationStructures;
} VkPhysicalDeviceRayTracingPropertiesNV;

typedef struct VkTraceRaysIndirectCommandKHR {
    uint32_t                 width;
    uint32_t                 height;
    uint32_t                 depth;
} VkTraceRaysIndirectCommandKHR;

typedef struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    VkStructureType   sType;
    const  void *  pNext;
    uint64_t   drmFormatModifier;
    VkSharingMode   sharingMode;
    uint32_t   queueFamilyIndexCount;
    const  uint32_t *  pQueueFamilyIndices;
} VkPhysicalDeviceImageDrmFormatModifierInfoEXT;

typedef struct VkImageDrmFormatModifierListCreateInfoEXT {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t   drmFormatModifierCount;
    const  uint64_t *  pDrmFormatModifiers;
} VkImageDrmFormatModifierListCreateInfoEXT;

typedef struct VkImageDrmFormatModifierPropertiesEXT {
    VkStructureType   sType;
    void *  pNext;
    uint64_t   drmFormatModifier;
} VkImageDrmFormatModifierPropertiesEXT;

typedef struct VkDeviceMemoryOverallocationCreateInfoAMD {
    VkStructureType   sType;
    const  void *                       pNext;
    VkMemoryOverallocationBehaviorAMD   overallocationBehavior;
} VkDeviceMemoryOverallocationCreateInfoAMD;

typedef struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT {
    VkStructureType   sType;
    void *                             pNext;
    VkExtent2D                         fragmentDensityOffsetGranularity;
} VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT;

typedef struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT  VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM;

typedef struct VkRenderPassFragmentDensityMapCreateInfoEXT {
    VkStructureType   sType;
    const  void *                       pNext;
    VkAttachmentReference              fragmentDensityMapAttachment;
} VkRenderPassFragmentDensityMapCreateInfoEXT;

typedef struct VkRenderPassFragmentDensityMapOffsetEndInfoEXT {
    VkStructureType   sType;
    const  void *                         pNext;
    uint32_t                             fragmentDensityOffsetCount;
    const  VkOffset2D *  pFragmentDensityOffsets;
} VkRenderPassFragmentDensityMapOffsetEndInfoEXT;

typedef struct VkRenderPassFragmentDensityMapOffsetEndInfoEXT  VkSubpassFragmentDensityMapOffsetEndInfoQCOM;

typedef struct VkMemoryPriorityAllocateInfoEXT {
    VkStructureType   sType;
    const  void *                         pNext;
    float                                priority;
} VkMemoryPriorityAllocateInfoEXT;

typedef struct VkBufferDeviceAddressInfo {
    VkStructureType   sType;
    const  void *                                             pNext;
    VkBuffer                                                 buffer;
} VkBufferDeviceAddressInfo;

typedef struct VkBufferDeviceAddressInfo  VkBufferDeviceAddressInfoKHR;

typedef struct VkBufferDeviceAddressInfo  VkBufferDeviceAddressInfoEXT;

typedef struct VkBufferOpaqueCaptureAddressCreateInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    uint64_t                           opaqueCaptureAddress;
} VkBufferOpaqueCaptureAddressCreateInfo;

typedef struct VkBufferOpaqueCaptureAddressCreateInfo  VkBufferOpaqueCaptureAddressCreateInfoKHR;

typedef struct VkPhysicalDeviceImageViewImageFormatInfoEXT {
    VkStructureType   sType;
    void *                             pNext;
    VkImageViewType                    imageViewType;
} VkPhysicalDeviceImageViewImageFormatInfoEXT;

typedef struct VkRenderPassAttachmentBeginInfo {
    VkStructureType   sType;
    const  void *                               pNext;
    uint32_t                   attachmentCount;
    const  VkImageView *  pAttachments;
} VkRenderPassAttachmentBeginInfo;

typedef struct VkRenderPassAttachmentBeginInfo  VkRenderPassAttachmentBeginInfoKHR;

typedef struct VkCooperativeMatrixPropertiesNV {
    VkStructureType   sType;
    void *                                pNext;
    uint32_t                              MSize;
    uint32_t                              NSize;
    uint32_t                              KSize;
    VkComponentTypeNV                     AType;
    VkComponentTypeNV                     BType;
    VkComponentTypeNV                     CType;
    VkComponentTypeNV                     DType;
    VkScopeNV                             scope;
} VkCooperativeMatrixPropertiesNV;

typedef struct VkImageViewHandleInfoNVX {
    VkStructureType   sType;
    const  void *             pNext;
    VkImageView                           imageView;
    VkDescriptorType                      descriptorType;
    VkSampler             sampler;
} VkImageViewHandleInfoNVX;

#if defined(VK_USE_PLATFORM_GGP)
typedef struct VkPresentFrameTokenGGP {
    VkStructureType   sType;
    const  void *                       pNext;
    GgpFrameToken                      frameToken;
} VkPresentFrameTokenGGP;
#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkSurfaceFullScreenExclusiveInfoEXT {
    VkStructureType   sType;
    void *                             pNext;
    VkFullScreenExclusiveEXT           fullScreenExclusive;
} VkSurfaceFullScreenExclusiveInfoEXT;
#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkSurfaceFullScreenExclusiveWin32InfoEXT {
    VkStructureType   sType;
    const  void *       pNext;
    HMONITOR           hmonitor;
} VkSurfaceFullScreenExclusiveWin32InfoEXT;
#endif

typedef struct VkPerformanceCounterKHR {
    VkStructureType   sType;
    void *               pNext;
    VkPerformanceCounterUnitKHR          unit;
    VkPerformanceCounterScopeKHR         scope;
    VkPerformanceCounterStorageKHR       storage;
    uint8_t   uuid [ VK_UUID_SIZE ];
} VkPerformanceCounterKHR;

typedef struct VkQueryPoolPerformanceCreateInfoKHR {
    VkStructureType   sType;
    const  void *                              pNext;
    uint32_t                                  queueFamilyIndex;
    uint32_t                                  counterIndexCount;
    const  uint32_t *  pCounterIndices;
} VkQueryPoolPerformanceCreateInfoKHR;

typedef union VkPerformanceCounterResultKHR {
    int32_t    int32;
    int64_t    int64;
    uint32_t   uint32;
    uint64_t   uint64;
    float      float32;
    double     float64;
} VkPerformanceCounterResultKHR;

typedef struct VkPerformanceQuerySubmitInfoKHR {
    VkStructureType   sType;
    const  void *          pNext;
    uint32_t              counterPassIndex;
} VkPerformanceQuerySubmitInfoKHR;

typedef struct VkInitializePerformanceApiInfoINTEL {
    VkStructureType   sType;
    const  void *                          pNext;
    void *                pUserData;
} VkInitializePerformanceApiInfoINTEL;

typedef struct VkQueryPoolPerformanceQueryCreateInfoINTEL {
    VkStructureType   sType;
    const  void *                          pNext;
    VkQueryPoolSamplingModeINTEL          performanceCountersSampling;
} VkQueryPoolPerformanceQueryCreateInfoINTEL;

typedef struct VkQueryPoolPerformanceQueryCreateInfoINTEL  VkQueryPoolCreateInfoINTEL;

typedef struct VkPerformanceMarkerInfoINTEL {
    VkStructureType   sType;
    const  void *                          pNext;
    uint64_t                              marker;
} VkPerformanceMarkerInfoINTEL;

typedef struct VkPerformanceStreamMarkerInfoINTEL {
    VkStructureType   sType;
    const  void *                          pNext;
    uint32_t                              marker;
} VkPerformanceStreamMarkerInfoINTEL;

typedef struct VkPerformanceConfigurationAcquireInfoINTEL {
    VkStructureType   sType;
    const  void *                          pNext;
    VkPerformanceConfigurationTypeINTEL   type;
} VkPerformanceConfigurationAcquireInfoINTEL;

typedef struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    VkStructureType   sType;
    void *                           pNext;
    uint32_t                         shaderSMCount;
    uint32_t                         shaderWarpsPerSM;
} VkPhysicalDeviceShaderSMBuiltinsPropertiesNV;

typedef struct VkAttachmentReferenceStencilLayout {
    VkStructureType   sType;
    void *     pNext;
    VkImageLayout                    stencilLayout;
} VkAttachmentReferenceStencilLayout;

typedef struct VkAttachmentReferenceStencilLayout  VkAttachmentReferenceStencilLayoutKHR;

typedef struct VkAttachmentDescriptionStencilLayout {
    VkStructureType   sType;
    void *     pNext;
    VkImageLayout                    stencilInitialLayout;
    VkImageLayout                    stencilFinalLayout;
} VkAttachmentDescriptionStencilLayout;

typedef struct VkAttachmentDescriptionStencilLayout  VkAttachmentDescriptionStencilLayoutKHR;

typedef struct VkPipelineInfoKHR {
    VkStructureType   sType;
    const  void *         pNext;
    VkPipeline           pipeline;
} VkPipelineInfoKHR;

typedef struct VkPipelineInfoKHR  VkPipelineInfoEXT;

typedef struct VkPipelineExecutableInfoKHR {
    VkStructureType   sType;
    const  void *         pNext;
    VkPipeline           pipeline;
    uint32_t             executableIndex;
} VkPipelineExecutableInfoKHR;

typedef struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo {
    VkStructureType   sType;
    const  void *   pNext;
    uint32_t                       requiredSubgroupSize;
} VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;

typedef struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo  VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT;

typedef struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo  VkShaderRequiredSubgroupSizeCreateInfoEXT;

typedef struct VkSubpassShadingPipelineCreateInfoHUAWEI {
    VkStructureType   sType;
    void *                   pNext;
    VkRenderPass             renderPass;
    uint32_t                 subpass;
} VkSubpassShadingPipelineCreateInfoHUAWEI;

typedef struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI {
    VkStructureType   sType;
    void *                   pNext;
    uint32_t                 maxSubpassShadingWorkgroupSizeAspectRatio;
} VkPhysicalDeviceSubpassShadingPropertiesHUAWEI;

typedef struct VkMemoryOpaqueCaptureAddressAllocateInfo {
    VkStructureType   sType;
    const  void *                    pNext;
    uint64_t                        opaqueCaptureAddress;
} VkMemoryOpaqueCaptureAddressAllocateInfo;

typedef struct VkMemoryOpaqueCaptureAddressAllocateInfo  VkMemoryOpaqueCaptureAddressAllocateInfoKHR;

typedef struct VkDeviceMemoryOpaqueCaptureAddressInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkDeviceMemory                     memory;
} VkDeviceMemoryOpaqueCaptureAddressInfo;

typedef struct VkDeviceMemoryOpaqueCaptureAddressInfo  VkDeviceMemoryOpaqueCaptureAddressInfoKHR;

typedef struct VkPhysicalDeviceLineRasterizationProperties {
    VkStructureType   sType;
    void *                                pNext;
    uint32_t                              lineSubPixelPrecisionBits;
} VkPhysicalDeviceLineRasterizationProperties;

typedef struct VkPhysicalDeviceLineRasterizationProperties  VkPhysicalDeviceLineRasterizationPropertiesKHR;

typedef struct VkPhysicalDeviceLineRasterizationProperties  VkPhysicalDeviceLineRasterizationPropertiesEXT;

typedef struct VkSamplerCustomBorderColorCreateInfoEXT {
    VkStructureType   sType;
    const  void *                                                                             pNext;
    VkClearColorValue                                                                        customBorderColor;
    VkFormat                                                                                 format;
} VkSamplerCustomBorderColorCreateInfoEXT;

typedef struct VkPhysicalDeviceCustomBorderColorPropertiesEXT {
    VkStructureType   sType;
    void *                                                                    pNext;
    uint32_t                                                                                        maxCustomBorderColorSamplers;
} VkPhysicalDeviceCustomBorderColorPropertiesEXT;

typedef struct VkAccelerationStructureBuildRangeInfoKHR {
    uint32_t                                                  primitiveCount;
    uint32_t                                                  primitiveOffset;
    uint32_t                                                  firstVertex;
    uint32_t                                                  transformOffset;
} VkAccelerationStructureBuildRangeInfoKHR;

typedef struct VkAabbPositionsKHR {
    float                                                     minX;
    float                                                     minY;
    float                                                     minZ;
    float                                                     maxX;
    float                                                     maxY;
    float                                                     maxZ;
} VkAabbPositionsKHR;

typedef struct VkAabbPositionsKHR  VkAabbPositionsNV;

typedef struct VkTransformMatrixKHR {
    float                                                     matrix [3][4];
} VkTransformMatrixKHR;

typedef struct VkTransformMatrixKHR  VkTransformMatrixNV;

typedef struct VkAccelerationStructureDeviceAddressInfoKHR {
    VkStructureType   sType;
    const  void *                                             pNext;
    VkAccelerationStructureKHR                               accelerationStructure;
} VkAccelerationStructureDeviceAddressInfoKHR;

typedef struct VkAccelerationStructureVersionInfoKHR {
    VkStructureType   sType;
    const  void *                                             pNext;
    const  uint8_t *                     pVersionData;
} VkAccelerationStructureVersionInfoKHR;

typedef struct VkCopyAccelerationStructureInfoKHR {
    VkStructureType   sType;
    const  void *                                             pNext;
    VkAccelerationStructureKHR                               src;
    VkAccelerationStructureKHR                               dst;
    VkCopyAccelerationStructureModeKHR                       mode;
} VkCopyAccelerationStructureInfoKHR;

typedef struct VkRayTracingPipelineInterfaceCreateInfoKHR {
    VkStructureType   sType;
    const  void *                             pNext;
    uint32_t                                                 maxPipelineRayPayloadSize;
    uint32_t                                                 maxPipelineRayHitAttributeSize;
} VkRayTracingPipelineInterfaceCreateInfoKHR;

typedef struct VkPipelineLibraryCreateInfoKHR {
    VkStructureType   sType;
    const  void *                                             pNext;
    uint32_t                                 libraryCount;
    const  VkPipeline *                    pLibraries;
} VkPipelineLibraryCreateInfoKHR;

typedef struct VkColorBlendEquationEXT {
    VkBlendFactor                 srcColorBlendFactor;
    VkBlendFactor                 dstColorBlendFactor;
    VkBlendOp                     colorBlendOp;
    VkBlendFactor                 srcAlphaBlendFactor;
    VkBlendFactor                 dstAlphaBlendFactor;
    VkBlendOp                     alphaBlendOp;
} VkColorBlendEquationEXT;

typedef struct VkRenderPassTransformBeginInfoQCOM {
    VkStructureType   sType;
    const  void *                            pNext;
    VkSurfaceTransformFlagBitsKHR     transform;
} VkRenderPassTransformBeginInfoQCOM;

typedef struct VkCopyCommandTransformInfoQCOM {
    VkStructureType   sType;
    const  void *      pNext;
    VkSurfaceTransformFlagBitsKHR     transform;
} VkCopyCommandTransformInfoQCOM;

typedef struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
    VkStructureType   sType;
    const  void *                            pNext;
    VkSurfaceTransformFlagBitsKHR     transform;
    VkRect2D                          renderArea;
} VkCommandBufferInheritanceRenderPassTransformInfoQCOM;

typedef struct VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV {
    VkStructureType   sType;
    void *     pNext;
    uint32_t                         maxPartitionCount;
} VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV;

typedef struct VkPartitionedAccelerationStructureWritePartitionTranslationDataNV {
    uint32_t                                         partitionIndex;
    float                                            partitionTranslation [3];
} VkPartitionedAccelerationStructureWritePartitionTranslationDataNV;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPhysicalDevicePortabilitySubsetPropertiesKHR {
    VkStructureType   sType;
    void *         pNext;
    uint32_t    minVertexInputBindingStrideAlignment;
} VkPhysicalDevicePortabilitySubsetPropertiesKHR;
#endif

typedef struct VkPipelineFragmentShadingRateStateCreateInfoKHR {
    VkStructureType   sType;
    const  void *                                 pNext;
    VkExtent2D                                   fragmentSize;
    VkFragmentShadingRateCombinerOpKHR           combinerOps [2];
} VkPipelineFragmentShadingRateStateCreateInfoKHR;

typedef struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
    VkStructureType   sType;
    void *                               pNext;
    VkSampleCountFlagBits                maxFragmentShadingRateInvocationCount;
} VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV;

typedef struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV {
    VkStructureType   sType;
    const  void *                         pNext;
    VkFragmentShadingRateTypeNV          shadingRateType;
    VkFragmentShadingRateNV              shadingRate;
    VkFragmentShadingRateCombinerOpKHR   combinerOps [2];
} VkPipelineFragmentShadingRateEnumStateCreateInfoNV;

typedef struct VkMutableDescriptorTypeListEXT {
    uint32_t                            descriptorTypeCount;
    const  VkDescriptorType *  pDescriptorTypes;
} VkMutableDescriptorTypeListEXT;

typedef struct VkMutableDescriptorTypeListEXT  VkMutableDescriptorTypeListVALVE;

typedef struct VkMutableDescriptorTypeCreateInfoEXT {
    VkStructureType   sType;
    const  void *                        pNext;
    uint32_t                            mutableDescriptorTypeListCount;
    const  VkMutableDescriptorTypeListEXT *  pMutableDescriptorTypeLists;
} VkMutableDescriptorTypeCreateInfoEXT;

typedef struct VkMutableDescriptorTypeCreateInfoEXT  VkMutableDescriptorTypeCreateInfoVALVE;

typedef struct VkGeneratedCommandsPipelineInfoEXT {
    VkStructureType   sType;
    void *                           pNext;
    VkPipeline                                         pipeline;
} VkGeneratedCommandsPipelineInfoEXT;

typedef struct VkGeneratedCommandsShaderInfoEXT {
    VkStructureType   sType;
    void *                           pNext;
    uint32_t                                         shaderCount;
    const  VkShaderEXT *                               pShaders;
} VkGeneratedCommandsShaderInfoEXT;

typedef struct VkGeneratedCommandsMemoryRequirementsInfoEXT {
    VkStructureType   sType;
    const  void *                     pNext;
    VkIndirectExecutionSetEXT        indirectExecutionSet;
    VkIndirectCommandsLayoutEXT                      indirectCommandsLayout;
    uint32_t                                         maxSequenceCount;
    uint32_t                                         maxDrawCount;
} VkGeneratedCommandsMemoryRequirementsInfoEXT;

typedef struct VkIndirectExecutionSetPipelineInfoEXT {
    VkStructureType   sType;
    const  void *  pNext;
    VkPipeline                                            initialPipeline;
    uint32_t                                              maxPipelineCount;
} VkIndirectExecutionSetPipelineInfoEXT;

typedef struct VkIndirectExecutionSetShaderLayoutInfoEXT {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t                                                                  setLayoutCount;
    const  VkDescriptorSetLayout *              pSetLayouts;
} VkIndirectExecutionSetShaderLayoutInfoEXT;

typedef struct VkWriteIndirectExecutionSetPipelineEXT {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t                                              index;
    VkPipeline                                            pipeline;
} VkWriteIndirectExecutionSetPipelineEXT;

typedef struct VkWriteIndirectExecutionSetShaderEXT {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t                                              index;
    VkShaderEXT                                           shader;
} VkWriteIndirectExecutionSetShaderEXT;

typedef struct VkIndirectCommandsVertexBufferTokenEXT {
    uint32_t               vertexBindingUnit;
} VkIndirectCommandsVertexBufferTokenEXT;

typedef struct VkIndirectCommandsIndexBufferTokenEXT {
    VkIndirectCommandsInputModeFlagBitsEXT                mode;
} VkIndirectCommandsIndexBufferTokenEXT;

typedef struct VkVertexInputBindingDescription2EXT {
    VkStructureType   sType;
    void *     pNext;
    uint32_t                         binding;
    uint32_t                         stride;
    VkVertexInputRate                inputRate;
    uint32_t                         divisor;
} VkVertexInputBindingDescription2EXT;

typedef struct VkVertexInputAttributeDescription2EXT {
    VkStructureType   sType;
    void *     pNext;
    uint32_t                         location;
    uint32_t                         binding;
    VkFormat                         format;
    uint32_t                         offset;
} VkVertexInputAttributeDescription2EXT;

typedef struct VkCommandBufferSubmitInfo {
    VkStructureType        sType;
    const  void *                                                 pNext;
    VkCommandBuffer                                                              commandBuffer;
    uint32_t                                                                     deviceMask;
} VkCommandBufferSubmitInfo;

typedef struct VkCommandBufferSubmitInfo  VkCommandBufferSubmitInfoKHR;

typedef struct VkVideoEncodeQuantizationMapCapabilitiesKHR {
    VkStructureType   sType;
    void *               pNext;
    VkExtent2D           maxQuantizationMapExtent;
} VkVideoEncodeQuantizationMapCapabilitiesKHR;

typedef struct VkVideoEncodeH264QuantizationMapCapabilitiesKHR {
    VkStructureType   sType;
    void *               pNext;
    int32_t              minQpDelta;
    int32_t              maxQpDelta;
} VkVideoEncodeH264QuantizationMapCapabilitiesKHR;

typedef struct VkVideoEncodeH265QuantizationMapCapabilitiesKHR {
    VkStructureType   sType;
    void *               pNext;
    int32_t              minQpDelta;
    int32_t              maxQpDelta;
} VkVideoEncodeH265QuantizationMapCapabilitiesKHR;

typedef struct VkVideoEncodeAV1QuantizationMapCapabilitiesKHR {
    VkStructureType   sType;
    void *               pNext;
    int32_t              minQIndexDelta;
    int32_t              maxQIndexDelta;
} VkVideoEncodeAV1QuantizationMapCapabilitiesKHR;

typedef struct VkVideoFormatQuantizationMapPropertiesKHR {
    VkStructureType   sType;
    void *               pNext;
    VkExtent2D         quantizationMapTexelSize;
} VkVideoFormatQuantizationMapPropertiesKHR;

typedef struct VkVideoPictureResourceInfoKHR {
    VkStructureType   sType;
    const  void *         pNext;
    VkOffset2D           codedOffset;
    VkExtent2D           codedExtent;
    uint32_t             baseArrayLayer;
    VkImageView          imageViewBinding;
} VkVideoPictureResourceInfoKHR;

typedef struct VkVideoReferenceSlotInfoKHR {
    VkStructureType   sType;
    const  void *         pNext;
    int32_t                              slotIndex;
    const  VkVideoPictureResourceInfoKHR *  pPictureResource;
} VkVideoReferenceSlotInfoKHR;

typedef struct VkVideoInlineQueryInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkQueryPool              queryPool;
    uint32_t                                 firstQuery;
    uint32_t                                 queryCount;
} VkVideoInlineQueryInfoKHR;

#include "vk_video/vulkan_video_codec_h264std.h"

#include "vk_video/vulkan_video_codec_h264std_decode.h"

typedef struct VkVideoDecodeH264ProfileInfoKHR {
    VkStructureType   sType;
    const  void *                                   pNext;
    StdVideoH264ProfileIdc                                         stdProfileIdc;
    VkVideoDecodeH264PictureLayoutFlagBitsKHR      pictureLayout;
} VkVideoDecodeH264ProfileInfoKHR;

typedef struct VkVideoDecodeH264CapabilitiesKHR {
    VkStructureType   sType;
    void *                   pNext;
    StdVideoH264LevelIdc     maxLevelIdc;
    VkOffset2D            fieldOffsetGranularity;
} VkVideoDecodeH264CapabilitiesKHR;

typedef struct VkVideoDecodeH264SessionParametersAddInfoKHR {
    VkStructureType   sType;
    const  void *                                     pNext;
    uint32_t                                         stdSPSCount;
    const  StdVideoH264SequenceParameterSet *       pStdSPSs;
    uint32_t                                         stdPPSCount;
    const  StdVideoH264PictureParameterSet *        pStdPPSs;
} VkVideoDecodeH264SessionParametersAddInfoKHR;

typedef struct VkVideoDecodeH264SessionParametersCreateInfoKHR {
    VkStructureType   sType;
    const  void *                                                pNext;
    uint32_t                                                                    maxStdSPSCount;
    uint32_t                                                                    maxStdPPSCount;
    const  VkVideoDecodeH264SessionParametersAddInfoKHR *        pParametersAddInfo;
} VkVideoDecodeH264SessionParametersCreateInfoKHR;

typedef struct VkVideoDecodeH264InlineSessionParametersInfoKHR {
    VkStructureType   sType;
    const  void *                                     pNext;
    const  StdVideoH264SequenceParameterSet *         pStdSPS;
    const  StdVideoH264PictureParameterSet *          pStdPPS;
} VkVideoDecodeH264InlineSessionParametersInfoKHR;

typedef struct VkVideoDecodeH264PictureInfoKHR {
    VkStructureType   sType;
    const  void *            pNext;
    const  StdVideoDecodeH264PictureInfo *   pStdPictureInfo;
    uint32_t                                sliceCount;
    const  uint32_t *       pSliceOffsets;
} VkVideoDecodeH264PictureInfoKHR;

typedef struct VkVideoDecodeH264DpbSlotInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    const  StdVideoDecodeH264ReferenceInfo *  pStdReferenceInfo;
} VkVideoDecodeH264DpbSlotInfoKHR;

#include "vk_video/vulkan_video_codec_h265std.h"

#include "vk_video/vulkan_video_codec_h265std_decode.h"

typedef struct VkVideoDecodeH265ProfileInfoKHR {
    VkStructureType   sType;
    const  void *                     pNext;
    StdVideoH265ProfileIdc           stdProfileIdc;
} VkVideoDecodeH265ProfileInfoKHR;

typedef struct VkVideoDecodeH265CapabilitiesKHR {
    VkStructureType   sType;
    void *                             pNext;
    StdVideoH265LevelIdc               maxLevelIdc;
} VkVideoDecodeH265CapabilitiesKHR;

typedef struct VkVideoDecodeH265SessionParametersAddInfoKHR {
    VkStructureType   sType;
    const  void *                                 pNext;
    uint32_t                                     stdVPSCount;
    const  StdVideoH265VideoParameterSet *      pStdVPSs;
    uint32_t                                     stdSPSCount;
    const  StdVideoH265SequenceParameterSet *   pStdSPSs;
    uint32_t                                     stdPPSCount;
    const  StdVideoH265PictureParameterSet *    pStdPPSs;
} VkVideoDecodeH265SessionParametersAddInfoKHR;

typedef struct VkVideoDecodeH265SessionParametersCreateInfoKHR {
    VkStructureType   sType;
    const  void *                                          pNext;
    uint32_t                                                              maxStdVPSCount;
    uint32_t                                                              maxStdSPSCount;
    uint32_t                                                              maxStdPPSCount;
    const  VkVideoDecodeH265SessionParametersAddInfoKHR *  pParametersAddInfo;
} VkVideoDecodeH265SessionParametersCreateInfoKHR;

typedef struct VkVideoDecodeH265InlineSessionParametersInfoKHR {
    VkStructureType   sType;
    const  void *                                     pNext;
    const  StdVideoH265VideoParameterSet *            pStdVPS;
    const  StdVideoH265SequenceParameterSet *         pStdSPS;
    const  StdVideoH265PictureParameterSet *          pStdPPS;
} VkVideoDecodeH265InlineSessionParametersInfoKHR;

typedef struct VkVideoDecodeH265PictureInfoKHR {
    VkStructureType   sType;
    const  void *                 pNext;
    const  StdVideoDecodeH265PictureInfo *        pStdPictureInfo;
    uint32_t                                     sliceSegmentCount;
    const  uint32_t *     pSliceSegmentOffsets;
} VkVideoDecodeH265PictureInfoKHR;

typedef struct VkVideoDecodeH265DpbSlotInfoKHR {
    VkStructureType   sType;
    const  void *              pNext;
    const  StdVideoDecodeH265ReferenceInfo *   pStdReferenceInfo;
} VkVideoDecodeH265DpbSlotInfoKHR;

#include "vk_video/vulkan_video_codec_vp9std.h"

#include "vk_video/vulkan_video_codec_vp9std_decode.h"

typedef struct VkVideoDecodeVP9ProfileInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    StdVideoVP9Profile                       stdProfile;
} VkVideoDecodeVP9ProfileInfoKHR;

typedef struct VkVideoDecodeVP9CapabilitiesKHR {
    VkStructureType   sType;
    void *                   pNext;
    StdVideoVP9Level         maxLevel;
} VkVideoDecodeVP9CapabilitiesKHR;

typedef struct VkVideoDecodeVP9PictureInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    const  StdVideoDecodeVP9PictureInfo *     pStdPictureInfo;
    int32_t                                  referenceNameSlotIndices [ VK_MAX_VIDEO_VP9_REFERENCES_PER_FRAME_KHR ];
    uint32_t                                 uncompressedHeaderOffset;
    uint32_t                                 compressedHeaderOffset;
    uint32_t                                 tilesOffset;
} VkVideoDecodeVP9PictureInfoKHR;

#include "vk_video/vulkan_video_codec_av1std.h"

#include "vk_video/vulkan_video_codec_av1std_decode.h"

typedef struct VkVideoDecodeAV1CapabilitiesKHR {
    VkStructureType   sType;
    void *                   pNext;
    StdVideoAV1Level         maxLevel;
} VkVideoDecodeAV1CapabilitiesKHR;

typedef struct VkVideoDecodeAV1SessionParametersCreateInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    const  StdVideoAV1SequenceHeader *        pStdSequenceHeader;
} VkVideoDecodeAV1SessionParametersCreateInfoKHR;

typedef struct VkVideoDecodeAV1InlineSessionParametersInfoKHR {
    VkStructureType   sType;
    const  void *                         pNext;
    const  StdVideoAV1SequenceHeader *    pStdSequenceHeader;
} VkVideoDecodeAV1InlineSessionParametersInfoKHR;

typedef struct VkVideoDecodeAV1PictureInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    const  StdVideoDecodeAV1PictureInfo *     pStdPictureInfo;
    int32_t                                  referenceNameSlotIndices [ VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR ];
    uint32_t                                 frameHeaderOffset;
    uint32_t                                 tileCount;
    const  uint32_t *         pTileOffsets;
    const  uint32_t *         pTileSizes;
} VkVideoDecodeAV1PictureInfoKHR;

typedef struct VkVideoDecodeAV1DpbSlotInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    const  StdVideoDecodeAV1ReferenceInfo *   pStdReferenceInfo;
} VkVideoDecodeAV1DpbSlotInfoKHR;

typedef struct VkVideoSessionParametersUpdateInfoKHR {
    VkStructureType   sType;
    const  void *                                             pNext;
    uint32_t                                                 updateSequenceCount;
} VkVideoSessionParametersUpdateInfoKHR;

typedef struct VkVideoEncodeSessionParametersGetInfoKHR {
    VkStructureType   sType;
    const  void *                     pNext;
    VkVideoSessionParametersKHR                      videoSessionParameters;
} VkVideoEncodeSessionParametersGetInfoKHR;

typedef struct VkVideoEncodeQuantizationMapInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkImageView              quantizationMap;
    VkExtent2D                               quantizationMapExtent;
} VkVideoEncodeQuantizationMapInfoKHR;

typedef struct VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkExtent2D                               quantizationMapTexelSize;
} VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR;

typedef struct VkVideoEncodeQualityLevelInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    uint32_t                                 qualityLevel;
} VkVideoEncodeQualityLevelInfoKHR;

typedef struct VkVideoEncodeQualityLevelPropertiesKHR {
    VkStructureType   sType;
    void *                   pNext;
    VkVideoEncodeRateControlModeFlagBitsKHR   preferredRateControlMode;
    uint32_t                                 preferredRateControlLayerCount;
} VkVideoEncodeQualityLevelPropertiesKHR;

typedef struct VkVideoEncodeRateControlLayerInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    uint64_t                                 averageBitrate;
    uint64_t                                 maxBitrate;
    uint32_t                                 frameRateNumerator;
    uint32_t                                 frameRateDenominator;
} VkVideoEncodeRateControlLayerInfoKHR;

#include "vk_video/vulkan_video_codec_h264std_encode.h"

typedef struct VkVideoEncodeH264SessionParametersAddInfoKHR {
    VkStructureType   sType;
    const  void *                                                pNext;
    uint32_t                                                    stdSPSCount;
    const  StdVideoH264SequenceParameterSet *  pStdSPSs;
    uint32_t                                                    stdPPSCount;
    const  StdVideoH264PictureParameterSet *   pStdPPSs;
} VkVideoEncodeH264SessionParametersAddInfoKHR;

typedef struct VkVideoEncodeH264SessionParametersCreateInfoKHR {
    VkStructureType   sType;
    const  void *                                          pNext;
    uint32_t                                                              maxStdSPSCount;
    uint32_t                                                              maxStdPPSCount;
    const  VkVideoEncodeH264SessionParametersAddInfoKHR *  pParametersAddInfo;
} VkVideoEncodeH264SessionParametersCreateInfoKHR;

typedef struct VkVideoEncodeH264DpbSlotInfoKHR {
    VkStructureType   sType;
    const  void *                                           pNext;
    const  StdVideoEncodeH264ReferenceInfo *                                pStdReferenceInfo;
} VkVideoEncodeH264DpbSlotInfoKHR;

typedef struct VkVideoEncodeH264ProfileInfoKHR {
    VkStructureType   sType;
    const  void *              pNext;
    StdVideoH264ProfileIdc                    stdProfileIdc;
} VkVideoEncodeH264ProfileInfoKHR;

typedef struct VkVideoEncodeH264NaluSliceInfoKHR {
    VkStructureType   sType;
    const  void *                      pNext;
    int32_t                                           constantQp;
    const  StdVideoEncodeH264SliceHeader *             pStdSliceHeader;
} VkVideoEncodeH264NaluSliceInfoKHR;

typedef struct VkVideoEncodeH264QpKHR {
    int32_t   qpI;
    int32_t   qpP;
    int32_t   qpB;
} VkVideoEncodeH264QpKHR;

typedef struct VkVideoEncodeH264FrameSizeKHR {
    uint32_t   frameISize;
    uint32_t   framePSize;
    uint32_t   frameBSize;
} VkVideoEncodeH264FrameSizeKHR;

#include "vk_video/vulkan_video_codec_h265std_encode.h"

typedef struct VkVideoEncodeH265SessionParametersAddInfoKHR {
    VkStructureType   sType;
    const  void *                                                pNext;
    uint32_t                                                    stdVPSCount;
    const  StdVideoH265VideoParameterSet *     pStdVPSs;
    uint32_t                                                    stdSPSCount;
    const  StdVideoH265SequenceParameterSet *  pStdSPSs;
    uint32_t                                                    stdPPSCount;
    const  StdVideoH265PictureParameterSet *   pStdPPSs;
} VkVideoEncodeH265SessionParametersAddInfoKHR;

typedef struct VkVideoEncodeH265SessionParametersCreateInfoKHR {
    VkStructureType   sType;
    const  void *                                          pNext;
    uint32_t                                                              maxStdVPSCount;
    uint32_t                                                              maxStdSPSCount;
    uint32_t                                                              maxStdPPSCount;
    const  VkVideoEncodeH265SessionParametersAddInfoKHR *  pParametersAddInfo;
} VkVideoEncodeH265SessionParametersCreateInfoKHR;

typedef struct VkVideoEncodeH265NaluSliceSegmentInfoKHR {
    VkStructureType   sType;
    const  void *                                 pNext;
    int32_t                                                      constantQp;
    const  StdVideoEncodeH265SliceSegmentHeader *                 pStdSliceSegmentHeader;
} VkVideoEncodeH265NaluSliceSegmentInfoKHR;

typedef struct VkVideoEncodeH265QpKHR {
    int32_t   qpI;
    int32_t   qpP;
    int32_t   qpB;
} VkVideoEncodeH265QpKHR;

typedef struct VkVideoEncodeH265FrameSizeKHR {
    uint32_t   frameISize;
    uint32_t   framePSize;
    uint32_t   frameBSize;
} VkVideoEncodeH265FrameSizeKHR;

typedef struct VkVideoEncodeH265ProfileInfoKHR {
    VkStructureType   sType;
    const  void *     pNext;
    StdVideoH265ProfileIdc           stdProfileIdc;
} VkVideoEncodeH265ProfileInfoKHR;

typedef struct VkVideoEncodeH265DpbSlotInfoKHR {
    VkStructureType   sType;
    const  void *               pNext;
    const  StdVideoEncodeH265ReferenceInfo *    pStdReferenceInfo;
} VkVideoEncodeH265DpbSlotInfoKHR;

#include "vk_video/vulkan_video_codec_av1std_encode.h"

typedef struct VkVideoEncodeAV1SessionParametersCreateInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    const  StdVideoAV1SequenceHeader *        pStdSequenceHeader;
    const  StdVideoEncodeAV1DecoderModelInfo *  pStdDecoderModelInfo;
    uint32_t                 stdOperatingPointCount;
    const  StdVideoEncodeAV1OperatingPointInfo *  pStdOperatingPoints;
} VkVideoEncodeAV1SessionParametersCreateInfoKHR;

typedef struct VkVideoEncodeAV1DpbSlotInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    const  StdVideoEncodeAV1ReferenceInfo *   pStdReferenceInfo;
} VkVideoEncodeAV1DpbSlotInfoKHR;

typedef struct VkVideoEncodeAV1ProfileInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    StdVideoAV1Profile                       stdProfile;
} VkVideoEncodeAV1ProfileInfoKHR;

typedef struct VkVideoEncodeAV1QIndexKHR {
    uint32_t   intraQIndex;
    uint32_t   predictiveQIndex;
    uint32_t   bipredictiveQIndex;
} VkVideoEncodeAV1QIndexKHR;

typedef struct VkVideoEncodeAV1FrameSizeKHR {
    uint32_t   intraFrameSize;
    uint32_t   predictiveFrameSize;
    uint32_t   bipredictiveFrameSize;
} VkVideoEncodeAV1FrameSizeKHR;

typedef struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT {
    VkStructureType   sType;
    const  void *                         pNext;
    VkProvokingVertexModeEXT             provokingVertexMode;
} VkPipelineRasterizationProvokingVertexStateCreateInfoEXT;

typedef struct VkVideoEncodeSessionIntraRefreshCreateInfoKHR {
    VkStructureType   sType;
    const  void *                 pNext;
    VkVideoEncodeIntraRefreshModeFlagBitsKHR   intraRefreshMode;
} VkVideoEncodeSessionIntraRefreshCreateInfoKHR;

typedef struct VkVideoEncodeIntraRefreshInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    uint32_t                                 intraRefreshCycleDuration;
    uint32_t                                 intraRefreshIndex;
} VkVideoEncodeIntraRefreshInfoKHR;

typedef struct VkVideoReferenceIntraRefreshInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    uint32_t                                 dirtyIntraRefreshRegions;
} VkVideoReferenceIntraRefreshInfoKHR;

typedef struct VkCuModuleCreateInfoNVX {
    VkStructureType   sType;
    const  void *             pNext;
    size_t                   dataSize;
    const  void *              pData;
} VkCuModuleCreateInfoNVX;

typedef struct VkCuFunctionCreateInfoNVX {
    VkStructureType   sType;
    const  void *                         pNext;
    VkCuModuleNVX                        module;
    const  char *   pName;
} VkCuFunctionCreateInfoNVX;

typedef struct VkCuLaunchInfoNVX {
    VkStructureType   sType;
    const  void *             pNext;
    VkCuFunctionNVX          function;
    uint32_t                 gridDimX;
    uint32_t                 gridDimY;
    uint32_t                 gridDimZ;
    uint32_t                 blockDimX;
    uint32_t                 blockDimY;
    uint32_t                 blockDimZ;
    uint32_t                 sharedMemBytes;
    size_t                   paramCount;
    const  void * const *     pParams;
    size_t                   extraCount;
    const  void * const *     pExtras;
} VkCuLaunchInfoNVX;

typedef struct VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {
    VkStructureType   sType;
    void *                                pNext;
    size_t                                combinedImageSamplerDensityMapDescriptorSize;
} VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT;

typedef struct VkDescriptorBufferBindingPushDescriptorBufferHandleEXT {
    VkStructureType   sType;
    const  void *              pNext;
    VkBuffer                                  buffer;
} VkDescriptorBufferBindingPushDescriptorBufferHandleEXT;

typedef struct VkBufferCaptureDescriptorDataInfoEXT {
    VkStructureType   sType;
    const  void *             pNext;
    VkBuffer                 buffer;
} VkBufferCaptureDescriptorDataInfoEXT;

typedef struct VkImageCaptureDescriptorDataInfoEXT {
    VkStructureType   sType;
    const  void *             pNext;
    VkImage                  image;
} VkImageCaptureDescriptorDataInfoEXT;

typedef struct VkImageViewCaptureDescriptorDataInfoEXT {
    VkStructureType   sType;
    const  void *             pNext;
    VkImageView                  imageView;
} VkImageViewCaptureDescriptorDataInfoEXT;

typedef struct VkSamplerCaptureDescriptorDataInfoEXT {
    VkStructureType   sType;
    const  void *             pNext;
    VkSampler                sampler;
} VkSamplerCaptureDescriptorDataInfoEXT;

typedef struct VkAccelerationStructureCaptureDescriptorDataInfoEXT {
    VkStructureType   sType;
    const  void *             pNext;
    VkAccelerationStructureKHR               accelerationStructure;
    VkAccelerationStructureNV                accelerationStructureNV;
} VkAccelerationStructureCaptureDescriptorDataInfoEXT;

typedef struct VkOpaqueCaptureDescriptorDataCreateInfoEXT {
    VkStructureType   sType;
    const  void *             pNext;
    const  void *             opaqueCaptureDescriptorData;
} VkOpaqueCaptureDescriptorDataCreateInfoEXT;

typedef enum VkAccelerationStructureMotionInstanceTypeNV {
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0,
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1,
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2,
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkAccelerationStructureMotionInstanceTypeNV;

typedef struct VkSRTDataNV {
    float   sx;
    float   a;
    float   b;
    float   pvx;
    float   sy;
    float   c;
    float   pvy;
    float   sz;
    float   pvz;
    float   qx;
    float   qy;
    float   qz;
    float   qw;
    float   tx;
    float   ty;
    float   tz;
} VkSRTDataNV;

typedef void* VkRemoteAddressNV;

typedef struct VkMemoryGetRemoteAddressInfoNV {
    VkStructureType   sType;
    const  void *         pNext;
    VkDeviceMemory                       memory;
    VkExternalMemoryHandleTypeFlagBits   handleType;
} VkMemoryGetRemoteAddressInfoNV;

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkImportMemoryBufferCollectionFUCHSIA {
    VkStructureType   sType;
    const  void *       pNext;
    VkBufferCollectionFUCHSIA          collection;
    uint32_t                           index;
} VkImportMemoryBufferCollectionFUCHSIA;
#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkBufferCollectionImageCreateInfoFUCHSIA {
    VkStructureType   sType;
    const  void *       pNext;
    VkBufferCollectionFUCHSIA          collection;
    uint32_t                           index;
} VkBufferCollectionImageCreateInfoFUCHSIA;
#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkBufferCollectionBufferCreateInfoFUCHSIA {
    VkStructureType   sType;
    const  void *       pNext;
    VkBufferCollectionFUCHSIA          collection;
    uint32_t                           index;
} VkBufferCollectionBufferCreateInfoFUCHSIA;
#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkBufferCollectionCreateInfoFUCHSIA {
    VkStructureType   sType;
    const  void *       pNext;
    zx_handle_t                        collectionToken;
} VkBufferCollectionCreateInfoFUCHSIA;
#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkSysmemColorSpaceFUCHSIA {
    VkStructureType   sType;
    const  void *      pNext;
    uint32_t                          colorSpace;
} VkSysmemColorSpaceFUCHSIA;
#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkBufferCollectionConstraintsInfoFUCHSIA {
    VkStructureType   sType;
    const  void *      pNext;
    uint32_t                          minBufferCount;
    uint32_t                          maxBufferCount;
    uint32_t                          minBufferCountForCamping;
    uint32_t                          minBufferCountForDedicatedSlack;
    uint32_t                          minBufferCountForSharedSlack;
} VkBufferCollectionConstraintsInfoFUCHSIA;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCudaModuleNV)
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCudaFunctionNV)
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkCudaModuleCreateInfoNV {
    VkStructureType   sType;
    const  void *             pNext;
    size_t                   dataSize;
    const  void *             pData;
} VkCudaModuleCreateInfoNV;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkCudaFunctionCreateInfoNV {
    VkStructureType   sType;
    const  void *  pNext;
    VkCudaModuleNV           module;
    const  char *             pName;
} VkCudaFunctionCreateInfoNV;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkCudaLaunchInfoNV {
    VkStructureType   sType;
    const  void *             pNext;
    VkCudaFunctionNV         function;
    uint32_t                 gridDimX;
    uint32_t                 gridDimY;
    uint32_t                 gridDimZ;
    uint32_t                 blockDimX;
    uint32_t                 blockDimY;
    uint32_t                 blockDimZ;
    uint32_t                 sharedMemBytes;
    size_t                                       paramCount;
    const  void * const *  pParams;
    size_t                                       extraCount;
    const  void * const *  pExtras;
} VkCudaLaunchInfoNV;
#endif

typedef struct VkPipelineRenderingCreateInfo {
    VkStructureType   sType;
    const  void *                                                 pNext;
    uint32_t                                                                     viewMask;
    uint32_t                                                     colorAttachmentCount;
    const  VkFormat *            pColorAttachmentFormats;
    VkFormat                                               depthAttachmentFormat;
    VkFormat                                               stencilAttachmentFormat;
} VkPipelineRenderingCreateInfo;

typedef struct VkPipelineRenderingCreateInfo  VkPipelineRenderingCreateInfoKHR;

typedef struct VkRenderingEndInfoEXT {
    VkStructureType            sType;
    const  void *                                                 pNext;
} VkRenderingEndInfoEXT;

typedef struct VkRenderingAttachmentInfo {
    VkStructureType         sType;
    const  void *                                                 pNext;
    VkImageView                                                  imageView;
    VkImageLayout                                                                imageLayout;
    VkResolveModeFlagBits                                        resolveMode;
    VkImageView                                                  resolveImageView;
    VkImageLayout                                                                resolveImageLayout;
    VkAttachmentLoadOp                                                           loadOp;
    VkAttachmentStoreOp                                                          storeOp;
    VkClearValue                                                                 clearValue;
} VkRenderingAttachmentInfo;

typedef struct VkRenderingAttachmentInfo  VkRenderingAttachmentInfoKHR;

typedef struct VkRenderingFragmentShadingRateAttachmentInfoKHR {
    VkStructureType   sType;
    const  void *                                                pNext;
    VkImageView                                                  imageView;
    VkImageLayout                                                                imageLayout;
    VkExtent2D                                                                   shadingRateAttachmentTexelSize;
} VkRenderingFragmentShadingRateAttachmentInfoKHR;

typedef struct VkRenderingFragmentDensityMapAttachmentInfoEXT {
    VkStructureType   sType;
    const  void *                                                 pNext;
    VkImageView                                                                  imageView;
    VkImageLayout                                                                imageLayout;
} VkRenderingFragmentDensityMapAttachmentInfoEXT;

typedef struct VkAttachmentSampleCountInfoAMD {
    VkStructureType   sType;
    const  void *                                                 pNext;
    uint32_t                                                     colorAttachmentCount;
    const  VkSampleCountFlagBits *  pColorAttachmentSamples;
    VkSampleCountFlagBits                  depthStencilAttachmentSamples;
} VkAttachmentSampleCountInfoAMD;

typedef struct VkAttachmentSampleCountInfoAMD  VkAttachmentSampleCountInfoNV;

typedef struct VkImageViewMinLodCreateInfoEXT {
    VkStructureType   sType;
    const  void *  pNext;
    float                         minLod;
} VkImageViewMinLodCreateInfoEXT;

typedef struct VkDescriptorSetBindingReferenceVALVE {
    VkStructureType   sType;
    const  void *                                                        pNext;
    VkDescriptorSetLayout                                                               descriptorSetLayout;
    uint32_t                                                                            binding;
} VkDescriptorSetBindingReferenceVALVE;

typedef struct VkDescriptorSetLayoutHostMappingInfoVALVE {
    VkStructureType   sType;
    void *                                                                     pNext;
    size_t                                                                                     descriptorOffset;
    uint32_t                                                                                   descriptorSize;
} VkDescriptorSetLayoutHostMappingInfoVALVE;

typedef struct VkPhysicalDeviceNestedCommandBufferPropertiesEXT {
    VkStructureType   sType;
    void *                            pNext;
    uint32_t                          maxCommandBufferNestingLevel;
} VkPhysicalDeviceNestedCommandBufferPropertiesEXT;

typedef struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT {
    VkStructureType   sType;
    void *  pNext;
    uint8_t   shaderModuleIdentifierAlgorithmUUID [ VK_UUID_SIZE ];
} VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT;

typedef struct VkPipelineShaderStageModuleIdentifierCreateInfoEXT {
    VkStructureType   sType;
    const  void *          pNext;
    uint32_t              identifierSize;
    const  uint8_t *  pIdentifier;
} VkPipelineShaderStageModuleIdentifierCreateInfoEXT;

typedef struct VkShaderModuleIdentifierEXT {
    VkStructureType   sType;
    void *           pNext;
    uint32_t   identifierSize;
    uint8_t     identifier [ VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT ];
} VkShaderModuleIdentifierEXT;

typedef struct VkRenderPassCreationFeedbackInfoEXT {
    uint32_t                                                                            postMergeSubpassCount;
} VkRenderPassCreationFeedbackInfoEXT;

typedef struct VkRenderPassCreationFeedbackCreateInfoEXT {
    VkStructureType   sType;
    const  void *                                                               pNext;
    VkRenderPassCreationFeedbackInfoEXT *                                                      pRenderPassFeedback;
} VkRenderPassCreationFeedbackCreateInfoEXT;

typedef struct VkRenderPassSubpassFeedbackInfoEXT {
    VkSubpassMergeStatusEXT                                                            subpassMergeStatus;
    char                                                         description [ VK_MAX_DESCRIPTION_SIZE ];
    uint32_t                                                                           postMergeIndex;
} VkRenderPassSubpassFeedbackInfoEXT;

typedef struct VkRenderPassSubpassFeedbackCreateInfoEXT {
    VkStructureType       sType;
    const  void *                                                                  pNext;
    VkRenderPassSubpassFeedbackInfoEXT *                                                          pSubpassFeedback;
} VkRenderPassSubpassFeedbackCreateInfoEXT;

typedef struct VkMicromapVersionInfoEXT {
    VkStructureType   sType;
    const  void *                                             pNext;
    const  uint8_t *                     pVersionData;
} VkMicromapVersionInfoEXT;

typedef struct VkCopyMicromapInfoEXT {
    VkStructureType   sType;
    const  void *                                             pNext;
    VkMicromapEXT                               src;
    VkMicromapEXT                               dst;
    VkCopyMicromapModeEXT                       mode;
} VkCopyMicromapInfoEXT;

typedef struct VkMicromapUsageEXT {
    uint32_t                                                 count;
    uint32_t                                                 subdivisionLevel;
    uint32_t                                                 format;
} VkMicromapUsageEXT;

typedef struct VkMicromapTriangleEXT {
    uint32_t                                                 dataOffset;
    uint16_t                                                 subdivisionLevel;
    uint16_t                                                 format;
} VkMicromapTriangleEXT;

typedef struct VkPhysicalDeviceOpacityMicromapPropertiesEXT {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t                           maxOpacity2StateSubdivisionLevel;
    uint32_t                           maxOpacity4StateSubdivisionLevel;
} VkPhysicalDeviceOpacityMicromapPropertiesEXT;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPhysicalDeviceDisplacementMicromapPropertiesNV {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t                           maxDisplacementMicromapSubdivisionLevel;
} VkPhysicalDeviceDisplacementMicromapPropertiesNV;
#endif

typedef struct VkPipelinePropertiesIdentifierEXT {
    VkStructureType   sType;
    void *               pNext;
    uint8_t                              pipelineIdentifier [ VK_UUID_SIZE ];
} VkPipelinePropertiesIdentifierEXT;

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkExportMetalObjectCreateInfoEXT {
    VkStructureType   sType;
    const  void *                 pNext;
    VkExportMetalObjectTypeFlagBitsEXT    exportObjectType;
} VkExportMetalObjectCreateInfoEXT;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkExportMetalObjectsInfoEXT {
    VkStructureType   sType;
    const  void *                 pNext;
} VkExportMetalObjectsInfoEXT;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkExportMetalDeviceInfoEXT {
    VkStructureType   sType;
    const  void *                 pNext;
    MTLDevice_id                                 mtlDevice;
} VkExportMetalDeviceInfoEXT;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkExportMetalCommandQueueInfoEXT {
    VkStructureType   sType;
    const  void *                 pNext;
    VkQueue                                      queue;
    MTLCommandQueue_id                           mtlCommandQueue;
} VkExportMetalCommandQueueInfoEXT;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkExportMetalBufferInfoEXT {
    VkStructureType   sType;
    const  void *                 pNext;
    VkDeviceMemory                               memory;
    MTLBuffer_id                                 mtlBuffer;
} VkExportMetalBufferInfoEXT;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkImportMetalBufferInfoEXT {
    VkStructureType   sType;
    const  void *                 pNext;
    MTLBuffer_id                                 mtlBuffer;
} VkImportMetalBufferInfoEXT;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkExportMetalTextureInfoEXT {
    VkStructureType   sType;
    const  void *                 pNext;
    VkImage                      image;
    VkImageView                  imageView;
    VkBufferView                 bufferView;
    VkImageAspectFlagBits                        plane;
    MTLTexture_id                                mtlTexture;
} VkExportMetalTextureInfoEXT;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkImportMetalTextureInfoEXT {
    VkStructureType   sType;
    const  void *                 pNext;
    VkImageAspectFlagBits                        plane;
    MTLTexture_id                                mtlTexture;
} VkImportMetalTextureInfoEXT;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkExportMetalIOSurfaceInfoEXT {
    VkStructureType   sType;
    const  void *                 pNext;
    VkImage                                      image;
    IOSurfaceRef                                 ioSurface;
} VkExportMetalIOSurfaceInfoEXT;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkImportMetalIOSurfaceInfoEXT {
    VkStructureType   sType;
    const  void *                 pNext;
    IOSurfaceRef                 ioSurface;
} VkImportMetalIOSurfaceInfoEXT;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkExportMetalSharedEventInfoEXT {
    VkStructureType   sType;
    const  void *                 pNext;
    VkSemaphore                  semaphore;
    VkEvent                      event;
    MTLSharedEvent_id                            mtlSharedEvent;
} VkExportMetalSharedEventInfoEXT;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkImportMetalSharedEventInfoEXT {
    VkStructureType   sType;
    const  void *                 pNext;
    MTLSharedEvent_id                            mtlSharedEvent;
} VkImportMetalSharedEventInfoEXT;
#endif

typedef struct VkPipelineRobustnessCreateInfo {
    VkStructureType   sType;
    const  void *       pNext;
    VkPipelineRobustnessBufferBehavior        storageBuffers;
    VkPipelineRobustnessBufferBehavior        uniformBuffers;
    VkPipelineRobustnessBufferBehavior        vertexInputs;
    VkPipelineRobustnessImageBehavior         images;
} VkPipelineRobustnessCreateInfo;

typedef struct VkPipelineRobustnessCreateInfo  VkPipelineRobustnessCreateInfoEXT;

typedef struct VkPhysicalDevicePipelineRobustnessProperties {
    VkStructureType   sType;
    void *  pNext;
    VkPipelineRobustnessBufferBehavior        defaultRobustnessStorageBuffers;
    VkPipelineRobustnessBufferBehavior        defaultRobustnessUniformBuffers;
    VkPipelineRobustnessBufferBehavior        defaultRobustnessVertexInputs;
    VkPipelineRobustnessImageBehavior         defaultRobustnessImages;
} VkPhysicalDevicePipelineRobustnessProperties;

typedef struct VkPhysicalDevicePipelineRobustnessProperties  VkPhysicalDevicePipelineRobustnessPropertiesEXT;

typedef struct VkImageViewSampleWeightCreateInfoQCOM {
    VkStructureType   sType;
    const  void *        pNext;
    VkOffset2D                          filterCenter;
    VkExtent2D                          filterSize;
    uint32_t                            numPhases;
} VkImageViewSampleWeightCreateInfoQCOM;

typedef struct VkPhysicalDeviceImageProcessingPropertiesQCOM {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t           maxWeightFilterPhases;
    VkExtent2D         maxWeightFilterDimension;
    VkExtent2D         maxBlockMatchRegion;
    VkExtent2D         maxBoxFilterBlockSize;
} VkPhysicalDeviceImageProcessingPropertiesQCOM;

typedef struct VkTilePropertiesQCOM {
    VkStructureType   sType;
    void *             pNext;
    VkExtent3D                         tileSize;
    VkExtent2D                         apronSize;
    VkOffset2D                         origin;
} VkTilePropertiesQCOM;

typedef struct VkTileMemoryBindInfoQCOM {
    VkStructureType   sType;
    const  void *             pNext;
    VkDeviceMemory                     memory;
} VkTileMemoryBindInfoQCOM;

typedef struct VkAmigoProfilingSubmitInfoSEC {
    VkStructureType   sType;
    const  void *       pNext;
    uint64_t                           firstDrawTimestamp;
    uint64_t                           swapBufferTimestamp;
} VkAmigoProfilingSubmitInfoSEC;

typedef struct VkOpticalFlowImageFormatPropertiesNV {
    VkStructureType   sType;
    const  void *   pNext;
    VkFormat   format;
} VkOpticalFlowImageFormatPropertiesNV;

typedef struct VkOpticalFlowSessionCreatePrivateDataInfoNV {
    VkStructureType   sType;
    void *                                               pNext;
    uint32_t                                                             id;
    uint32_t                                                             size;
    const  void *                                                         pPrivateData;
} VkOpticalFlowSessionCreatePrivateDataInfoNV;

typedef struct VkDeviceFaultVendorInfoEXT {
    char   description [ VK_MAX_DESCRIPTION_SIZE ];
    uint64_t                                           vendorFaultCode;
    uint64_t                                           vendorFaultData;
} VkDeviceFaultVendorInfoEXT;

typedef struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT {
    uint32_t                 headerSize;
    VkDeviceFaultVendorBinaryHeaderVersionEXT   headerVersion;
    uint32_t                 vendorID;
    uint32_t                 deviceID;
    uint32_t                 driverVersion;
    uint8_t                  pipelineCacheUUID [ VK_UUID_SIZE ];
    uint32_t                 applicationNameOffset;
    uint32_t                 applicationVersion;
    uint32_t                 engineNameOffset;
    uint32_t                 engineVersion;
    uint32_t                 apiVersion;
} VkDeviceFaultVendorBinaryHeaderVersionOneEXT;

typedef struct VkDepthBiasInfoEXT {
    VkStructureType   sType;
    const  void *         pNext;
    float                                depthBiasConstantFactor;
    float                                depthBiasClamp;
    float                                depthBiasSlopeFactor;
} VkDepthBiasInfoEXT;

typedef struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM {
    VkStructureType   sType;
    void *                           pNext;
    uint64_t                     shaderCoreMask;
    uint32_t                         shaderCoreCount;
    uint32_t                         shaderWarpsPerCore;
} VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM;

typedef struct VkSurfacePresentModeKHR {
    VkStructureType   sType;
    void *                pNext;
    VkPresentModeKHR                      presentMode;
} VkSurfacePresentModeKHR;

typedef struct VkSurfacePresentModeKHR  VkSurfacePresentModeEXT;

typedef struct VkSurfacePresentModeCompatibilityKHR {
    VkStructureType   sType;
    void *                                     pNext;
    uint32_t                                   presentModeCount;
    VkPresentModeKHR *  pPresentModes;
} VkSurfacePresentModeCompatibilityKHR;

typedef struct VkSurfacePresentModeCompatibilityKHR  VkSurfacePresentModeCompatibilityEXT;

typedef struct VkSwapchainPresentFenceInfoKHR {
    VkStructureType   sType;
    const  void *          pNext;
    uint32_t                              swapchainCount;
    const  VkFence *  pFences;
} VkSwapchainPresentFenceInfoKHR;

typedef struct VkSwapchainPresentFenceInfoKHR  VkSwapchainPresentFenceInfoEXT;

typedef struct VkSwapchainPresentModesCreateInfoKHR {
    VkStructureType   sType;
    const  void *          pNext;
    uint32_t                              presentModeCount;
    const  VkPresentModeKHR *  pPresentModes;
} VkSwapchainPresentModesCreateInfoKHR;

typedef struct VkSwapchainPresentModesCreateInfoKHR  VkSwapchainPresentModesCreateInfoEXT;

typedef struct VkSwapchainPresentModeInfoKHR {
    VkStructureType   sType;
    const  void *          pNext;
    uint32_t                              swapchainCount;
    const  VkPresentModeKHR *  pPresentModes;
} VkSwapchainPresentModeInfoKHR;

typedef struct VkSwapchainPresentModeInfoKHR  VkSwapchainPresentModeInfoEXT;

typedef struct VkReleaseSwapchainImagesInfoKHR {
    VkStructureType   sType;
    const  void *                  pNext;
    VkSwapchainKHR              swapchain;
    uint32_t                                      imageIndexCount;
    const  uint32_t *        pImageIndices;
} VkReleaseSwapchainImagesInfoKHR;

typedef struct VkReleaseSwapchainImagesInfoKHR  VkReleaseSwapchainImagesInfoEXT;

typedef struct VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV {
    VkStructureType   sType;
    void *  pNext;
    VkRayTracingInvocationReorderModeNV                                      rayTracingInvocationReorderReorderingHint;
} VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV;

typedef struct VkPhysicalDeviceShaderCorePropertiesARM {
    VkStructureType   sType;
    void *                           pNext;
    uint32_t           pixelRate;
    uint32_t           texelRate;
    uint32_t           fmaRate;
} VkPhysicalDeviceShaderCorePropertiesARM;

typedef struct VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t           perViewRenderAreaCount;
    const  VkRect2D *   pPerViewRenderAreas;
} VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM;

typedef struct VkQueryLowLatencySupportNV {
    VkStructureType   sType;
    const  void *  pNext;
    void *                                        pQueriedLowLatencyData;
} VkQueryLowLatencySupportNV;

typedef struct VkPhysicalDeviceShaderObjectPropertiesEXT {
    VkStructureType   sType;
    void *                                              pNext;
    uint8_t                                                                shaderBinaryUUID [ VK_UUID_SIZE ];
    uint32_t                                                               shaderBinaryVersion;
} VkPhysicalDeviceShaderObjectPropertiesEXT;

#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef struct VkImportScreenBufferInfoQNX {
    VkStructureType   sType;
    const  void *                         pNext;
    struct  _screen_buffer *        buffer;
} VkImportScreenBufferInfoQNX;
#endif

#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef struct VkExternalFormatQNX {
    VkStructureType   sType;
    void *                               pNext;
    uint64_t                             externalFormat;
} VkExternalFormatQNX;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPhysicalDeviceShaderEnqueuePropertiesAMDX {
    VkStructureType   sType;
    void *                pNext;
    uint32_t                                     maxExecutionGraphDepth;
    uint32_t                                     maxExecutionGraphShaderOutputNodes;
    uint32_t                                     maxExecutionGraphShaderPayloadSize;
    uint32_t                                     maxExecutionGraphShaderPayloadCount;
    uint32_t                                  executionGraphDispatchAddressAlignment;
    uint32_t                                     maxExecutionGraphWorkgroupCount [3];
    uint32_t                                     maxExecutionGraphWorkgroups;
} VkPhysicalDeviceShaderEnqueuePropertiesAMDX;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPipelineShaderStageNodeCreateInfoAMDX {
       VkStructureType   sType;
    const  void *                                 pNext;
    const  char *           pName;
    uint32_t                                                     index;
} VkPipelineShaderStageNodeCreateInfoAMDX;
#endif

typedef struct VkAntiLagPresentationInfoAMD {
    VkStructureType   sType;
    void *                 pNext;
    VkAntiLagStageAMD                                            stage;
    uint64_t                                                     frameIndex;
} VkAntiLagPresentationInfoAMD;

typedef struct VkBindMemoryStatus {
    VkStructureType   sType;
    const  void *                                 pNext;
    VkResult *                                                   pResult;
} VkBindMemoryStatus;

typedef struct VkBindMemoryStatus  VkBindMemoryStatusKHR;

typedef struct VkPushDescriptorSetWithTemplateInfo {
    VkStructureType   sType;
    const  void *                                     pNext;
    VkDescriptorUpdateTemplate                                       descriptorUpdateTemplate;
    VkPipelineLayout                                 layout;
    uint32_t                                         set;
    const  void *                                                     pData;
} VkPushDescriptorSetWithTemplateInfo;

typedef struct VkPushDescriptorSetWithTemplateInfo  VkPushDescriptorSetWithTemplateInfoKHR;

typedef struct VkSamplerCubicWeightsCreateInfoQCOM {
    VkStructureType   sType;
    const  void *       pNext;
    VkCubicFilterWeightsQCOM           cubicWeights;
} VkSamplerCubicWeightsCreateInfoQCOM;

typedef struct VkBlitImageCubicWeightsInfoQCOM {
    VkStructureType   sType;
    const  void *       pNext;
    VkCubicFilterWeightsQCOM           cubicWeights;
} VkBlitImageCubicWeightsInfoQCOM;

typedef struct VkPhysicalDeviceImageProcessing2PropertiesQCOM {
    VkStructureType   sType;
    void *                         pNext;
    VkExtent2D    maxBlockMatchWindow;
} VkPhysicalDeviceImageProcessing2PropertiesQCOM;

typedef struct VkSamplerBlockMatchWindowCreateInfoQCOM {
    VkStructureType   sType;
    const  void *                   pNext;
    VkExtent2D                                     windowExtent;
    VkBlockMatchWindowCompareModeQCOM              windowCompareMode;
} VkSamplerBlockMatchWindowCreateInfoQCOM;

typedef struct VkPhysicalDeviceLayeredDriverPropertiesMSFT {
    VkStructureType   sType;
    void *                               pNext;
    VkLayeredDriverUnderlyingApiMSFT   underlyingAPI;
} VkPhysicalDeviceLayeredDriverPropertiesMSFT;

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkAndroidHardwareBufferFormatResolvePropertiesANDROID {
    VkStructureType   sType;
    void *         pNext;
    VkFormat                       colorAttachmentFormat;
} VkAndroidHardwareBufferFormatResolvePropertiesANDROID;
#endif

typedef struct VkLatencySleepInfoNV {
    VkStructureType   sType;
    const  void *  pNext;
    VkSemaphore   signalSemaphore;
    uint64_t   value;
} VkLatencySleepInfoNV;

typedef struct VkSetLatencyMarkerInfoNV {
    VkStructureType   sType;
    const  void *  pNext;
    uint64_t   presentID;
    VkLatencyMarkerNV   marker;
} VkSetLatencyMarkerInfoNV;

typedef struct VkLatencyTimingsFrameReportNV {
    VkStructureType   sType;
    const  void *  pNext;
    uint64_t                 presentID;
    uint64_t                 inputSampleTimeUs;
    uint64_t                 simStartTimeUs;
    uint64_t                 simEndTimeUs;
    uint64_t                 renderSubmitStartTimeUs;
    uint64_t                 renderSubmitEndTimeUs;
    uint64_t                 presentStartTimeUs;
    uint64_t                 presentEndTimeUs;
    uint64_t                 driverStartTimeUs;
    uint64_t                 driverEndTimeUs;
    uint64_t                 osRenderQueueStartTimeUs;
    uint64_t                 osRenderQueueEndTimeUs;
    uint64_t                 gpuRenderStartTimeUs;
    uint64_t                 gpuRenderEndTimeUs;
} VkLatencyTimingsFrameReportNV;

typedef struct VkOutOfBandQueueTypeInfoNV {
    VkStructureType   sType;
    const  void *  pNext;
    VkOutOfBandQueueTypeNV   queueType;
} VkOutOfBandQueueTypeInfoNV;

typedef struct VkLatencySubmissionPresentIdNV {
    VkStructureType   sType;
    const  void *       pNext;
    uint64_t                           presentID;
} VkLatencySubmissionPresentIdNV;

typedef struct VkLatencySurfaceCapabilitiesNV {
    VkStructureType   sType;
    const  void *                               pNext;
    uint32_t                                   presentModeCount;
    VkPresentModeKHR *  pPresentModes;
} VkLatencySurfaceCapabilitiesNV;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPhysicalDeviceCudaKernelLaunchPropertiesNV {
    VkStructureType   sType;
    void *     pNext;
    uint32_t           computeCapabilityMinor;
    uint32_t           computeCapabilityMajor;
} VkPhysicalDeviceCudaKernelLaunchPropertiesNV;
#endif

typedef struct VkDeviceQueueShaderCoreControlCreateInfoARM {
    VkStructureType   sType;
    void *             pNext;
    uint32_t                           shaderCoreCount;
} VkDeviceQueueShaderCoreControlCreateInfoARM;

typedef struct VkPhysicalDeviceRenderPassStripedPropertiesARM {
    VkStructureType   sType;
    void *                           pNext;
    VkExtent2D                   renderPassStripeGranularity;
    uint32_t                         maxRenderPassStripes;
} VkPhysicalDeviceRenderPassStripedPropertiesARM;

typedef struct VkRenderPassStripeInfoARM {
    VkStructureType   sType;
    const  void *  pNext;
    VkRect2D                                         stripeArea;
} VkRenderPassStripeInfoARM;

typedef struct VkRenderPassStripeBeginInfoARM {
    VkStructureType   sType;
    const  void *                             pNext;
    uint32_t                                                 stripeInfoCount;
    const  VkRenderPassStripeInfoARM *  pStripeInfos;
} VkRenderPassStripeBeginInfoARM;

typedef struct VkRenderingAttachmentLocationInfo {
    VkStructureType   sType;
    const  void *                                                 pNext;
    uint32_t                                                     colorAttachmentCount;
    const  uint32_t *            pColorAttachmentLocations;
} VkRenderingAttachmentLocationInfo;

typedef struct VkRenderingAttachmentLocationInfo  VkRenderingAttachmentLocationInfoKHR;

typedef struct VkRenderingInputAttachmentIndexInfo {
    VkStructureType   sType;
    const  void *                                                 pNext;
    uint32_t                                                     colorAttachmentCount;
    const  uint32_t *                  pColorAttachmentInputIndices;
    const  uint32_t *                                             pDepthInputAttachmentIndex;
    const  uint32_t *                                             pStencilInputAttachmentIndex;
} VkRenderingInputAttachmentIndexInfo;

typedef struct VkRenderingInputAttachmentIndexInfo  VkRenderingInputAttachmentIndexInfoKHR;

typedef struct VkMemoryMapPlacedInfoEXT {
    VkStructureType   sType;
    const  void *   pNext;
    void *   pPlacedAddress;
} VkMemoryMapPlacedInfoEXT;

typedef struct VkPhysicalDeviceImageAlignmentControlPropertiesMESA {
    VkStructureType   sType;
    void *                            pNext;
    uint32_t                      supportedImageAlignmentMask;
} VkPhysicalDeviceImageAlignmentControlPropertiesMESA;

typedef struct VkImageAlignmentControlCreateInfoMESA {
    VkStructureType   sType;
    const  void *                      pNext;
    uint32_t                                          maximumRequestedAlignment;
} VkImageAlignmentControlCreateInfoMESA;

typedef struct VkDepthClampRangeEXT {
    float            minDepthClamp;
    float            maxDepthClamp;
} VkDepthClampRangeEXT;

typedef struct VkPhysicalDeviceCooperativeMatrix2PropertiesNV {
    VkStructureType   sType;
    void *                  pNext;
    uint32_t                cooperativeMatrixWorkgroupScopeMaxWorkgroupSize;
    uint32_t                cooperativeMatrixFlexibleDimensionsMaxDimension;
    uint32_t                cooperativeMatrixWorkgroupScopeReservedSharedMemory;
} VkPhysicalDeviceCooperativeMatrix2PropertiesNV;

typedef struct VkPerTileBeginInfoQCOM {
    VkStructureType   sType;
    const  void *      pNext;
} VkPerTileBeginInfoQCOM;

typedef struct VkPerTileEndInfoQCOM {
    VkStructureType   sType;
    const  void *      pNext;
} VkPerTileEndInfoQCOM;

typedef struct VkDispatchTileInfoQCOM {
    VkStructureType   sType;
    const  void *      pNext;
} VkDispatchTileInfoQCOM;

typedef struct VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t                           maxFragmentDensityMapLayers;
} VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE;

typedef struct VkPipelineFragmentDensityMapLayeredCreateInfoVALVE {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t                                           maxFragmentDensityMapLayers;
} VkPipelineFragmentDensityMapLayeredCreateInfoVALVE;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkSetPresentConfigNV {
    VkStructureType   sType;
    const  void *       pNext;
    uint32_t                           numFramesPerBatch;
    uint32_t                           presentConfigFeedback;
} VkSetPresentConfigNV;
#endif

typedef struct VkExternalComputeQueueDeviceCreateInfoNV {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t   reservedExternalQueues;
} VkExternalComputeQueueDeviceCreateInfoNV;

typedef struct VkExternalComputeQueueCreateInfoNV {
    VkStructureType   sType;
    const  void *  pNext;
    VkQueue   preferredQueue;
} VkExternalComputeQueueCreateInfoNV;

typedef struct VkExternalComputeQueueDataParamsNV {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t   deviceIndex;
} VkExternalComputeQueueDataParamsNV;

typedef struct VkPhysicalDeviceExternalComputeQueuePropertiesNV {
    VkStructureType   sType;
    void *  pNext;
    uint32_t   externalDataSize;
    uint32_t   maxExternalQueues;
} VkPhysicalDeviceExternalComputeQueuePropertiesNV;

VK_DEFINE_HANDLE(VkExternalComputeQueueNV)

typedef struct VkTensorMemoryRequirementsInfoARM {
    VkStructureType   sType;
    const  void *         pNext;
    VkTensorARM                          tensor;
} VkTensorMemoryRequirementsInfoARM;

typedef struct VkWriteDescriptorSetTensorARM {
    VkStructureType   sType;
    const  void *               pNext;
    uint32_t                                   tensorViewCount;
    const  VkTensorViewARM *  pTensorViews;
} VkWriteDescriptorSetTensorARM;

typedef struct VkTensorCopyARM {
    VkStructureType   sType;
    const  void *   pNext;
    uint32_t                               dimensionCount;
    const  uint64_t *  pSrcOffset;
    const  uint64_t *  pDstOffset;
    const  uint64_t *  pExtent;
} VkTensorCopyARM;

typedef struct VkMemoryDedicatedAllocateInfoTensorARM {
    VkStructureType   sType;
    const  void *       pNext;
    VkTensorARM                        tensor;
} VkMemoryDedicatedAllocateInfoTensorARM;

typedef struct VkPhysicalDeviceDescriptorBufferTensorPropertiesARM {
    VkStructureType   sType;
    void *      pNext;
    size_t   tensorCaptureReplayDescriptorDataSize;
    size_t   tensorViewCaptureReplayDescriptorDataSize;
    size_t      tensorDescriptorSize;
} VkPhysicalDeviceDescriptorBufferTensorPropertiesARM;

typedef struct VkTensorCaptureDescriptorDataInfoARM {
    VkStructureType   sType;
    const  void *  pNext;
    VkTensorARM                   tensor;
} VkTensorCaptureDescriptorDataInfoARM;

typedef struct VkTensorViewCaptureDescriptorDataInfoARM {
    VkStructureType   sType;
    const  void *  pNext;
    VkTensorViewARM               tensorView;
} VkTensorViewCaptureDescriptorDataInfoARM;

typedef struct VkDescriptorGetTensorInfoARM {
    VkStructureType   sType;
    const  void *  pNext;
    VkTensorViewARM               tensorView;
} VkDescriptorGetTensorInfoARM;

typedef struct VkFrameBoundaryTensorsARM {
    VkStructureType   sType;
    const  void *           pNext;
    uint32_t                               tensorCount;
    const  VkTensorARM *  pTensors;
} VkFrameBoundaryTensorsARM;

typedef struct VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t   dimension;
    uint32_t   zeroCount;
    uint32_t   groupSize;
} VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM;

typedef struct VkDataGraphPipelineConstantARM {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t                      id;
    const  void *                  pConstantData;
} VkDataGraphPipelineConstantARM;

typedef struct VkDataGraphPipelineResourceInfoARM {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t                      descriptorSet;
    uint32_t                      binding;
    uint32_t      arrayElement;
} VkDataGraphPipelineResourceInfoARM;

typedef struct VkDataGraphPipelineCompilerControlCreateInfoARM {
    VkStructureType   sType;
    const  void *        pNext;
    const  char *  pVendorOptions;
} VkDataGraphPipelineCompilerControlCreateInfoARM;

typedef struct VkDataGraphPipelineShaderModuleCreateInfoARM {
    VkStructureType   sType;
    const  void *                                    pNext;
    VkShaderModule                                  module;
    const  char *                              pName;
    const  VkSpecializationInfo *                    pSpecializationInfo;
    uint32_t                                        constantCount;
    const  VkDataGraphPipelineConstantARM *  pConstants;
} VkDataGraphPipelineShaderModuleCreateInfoARM;

typedef struct VkDataGraphPipelineSessionBindPointRequirementsInfoARM {
    VkStructureType   sType;
    const  void *      pNext;
    VkDataGraphPipelineSessionARM     session;
} VkDataGraphPipelineSessionBindPointRequirementsInfoARM;

typedef struct VkDataGraphPipelineSessionBindPointRequirementARM {
    VkStructureType   sType;
    const  void *                  pNext;
    VkDataGraphPipelineSessionBindPointARM        bindPoint;
    VkDataGraphPipelineSessionBindPointTypeARM    bindPointType;
    uint32_t                                      numObjects;
} VkDataGraphPipelineSessionBindPointRequirementARM;

typedef struct VkDataGraphPipelineSessionMemoryRequirementsInfoARM {
    VkStructureType   sType;
    const  void *             pNext;
    VkDataGraphPipelineSessionARM            session;
    VkDataGraphPipelineSessionBindPointARM   bindPoint;
    uint32_t                                 objectIndex;
} VkDataGraphPipelineSessionMemoryRequirementsInfoARM;

typedef struct VkDataGraphPipelineInfoARM {
    VkStructureType   sType;
    const  void *  pNext;
    VkPipeline                    dataGraphPipeline;
} VkDataGraphPipelineInfoARM;

typedef struct VkDataGraphPipelineIdentifierCreateInfoARM {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t                      identifierSize;
    const  uint8_t *  pIdentifier;
} VkDataGraphPipelineIdentifierCreateInfoARM;

typedef struct VkPhysicalDeviceDataGraphOperationSupportARM {
    VkPhysicalDeviceDataGraphOperationTypeARM    operationType;
    char   name [ VK_MAX_PHYSICAL_DEVICE_DATA_GRAPH_OPERATION_SET_NAME_SIZE_ARM ];
    uint32_t                                     version;
} VkPhysicalDeviceDataGraphOperationSupportARM;

typedef struct VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t   queueFamilyIndex;
    VkPhysicalDeviceDataGraphProcessingEngineTypeARM   engineType;
} VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM;

typedef struct VkVideoEncodeSessionRgbConversionCreateInfoVALVE {
    VkStructureType   sType;
    const  void *                                  pNext;
    VkVideoEncodeRgbModelConversionFlagBitsVALVE            rgbModel;
    VkVideoEncodeRgbRangeCompressionFlagBitsVALVE           rgbRange;
    VkVideoEncodeRgbChromaOffsetFlagBitsVALVE               xChromaOffset;
    VkVideoEncodeRgbChromaOffsetFlagBitsVALVE               yChromaOffset;
} VkVideoEncodeSessionRgbConversionCreateInfoVALVE;

/* Complete version of this file */
#define VK_HEADER_VERSION_COMPLETE VK_MAKE_API_VERSION(0, 1, 4, VK_HEADER_VERSION)

typedef uint32_t VkSampleMask;

typedef uint32_t VkBool32;

typedef uint32_t VkFlags;

typedef uint64_t VkFlags64;

typedef uint64_t VkDeviceSize;

typedef uint64_t VkDeviceAddress;

typedef VkFlags VkFramebufferCreateFlags;

typedef VkFlags VkQueryPoolCreateFlags;

typedef VkFlags VkRenderPassCreateFlags;

typedef VkFlags VkSamplerCreateFlags;

typedef VkFlags VkPipelineLayoutCreateFlags;

typedef VkFlags VkPipelineCacheCreateFlags;

typedef VkFlags VkPipelineDepthStencilStateCreateFlags;

typedef VkFlags VkPipelineDynamicStateCreateFlags;

typedef VkFlags VkPipelineColorBlendStateCreateFlags;

typedef VkFlags VkPipelineMultisampleStateCreateFlags;

typedef VkFlags VkPipelineRasterizationStateCreateFlags;

typedef VkFlags VkPipelineViewportStateCreateFlags;

typedef VkFlags VkPipelineTessellationStateCreateFlags;

typedef VkFlags VkPipelineInputAssemblyStateCreateFlags;

typedef VkFlags VkPipelineVertexInputStateCreateFlags;

typedef VkFlags VkPipelineShaderStageCreateFlags;

typedef VkFlags VkDescriptorSetLayoutCreateFlags;

typedef VkFlags VkBufferViewCreateFlags;

typedef VkFlags VkInstanceCreateFlags;

typedef VkFlags VkDeviceCreateFlags;

typedef VkFlags VkDeviceQueueCreateFlags;

typedef VkFlags VkQueueFlags;

typedef VkFlags VkMemoryPropertyFlags;

typedef VkFlags VkMemoryHeapFlags;

typedef VkFlags VkAccessFlags;

typedef VkFlags VkBufferUsageFlags;

typedef VkFlags VkBufferCreateFlags;

typedef VkFlags VkShaderStageFlags;

typedef VkFlags VkImageUsageFlags;

typedef VkFlags VkImageCreateFlags;

typedef VkFlags VkImageViewCreateFlags;

typedef VkFlags VkPipelineCreateFlags;

typedef VkFlags VkColorComponentFlags;

typedef VkFlags VkFenceCreateFlags;

typedef VkFlags VkSemaphoreCreateFlags;

typedef VkFlags VkFormatFeatureFlags;

typedef VkFlags VkQueryControlFlags;

typedef VkFlags VkQueryResultFlags;

typedef VkFlags VkShaderModuleCreateFlags;

typedef VkFlags VkEventCreateFlags;

typedef VkFlags VkCommandPoolCreateFlags;

typedef VkFlags VkCommandPoolResetFlags;

typedef VkFlags VkCommandBufferResetFlags;

typedef VkFlags VkCommandBufferUsageFlags;

typedef VkFlags VkQueryPipelineStatisticFlags;

typedef VkFlags VkMemoryMapFlags;

typedef VkFlags VkMemoryUnmapFlags;

#define VkMemoryUnmapFlagsKHR VkMemoryUnmapFlags
typedef VkFlags VkImageAspectFlags;

typedef VkFlags VkSparseMemoryBindFlags;

typedef VkFlags VkSparseImageFormatFlags;

typedef VkFlags VkSubpassDescriptionFlags;

typedef VkFlags VkPipelineStageFlags;

typedef VkFlags VkSampleCountFlags;

typedef VkFlags VkAttachmentDescriptionFlags;

typedef VkFlags VkStencilFaceFlags;

typedef VkFlags VkCullModeFlags;

typedef VkFlags VkDescriptorPoolCreateFlags;

typedef VkFlags VkDescriptorPoolResetFlags;

typedef VkFlags VkDependencyFlags;

typedef VkFlags VkSubgroupFeatureFlags;

typedef VkFlags VkIndirectCommandsLayoutUsageFlagsNV;

typedef VkFlags VkIndirectStateFlagsNV;

typedef VkFlags VkGeometryFlagsKHR;

#define VkGeometryFlagsNV VkGeometryFlagsKHR
typedef VkFlags VkGeometryInstanceFlagsKHR;

#define VkGeometryInstanceFlagsNV VkGeometryInstanceFlagsKHR
typedef VkFlags VkClusterAccelerationStructureGeometryFlagsNV;

typedef VkFlags VkClusterAccelerationStructureClusterFlagsNV;

typedef VkFlags VkClusterAccelerationStructureAddressResolutionFlagsNV;

typedef VkFlags VkBuildAccelerationStructureFlagsKHR;

#define VkBuildAccelerationStructureFlagsNV VkBuildAccelerationStructureFlagsKHR
typedef VkFlags VkPrivateDataSlotCreateFlags;

#define VkPrivateDataSlotCreateFlagsEXT VkPrivateDataSlotCreateFlags
typedef VkFlags VkAccelerationStructureCreateFlagsKHR;

typedef VkFlags VkDescriptorUpdateTemplateCreateFlags;

#define VkDescriptorUpdateTemplateCreateFlagsKHR VkDescriptorUpdateTemplateCreateFlags
typedef VkFlags VkPipelineCreationFeedbackFlags;

#define VkPipelineCreationFeedbackFlagsEXT VkPipelineCreationFeedbackFlags
typedef VkFlags VkPerformanceCounterDescriptionFlagsKHR;

typedef VkFlags VkAcquireProfilingLockFlagsKHR;

typedef VkFlags VkSemaphoreWaitFlags;

#define VkSemaphoreWaitFlagsKHR VkSemaphoreWaitFlags
typedef VkFlags VkPipelineCompilerControlFlagsAMD;

typedef VkFlags VkShaderCorePropertiesFlagsAMD;

typedef VkFlags VkDeviceDiagnosticsConfigFlagsNV;

typedef VkFlags64 VkAccessFlags2;

#define VkAccessFlags2KHR VkAccessFlags2
typedef VkFlags64 VkPipelineStageFlags2;

#define VkPipelineStageFlags2KHR VkPipelineStageFlags2
typedef VkFlags VkAccelerationStructureMotionInfoFlagsNV;

typedef VkFlags VkAccelerationStructureMotionInstanceFlagsNV;

typedef VkFlags64 VkFormatFeatureFlags2;

#define VkFormatFeatureFlags2KHR VkFormatFeatureFlags2
typedef VkFlags VkRenderingFlags;

typedef VkFlags64 VkMemoryDecompressionMethodFlagsNV;

#define VkRenderingFlagsKHR VkRenderingFlags
typedef VkFlags VkBuildMicromapFlagsEXT;

typedef VkFlags VkMicromapCreateFlagsEXT;

typedef VkFlags VkIndirectCommandsLayoutUsageFlagsEXT;

typedef VkFlags VkIndirectCommandsInputModeFlagsEXT;

typedef VkFlags VkDirectDriverLoadingFlagsLUNARG;

typedef VkFlags64 VkPipelineCreateFlags2;

#define VkPipelineCreateFlags2KHR VkPipelineCreateFlags2
typedef VkFlags64 VkBufferUsageFlags2;

#define VkBufferUsageFlags2KHR VkBufferUsageFlags2
typedef VkFlags VkAddressCopyFlagsKHR;

typedef VkFlags64 VkTensorCreateFlagsARM;

typedef VkFlags64 VkTensorUsageFlagsARM;

typedef VkFlags64 VkTensorViewCreateFlagsARM;

typedef VkFlags64 VkDataGraphPipelineSessionCreateFlagsARM;

typedef VkFlags64 VkDataGraphPipelineDispatchFlagsARM;

typedef VkFlags VkVideoEncodeRgbModelConversionFlagsVALVE;

typedef VkFlags VkVideoEncodeRgbRangeCompressionFlagsVALVE;

typedef VkFlags VkVideoEncodeRgbChromaOffsetFlagsVALVE;

typedef VkFlags VkCompositeAlphaFlagsKHR;

typedef VkFlags VkDisplayPlaneAlphaFlagsKHR;

typedef VkFlags VkSurfaceTransformFlagsKHR;

typedef VkFlags VkSwapchainCreateFlagsKHR;

typedef VkFlags VkDisplayModeCreateFlagsKHR;

typedef VkFlags VkDisplaySurfaceCreateFlagsKHR;

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef VkFlags VkAndroidSurfaceCreateFlagsKHR;
#endif

#if defined(VK_USE_PLATFORM_VI_NN)
typedef VkFlags VkViSurfaceCreateFlagsNN;
#endif

#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
typedef VkFlags VkWaylandSurfaceCreateFlagsKHR;
#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkFlags VkWin32SurfaceCreateFlagsKHR;
#endif

#if defined(VK_USE_PLATFORM_XLIB_KHR)
typedef VkFlags VkXlibSurfaceCreateFlagsKHR;
#endif

#if defined(VK_USE_PLATFORM_XCB_KHR)
typedef VkFlags VkXcbSurfaceCreateFlagsKHR;
#endif

#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
typedef VkFlags VkDirectFBSurfaceCreateFlagsEXT;
#endif

#if defined(VK_USE_PLATFORM_IOS_MVK)
typedef VkFlags VkIOSSurfaceCreateFlagsMVK;
#endif

#if defined(VK_USE_PLATFORM_MACOS_MVK)
typedef VkFlags VkMacOSSurfaceCreateFlagsMVK;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef VkFlags VkMetalSurfaceCreateFlagsEXT;
#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkFlags VkImagePipeSurfaceCreateFlagsFUCHSIA;
#endif

#if defined(VK_USE_PLATFORM_GGP)
typedef VkFlags VkStreamDescriptorSurfaceCreateFlagsGGP;
#endif

typedef VkFlags VkHeadlessSurfaceCreateFlagsEXT;

#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef VkFlags VkScreenSurfaceCreateFlagsQNX;
#endif

typedef VkFlags VkPeerMemoryFeatureFlags;

#define VkPeerMemoryFeatureFlagsKHR VkPeerMemoryFeatureFlags
typedef VkFlags VkMemoryAllocateFlags;

#define VkMemoryAllocateFlagsKHR VkMemoryAllocateFlags
typedef VkFlags VkDeviceGroupPresentModeFlagsKHR;

typedef VkFlags VkDebugReportFlagsEXT;

typedef VkFlags VkCommandPoolTrimFlags;

#define VkCommandPoolTrimFlagsKHR VkCommandPoolTrimFlags
typedef VkFlags VkExternalMemoryHandleTypeFlagsNV;

typedef VkFlags VkClusterAccelerationStructureIndexFormatFlagsNV;

typedef VkFlags VkExternalMemoryFeatureFlagsNV;

typedef VkFlags VkExternalMemoryHandleTypeFlags;

#define VkExternalMemoryHandleTypeFlagsKHR VkExternalMemoryHandleTypeFlags
typedef VkFlags VkExternalMemoryFeatureFlags;

#define VkExternalMemoryFeatureFlagsKHR VkExternalMemoryFeatureFlags
typedef VkFlags VkExternalSemaphoreHandleTypeFlags;

#define VkExternalSemaphoreHandleTypeFlagsKHR VkExternalSemaphoreHandleTypeFlags
typedef VkFlags VkExternalSemaphoreFeatureFlags;

#define VkExternalSemaphoreFeatureFlagsKHR VkExternalSemaphoreFeatureFlags
typedef VkFlags VkSemaphoreImportFlags;

#define VkSemaphoreImportFlagsKHR VkSemaphoreImportFlags
typedef VkFlags VkExternalFenceHandleTypeFlags;

#define VkExternalFenceHandleTypeFlagsKHR VkExternalFenceHandleTypeFlags
typedef VkFlags VkExternalFenceFeatureFlags;

#define VkExternalFenceFeatureFlagsKHR VkExternalFenceFeatureFlags
typedef VkFlags VkFenceImportFlags;

#define VkFenceImportFlagsKHR VkFenceImportFlags
typedef VkFlags VkSurfaceCounterFlagsEXT;

typedef VkFlags VkPipelineViewportSwizzleStateCreateFlagsNV;

typedef VkFlags VkPipelineDiscardRectangleStateCreateFlagsEXT;

typedef VkFlags VkPipelineCoverageToColorStateCreateFlagsNV;

typedef VkFlags VkPipelineCoverageModulationStateCreateFlagsNV;

typedef VkFlags VkPipelineCoverageReductionStateCreateFlagsNV;

typedef VkFlags VkValidationCacheCreateFlagsEXT;

typedef VkFlags VkDebugUtilsMessageSeverityFlagsEXT;

typedef VkFlags VkDebugUtilsMessageTypeFlagsEXT;

typedef VkFlags VkDebugUtilsMessengerCreateFlagsEXT;

typedef VkFlags VkDebugUtilsMessengerCallbackDataFlagsEXT;

typedef VkFlags VkDeviceMemoryReportFlagsEXT;

typedef VkFlags VkPipelineRasterizationConservativeStateCreateFlagsEXT;

typedef VkFlags VkDescriptorBindingFlags;

#define VkDescriptorBindingFlagsEXT VkDescriptorBindingFlags
typedef VkFlags VkConditionalRenderingFlagsEXT;

typedef VkFlags VkResolveModeFlags;

#define VkResolveModeFlagsKHR VkResolveModeFlags
typedef VkFlags VkPipelineRasterizationStateStreamCreateFlagsEXT;

typedef VkFlags VkPipelineRasterizationDepthClipStateCreateFlagsEXT;

typedef VkFlags VkToolPurposeFlags;

#define VkToolPurposeFlagsEXT VkToolPurposeFlags
typedef VkFlags VkSubmitFlags;

#define VkSubmitFlagsKHR VkSubmitFlags
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkFlags VkImageFormatConstraintsFlagsFUCHSIA;
#endif

typedef VkFlags VkHostImageCopyFlags;

#define VkHostImageCopyFlagsEXT VkHostImageCopyFlags
typedef VkFlags VkPartitionedAccelerationStructureInstanceFlagsNV;

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkFlags VkImageConstraintsInfoFlagsFUCHSIA;
#endif

typedef VkFlags VkGraphicsPipelineLibraryFlagsEXT;

typedef VkFlags VkImageCompressionFlagsEXT;

typedef VkFlags VkImageCompressionFixedRateFlagsEXT;

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef VkFlags VkExportMetalObjectTypeFlagsEXT;
#endif

typedef VkFlags VkDeviceAddressBindingFlagsEXT;

typedef VkFlags   VkOpticalFlowGridSizeFlagsNV;

typedef VkFlags   VkOpticalFlowUsageFlagsNV;

typedef VkFlags   VkOpticalFlowSessionCreateFlagsNV;

typedef VkFlags   VkOpticalFlowExecuteFlagsNV;

typedef VkFlags VkFrameBoundaryFlagsEXT;

typedef VkFlags VkPresentScalingFlagsKHR;

#define VkPresentScalingFlagsEXT VkPresentScalingFlagsKHR
typedef VkFlags VkPresentGravityFlagsKHR;

#define VkPresentGravityFlagsEXT VkPresentGravityFlagsKHR
typedef VkFlags VkShaderCreateFlagsEXT;

typedef VkFlags VkTileShadingRenderPassFlagsQCOM;

typedef VkFlags64 VkPhysicalDeviceSchedulingControlsFlagsARM;

#if defined(VK_USE_PLATFORM_OHOS)
typedef VkFlags VkSurfaceCreateFlagsOHOS;
#endif

typedef VkFlags VkVideoCodecOperationFlagsKHR;

typedef VkFlags VkVideoCapabilityFlagsKHR;

typedef VkFlags VkVideoSessionCreateFlagsKHR;

typedef VkFlags VkVideoSessionParametersCreateFlagsKHR;

typedef VkFlags VkVideoBeginCodingFlagsKHR;

typedef VkFlags VkVideoEndCodingFlagsKHR;

typedef VkFlags VkVideoCodingControlFlagsKHR;

typedef VkFlags VkVideoDecodeUsageFlagsKHR;

typedef VkFlags VkVideoDecodeCapabilityFlagsKHR;

typedef VkFlags VkVideoDecodeFlagsKHR;

typedef VkFlags VkVideoDecodeH264PictureLayoutFlagsKHR;

typedef VkFlags VkVideoEncodeFlagsKHR;

typedef VkFlags VkVideoEncodeUsageFlagsKHR;

typedef VkFlags VkVideoEncodeContentFlagsKHR;

typedef VkFlags VkVideoEncodeCapabilityFlagsKHR;

typedef VkFlags VkVideoEncodeFeedbackFlagsKHR;

typedef VkFlags VkVideoEncodeRateControlFlagsKHR;

typedef VkFlags VkVideoEncodeRateControlModeFlagsKHR;

typedef VkFlags VkVideoEncodeIntraRefreshModeFlagsKHR;

typedef VkFlags VkVideoChromaSubsamplingFlagsKHR;

typedef VkFlags VkVideoComponentBitDepthFlagsKHR;

typedef VkFlags VkVideoEncodeH264CapabilityFlagsKHR;

typedef VkFlags VkVideoEncodeH264StdFlagsKHR;

typedef VkFlags VkVideoEncodeH264RateControlFlagsKHR;

typedef VkFlags VkVideoEncodeH265CapabilityFlagsKHR;

typedef VkFlags VkVideoEncodeH265StdFlagsKHR;

typedef VkFlags VkVideoEncodeH265RateControlFlagsKHR;

typedef VkFlags VkVideoEncodeH265CtbSizeFlagsKHR;

typedef VkFlags VkVideoEncodeH265TransformBlockSizeFlagsKHR;

typedef VkFlags VkVideoEncodeAV1CapabilityFlagsKHR;

typedef VkFlags VkVideoEncodeAV1StdFlagsKHR;

typedef VkFlags VkVideoEncodeAV1RateControlFlagsKHR;

typedef VkFlags VkVideoEncodeAV1SuperblockSizeFlagsKHR;

typedef VkFlags64 VkAccessFlags3KHR;

typedef VkBool32 (VKAPI_PTR *PFN_vkDebugReportCallbackEXT)(
    VkDebugReportFlagsEXT                       flags,
    VkDebugReportObjectTypeEXT                  objectType,
    uint64_t                                    object,
    size_t                                      location,
    int32_t                                     messageCode,
    const char*                                 pLayerPrefix,
    const char*                                 pMessage,
    void*                                       pUserData);

typedef struct VkDeviceQueueCreateInfo {
    VkStructureType   sType;
    const  void *      pNext;
    VkDeviceQueueCreateFlags      flags;
    uint32_t          queueFamilyIndex;
    uint32_t          queueCount;
    const  float *     pQueuePriorities;
} VkDeviceQueueCreateInfo;

typedef struct VkInstanceCreateInfo {
    VkStructureType   sType;
    const  void *      pNext;
    VkInstanceCreateFlags    flags;
    const  VkApplicationInfo *  pApplicationInfo;
    uint32_t                 enabledLayerCount;
    const  char * const*       ppEnabledLayerNames;
    uint32_t                 enabledExtensionCount;
    const  char * const*       ppEnabledExtensionNames;
} VkInstanceCreateInfo;

typedef struct VkQueueFamilyProperties {
    VkQueueFlags             queueFlags;
    uint32_t                 queueCount;
    uint32_t                 timestampValidBits;
    VkExtent3D               minImageTransferGranularity;
} VkQueueFamilyProperties;

typedef struct VkMemoryAllocateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkDeviceSize             allocationSize;
    uint32_t                 memoryTypeIndex;
} VkMemoryAllocateInfo;

typedef struct VkMemoryRequirements {
    VkDeviceSize             size;
    VkDeviceSize             alignment;
    uint32_t                 memoryTypeBits;
} VkMemoryRequirements;

typedef struct VkSparseImageFormatProperties {
    VkImageAspectFlags         aspectMask;
    VkExtent3D                                  imageGranularity;
    VkSparseImageFormatFlags   flags;
} VkSparseImageFormatProperties;

typedef struct VkSparseImageMemoryRequirements {
    VkSparseImageFormatProperties   formatProperties;
    uint32_t                 imageMipTailFirstLod;
    VkDeviceSize             imageMipTailSize;
    VkDeviceSize             imageMipTailOffset;
    VkDeviceSize             imageMipTailStride;
} VkSparseImageMemoryRequirements;

typedef struct VkMemoryType {
    VkMemoryPropertyFlags    propertyFlags;
    uint32_t                 heapIndex;
} VkMemoryType;

typedef struct VkMemoryHeap {
    VkDeviceSize             size;
    VkMemoryHeapFlags        flags;
} VkMemoryHeap;

typedef struct VkMappedMemoryRange {
    VkStructureType   sType;
    const  void *             pNext;
    VkDeviceMemory           memory;
    VkDeviceSize             offset;
    VkDeviceSize             size;
} VkMappedMemoryRange;

typedef struct VkFormatProperties {
    VkFormatFeatureFlags     linearTilingFeatures;
    VkFormatFeatureFlags     optimalTilingFeatures;
    VkFormatFeatureFlags     bufferFeatures;
} VkFormatProperties;

typedef struct VkImageFormatProperties {
    VkExtent3D               maxExtent;
    uint32_t                 maxMipLevels;
    uint32_t                 maxArrayLayers;
    VkSampleCountFlags       sampleCounts;
    VkDeviceSize             maxResourceSize;
} VkImageFormatProperties;

typedef struct VkDescriptorBufferInfo {
    VkBuffer                 buffer;
    VkDeviceSize             offset;
    VkDeviceSize             range;
} VkDescriptorBufferInfo;

typedef struct VkWriteDescriptorSet {
    VkStructureType   sType;
    const  void *             pNext;
    VkDescriptorSet          dstSet;
    uint32_t                 dstBinding;
    uint32_t                 dstArrayElement;
    uint32_t                 descriptorCount;
    VkDescriptorType         descriptorType;
    const  VkDescriptorImageInfo *  pImageInfo;
    const  VkDescriptorBufferInfo *  pBufferInfo;
    const  VkBufferView *     pTexelBufferView;
} VkWriteDescriptorSet;

typedef struct VkBufferUsageFlags2CreateInfo {
    VkStructureType   sType;
    const  void *     pNext;
    VkBufferUsageFlags2              usage;
} VkBufferUsageFlags2CreateInfo;

typedef struct VkBufferUsageFlags2CreateInfo  VkBufferUsageFlags2CreateInfoKHR;

typedef struct VkBufferCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkBufferCreateFlags      flags;
    VkDeviceSize             size;
    VkBufferUsageFlags       usage;
    VkSharingMode            sharingMode;
    uint32_t                 queueFamilyIndexCount;
    const  uint32_t *         pQueueFamilyIndices;
} VkBufferCreateInfo;

typedef struct VkBufferViewCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkBufferViewCreateFlags   flags;
    VkBuffer                 buffer;
    VkFormat                 format;
    VkDeviceSize             offset;
    VkDeviceSize             range;
} VkBufferViewCreateInfo;

typedef struct VkImageSubresource {
    VkImageAspectFlags       aspectMask;
    uint32_t                 mipLevel;
    uint32_t                 arrayLayer;
} VkImageSubresource;

typedef struct VkImageSubresourceLayers {
    VkImageAspectFlags       aspectMask;
    uint32_t                 mipLevel;
    uint32_t                 baseArrayLayer;
    uint32_t                 layerCount;
} VkImageSubresourceLayers;

typedef struct VkImageSubresourceRange {
    VkImageAspectFlags       aspectMask;
    uint32_t                 baseMipLevel;
    uint32_t                 levelCount;
    uint32_t                 baseArrayLayer;
    uint32_t                 layerCount;
} VkImageSubresourceRange;

typedef struct VkMemoryBarrier {
    VkStructureType   sType;
    const  void *             pNext;
    VkAccessFlags            srcAccessMask;
    VkAccessFlags            dstAccessMask;
} VkMemoryBarrier;

typedef struct VkBufferMemoryBarrier {
    VkStructureType   sType;
    const  void *             pNext;
    VkAccessFlags            srcAccessMask;
    VkAccessFlags            dstAccessMask;
    uint32_t                 srcQueueFamilyIndex;
    uint32_t                 dstQueueFamilyIndex;
    VkBuffer                 buffer;
    VkDeviceSize             offset;
    VkDeviceSize             size;
} VkBufferMemoryBarrier;

typedef struct VkImageMemoryBarrier {
    VkStructureType   sType;
    const  void *             pNext;
    VkAccessFlags            srcAccessMask;
    VkAccessFlags            dstAccessMask;
    VkImageLayout            oldLayout;
    VkImageLayout            newLayout;
    uint32_t                 srcQueueFamilyIndex;
    uint32_t                 dstQueueFamilyIndex;
    VkImage                  image;
    VkImageSubresourceRange   subresourceRange;
} VkImageMemoryBarrier;

typedef struct VkImageCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkImageCreateFlags       flags;
    VkImageType              imageType;
    VkFormat                 format;
    VkExtent3D               extent;
    uint32_t                 mipLevels;
    uint32_t                 arrayLayers;
    VkSampleCountFlagBits    samples;
    VkImageTiling            tiling;
    VkImageUsageFlags        usage;
    VkSharingMode            sharingMode;
    uint32_t                 queueFamilyIndexCount;
    const  uint32_t *         pQueueFamilyIndices;
    VkImageLayout            initialLayout;
} VkImageCreateInfo;

typedef struct VkSubresourceLayout {
    VkDeviceSize             offset;
    VkDeviceSize             size;
    VkDeviceSize             rowPitch;
    VkDeviceSize             arrayPitch;
    VkDeviceSize             depthPitch;
} VkSubresourceLayout;

typedef struct VkImageViewCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkImageViewCreateFlags   flags;
    VkImage                  image;
    VkImageViewType          viewType;
    VkFormat                 format;
    VkComponentMapping       components;
    VkImageSubresourceRange   subresourceRange;
} VkImageViewCreateInfo;

typedef struct VkBufferCopy {
    VkDeviceSize                         srcOffset;
    VkDeviceSize                         dstOffset;
    VkDeviceSize   size;
} VkBufferCopy;

typedef struct VkSparseMemoryBind {
    VkDeviceSize             resourceOffset;
    VkDeviceSize             size;
    VkDeviceMemory           memory;
    VkDeviceSize             memoryOffset;
    VkSparseMemoryBindFlags   flags;
} VkSparseMemoryBind;

typedef struct VkSparseImageMemoryBind {
    VkImageSubresource       subresource;
    VkOffset3D               offset;
    VkExtent3D               extent;
    VkDeviceMemory           memory;
    VkDeviceSize             memoryOffset;
    VkSparseMemoryBindFlags   flags;
} VkSparseImageMemoryBind;

typedef struct VkSparseBufferMemoryBindInfo {
    VkBuffer   buffer;
    uint32_t                 bindCount;
    const  VkSparseMemoryBind *  pBinds;
} VkSparseBufferMemoryBindInfo;

typedef struct VkSparseImageOpaqueMemoryBindInfo {
    VkImage   image;
    uint32_t                 bindCount;
    const  VkSparseMemoryBind *  pBinds;
} VkSparseImageOpaqueMemoryBindInfo;

typedef struct VkSparseImageMemoryBindInfo {
    VkImage   image;
    uint32_t                 bindCount;
    const  VkSparseImageMemoryBind *  pBinds;
} VkSparseImageMemoryBindInfo;

typedef struct VkBindSparseInfo {
    VkStructureType   sType;
    const  void *             pNext;
    uint32_t                 waitSemaphoreCount;
    const  VkSemaphore *      pWaitSemaphores;
    uint32_t                 bufferBindCount;
    const  VkSparseBufferMemoryBindInfo *  pBufferBinds;
    uint32_t                 imageOpaqueBindCount;
    const  VkSparseImageOpaqueMemoryBindInfo *  pImageOpaqueBinds;
    uint32_t                 imageBindCount;
    const  VkSparseImageMemoryBindInfo *  pImageBinds;
    uint32_t                 signalSemaphoreCount;
    const  VkSemaphore *      pSignalSemaphores;
} VkBindSparseInfo;

typedef struct VkImageCopy {
    VkImageSubresourceLayers   srcSubresource;
    VkOffset3D               srcOffset;
    VkImageSubresourceLayers   dstSubresource;
    VkOffset3D               dstOffset;
    VkExtent3D               extent;
} VkImageCopy;

typedef struct VkImageBlit {
    VkImageSubresourceLayers   srcSubresource;
    VkOffset3D               srcOffsets [2];
    VkImageSubresourceLayers   dstSubresource;
    VkOffset3D               dstOffsets [2];
} VkImageBlit;

typedef struct VkBufferImageCopy {
    VkDeviceSize             bufferOffset;
    uint32_t                 bufferRowLength;
    uint32_t                 bufferImageHeight;
    VkImageSubresourceLayers   imageSubresource;
    VkOffset3D               imageOffset;
    VkExtent3D               imageExtent;
} VkBufferImageCopy;

typedef struct VkStridedDeviceAddressRangeKHR {
    VkDeviceAddress                      address;
    VkDeviceSize                         size;
    VkDeviceSize                         stride;
} VkStridedDeviceAddressRangeKHR;

typedef struct VkCopyMemoryIndirectCommandKHR {
    VkDeviceAddress                      srcAddress;
    VkDeviceAddress                      dstAddress;
    VkDeviceSize                         size;
} VkCopyMemoryIndirectCommandKHR;

typedef struct VkCopyMemoryIndirectCommandKHR  VkCopyMemoryIndirectCommandNV;

typedef struct VkCopyMemoryIndirectInfoKHR {
    VkStructureType   sType;
    const  void *                  pNext;
    VkAddressCopyFlagsKHR                         srcCopyFlags;
    VkAddressCopyFlagsKHR                         dstCopyFlags;
    uint32_t                                      copyCount;
    VkStridedDeviceAddressRangeKHR                copyAddressRange;
} VkCopyMemoryIndirectInfoKHR;

typedef struct VkCopyMemoryToImageIndirectCommandKHR {
    VkDeviceAddress                              srcAddress;
    uint32_t                                     bufferRowLength;
    uint32_t                                     bufferImageHeight;
    VkImageSubresourceLayers                     imageSubresource;
    VkOffset3D                                   imageOffset;
    VkExtent3D                                   imageExtent;
} VkCopyMemoryToImageIndirectCommandKHR;

typedef struct VkCopyMemoryToImageIndirectCommandKHR  VkCopyMemoryToImageIndirectCommandNV;

typedef struct VkCopyMemoryToImageIndirectInfoKHR {
    VkStructureType   sType;
    const  void *                  pNext;
    VkAddressCopyFlagsKHR                         srcCopyFlags;
    uint32_t                                      copyCount;
    VkStridedDeviceAddressRangeKHR                copyAddressRange;
    VkImage                                       dstImage;
    VkImageLayout                                 dstImageLayout;
    const  VkImageSubresourceLayers *  pImageSubresources;
} VkCopyMemoryToImageIndirectInfoKHR;

typedef struct VkImageResolve {
    VkImageSubresourceLayers   srcSubresource;
    VkOffset3D               srcOffset;
    VkImageSubresourceLayers   dstSubresource;
    VkOffset3D               dstOffset;
    VkExtent3D               extent;
} VkImageResolve;

typedef struct VkShaderModuleCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkShaderModuleCreateFlags   flags;
    size_t                   codeSize;
    const  uint32_t *             pCode;
} VkShaderModuleCreateInfo;

typedef struct VkDescriptorSetLayoutBinding {
    uint32_t                 binding;
    VkDescriptorType         descriptorType;
    uint32_t   descriptorCount;
    VkShaderStageFlags       stageFlags;
    const  VkSampler *        pImmutableSamplers;
} VkDescriptorSetLayoutBinding;

typedef struct VkDescriptorSetLayoutCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkDescriptorSetLayoutCreateFlags      flags;
    uint32_t                 bindingCount;
    const  VkDescriptorSetLayoutBinding *  pBindings;
} VkDescriptorSetLayoutCreateInfo;

typedef struct VkDescriptorPoolCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkDescriptorPoolCreateFlags    flags;
    uint32_t                 maxSets;
    uint32_t                 poolSizeCount;
    const  VkDescriptorPoolSize *  pPoolSizes;
} VkDescriptorPoolCreateInfo;

typedef struct VkPipelineShaderStageCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineShaderStageCreateFlags      flags;
    VkShaderStageFlagBits    stage;
    VkShaderModule   module;
    const  char *  pName;
    const  VkSpecializationInfo *  pSpecializationInfo;
} VkPipelineShaderStageCreateInfo;

typedef struct VkComputePipelineCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineCreateFlags    flags;
    VkPipelineShaderStageCreateInfo   stage;
    VkPipelineLayout         layout;
    VkPipeline        basePipelineHandle;
    int32_t                  basePipelineIndex;
} VkComputePipelineCreateInfo;

typedef struct VkComputePipelineIndirectBufferInfoNV {
    VkStructureType   sType;
    const  void *        pNext;
    VkDeviceAddress                     deviceAddress;
    VkDeviceSize                        size;
    VkDeviceAddress     pipelineDeviceAddressCaptureReplay;
} VkComputePipelineIndirectBufferInfoNV;

typedef struct VkPipelineCreateFlags2CreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineCreateFlags2   flags;
} VkPipelineCreateFlags2CreateInfo;

typedef struct VkPipelineCreateFlags2CreateInfo  VkPipelineCreateFlags2CreateInfoKHR;

typedef struct VkPipelineVertexInputStateCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineVertexInputStateCreateFlags      flags;
    uint32_t                 vertexBindingDescriptionCount;
    const  VkVertexInputBindingDescription *  pVertexBindingDescriptions;
    uint32_t                 vertexAttributeDescriptionCount;
    const  VkVertexInputAttributeDescription *  pVertexAttributeDescriptions;
} VkPipelineVertexInputStateCreateInfo;

typedef struct VkPipelineInputAssemblyStateCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineInputAssemblyStateCreateFlags      flags;
    VkPrimitiveTopology      topology;
    VkBool32                 primitiveRestartEnable;
} VkPipelineInputAssemblyStateCreateInfo;

typedef struct VkPipelineTessellationStateCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineTessellationStateCreateFlags      flags;
    uint32_t                 patchControlPoints;
} VkPipelineTessellationStateCreateInfo;

typedef struct VkPipelineViewportStateCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineViewportStateCreateFlags      flags;
    uint32_t                 viewportCount;
    const  VkViewport *       pViewports;
    uint32_t                 scissorCount;
    const  VkRect2D *         pScissors;
} VkPipelineViewportStateCreateInfo;

typedef struct VkPipelineRasterizationStateCreateInfo {
    VkStructureType   sType;
    const  void *  pNext;
    VkPipelineRasterizationStateCreateFlags      flags;
    VkBool32                 depthClampEnable;
    VkBool32                 rasterizerDiscardEnable;
    VkPolygonMode            polygonMode;
    VkCullModeFlags          cullMode;
    VkFrontFace              frontFace;
    VkBool32                 depthBiasEnable;
    float                    depthBiasConstantFactor;
    float                    depthBiasClamp;
    float                    depthBiasSlopeFactor;
    float                    lineWidth;
} VkPipelineRasterizationStateCreateInfo;

typedef struct VkPipelineMultisampleStateCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineMultisampleStateCreateFlags      flags;
    VkSampleCountFlagBits    rasterizationSamples;
    VkBool32                 sampleShadingEnable;
    float                    minSampleShading;
    const  VkSampleMask *     pSampleMask;
    VkBool32                 alphaToCoverageEnable;
    VkBool32                 alphaToOneEnable;
} VkPipelineMultisampleStateCreateInfo;

typedef struct VkPipelineColorBlendAttachmentState {
    VkBool32                 blendEnable;
    VkBlendFactor            srcColorBlendFactor;
    VkBlendFactor            dstColorBlendFactor;
    VkBlendOp                colorBlendOp;
    VkBlendFactor            srcAlphaBlendFactor;
    VkBlendFactor            dstAlphaBlendFactor;
    VkBlendOp                alphaBlendOp;
    VkColorComponentFlags    colorWriteMask;
} VkPipelineColorBlendAttachmentState;

typedef struct VkPipelineColorBlendStateCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineColorBlendStateCreateFlags      flags;
    VkBool32                 logicOpEnable;
    VkLogicOp                logicOp;
    uint32_t                 attachmentCount;
    const  VkPipelineColorBlendAttachmentState *  pAttachments;
    float                    blendConstants [4];
} VkPipelineColorBlendStateCreateInfo;

typedef struct VkPipelineDynamicStateCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineDynamicStateCreateFlags      flags;
    uint32_t                 dynamicStateCount;
    const  VkDynamicState *   pDynamicStates;
} VkPipelineDynamicStateCreateInfo;

typedef struct VkPipelineDepthStencilStateCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineDepthStencilStateCreateFlags      flags;
    VkBool32                 depthTestEnable;
    VkBool32                 depthWriteEnable;
    VkCompareOp              depthCompareOp;
    VkBool32                 depthBoundsTestEnable;
    VkBool32                 stencilTestEnable;
    VkStencilOpState         front;
    VkStencilOpState         back;
    float                    minDepthBounds;
    float                    maxDepthBounds;
} VkPipelineDepthStencilStateCreateInfo;

typedef struct VkGraphicsPipelineCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineCreateFlags    flags;
    uint32_t   stageCount;
    const  VkPipelineShaderStageCreateInfo *  pStages;
    const  VkPipelineVertexInputStateCreateInfo *  pVertexInputState;
    const  VkPipelineInputAssemblyStateCreateInfo *  pInputAssemblyState;
    const  VkPipelineTessellationStateCreateInfo *  pTessellationState;
    const  VkPipelineViewportStateCreateInfo *  pViewportState;
    const  VkPipelineRasterizationStateCreateInfo *  pRasterizationState;
    const  VkPipelineMultisampleStateCreateInfo *  pMultisampleState;
    const  VkPipelineDepthStencilStateCreateInfo *  pDepthStencilState;
    const  VkPipelineColorBlendStateCreateInfo *  pColorBlendState;
    const  VkPipelineDynamicStateCreateInfo *  pDynamicState;
    VkPipelineLayout         layout;
    VkRenderPass             renderPass;
    uint32_t                 subpass;
    VkPipeline        basePipelineHandle;
    int32_t                  basePipelineIndex;
} VkGraphicsPipelineCreateInfo;

typedef struct VkPipelineCacheCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineCacheCreateFlags      flags;
    size_t             initialDataSize;
    const  void *             pInitialData;
} VkPipelineCacheCreateInfo;

typedef struct VkPushConstantRange {
    VkShaderStageFlags       stageFlags;
    uint32_t                 offset;
    uint32_t                 size;
} VkPushConstantRange;

typedef struct VkPipelineBinaryKeysAndDataKHR {
    uint32_t                                             binaryCount;
    const  VkPipelineBinaryKeyKHR *     pPipelineBinaryKeys;
    const  VkPipelineBinaryDataKHR *    pPipelineBinaryData;
} VkPipelineBinaryKeysAndDataKHR;

typedef struct VkPipelineLayoutCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineLayoutCreateFlags      flags;
    uint32_t                 setLayoutCount;
    const  VkDescriptorSetLayout *  pSetLayouts;
    uint32_t                 pushConstantRangeCount;
    const  VkPushConstantRange *  pPushConstantRanges;
} VkPipelineLayoutCreateInfo;

typedef struct VkSamplerCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkSamplerCreateFlags     flags;
    VkFilter                 magFilter;
    VkFilter                 minFilter;
    VkSamplerMipmapMode      mipmapMode;
    VkSamplerAddressMode     addressModeU;
    VkSamplerAddressMode     addressModeV;
    VkSamplerAddressMode     addressModeW;
    float                    mipLodBias;
    VkBool32                 anisotropyEnable;
    float                    maxAnisotropy;
    VkBool32                 compareEnable;
    VkCompareOp              compareOp;
    float                    minLod;
    float                    maxLod;
    VkBorderColor            borderColor;
    VkBool32                 unnormalizedCoordinates;
} VkSamplerCreateInfo;

typedef struct VkCommandPoolCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkCommandPoolCreateFlags     flags;
    uint32_t                 queueFamilyIndex;
} VkCommandPoolCreateInfo;

typedef struct VkCommandBufferInheritanceInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkRenderPass      renderPass;
    uint32_t                 subpass;
    VkFramebuffer     framebuffer;
    VkBool32                 occlusionQueryEnable;
    VkQueryControlFlags      queryFlags;
    VkQueryPipelineStatisticFlags   pipelineStatistics;
} VkCommandBufferInheritanceInfo;

typedef struct VkCommandBufferBeginInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkCommandBufferUsageFlags    flags;
    const  VkCommandBufferInheritanceInfo *        pInheritanceInfo;
} VkCommandBufferBeginInfo;

typedef struct VkRenderPassBeginInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkRenderPass             renderPass;
    VkFramebuffer            framebuffer;
    VkRect2D                 renderArea;
    uint32_t                 clearValueCount;
    const  VkClearValue *     pClearValues;
} VkRenderPassBeginInfo;

typedef struct VkClearAttachment {
    VkImageAspectFlags       aspectMask;
    uint32_t                 colorAttachment;
    VkClearValue             clearValue;
} VkClearAttachment;

typedef struct VkAttachmentDescription {
    VkAttachmentDescriptionFlags   flags;
    VkFormat                 format;
    VkSampleCountFlagBits    samples;
    VkAttachmentLoadOp       loadOp;
    VkAttachmentStoreOp      storeOp;
    VkAttachmentLoadOp       stencilLoadOp;
    VkAttachmentStoreOp      stencilStoreOp;
    VkImageLayout            initialLayout;
    VkImageLayout            finalLayout;
} VkAttachmentDescription;

typedef struct VkSubpassDescription {
    VkSubpassDescriptionFlags   flags;
    VkPipelineBindPoint      pipelineBindPoint;
    uint32_t                 inputAttachmentCount;
    const  VkAttachmentReference *  pInputAttachments;
    uint32_t                 colorAttachmentCount;
    const  VkAttachmentReference *  pColorAttachments;
    const  VkAttachmentReference *  pResolveAttachments;
    const  VkAttachmentReference *  pDepthStencilAttachment;
    uint32_t                 preserveAttachmentCount;
    const  uint32_t *  pPreserveAttachments;
} VkSubpassDescription;

typedef struct VkSubpassDependency {
    uint32_t                 srcSubpass;
    uint32_t                 dstSubpass;
    VkPipelineStageFlags     srcStageMask;
    VkPipelineStageFlags     dstStageMask;
    VkAccessFlags            srcAccessMask;
    VkAccessFlags            dstAccessMask;
    VkDependencyFlags        dependencyFlags;
} VkSubpassDependency;

typedef struct VkRenderPassCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkRenderPassCreateFlags   flags;
    uint32_t     attachmentCount;
    const  VkAttachmentDescription *  pAttachments;
    uint32_t                 subpassCount;
    const  VkSubpassDescription *  pSubpasses;
    uint32_t         dependencyCount;
    const  VkSubpassDependency *  pDependencies;
} VkRenderPassCreateInfo;

typedef struct VkEventCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkEventCreateFlags       flags;
} VkEventCreateInfo;

typedef struct VkFenceCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkFenceCreateFlags       flags;
} VkFenceCreateInfo;

typedef struct VkPhysicalDeviceFeatures {
    VkBool32                 robustBufferAccess;
    VkBool32                 fullDrawIndexUint32;
    VkBool32                 imageCubeArray;
    VkBool32                 independentBlend;
    VkBool32                 geometryShader;
    VkBool32                 tessellationShader;
    VkBool32                 sampleRateShading;
    VkBool32                 dualSrcBlend;
    VkBool32                 logicOp;
    VkBool32                 multiDrawIndirect;
    VkBool32                 drawIndirectFirstInstance;
    VkBool32                 depthClamp;
    VkBool32                 depthBiasClamp;
    VkBool32                 fillModeNonSolid;
    VkBool32                 depthBounds;
    VkBool32                 wideLines;
    VkBool32                 largePoints;
    VkBool32                 alphaToOne;
    VkBool32                 multiViewport;
    VkBool32                 samplerAnisotropy;
    VkBool32                 textureCompressionETC2;
    VkBool32                 textureCompressionASTC_LDR;
    VkBool32                 textureCompressionBC;
    VkBool32                 occlusionQueryPrecise;
    VkBool32                 pipelineStatisticsQuery;
    VkBool32                 vertexPipelineStoresAndAtomics;
    VkBool32                 fragmentStoresAndAtomics;
    VkBool32                 shaderTessellationAndGeometryPointSize;
    VkBool32                 shaderImageGatherExtended;
    VkBool32                 shaderStorageImageExtendedFormats;
    VkBool32                 shaderStorageImageMultisample;
    VkBool32                 shaderStorageImageReadWithoutFormat;
    VkBool32                 shaderStorageImageWriteWithoutFormat;
    VkBool32                 shaderUniformBufferArrayDynamicIndexing;
    VkBool32                 shaderSampledImageArrayDynamicIndexing;
    VkBool32                 shaderStorageBufferArrayDynamicIndexing;
    VkBool32                 shaderStorageImageArrayDynamicIndexing;
    VkBool32                 shaderClipDistance;
    VkBool32                 shaderCullDistance;
    VkBool32                 shaderFloat64;
    VkBool32                 shaderInt64;
    VkBool32                 shaderInt16;
    VkBool32                 shaderResourceResidency;
    VkBool32                 shaderResourceMinLod;
    VkBool32                 sparseBinding;
    VkBool32                 sparseResidencyBuffer;
    VkBool32                 sparseResidencyImage2D;
    VkBool32                 sparseResidencyImage3D;
    VkBool32                 sparseResidency2Samples;
    VkBool32                 sparseResidency4Samples;
    VkBool32                 sparseResidency8Samples;
    VkBool32                 sparseResidency16Samples;
    VkBool32                 sparseResidencyAliased;
    VkBool32                 variableMultisampleRate;
    VkBool32                 inheritedQueries;
} VkPhysicalDeviceFeatures;

typedef struct VkPhysicalDeviceSparseProperties {
    VkBool32               residencyStandard2DBlockShape;
    VkBool32               residencyStandard2DMultisampleBlockShape;
    VkBool32               residencyStandard3DBlockShape;
    VkBool32               residencyAlignedMipSize;
    VkBool32               residencyNonResidentStrict;
} VkPhysicalDeviceSparseProperties;

typedef struct VkPhysicalDeviceLimits {
    uint32_t                 maxImageDimension1D;
    uint32_t                 maxImageDimension2D;
    uint32_t                 maxImageDimension3D;
    uint32_t                 maxImageDimensionCube;
    uint32_t                 maxImageArrayLayers;
    uint32_t                 maxTexelBufferElements;
    uint32_t                 maxUniformBufferRange;
    uint32_t                 maxStorageBufferRange;
    uint32_t                 maxPushConstantsSize;
    uint32_t                 maxMemoryAllocationCount;
    uint32_t                 maxSamplerAllocationCount;
    VkDeviceSize             bufferImageGranularity;
    VkDeviceSize             sparseAddressSpaceSize;
    uint32_t                 maxBoundDescriptorSets;
    uint32_t                 maxPerStageDescriptorSamplers;
    uint32_t                 maxPerStageDescriptorUniformBuffers;
    uint32_t                 maxPerStageDescriptorStorageBuffers;
    uint32_t                 maxPerStageDescriptorSampledImages;
    uint32_t                 maxPerStageDescriptorStorageImages;
    uint32_t                 maxPerStageDescriptorInputAttachments;
    uint32_t                 maxPerStageResources;
    uint32_t                 maxDescriptorSetSamplers;
    uint32_t                 maxDescriptorSetUniformBuffers;
    uint32_t                 maxDescriptorSetUniformBuffersDynamic;
    uint32_t                 maxDescriptorSetStorageBuffers;
    uint32_t                 maxDescriptorSetStorageBuffersDynamic;
    uint32_t                 maxDescriptorSetSampledImages;
    uint32_t                 maxDescriptorSetStorageImages;
    uint32_t                 maxDescriptorSetInputAttachments;
    uint32_t                 maxVertexInputAttributes;
    uint32_t                 maxVertexInputBindings;
    uint32_t                 maxVertexInputAttributeOffset;
    uint32_t                 maxVertexInputBindingStride;
    uint32_t                 maxVertexOutputComponents;
    uint32_t                 maxTessellationGenerationLevel;
    uint32_t                 maxTessellationPatchSize;
    uint32_t                 maxTessellationControlPerVertexInputComponents;
    uint32_t                 maxTessellationControlPerVertexOutputComponents;
    uint32_t                 maxTessellationControlPerPatchOutputComponents;
    uint32_t                 maxTessellationControlTotalOutputComponents;
    uint32_t                 maxTessellationEvaluationInputComponents;
    uint32_t                 maxTessellationEvaluationOutputComponents;
    uint32_t                 maxGeometryShaderInvocations;
    uint32_t                 maxGeometryInputComponents;
    uint32_t                 maxGeometryOutputComponents;
    uint32_t                 maxGeometryOutputVertices;
    uint32_t                 maxGeometryTotalOutputComponents;
    uint32_t                 maxFragmentInputComponents;
    uint32_t                 maxFragmentOutputAttachments;
    uint32_t                 maxFragmentDualSrcAttachments;
    uint32_t                 maxFragmentCombinedOutputResources;
    uint32_t                 maxComputeSharedMemorySize;
    uint32_t                 maxComputeWorkGroupCount [3];
    uint32_t                 maxComputeWorkGroupInvocations;
    uint32_t                 maxComputeWorkGroupSize [3];
    uint32_t                subPixelPrecisionBits;
    uint32_t                subTexelPrecisionBits;
    uint32_t                mipmapPrecisionBits;
    uint32_t                 maxDrawIndexedIndexValue;
    uint32_t                 maxDrawIndirectCount;
    float                    maxSamplerLodBias;
    float                    maxSamplerAnisotropy;
    uint32_t                 maxViewports;
    uint32_t                 maxViewportDimensions [2];
    float                  viewportBoundsRange [2];
    uint32_t                viewportSubPixelBits;
    size_t               minMemoryMapAlignment;
    VkDeviceSize         minTexelBufferOffsetAlignment;
    VkDeviceSize         minUniformBufferOffsetAlignment;
    VkDeviceSize         minStorageBufferOffsetAlignment;
    int32_t                  minTexelOffset;
    uint32_t                 maxTexelOffset;
    int32_t                  minTexelGatherOffset;
    uint32_t                 maxTexelGatherOffset;
    float                    minInterpolationOffset;
    float                    maxInterpolationOffset;
    uint32_t                subPixelInterpolationOffsetBits;
    uint32_t                 maxFramebufferWidth;
    uint32_t                 maxFramebufferHeight;
    uint32_t                 maxFramebufferLayers;
    VkSampleCountFlags       framebufferColorSampleCounts;
    VkSampleCountFlags       framebufferDepthSampleCounts;
    VkSampleCountFlags       framebufferStencilSampleCounts;
    VkSampleCountFlags       framebufferNoAttachmentsSampleCounts;
    uint32_t                 maxColorAttachments;
    VkSampleCountFlags       sampledImageColorSampleCounts;
    VkSampleCountFlags       sampledImageIntegerSampleCounts;
    VkSampleCountFlags       sampledImageDepthSampleCounts;
    VkSampleCountFlags       sampledImageStencilSampleCounts;
    VkSampleCountFlags       storageImageSampleCounts;
    uint32_t                 maxSampleMaskWords;
    VkBool32                 timestampComputeAndGraphics;
    float                timestampPeriod;
    uint32_t                 maxClipDistances;
    uint32_t                 maxCullDistances;
    uint32_t                 maxCombinedClipAndCullDistances;
    uint32_t                 discreteQueuePriorities;
    float                  pointSizeRange [2];
    float                  lineWidthRange [2];
    float                pointSizeGranularity;
    float                lineWidthGranularity;
    VkBool32                 strictLines;
    VkBool32                 standardSampleLocations;
    VkDeviceSize         optimalBufferCopyOffsetAlignment;
    VkDeviceSize         optimalBufferCopyRowPitchAlignment;
    VkDeviceSize         nonCoherentAtomSize;
} VkPhysicalDeviceLimits;

typedef struct VkSemaphoreCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkSemaphoreCreateFlags   flags;
} VkSemaphoreCreateInfo;

typedef struct VkQueryPoolCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkQueryPoolCreateFlags   flags;
    VkQueryType              queryType;
    uint32_t                 queryCount;
    VkQueryPipelineStatisticFlags   pipelineStatistics;
} VkQueryPoolCreateInfo;

typedef struct VkFramebufferCreateInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkFramebufferCreateFlags      flags;
    VkRenderPass                             renderPass;
    uint32_t                 attachmentCount;
    const  VkImageView *      pAttachments;
    uint32_t                 width;
    uint32_t                 height;
    uint32_t                 layers;
} VkFramebufferCreateInfo;

typedef struct VkSubmitInfo {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t         waitSemaphoreCount;
    const  VkSemaphore *      pWaitSemaphores;
    const  VkPipelineStageFlags *            pWaitDstStageMask;
    uint32_t         commandBufferCount;
    const  VkCommandBuffer *      pCommandBuffers;
    uint32_t         signalSemaphoreCount;
    const  VkSemaphore *      pSignalSemaphores;
} VkSubmitInfo;

typedef struct VkDisplayPropertiesKHR {
    VkDisplayKHR                       display;
    const  char *                       displayName;
    VkExtent2D                         physicalDimensions;
    VkExtent2D                         physicalResolution;
    VkSurfaceTransformFlagsKHR         supportedTransforms;
    VkBool32                           planeReorderPossible;
    VkBool32                           persistentContent;
} VkDisplayPropertiesKHR;

typedef struct VkDisplayModeCreateInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkDisplayModeCreateFlagsKHR        flags;
    VkDisplayModeParametersKHR         parameters;
} VkDisplayModeCreateInfoKHR;

typedef struct VkDisplayPlaneCapabilitiesKHR {
    VkDisplayPlaneAlphaFlagsKHR        supportedAlpha;
    VkOffset2D                         minSrcPosition;
    VkOffset2D                         maxSrcPosition;
    VkExtent2D                         minSrcExtent;
    VkExtent2D                         maxSrcExtent;
    VkOffset2D                         minDstPosition;
    VkOffset2D                         maxDstPosition;
    VkExtent2D                         minDstExtent;
    VkExtent2D                         maxDstExtent;
} VkDisplayPlaneCapabilitiesKHR;

typedef struct VkDisplaySurfaceCreateInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkDisplaySurfaceCreateFlagsKHR     flags;
    VkDisplayModeKHR                   displayMode;
    uint32_t                           planeIndex;
    uint32_t                           planeStackIndex;
    VkSurfaceTransformFlagBitsKHR      transform;
    float                              globalAlpha;
    VkDisplayPlaneAlphaFlagBitsKHR     alphaMode;
    VkExtent2D                         imageExtent;
} VkDisplaySurfaceCreateInfoKHR;

typedef struct VkDisplayPresentInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkRect2D                           srcRect;
    VkRect2D                           dstRect;
    VkBool32                           persistent;
} VkDisplayPresentInfoKHR;

typedef struct VkSurfaceCapabilitiesKHR {
    uint32_t                           minImageCount;
    uint32_t                           maxImageCount;
    VkExtent2D                         currentExtent;
    VkExtent2D                         minImageExtent;
    VkExtent2D                         maxImageExtent;
    uint32_t                           maxImageArrayLayers;
    VkSurfaceTransformFlagsKHR         supportedTransforms;
    VkSurfaceTransformFlagBitsKHR      currentTransform;
    VkCompositeAlphaFlagsKHR           supportedCompositeAlpha;
    VkImageUsageFlags                  supportedUsageFlags;
} VkSurfaceCapabilitiesKHR;

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkAndroidSurfaceCreateInfoKHR {
    VkStructureType   sType;
    const  void *                                     pNext;
    VkAndroidSurfaceCreateFlagsKHR   flags;
    struct  ANativeWindow *     window;
} VkAndroidSurfaceCreateInfoKHR;
#endif

#if defined(VK_USE_PLATFORM_VI_NN)
typedef struct VkViSurfaceCreateInfoNN {
    VkStructureType   sType;
    const  void *                       pNext;
    VkViSurfaceCreateFlagsNN     flags;
    void *                             window;
} VkViSurfaceCreateInfoNN;
#endif

#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
typedef struct VkWaylandSurfaceCreateInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkWaylandSurfaceCreateFlagsKHR     flags;
    struct  wl_display *                display;
    struct  wl_surface *                surface;
} VkWaylandSurfaceCreateInfoKHR;
#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkWin32SurfaceCreateInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkWin32SurfaceCreateFlagsKHR     flags;
    HINSTANCE                          hinstance;
    HWND                               hwnd;
} VkWin32SurfaceCreateInfoKHR;
#endif

#if defined(VK_USE_PLATFORM_XLIB_KHR)
typedef struct VkXlibSurfaceCreateInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkXlibSurfaceCreateFlagsKHR     flags;
    Display *                          dpy;
    Window                             window;
} VkXlibSurfaceCreateInfoKHR;
#endif

#if defined(VK_USE_PLATFORM_XCB_KHR)
typedef struct VkXcbSurfaceCreateInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkXcbSurfaceCreateFlagsKHR     flags;
    xcb_connection_t *                 connection;
    xcb_window_t                       window;
} VkXcbSurfaceCreateInfoKHR;
#endif

#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
typedef struct VkDirectFBSurfaceCreateInfoEXT {
    VkStructureType   sType;
    const  void *                       pNext;
    VkDirectFBSurfaceCreateFlagsEXT     flags;
    IDirectFB *                        dfb;
    IDirectFBSurface *                 surface;
} VkDirectFBSurfaceCreateInfoEXT;
#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkImagePipeSurfaceCreateInfoFUCHSIA {
    VkStructureType   sType;
    const  void *                       pNext;
    VkImagePipeSurfaceCreateFlagsFUCHSIA     flags;
    zx_handle_t                        imagePipeHandle;
} VkImagePipeSurfaceCreateInfoFUCHSIA;
#endif

#if defined(VK_USE_PLATFORM_GGP)
typedef struct VkStreamDescriptorSurfaceCreateInfoGGP {
    VkStructureType   sType;
    const  void *                       pNext;
    VkStreamDescriptorSurfaceCreateFlagsGGP   flags;
    GgpStreamDescriptor                streamDescriptor;
} VkStreamDescriptorSurfaceCreateInfoGGP;
#endif

#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef struct VkScreenSurfaceCreateInfoQNX {
    VkStructureType   sType;
    const  void *                       pNext;
    VkScreenSurfaceCreateFlagsQNX      flags;
    struct  _screen_context *     context;
    struct  _screen_window *      window;
} VkScreenSurfaceCreateInfoQNX;
#endif

typedef struct VkSwapchainCreateInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkSwapchainCreateFlagsKHR          flags;
    VkSurfaceKHR                       surface;
    uint32_t                           minImageCount;
    VkFormat                           imageFormat;
    VkColorSpaceKHR                    imageColorSpace;
    VkExtent2D                         imageExtent;
    uint32_t                           imageArrayLayers;
    VkImageUsageFlags                  imageUsage;
    VkSharingMode                      imageSharingMode;
    uint32_t           queueFamilyIndexCount;
    const  uint32_t *                   pQueueFamilyIndices;
    VkSurfaceTransformFlagBitsKHR      preTransform;
    VkCompositeAlphaFlagBitsKHR        compositeAlpha;
    VkPresentModeKHR                   presentMode;
    VkBool32                           clipped;
    VkSwapchainKHR                           oldSwapchain;
} VkSwapchainCreateInfoKHR;

typedef struct VkDebugReportCallbackCreateInfoEXT {
    VkStructureType   sType;
    const  void *                       pNext;
    VkDebugReportFlagsEXT              flags;
    PFN_vkDebugReportCallbackEXT       pfnCallback;
    void *             pUserData;
} VkDebugReportCallbackCreateInfoEXT;

typedef struct VkLayerSettingsCreateInfoEXT {
    VkStructureType    sType;
    const  void *                       pNext;
    uint32_t                           settingCount;
    const  VkLayerSettingEXT *  pSettings;
} VkLayerSettingsCreateInfoEXT;

typedef struct VkDedicatedAllocationImageCreateInfoNV {
    VkStructureType   sType;
    const  void *                       pNext;
    VkBool32                           dedicatedAllocation;
} VkDedicatedAllocationImageCreateInfoNV;

typedef struct VkDedicatedAllocationBufferCreateInfoNV {
    VkStructureType   sType;
    const  void *                       pNext;
    VkBool32                           dedicatedAllocation;
} VkDedicatedAllocationBufferCreateInfoNV;

typedef struct VkExternalImageFormatPropertiesNV {
    VkImageFormatProperties            imageFormatProperties;
    VkExternalMemoryFeatureFlagsNV     externalMemoryFeatures;
    VkExternalMemoryHandleTypeFlagsNV   exportFromImportedHandleTypes;
    VkExternalMemoryHandleTypeFlagsNV   compatibleHandleTypes;
} VkExternalImageFormatPropertiesNV;

typedef struct VkExternalMemoryImageCreateInfoNV {
    VkStructureType   sType;
    const  void *                       pNext;
    VkExternalMemoryHandleTypeFlagsNV   handleTypes;
} VkExternalMemoryImageCreateInfoNV;

typedef struct VkExportMemoryAllocateInfoNV {
    VkStructureType   sType;
    const  void *                       pNext;
    VkExternalMemoryHandleTypeFlagsNV   handleTypes;
} VkExportMemoryAllocateInfoNV;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkImportMemoryWin32HandleInfoNV {
    VkStructureType   sType;
    const  void *                       pNext;
    VkExternalMemoryHandleTypeFlagsNV   handleType;
    HANDLE                             handle;
} VkImportMemoryWin32HandleInfoNV;
#endif

typedef struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    VkStructureType   sType;
    void *     pNext;
    VkBool32                         deviceGeneratedCommands;
} VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV;

typedef struct VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV {
    VkStructureType   sType;
    void *           pNext;
    VkBool32                         deviceGeneratedCompute;
    VkBool32                         deviceGeneratedComputePipelines;
    VkBool32                         deviceGeneratedComputeCaptureReplay;
} VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV;

typedef struct VkPrivateDataSlotCreateInfo {
    VkStructureType   sType;
    const  void *                             pNext;
    VkPrivateDataSlotCreateFlags          flags;
} VkPrivateDataSlotCreateInfo;

typedef struct VkPrivateDataSlotCreateInfo  VkPrivateDataSlotCreateInfoEXT;

typedef struct VkPhysicalDevicePrivateDataFeatures {
    VkStructureType   sType;
    void *                                   pNext;
    VkBool32                                 privateData;
} VkPhysicalDevicePrivateDataFeatures;

typedef struct VkPhysicalDevicePrivateDataFeatures  VkPhysicalDevicePrivateDataFeaturesEXT;

typedef struct VkPhysicalDeviceClusterAccelerationStructureFeaturesNV {
    VkStructureType   sType;
    void *                           pNext;
    VkBool32                                         clusterAccelerationStructure;
} VkPhysicalDeviceClusterAccelerationStructureFeaturesNV;

typedef struct VkStridedDeviceAddressNV {
    VkDeviceAddress                      startAddress;
    VkDeviceSize                         strideInBytes;
} VkStridedDeviceAddressNV;

typedef struct VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV {
    VkStructureType   sType;
    void *                            pNext;
    VkBool32                                          allowClusterAccelerationStructure;
} VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV;

typedef struct VkClusterAccelerationStructureMoveObjectsInfoNV {
    VkDeviceAddress                      srcAccelerationStructure;
} VkClusterAccelerationStructureMoveObjectsInfoNV;

typedef struct VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV {
    uint32_t                             clusterReferencesCount;
    uint32_t                             clusterReferencesStride;
    VkDeviceAddress                      clusterReferences;
} VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV;

typedef struct VkClusterAccelerationStructureGetTemplateIndicesInfoNV {
    VkDeviceAddress                      clusterTemplateAddress;
} VkClusterAccelerationStructureGetTemplateIndicesInfoNV;

typedef struct VkClusterAccelerationStructureBuildTriangleClusterInfoNV {
    uint32_t                                         clusterID;
    VkClusterAccelerationStructureClusterFlagsNV   clusterFlags;
    uint32_t                                         triangleCount :9;
    uint32_t                                         vertexCount :9;
    uint32_t                                         positionTruncateBitCount :6;
    uint32_t                                         indexType :4;
    uint32_t                                         opacityMicromapIndexType :4;
    VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV   baseGeometryIndexAndGeometryFlags;
    uint16_t                                         indexBufferStride;
    uint16_t                                         vertexBufferStride;
    uint16_t                                         geometryIndexAndFlagsBufferStride;
    uint16_t                                         opacityMicromapIndexBufferStride;
    VkDeviceAddress                                  indexBuffer;
    VkDeviceAddress                                  vertexBuffer;
    VkDeviceAddress                                  geometryIndexAndFlagsBuffer;
    VkDeviceAddress                                  opacityMicromapArray;
    VkDeviceAddress                                  opacityMicromapIndexBuffer;
} VkClusterAccelerationStructureBuildTriangleClusterInfoNV;

typedef struct VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV {
    uint32_t                                         clusterID;
    VkClusterAccelerationStructureClusterFlagsNV   clusterFlags;
    uint32_t                                         triangleCount :9;
    uint32_t                                         vertexCount :9;
    uint32_t                                         positionTruncateBitCount :6;
    uint32_t                                         indexType :4;
    uint32_t                                         opacityMicromapIndexType :4;
    VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV   baseGeometryIndexAndGeometryFlags;
    uint16_t                                         indexBufferStride;
    uint16_t                                         vertexBufferStride;
    uint16_t                                         geometryIndexAndFlagsBufferStride;
    uint16_t                                         opacityMicromapIndexBufferStride;
    VkDeviceAddress                                  indexBuffer;
    VkDeviceAddress                                  vertexBuffer;
    VkDeviceAddress                                  geometryIndexAndFlagsBuffer;
    VkDeviceAddress                                  opacityMicromapArray;
    VkDeviceAddress                                  opacityMicromapIndexBuffer;
    VkDeviceAddress                                  instantiationBoundingBoxLimit;
} VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV;

typedef struct VkClusterAccelerationStructureInstantiateClusterInfoNV {
    uint32_t                                         clusterIdOffset;
    uint32_t                                         geometryIndexOffset :24;
    uint32_t                                         reserved :8;
    VkDeviceAddress                                  clusterTemplateAddress;
    VkStridedDeviceAddressNV                         vertexBuffer;
} VkClusterAccelerationStructureInstantiateClusterInfoNV;

typedef struct VkClusterAccelerationStructureMoveObjectsInputNV {
    VkStructureType   sType;
    void *                           pNext;
    VkClusterAccelerationStructureTypeNV             type;
    VkBool32                                         noMoveOverlap;
    VkDeviceSize                                     maxMovedBytes;
} VkClusterAccelerationStructureMoveObjectsInputNV;

typedef union VkClusterAccelerationStructureOpInputNV {
    VkClusterAccelerationStructureClustersBottomLevelInputNV *      pClustersBottomLevel;
    VkClusterAccelerationStructureTriangleClusterInputNV *          pTriangleClusters;
    VkClusterAccelerationStructureMoveObjectsInputNV *              pMoveObjects;
} VkClusterAccelerationStructureOpInputNV;

typedef struct VkClusterAccelerationStructureInputInfoNV {
    VkStructureType   sType;
    void *                           pNext;
    uint32_t                                         maxAccelerationStructureCount;
    VkBuildAccelerationStructureFlagsKHR             flags;
    VkClusterAccelerationStructureOpTypeNV          opType;
    VkClusterAccelerationStructureOpModeNV          opMode;
    VkClusterAccelerationStructureOpInputNV         opInput;
} VkClusterAccelerationStructureInputInfoNV;

typedef struct VkGraphicsShaderGroupCreateInfoNV {
    VkStructureType   sType;
    const  void *                                                 pNext;
    uint32_t                                                     stageCount;
    const  VkPipelineShaderStageCreateInfo *     pStages;
    const  VkPipelineVertexInputStateCreateInfo *                 pVertexInputState;
    const  VkPipelineTessellationStateCreateInfo *                pTessellationState;
} VkGraphicsShaderGroupCreateInfoNV;

typedef struct VkGraphicsPipelineShaderGroupsCreateInfoNV {
    VkStructureType   sType;
    const  void *                                 pNext;
    uint32_t                                     groupCount;
    const  VkGraphicsShaderGroupCreateInfoNV *   pGroups;
    uint32_t                                     pipelineCount;
    const  VkPipeline *                       pPipelines;
} VkGraphicsPipelineShaderGroupsCreateInfoNV;

typedef struct VkBindIndexBufferIndirectCommandNV {
    VkDeviceAddress    bufferAddress;
    uint32_t           size;
    VkIndexType        indexType;
} VkBindIndexBufferIndirectCommandNV;

typedef struct VkBindVertexBufferIndirectCommandNV {
    VkDeviceAddress    bufferAddress;
    uint32_t           size;
    uint32_t           stride;
} VkBindVertexBufferIndirectCommandNV;

typedef struct VkIndirectCommandsStreamNV {
    VkBuffer        buffer;
    VkDeviceSize    offset;
} VkIndirectCommandsStreamNV;

typedef struct VkIndirectCommandsLayoutTokenNV {
    VkStructureType   sType;
    const  void *                     pNext;
    VkIndirectCommandsTokenTypeNV    tokenType;
    uint32_t                         stream;
    uint32_t                         offset;
    uint32_t                                  vertexBindingUnit;
    VkBool32                                  vertexDynamicStride;
    VkPipelineLayout          pushconstantPipelineLayout;
    VkShaderStageFlags        pushconstantShaderStageFlags;
    uint32_t                                  pushconstantOffset;
    uint32_t                                  pushconstantSize;
    VkIndirectStateFlagsNV    indirectStateFlags;
    uint32_t                  indexTypeCount;
    const  VkIndexType *  pIndexTypes;
    const  uint32_t *     pIndexTypeValues;
} VkIndirectCommandsLayoutTokenNV;

typedef struct VkIndirectCommandsLayoutCreateInfoNV {
    VkStructureType   sType;
    const  void *                              pNext;
    VkIndirectCommandsLayoutUsageFlagsNV      flags;
    VkPipelineBindPoint                       pipelineBindPoint;
    uint32_t                                  tokenCount;
    const  VkIndirectCommandsLayoutTokenNV *   pTokens;
    uint32_t                                  streamCount;
    const  uint32_t *        pStreamStrides;
} VkIndirectCommandsLayoutCreateInfoNV;

typedef struct VkGeneratedCommandsInfoNV {
    VkStructureType   sType;
    const  void *                         pNext;
    VkPipelineBindPoint                  pipelineBindPoint;
    VkPipeline           pipeline;
    VkIndirectCommandsLayoutNV           indirectCommandsLayout;
    uint32_t                             streamCount;
    const  VkIndirectCommandsStreamNV *   pStreams;
    uint32_t                             sequencesCount;
    VkBuffer                             preprocessBuffer;
    VkDeviceSize                         preprocessOffset;
    VkDeviceSize                         preprocessSize;
    VkBuffer             sequencesCountBuffer;
    VkDeviceSize                         sequencesCountOffset;
    VkBuffer             sequencesIndexBuffer;
    VkDeviceSize                         sequencesIndexOffset;
} VkGeneratedCommandsInfoNV;

typedef struct VkBindPipelineIndirectCommandNV {
    VkDeviceAddress                 pipelineAddress;
} VkBindPipelineIndirectCommandNV;

typedef struct VkPhysicalDeviceFeatures2 {
    VkStructureType   sType;
    void *                             pNext;
    VkPhysicalDeviceFeatures           features;
} VkPhysicalDeviceFeatures2;

typedef struct VkPhysicalDeviceFeatures2  VkPhysicalDeviceFeatures2KHR;

typedef struct VkFormatProperties2 {
    VkStructureType   sType;
    void *                             pNext;
    VkFormatProperties                 formatProperties;
} VkFormatProperties2;

typedef struct VkFormatProperties2  VkFormatProperties2KHR;

typedef struct VkImageFormatProperties2 {
    VkStructureType   sType;
    void *  pNext;
    VkImageFormatProperties            imageFormatProperties;
} VkImageFormatProperties2;

typedef struct VkImageFormatProperties2  VkImageFormatProperties2KHR;

typedef struct VkPhysicalDeviceImageFormatInfo2 {
    VkStructureType   sType;
    const  void *  pNext;
    VkFormat                           format;
    VkImageType                        type;
    VkImageTiling                      tiling;
    VkImageUsageFlags                  usage;
    VkImageCreateFlags   flags;
} VkPhysicalDeviceImageFormatInfo2;

typedef struct VkPhysicalDeviceImageFormatInfo2  VkPhysicalDeviceImageFormatInfo2KHR;

typedef struct VkQueueFamilyProperties2 {
    VkStructureType   sType;
    void *                             pNext;
    VkQueueFamilyProperties         queueFamilyProperties;
} VkQueueFamilyProperties2;

typedef struct VkQueueFamilyProperties2  VkQueueFamilyProperties2KHR;

typedef struct VkSparseImageFormatProperties2 {
    VkStructureType   sType;
    void *                             pNext;
    VkSparseImageFormatProperties   properties;
} VkSparseImageFormatProperties2;

typedef struct VkSparseImageFormatProperties2  VkSparseImageFormatProperties2KHR;

typedef struct VkPhysicalDeviceSparseImageFormatInfo2 {
    VkStructureType   sType;
    const  void *                       pNext;
    VkFormat                           format;
    VkImageType                        type;
    VkSampleCountFlagBits              samples;
    VkImageUsageFlags                  usage;
    VkImageTiling                      tiling;
} VkPhysicalDeviceSparseImageFormatInfo2;

typedef struct VkPhysicalDeviceSparseImageFormatInfo2  VkPhysicalDeviceSparseImageFormatInfo2KHR;

typedef struct VkPresentRegionKHR {
    uint32_t           rectangleCount;
    const  VkRectLayerKHR *    pRectangles;
} VkPresentRegionKHR;

typedef struct VkPhysicalDeviceVariablePointersFeatures {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           variablePointersStorageBuffer;
    VkBool32                           variablePointers;
} VkPhysicalDeviceVariablePointersFeatures;

typedef struct VkPhysicalDeviceVariablePointersFeatures  VkPhysicalDeviceVariablePointersFeaturesKHR;

typedef struct VkPhysicalDeviceVariablePointersFeatures  VkPhysicalDeviceVariablePointerFeaturesKHR;

typedef struct VkPhysicalDeviceVariablePointersFeatures  VkPhysicalDeviceVariablePointerFeatures;

typedef struct VkExternalMemoryProperties {
    VkExternalMemoryFeatureFlags    externalMemoryFeatures;
    VkExternalMemoryHandleTypeFlags   exportFromImportedHandleTypes;
    VkExternalMemoryHandleTypeFlags   compatibleHandleTypes;
} VkExternalMemoryProperties;

typedef struct VkExternalMemoryProperties  VkExternalMemoryPropertiesKHR;

typedef struct VkExternalImageFormatProperties {
    VkStructureType   sType;
    void *                             pNext;
    VkExternalMemoryProperties   externalMemoryProperties;
} VkExternalImageFormatProperties;

typedef struct VkExternalImageFormatProperties  VkExternalImageFormatPropertiesKHR;

typedef struct VkPhysicalDeviceExternalBufferInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkBufferCreateFlags   flags;
    VkBufferUsageFlags   usage;
    VkExternalMemoryHandleTypeFlagBits   handleType;
} VkPhysicalDeviceExternalBufferInfo;

typedef struct VkPhysicalDeviceExternalBufferInfo  VkPhysicalDeviceExternalBufferInfoKHR;

typedef struct VkExternalBufferProperties {
    VkStructureType   sType;
    void *                             pNext;
    VkExternalMemoryProperties      externalMemoryProperties;
} VkExternalBufferProperties;

typedef struct VkExternalBufferProperties  VkExternalBufferPropertiesKHR;

typedef struct VkPhysicalDeviceIDProperties {
    VkStructureType   sType;
    void *                           pNext;
    uint8_t                       deviceUUID [ VK_UUID_SIZE ];
    uint8_t                       driverUUID [ VK_UUID_SIZE ];
    uint8_t                       deviceLUID [ VK_LUID_SIZE ];
    uint32_t                      deviceNodeMask;
    VkBool32                         deviceLUIDValid;
} VkPhysicalDeviceIDProperties;

typedef struct VkPhysicalDeviceIDProperties  VkPhysicalDeviceIDPropertiesKHR;

typedef struct VkExternalMemoryImageCreateInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkExternalMemoryHandleTypeFlags   handleTypes;
} VkExternalMemoryImageCreateInfo;

typedef struct VkExternalMemoryImageCreateInfo  VkExternalMemoryImageCreateInfoKHR;

typedef struct VkExternalMemoryBufferCreateInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkExternalMemoryHandleTypeFlags   handleTypes;
} VkExternalMemoryBufferCreateInfo;

typedef struct VkExternalMemoryBufferCreateInfo  VkExternalMemoryBufferCreateInfoKHR;

typedef struct VkExportMemoryAllocateInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkExternalMemoryHandleTypeFlags   handleTypes;
} VkExportMemoryAllocateInfo;

typedef struct VkExportMemoryAllocateInfo  VkExportMemoryAllocateInfoKHR;

typedef struct VkExternalSemaphoreProperties {
    VkStructureType   sType;
    void *                             pNext;
    VkExternalSemaphoreHandleTypeFlags   exportFromImportedHandleTypes;
    VkExternalSemaphoreHandleTypeFlags   compatibleHandleTypes;
    VkExternalSemaphoreFeatureFlags   externalSemaphoreFeatures;
} VkExternalSemaphoreProperties;

typedef struct VkExternalSemaphoreProperties  VkExternalSemaphorePropertiesKHR;

typedef struct VkExportSemaphoreCreateInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkExternalSemaphoreHandleTypeFlags   handleTypes;
} VkExportSemaphoreCreateInfo;

typedef struct VkExportSemaphoreCreateInfo  VkExportSemaphoreCreateInfoKHR;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkImportSemaphoreWin32HandleInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkSemaphore      semaphore;
    VkSemaphoreImportFlags   flags;
    VkExternalSemaphoreHandleTypeFlagBits   handleType;
    HANDLE             handle;
    LPCWSTR            name;
} VkImportSemaphoreWin32HandleInfoKHR;
#endif

typedef struct VkImportSemaphoreFdInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkSemaphore      semaphore;
    VkSemaphoreImportFlags   flags;
    VkExternalSemaphoreHandleTypeFlagBits   handleType;
    int                                fd;
} VkImportSemaphoreFdInfoKHR;

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkImportSemaphoreZirconHandleInfoFUCHSIA {
    VkStructureType   sType;
    const  void *                       pNext;
    VkSemaphore      semaphore;
    VkSemaphoreImportFlags   flags;
    VkExternalSemaphoreHandleTypeFlagBits   handleType;
    zx_handle_t                                zirconHandle;
} VkImportSemaphoreZirconHandleInfoFUCHSIA;
#endif

typedef struct VkExternalFenceProperties {
    VkStructureType   sType;
    void *                             pNext;
    VkExternalFenceHandleTypeFlags   exportFromImportedHandleTypes;
    VkExternalFenceHandleTypeFlags   compatibleHandleTypes;
    VkExternalFenceFeatureFlags   externalFenceFeatures;
} VkExternalFenceProperties;

typedef struct VkExternalFenceProperties  VkExternalFencePropertiesKHR;

typedef struct VkExportFenceCreateInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkExternalFenceHandleTypeFlags   handleTypes;
} VkExportFenceCreateInfo;

typedef struct VkExportFenceCreateInfo  VkExportFenceCreateInfoKHR;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkImportFenceWin32HandleInfoKHR {
    VkStructureType   sType;
    const  void *                                         pNext;
    VkFence                            fence;
    VkFenceImportFlags                flags;
    VkExternalFenceHandleTypeFlagBits    handleType;
    HANDLE                               handle;
    LPCWSTR                              name;
} VkImportFenceWin32HandleInfoKHR;
#endif

typedef struct VkImportFenceFdInfoKHR {
    VkStructureType   sType;
    const  void *                             pNext;
    VkFence                fence;
    VkFenceImportFlags    flags;
    VkExternalFenceHandleTypeFlagBits     handleType;
    int                                      fd;
} VkImportFenceFdInfoKHR;

typedef struct VkPhysicalDeviceMultiviewFeatures {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           multiview;
    VkBool32                           multiviewGeometryShader;
    VkBool32                           multiviewTessellationShader;
} VkPhysicalDeviceMultiviewFeatures;

typedef struct VkPhysicalDeviceMultiviewFeatures  VkPhysicalDeviceMultiviewFeaturesKHR;

typedef struct VkSurfaceCapabilities2EXT {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t                           minImageCount;
    uint32_t                           maxImageCount;
    VkExtent2D                         currentExtent;
    VkExtent2D                         minImageExtent;
    VkExtent2D                         maxImageExtent;
    uint32_t                           maxImageArrayLayers;
    VkSurfaceTransformFlagsKHR         supportedTransforms;
    VkSurfaceTransformFlagBitsKHR      currentTransform;
    VkCompositeAlphaFlagsKHR           supportedCompositeAlpha;
    VkImageUsageFlags                  supportedUsageFlags;
    VkSurfaceCounterFlagsEXT   supportedSurfaceCounters;
} VkSurfaceCapabilities2EXT;

typedef struct VkSwapchainCounterCreateInfoEXT {
    VkStructureType   sType;
    const  void *                       pNext;
    VkSurfaceCounterFlagsEXT           surfaceCounters;
} VkSwapchainCounterCreateInfoEXT;

typedef struct VkPhysicalDeviceGroupProperties {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t                           physicalDeviceCount;
    VkPhysicalDevice         physicalDevices [ VK_MAX_DEVICE_GROUP_SIZE ];
    VkBool32                           subsetAllocation;
} VkPhysicalDeviceGroupProperties;

typedef struct VkPhysicalDeviceGroupProperties  VkPhysicalDeviceGroupPropertiesKHR;

typedef struct VkMemoryAllocateFlagsInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkMemoryAllocateFlags   flags;
    uint32_t                           deviceMask;
} VkMemoryAllocateFlagsInfo;

typedef struct VkMemoryAllocateFlagsInfo  VkMemoryAllocateFlagsInfoKHR;

typedef struct VkBindBufferMemoryInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkBuffer                           buffer;
    VkDeviceMemory                     memory;
    VkDeviceSize                       memoryOffset;
} VkBindBufferMemoryInfo;

typedef struct VkBindBufferMemoryInfo  VkBindBufferMemoryInfoKHR;

typedef struct VkBindImageMemoryInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkImage                            image;
    VkDeviceMemory                     memory;
    VkDeviceSize                       memoryOffset;
} VkBindImageMemoryInfo;

typedef struct VkBindImageMemoryInfo  VkBindImageMemoryInfoKHR;

typedef struct VkDeviceGroupPresentCapabilitiesKHR {
    VkStructureType   sType;
    void *             pNext;
    uint32_t                           presentMask [ VK_MAX_DEVICE_GROUP_SIZE ];
    VkDeviceGroupPresentModeFlagsKHR   modes;
} VkDeviceGroupPresentCapabilitiesKHR;

typedef struct VkDeviceGroupSwapchainCreateInfoKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    VkDeviceGroupPresentModeFlagsKHR                           modes;
} VkDeviceGroupSwapchainCreateInfoKHR;

typedef struct VkDescriptorUpdateTemplateCreateInfo {
    VkStructureType   sType;
    const  void *                                pNext;
    VkDescriptorUpdateTemplateCreateFlags      flags;
    uint32_t                   descriptorUpdateEntryCount;
    const  VkDescriptorUpdateTemplateEntry *  pDescriptorUpdateEntries;
    VkDescriptorUpdateTemplateType   templateType;
    VkDescriptorSetLayout   descriptorSetLayout;
    VkPipelineBindPoint   pipelineBindPoint;
    VkPipelineLayout   pipelineLayout;
    uint32_t   set;
} VkDescriptorUpdateTemplateCreateInfo;

typedef struct VkDescriptorUpdateTemplateCreateInfo  VkDescriptorUpdateTemplateCreateInfoKHR;

typedef struct VkPhysicalDevicePresentIdFeaturesKHR {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           presentId;
} VkPhysicalDevicePresentIdFeaturesKHR;

typedef struct VkPhysicalDevicePresentId2FeaturesKHR {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           presentId2;
} VkPhysicalDevicePresentId2FeaturesKHR;

typedef struct VkPhysicalDevicePresentWaitFeaturesKHR {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           presentWait;
} VkPhysicalDevicePresentWaitFeaturesKHR;

typedef struct VkPhysicalDevicePresentWait2FeaturesKHR {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           presentWait2;
} VkPhysicalDevicePresentWait2FeaturesKHR;

typedef struct VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    VkStructureType   sType;
    void *           pNext;
    VkBool32         localDimmingSupport;
} VkDisplayNativeHdrSurfaceCapabilitiesAMD;

typedef struct VkSwapchainDisplayNativeHdrCreateInfoAMD {
    VkStructureType   sType;
    const  void *     pNext;
    VkBool32         localDimmingEnable;
} VkSwapchainDisplayNativeHdrCreateInfoAMD;

typedef struct VkPresentTimesInfoGOOGLE {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t                           swapchainCount;
    const  VkPresentTimeGOOGLE *    pTimes;
} VkPresentTimesInfoGOOGLE;

#if defined(VK_USE_PLATFORM_IOS_MVK)
typedef struct VkIOSSurfaceCreateInfoMVK {
    VkStructureType   sType;
    const  void *                                     pNext;
    VkIOSSurfaceCreateFlagsMVK       flags;
    const  void *                                     pView;
} VkIOSSurfaceCreateInfoMVK;
#endif

#if defined(VK_USE_PLATFORM_MACOS_MVK)
typedef struct VkMacOSSurfaceCreateInfoMVK {
    VkStructureType   sType;
    const  void *                                     pNext;
    VkMacOSSurfaceCreateFlagsMVK     flags;
    const  void *                                     pView;
} VkMacOSSurfaceCreateInfoMVK;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkMetalSurfaceCreateInfoEXT {
    VkStructureType   sType;
    const  void *                                     pNext;
    VkMetalSurfaceCreateFlagsEXT     flags;
    const  CAMetalLayer *       pLayer;
} VkMetalSurfaceCreateInfoEXT;
#endif

typedef struct VkPipelineViewportWScalingStateCreateInfoNV {
    VkStructureType   sType;
    const  void *                       pNext;
    VkBool32                 viewportWScalingEnable;
    uint32_t                 viewportCount;
    const  VkViewportWScalingNV *       pViewportWScalings;
} VkPipelineViewportWScalingStateCreateInfoNV;

typedef struct VkPipelineViewportSwizzleStateCreateInfoNV {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineViewportSwizzleStateCreateFlagsNV      flags;
    uint32_t                 viewportCount;
    const  VkViewportSwizzleNV *       pViewportSwizzles;
} VkPipelineViewportSwizzleStateCreateInfoNV;

typedef struct VkPipelineDiscardRectangleStateCreateInfoEXT {
    VkStructureType   sType;
    const  void *                                                        pNext;
    VkPipelineDiscardRectangleStateCreateFlagsEXT       flags;
    VkDiscardRectangleModeEXT                                           discardRectangleMode;
    uint32_t                                            discardRectangleCount;
    const  VkRect2D *  pDiscardRectangles;
} VkPipelineDiscardRectangleStateCreateInfoEXT;

typedef struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           perViewPositionAllComponents;
} VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;

typedef struct VkInputAttachmentAspectReference {
    uint32_t                          subpass;
    uint32_t                          inputAttachmentIndex;
    VkImageAspectFlags                aspectMask;
} VkInputAttachmentAspectReference;

typedef struct VkInputAttachmentAspectReference  VkInputAttachmentAspectReferenceKHR;

typedef struct VkRenderPassInputAttachmentAspectCreateInfo {
    VkStructureType   sType;
    const  void *                      pNext;
    uint32_t                          aspectReferenceCount;
    const  VkInputAttachmentAspectReference *  pAspectReferences;
} VkRenderPassInputAttachmentAspectCreateInfo;

typedef struct VkRenderPassInputAttachmentAspectCreateInfo  VkRenderPassInputAttachmentAspectCreateInfoKHR;

typedef struct VkSurfaceCapabilities2KHR {
    VkStructureType   sType;
    void *    pNext;
    VkSurfaceCapabilitiesKHR   surfaceCapabilities;
} VkSurfaceCapabilities2KHR;

typedef struct VkDisplayProperties2KHR {
    VkStructureType   sType;
    void *  pNext;
    VkDisplayPropertiesKHR   displayProperties;
} VkDisplayProperties2KHR;

typedef struct VkDisplayModeStereoPropertiesNV {
    VkStructureType   sType;
    const  void *  pNext;
    VkBool32                      hdmi3DSupported;
} VkDisplayModeStereoPropertiesNV;

typedef struct VkDisplayPlaneCapabilities2KHR {
    VkStructureType   sType;
    void *  pNext;
    VkDisplayPlaneCapabilitiesKHR   capabilities;
} VkDisplayPlaneCapabilities2KHR;

typedef struct VkSharedPresentSurfaceCapabilitiesKHR {
    VkStructureType   sType;
    void *                             pNext;
    VkImageUsageFlags   sharedPresentSupportedUsageFlags;
} VkSharedPresentSurfaceCapabilitiesKHR;

typedef struct VkPhysicalDevice16BitStorageFeatures {
    VkStructureType   sType;
    void *       pNext;
    VkBool32                           storageBuffer16BitAccess;
    VkBool32                           uniformAndStorageBuffer16BitAccess;
    VkBool32                           storagePushConstant16;
    VkBool32                           storageInputOutput16;
} VkPhysicalDevice16BitStorageFeatures;

typedef struct VkPhysicalDevice16BitStorageFeatures  VkPhysicalDevice16BitStorageFeaturesKHR;

typedef struct VkPhysicalDeviceSubgroupProperties {
    VkStructureType   sType;
    void *                    pNext;
    uint32_t                       subgroupSize;
    VkShaderStageFlags              supportedStages;
    VkSubgroupFeatureFlags          supportedOperations;
    VkBool32                   quadOperationsInAllStages;
} VkPhysicalDeviceSubgroupProperties;

typedef struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    VkStructureType   sType;
    void *                           pNext;
    VkBool32   shaderSubgroupExtendedTypes;
} VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;

typedef struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures  VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR;

typedef struct VkDeviceBufferMemoryRequirements {
    VkStructureType   sType;
    const  void *                                                            pNext;
    const  VkBufferCreateInfo *                                                              pCreateInfo;
} VkDeviceBufferMemoryRequirements;

typedef struct VkDeviceBufferMemoryRequirements  VkDeviceBufferMemoryRequirementsKHR;

typedef struct VkDeviceImageMemoryRequirements {
    VkStructureType   sType;
    const  void *                                                           pNext;
    const  VkImageCreateInfo *                                                              pCreateInfo;
    VkImageAspectFlagBits                                                  planeAspect;
} VkDeviceImageMemoryRequirements;

typedef struct VkDeviceImageMemoryRequirements  VkDeviceImageMemoryRequirementsKHR;

typedef struct VkMemoryRequirements2 {
    VkStructureType   sType;
    void *  pNext;
    VkMemoryRequirements                                                   memoryRequirements;
} VkMemoryRequirements2;

typedef struct VkMemoryRequirements2  VkMemoryRequirements2KHR;

typedef struct VkSparseImageMemoryRequirements2 {
    VkStructureType   sType;
    void *                                        pNext;
    VkSparseImageMemoryRequirements                                        memoryRequirements;
} VkSparseImageMemoryRequirements2;

typedef struct VkSparseImageMemoryRequirements2  VkSparseImageMemoryRequirements2KHR;

typedef struct VkMemoryDedicatedRequirements {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           prefersDedicatedAllocation;
    VkBool32                           requiresDedicatedAllocation;
} VkMemoryDedicatedRequirements;

typedef struct VkMemoryDedicatedRequirements  VkMemoryDedicatedRequirementsKHR;

typedef struct VkImageViewUsageCreateInfo {
    VkStructureType   sType;
    const  void *  pNext;
    VkImageUsageFlags   usage;
} VkImageViewUsageCreateInfo;

typedef struct VkImageViewUsageCreateInfo  VkImageViewUsageCreateInfoKHR;

typedef struct VkSamplerYcbcrConversionCreateInfo {
    VkStructureType   sType;
    const  void *                       pNext;
    VkFormat                           format;
    VkSamplerYcbcrModelConversion   ycbcrModel;
    VkSamplerYcbcrRange             ycbcrRange;
    VkComponentMapping                 components;
    VkChromaLocation                xChromaOffset;
    VkChromaLocation                yChromaOffset;
    VkFilter                           chromaFilter;
    VkBool32                           forceExplicitReconstruction;
} VkSamplerYcbcrConversionCreateInfo;

typedef struct VkSamplerYcbcrConversionCreateInfo  VkSamplerYcbcrConversionCreateInfoKHR;

typedef struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    VkStructureType   sType;
    void *       pNext;
    VkBool32                           samplerYcbcrConversion;
} VkPhysicalDeviceSamplerYcbcrConversionFeatures;

typedef struct VkPhysicalDeviceSamplerYcbcrConversionFeatures  VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR;

typedef struct VkTextureLODGatherFormatPropertiesAMD {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           supportsTextureGatherLODBiasAMD;
} VkTextureLODGatherFormatPropertiesAMD;

typedef struct VkConditionalRenderingBeginInfoEXT {
    VkStructureType   sType;
    const  void *                       pNext;
    VkBuffer                           buffer;
    VkDeviceSize                       offset;
    VkConditionalRenderingFlagsEXT      flags;
} VkConditionalRenderingBeginInfoEXT;

typedef struct VkProtectedSubmitInfo {
    VkStructureType   sType;
    const  void *                      pNext;
    VkBool32                          protectedSubmit;
} VkProtectedSubmitInfo;

typedef struct VkPhysicalDeviceProtectedMemoryFeatures {
    VkStructureType   sType;
    void *                                pNext;
    VkBool32                              protectedMemory;
} VkPhysicalDeviceProtectedMemoryFeatures;

typedef struct VkPhysicalDeviceProtectedMemoryProperties {
    VkStructureType   sType;
    void *                                pNext;
    VkBool32                              protectedNoFault;
} VkPhysicalDeviceProtectedMemoryProperties;

typedef struct VkDeviceQueueInfo2 {
    VkStructureType   sType;
    const  void *                          pNext;
    VkDeviceQueueCreateFlags              flags;
    uint32_t                              queueFamilyIndex;
    uint32_t                              queueIndex;
} VkDeviceQueueInfo2;

typedef struct VkPipelineCoverageToColorStateCreateInfoNV {
    VkStructureType   sType;
    const  void *                                                                       pNext;
    VkPipelineCoverageToColorStateCreateFlagsNV                      flags;
    VkBool32                           coverageToColorEnable;
    uint32_t           coverageToColorLocation;
} VkPipelineCoverageToColorStateCreateInfoNV;

typedef struct VkPhysicalDeviceSamplerFilterMinmaxProperties {
    VkStructureType   sType;
    void *                   pNext;
    VkBool32                 filterMinmaxSingleComponentFormats;
    VkBool32                 filterMinmaxImageComponentMapping;
} VkPhysicalDeviceSamplerFilterMinmaxProperties;

typedef struct VkPhysicalDeviceSamplerFilterMinmaxProperties  VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT;

typedef struct VkPipelineSampleLocationsStateCreateInfoEXT {
    VkStructureType   sType;
    const  void *                       pNext;
    VkBool32                           sampleLocationsEnable;
    VkSampleLocationsInfoEXT           sampleLocationsInfo;
} VkPipelineSampleLocationsStateCreateInfoEXT;

typedef struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
    VkStructureType   sType;
    void *                             pNext;
    VkSampleCountFlags                 sampleLocationSampleCounts;
    VkExtent2D                         maxSampleLocationGridSize;
    float                              sampleLocationCoordinateRange [2];
    uint32_t                           sampleLocationSubPixelBits;
    VkBool32                           variableSampleLocations;
} VkPhysicalDeviceSampleLocationsPropertiesEXT;

typedef struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           advancedBlendCoherentOperations;
} VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;

typedef struct VkPhysicalDeviceMultiDrawFeaturesEXT {
    VkStructureType   sType;
    void *                      pNext;
    VkBool32                                          multiDraw;
} VkPhysicalDeviceMultiDrawFeaturesEXT;

typedef struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t                           advancedBlendMaxColorAttachments;
    VkBool32                           advancedBlendIndependentBlend;
    VkBool32                           advancedBlendNonPremultipliedSrcColor;
    VkBool32                           advancedBlendNonPremultipliedDstColor;
    VkBool32                           advancedBlendCorrelatedOverlap;
    VkBool32                           advancedBlendAllOperations;
} VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;

typedef struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    VkStructureType   sType;
    const  void *             pNext;
    VkBool32                 srcPremultiplied;
    VkBool32                 dstPremultiplied;
    VkBlendOverlapEXT        blendOverlap;
} VkPipelineColorBlendAdvancedStateCreateInfoEXT;

typedef struct VkPhysicalDeviceInlineUniformBlockFeatures {
    VkStructureType   sType;
    void *   pNext;
    VkBool32                 inlineUniformBlock;
    VkBool32                 descriptorBindingInlineUniformBlockUpdateAfterBind;
} VkPhysicalDeviceInlineUniformBlockFeatures;

typedef struct VkPhysicalDeviceInlineUniformBlockFeatures  VkPhysicalDeviceInlineUniformBlockFeaturesEXT;

typedef struct VkPipelineCoverageModulationStateCreateInfoNV {
    VkStructureType   sType;
    const  void *                                                                       pNext;
    VkPipelineCoverageModulationStateCreateFlagsNV                     flags;
    VkCoverageModulationModeNV                                                         coverageModulationMode;
    VkBool32                                                                           coverageModulationTableEnable;
    uint32_t                                                           coverageModulationTableCount;
    const  float *  pCoverageModulationTable;
} VkPipelineCoverageModulationStateCreateInfoNV;

typedef struct VkValidationCacheCreateInfoEXT {
    VkStructureType   sType;
    const  void *             pNext;
    VkValidationCacheCreateFlagsEXT      flags;
    size_t                   initialDataSize;
    const  void *             pInitialData;
} VkValidationCacheCreateInfoEXT;

typedef struct VkPhysicalDeviceMaintenance3Properties {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t                           maxPerSetDescriptors;
    VkDeviceSize                       maxMemoryAllocationSize;
} VkPhysicalDeviceMaintenance3Properties;

typedef struct VkPhysicalDeviceMaintenance3Properties  VkPhysicalDeviceMaintenance3PropertiesKHR;

typedef struct VkPhysicalDeviceMaintenance4Features {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                                           maintenance4;
} VkPhysicalDeviceMaintenance4Features;

typedef struct VkPhysicalDeviceMaintenance4Features  VkPhysicalDeviceMaintenance4FeaturesKHR;

typedef struct VkPhysicalDeviceMaintenance4Properties {
    VkStructureType   sType;
    void *                             pNext;
    VkDeviceSize                       maxBufferSize;
} VkPhysicalDeviceMaintenance4Properties;

typedef struct VkPhysicalDeviceMaintenance4Properties  VkPhysicalDeviceMaintenance4PropertiesKHR;

typedef struct VkPhysicalDeviceMaintenance5Features {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                                           maintenance5;
} VkPhysicalDeviceMaintenance5Features;

typedef struct VkPhysicalDeviceMaintenance5Features  VkPhysicalDeviceMaintenance5FeaturesKHR;

typedef struct VkPhysicalDeviceMaintenance5Properties {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           earlyFragmentMultisampleCoverageAfterSampleCounting;
    VkBool32                           earlyFragmentSampleMaskTestBeforeSampleCounting;
    VkBool32                           depthStencilSwizzleOneSupport;
    VkBool32                         polygonModePointSize;
    VkBool32                           nonStrictSinglePixelWideLinesUseParallelogram;
    VkBool32                           nonStrictWideLinesUseParallelogram;
} VkPhysicalDeviceMaintenance5Properties;

typedef struct VkPhysicalDeviceMaintenance5Properties  VkPhysicalDeviceMaintenance5PropertiesKHR;

typedef struct VkPhysicalDeviceMaintenance6Features {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                                           maintenance6;
} VkPhysicalDeviceMaintenance6Features;

typedef struct VkPhysicalDeviceMaintenance6Features  VkPhysicalDeviceMaintenance6FeaturesKHR;

typedef struct VkPhysicalDeviceMaintenance6Properties {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           blockTexelViewCompatibleMultipleLayers;
    uint32_t                           maxCombinedImageSamplerDescriptorCount;
    VkBool32                           fragmentShadingRateClampCombinerInputs;
} VkPhysicalDeviceMaintenance6Properties;

typedef struct VkPhysicalDeviceMaintenance6Properties  VkPhysicalDeviceMaintenance6PropertiesKHR;

typedef struct VkPhysicalDeviceMaintenance7FeaturesKHR {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                                           maintenance7;
} VkPhysicalDeviceMaintenance7FeaturesKHR;

typedef struct VkPhysicalDeviceMaintenance7PropertiesKHR {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           robustFragmentShadingRateAttachmentAccess;
    VkBool32                           separateDepthStencilAttachmentAccess;
    uint32_t                           maxDescriptorSetTotalUniformBuffersDynamic;
    uint32_t                           maxDescriptorSetTotalStorageBuffersDynamic;
    uint32_t                           maxDescriptorSetTotalBuffersDynamic;
    uint32_t                           maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic;
    uint32_t                           maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic;
    uint32_t                           maxDescriptorSetUpdateAfterBindTotalBuffersDynamic;
} VkPhysicalDeviceMaintenance7PropertiesKHR;

typedef struct VkPhysicalDeviceLayeredApiPropertiesListKHR {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t        layeredApiCount;
    VkPhysicalDeviceLayeredApiPropertiesKHR *  pLayeredApis;
} VkPhysicalDeviceLayeredApiPropertiesListKHR;

typedef struct VkPhysicalDeviceMaintenance8FeaturesKHR {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                                           maintenance8;
} VkPhysicalDeviceMaintenance8FeaturesKHR;

typedef struct VkPhysicalDeviceMaintenance9FeaturesKHR {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                                           maintenance9;
} VkPhysicalDeviceMaintenance9FeaturesKHR;

typedef struct VkPhysicalDeviceMaintenance9PropertiesKHR {
    VkStructureType   sType;
    void *                               pNext;
    VkBool32                             image2DViewOf3DSparse;
    VkDefaultVertexAttributeValueKHR   defaultVertexAttributeValue;
} VkPhysicalDeviceMaintenance9PropertiesKHR;

typedef struct VkDescriptorSetLayoutSupport {
    VkStructureType   sType;
    void *             pNext;
    VkBool32           supported;
} VkDescriptorSetLayoutSupport;

typedef struct VkDescriptorSetLayoutSupport  VkDescriptorSetLayoutSupportKHR;

typedef struct VkPhysicalDeviceShaderDrawParametersFeatures {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           shaderDrawParameters;
} VkPhysicalDeviceShaderDrawParametersFeatures;

typedef struct VkPhysicalDeviceShaderDrawParametersFeatures  VkPhysicalDeviceShaderDrawParameterFeatures;

typedef struct VkPhysicalDeviceShaderFloat16Int8Features {
    VkStructureType   sType;
    void *       pNext;
    VkBool32                           shaderFloat16;
    VkBool32                           shaderInt8;
} VkPhysicalDeviceShaderFloat16Int8Features;

typedef struct VkPhysicalDeviceShaderFloat16Int8Features  VkPhysicalDeviceShaderFloat16Int8FeaturesKHR;

typedef struct VkPhysicalDeviceShaderFloat16Int8Features  VkPhysicalDeviceFloat16Int8FeaturesKHR;

typedef struct VkPhysicalDeviceFloatControlsProperties {
    VkStructureType   sType;
    void *                             pNext;
    VkShaderFloatControlsIndependence   denormBehaviorIndependence;
    VkShaderFloatControlsIndependence   roundingModeIndependence;
    VkBool32                           shaderSignedZeroInfNanPreserveFloat16;
    VkBool32                           shaderSignedZeroInfNanPreserveFloat32;
    VkBool32                           shaderSignedZeroInfNanPreserveFloat64;
    VkBool32                           shaderDenormPreserveFloat16;
    VkBool32                           shaderDenormPreserveFloat32;
    VkBool32                           shaderDenormPreserveFloat64;
    VkBool32                           shaderDenormFlushToZeroFloat16;
    VkBool32                           shaderDenormFlushToZeroFloat32;
    VkBool32                           shaderDenormFlushToZeroFloat64;
    VkBool32                           shaderRoundingModeRTEFloat16;
    VkBool32                           shaderRoundingModeRTEFloat32;
    VkBool32                           shaderRoundingModeRTEFloat64;
    VkBool32                           shaderRoundingModeRTZFloat16;
    VkBool32                           shaderRoundingModeRTZFloat32;
    VkBool32                           shaderRoundingModeRTZFloat64;
} VkPhysicalDeviceFloatControlsProperties;

typedef struct VkPhysicalDeviceFloatControlsProperties  VkPhysicalDeviceFloatControlsPropertiesKHR;

typedef struct VkPhysicalDeviceHostQueryResetFeatures {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             hostQueryReset;
} VkPhysicalDeviceHostQueryResetFeatures;

typedef struct VkPhysicalDeviceHostQueryResetFeatures  VkPhysicalDeviceHostQueryResetFeaturesEXT;

typedef struct VkShaderStatisticsInfoAMD {
    VkShaderStageFlags   shaderStageMask;
    VkShaderResourceUsageAMD   resourceUsage;
    uint32_t   numPhysicalVgprs;
    uint32_t   numPhysicalSgprs;
    uint32_t   numAvailableVgprs;
    uint32_t   numAvailableSgprs;
    uint32_t   computeWorkGroupSize [3];
} VkShaderStatisticsInfoAMD;

typedef struct VkPhysicalDeviceGlobalPriorityQueryFeatures {
    VkStructureType   sType;
    void *  pNext;
    VkBool32                      globalPriorityQuery;
} VkPhysicalDeviceGlobalPriorityQueryFeatures;

typedef struct VkPhysicalDeviceGlobalPriorityQueryFeatures  VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR;

typedef struct VkPhysicalDeviceGlobalPriorityQueryFeatures  VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT;

typedef struct VkDebugUtilsMessengerCallbackDataEXT {
    VkStructureType   sType;
    const  void *                                                         pNext;
    VkDebugUtilsMessengerCallbackDataFlagsEXT                            flags;
    const  char *                                   pMessageIdName;
    int32_t                                                              messageIdNumber;
    const  char *                                   pMessage;
    uint32_t                                                             queueLabelCount;
    const  VkDebugUtilsLabelEXT *                   pQueueLabels;
    uint32_t                                                             cmdBufLabelCount;
    const  VkDebugUtilsLabelEXT *                  pCmdBufLabels;
    uint32_t                                                             objectCount;
    const  VkDebugUtilsObjectNameInfoEXT *              pObjects;
} VkDebugUtilsMessengerCallbackDataEXT;

typedef struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT {
    VkStructureType   sType;
    void *  pNext;
    VkBool32                      deviceMemoryReport;
} VkPhysicalDeviceDeviceMemoryReportFeaturesEXT;

typedef struct VkDeviceMemoryReportCallbackDataEXT {
    VkStructureType   sType;
    void *             pNext;
    VkDeviceMemoryReportFlagsEXT       flags;
    VkDeviceMemoryReportEventTypeEXT   type;
    uint64_t                           memoryObjectId;
    VkDeviceSize                       size;
    VkObjectType                       objectType;
    uint64_t   objectHandle;
    uint32_t                           heapIndex;
} VkDeviceMemoryReportCallbackDataEXT;

typedef struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    VkStructureType   sType;
    void *  pNext;
    VkDeviceSize   minImportedHostPointerAlignment;
} VkPhysicalDeviceExternalMemoryHostPropertiesEXT;

typedef struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    VkStructureType   sType;
    void *                   pNext;
    float                   primitiveOverestimationSize;
    float                        maxExtraPrimitiveOverestimationSize;
    float                     extraPrimitiveOverestimationSizeGranularity;
    VkBool32                  primitiveUnderestimation;
    VkBool32                  conservativePointAndLineRasterization;
    VkBool32                degenerateTrianglesRasterized;
    VkBool32                degenerateLinesRasterized;
    VkBool32                  fullyCoveredFragmentShaderInputVariable;
    VkBool32                  conservativeRasterizationPostDepthCoverage;
} VkPhysicalDeviceConservativeRasterizationPropertiesEXT;

typedef struct VkPhysicalDeviceShaderCoreProperties2AMD {
    VkStructureType   sType;
    void *     pNext;
    VkShaderCorePropertiesFlagsAMD   shaderCoreFeatures;
    uint32_t   activeComputeUnitCount;
} VkPhysicalDeviceShaderCoreProperties2AMD;

typedef struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
    VkStructureType   sType;
    const  void *                                                                       pNext;
    VkPipelineRasterizationConservativeStateCreateFlagsEXT             flags;
    VkConservativeRasterizationModeEXT                                                 conservativeRasterizationMode;
    float                                                                              extraPrimitiveOverestimationSize;
} VkPipelineRasterizationConservativeStateCreateInfoEXT;

typedef struct VkPhysicalDeviceDescriptorIndexingFeatures {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                 shaderInputAttachmentArrayDynamicIndexing;
    VkBool32                 shaderUniformTexelBufferArrayDynamicIndexing;
    VkBool32                 shaderStorageTexelBufferArrayDynamicIndexing;
    VkBool32                 shaderUniformBufferArrayNonUniformIndexing;
    VkBool32                 shaderSampledImageArrayNonUniformIndexing;
    VkBool32                 shaderStorageBufferArrayNonUniformIndexing;
    VkBool32                 shaderStorageImageArrayNonUniformIndexing;
    VkBool32                 shaderInputAttachmentArrayNonUniformIndexing;
    VkBool32                 shaderUniformTexelBufferArrayNonUniformIndexing;
    VkBool32                 shaderStorageTexelBufferArrayNonUniformIndexing;
    VkBool32                 descriptorBindingUniformBufferUpdateAfterBind;
    VkBool32                 descriptorBindingSampledImageUpdateAfterBind;
    VkBool32                 descriptorBindingStorageImageUpdateAfterBind;
    VkBool32                 descriptorBindingStorageBufferUpdateAfterBind;
    VkBool32                 descriptorBindingUniformTexelBufferUpdateAfterBind;
    VkBool32                 descriptorBindingStorageTexelBufferUpdateAfterBind;
    VkBool32                 descriptorBindingUpdateUnusedWhilePending;
    VkBool32                 descriptorBindingPartiallyBound;
    VkBool32                 descriptorBindingVariableDescriptorCount;
    VkBool32                 runtimeDescriptorArray;
} VkPhysicalDeviceDescriptorIndexingFeatures;

typedef struct VkPhysicalDeviceDescriptorIndexingFeatures  VkPhysicalDeviceDescriptorIndexingFeaturesEXT;

typedef struct VkPhysicalDeviceDescriptorIndexingProperties {
    VkStructureType   sType;
    void *                             pNext;
    uint32_t                 maxUpdateAfterBindDescriptorsInAllPools;
    VkBool32                 shaderUniformBufferArrayNonUniformIndexingNative;
    VkBool32                 shaderSampledImageArrayNonUniformIndexingNative;
    VkBool32                 shaderStorageBufferArrayNonUniformIndexingNative;
    VkBool32                 shaderStorageImageArrayNonUniformIndexingNative;
    VkBool32                 shaderInputAttachmentArrayNonUniformIndexingNative;
    VkBool32                 robustBufferAccessUpdateAfterBind;
    VkBool32                 quadDivergentImplicitLod;
    uint32_t                 maxPerStageDescriptorUpdateAfterBindSamplers;
    uint32_t                 maxPerStageDescriptorUpdateAfterBindUniformBuffers;
    uint32_t                 maxPerStageDescriptorUpdateAfterBindStorageBuffers;
    uint32_t                 maxPerStageDescriptorUpdateAfterBindSampledImages;
    uint32_t                 maxPerStageDescriptorUpdateAfterBindStorageImages;
    uint32_t                 maxPerStageDescriptorUpdateAfterBindInputAttachments;
    uint32_t                 maxPerStageUpdateAfterBindResources;
    uint32_t                 maxDescriptorSetUpdateAfterBindSamplers;
    uint32_t                 maxDescriptorSetUpdateAfterBindUniformBuffers;
    uint32_t                 maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
    uint32_t                 maxDescriptorSetUpdateAfterBindStorageBuffers;
    uint32_t                 maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
    uint32_t                 maxDescriptorSetUpdateAfterBindSampledImages;
    uint32_t                 maxDescriptorSetUpdateAfterBindStorageImages;
    uint32_t                 maxDescriptorSetUpdateAfterBindInputAttachments;
} VkPhysicalDeviceDescriptorIndexingProperties;

typedef struct VkPhysicalDeviceDescriptorIndexingProperties  VkPhysicalDeviceDescriptorIndexingPropertiesEXT;

typedef struct VkDescriptorSetLayoutBindingFlagsCreateInfo {
    VkStructureType   sType;
    const  void *                                                         pNext;
    uint32_t                                             bindingCount;
    const  VkDescriptorBindingFlags *  pBindingFlags;
} VkDescriptorSetLayoutBindingFlagsCreateInfo;

typedef struct VkDescriptorSetLayoutBindingFlagsCreateInfo  VkDescriptorSetLayoutBindingFlagsCreateInfoEXT;

typedef struct VkAttachmentDescription2 {
    VkStructureType   sType;
    const  void *             pNext;
    VkAttachmentDescriptionFlags   flags;
    VkFormat                                       format;
    VkSampleCountFlagBits                          samples;
    VkAttachmentLoadOp                             loadOp;
    VkAttachmentStoreOp                            storeOp;
    VkAttachmentLoadOp                             stencilLoadOp;
    VkAttachmentStoreOp                            stencilStoreOp;
    VkImageLayout                                  initialLayout;
    VkImageLayout                                  finalLayout;
} VkAttachmentDescription2;

typedef struct VkAttachmentDescription2  VkAttachmentDescription2KHR;

typedef struct VkAttachmentReference2 {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t                            attachment;
    VkImageLayout                       layout;
    VkImageAspectFlags   aspectMask;
} VkAttachmentReference2;

typedef struct VkAttachmentReference2  VkAttachmentReference2KHR;

typedef struct VkSubpassDescription2 {
    VkStructureType   sType;
    const  void *                            pNext;
    VkSubpassDescriptionFlags                     flags;
    VkPipelineBindPoint                                           pipelineBindPoint;
    uint32_t                                                      viewMask;
    uint32_t                                      inputAttachmentCount;
    const  VkAttachmentReference2 *     pInputAttachments;
    uint32_t                                      colorAttachmentCount;
    const  VkAttachmentReference2 *     pColorAttachments;
    const  VkAttachmentReference2 *  pResolveAttachments;
    const  VkAttachmentReference2 *                pDepthStencilAttachment;
    uint32_t                                      preserveAttachmentCount;
    const  uint32_t *                pPreserveAttachments;
} VkSubpassDescription2;

typedef struct VkSubpassDescription2  VkSubpassDescription2KHR;

typedef struct VkSubpassDependency2 {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t                            srcSubpass;
    uint32_t                            dstSubpass;
    VkPipelineStageFlags   srcStageMask;
    VkPipelineStageFlags   dstStageMask;
    VkAccessFlags       srcAccessMask;
    VkAccessFlags       dstAccessMask;
    VkDependencyFlags   dependencyFlags;
    int32_t                             viewOffset;
} VkSubpassDependency2;

typedef struct VkSubpassDependency2  VkSubpassDependency2KHR;

typedef struct VkRenderPassCreateInfo2 {
    VkStructureType   sType;
    const  void *                                               pNext;
    VkRenderPassCreateFlags                    flags;
    uint32_t                                   attachmentCount;
    const  VkAttachmentDescription2 *     pAttachments;
    uint32_t                                                   subpassCount;
    const  VkSubpassDescription2 *           pSubpasses;
    uint32_t                                   dependencyCount;
    const  VkSubpassDependency2 *         pDependencies;
    uint32_t                                   correlatedViewMaskCount;
    const  uint32_t *             pCorrelatedViewMasks;
} VkRenderPassCreateInfo2;

typedef struct VkRenderPassCreateInfo2  VkRenderPassCreateInfo2KHR;

typedef struct VkPhysicalDeviceTimelineSemaphoreFeatures {
    VkStructureType   sType;
    void *                   pNext;
    VkBool32                 timelineSemaphore;
} VkPhysicalDeviceTimelineSemaphoreFeatures;

typedef struct VkPhysicalDeviceTimelineSemaphoreFeatures  VkPhysicalDeviceTimelineSemaphoreFeaturesKHR;

typedef struct VkSemaphoreWaitInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkSemaphoreWaitFlags   flags;
    uint32_t                 semaphoreCount;
    const  VkSemaphore *  pSemaphores;
    const  uint64_t *     pValues;
} VkSemaphoreWaitInfo;

typedef struct VkSemaphoreWaitInfo  VkSemaphoreWaitInfoKHR;

typedef struct VkPhysicalDeviceVertexAttributeDivisorProperties {
    VkStructureType   sType;
    void *                   pNext;
    uint32_t                 maxVertexAttribDivisor;
    VkBool32                 supportsNonZeroFirstInstance;
} VkPhysicalDeviceVertexAttributeDivisorProperties;

typedef struct VkPhysicalDeviceVertexAttributeDivisorProperties  VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR;

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkAndroidHardwareBufferPropertiesANDROID {
    VkStructureType   sType;
    void *                               pNext;
    VkDeviceSize                         allocationSize;
    uint32_t                             memoryTypeBits;
} VkAndroidHardwareBufferPropertiesANDROID;
#endif

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkAndroidHardwareBufferFormatPropertiesANDROID {
    VkStructureType   sType;
    void *                               pNext;
    VkFormat                             format;
    uint64_t                             externalFormat;
    VkFormatFeatureFlags                 formatFeatures;
    VkComponentMapping                   samplerYcbcrConversionComponents;
    VkSamplerYcbcrModelConversion        suggestedYcbcrModel;
    VkSamplerYcbcrRange                  suggestedYcbcrRange;
    VkChromaLocation                     suggestedXChromaOffset;
    VkChromaLocation                     suggestedYChromaOffset;
} VkAndroidHardwareBufferFormatPropertiesANDROID;
#endif

typedef struct VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    VkStructureType   sType;
    const  void *                          pNext;
    VkBool32                              conditionalRenderingEnable;
} VkCommandBufferInheritanceConditionalRenderingInfoEXT;

typedef struct VkPhysicalDevice8BitStorageFeatures {
    VkStructureType   sType;
    void *       pNext;
    VkBool32                           storageBuffer8BitAccess;
    VkBool32                           uniformAndStorageBuffer8BitAccess;
    VkBool32                           storagePushConstant8;
} VkPhysicalDevice8BitStorageFeatures;

typedef struct VkPhysicalDevice8BitStorageFeatures  VkPhysicalDevice8BitStorageFeaturesKHR;

typedef struct VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             conditionalRendering;
    VkBool32                             inheritedConditionalRendering;
} VkPhysicalDeviceConditionalRenderingFeaturesEXT;

typedef struct VkPhysicalDeviceVulkanMemoryModelFeatures {
    VkStructureType   sType;
    void *       pNext;
    VkBool32                           vulkanMemoryModel;
    VkBool32                           vulkanMemoryModelDeviceScope;
    VkBool32                           vulkanMemoryModelAvailabilityVisibilityChains;
} VkPhysicalDeviceVulkanMemoryModelFeatures;

typedef struct VkPhysicalDeviceVulkanMemoryModelFeatures  VkPhysicalDeviceVulkanMemoryModelFeaturesKHR;

typedef struct VkPhysicalDeviceShaderAtomicInt64Features {
    VkStructureType   sType;
    void *                                pNext;
    VkBool32                              shaderBufferInt64Atomics;
    VkBool32                              shaderSharedInt64Atomics;
} VkPhysicalDeviceShaderAtomicInt64Features;

typedef struct VkPhysicalDeviceShaderAtomicInt64Features  VkPhysicalDeviceShaderAtomicInt64FeaturesKHR;

typedef struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
    VkStructureType   sType;
    void *                                pNext;
    VkBool32                              shaderBufferFloat32Atomics;
    VkBool32                              shaderBufferFloat32AtomicAdd;
    VkBool32                              shaderBufferFloat64Atomics;
    VkBool32                              shaderBufferFloat64AtomicAdd;
    VkBool32                              shaderSharedFloat32Atomics;
    VkBool32                              shaderSharedFloat32AtomicAdd;
    VkBool32                              shaderSharedFloat64Atomics;
    VkBool32                              shaderSharedFloat64AtomicAdd;
    VkBool32                              shaderImageFloat32Atomics;
    VkBool32                              shaderImageFloat32AtomicAdd;
    VkBool32                              sparseImageFloat32Atomics;
    VkBool32                              sparseImageFloat32AtomicAdd;
} VkPhysicalDeviceShaderAtomicFloatFeaturesEXT;

typedef struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT {
    VkStructureType   sType;
    void *                                pNext;
    VkBool32                              shaderBufferFloat16Atomics;
    VkBool32                              shaderBufferFloat16AtomicAdd;
    VkBool32                              shaderBufferFloat16AtomicMinMax;
    VkBool32                              shaderBufferFloat32AtomicMinMax;
    VkBool32                              shaderBufferFloat64AtomicMinMax;
    VkBool32                              shaderSharedFloat16Atomics;
    VkBool32                              shaderSharedFloat16AtomicAdd;
    VkBool32                              shaderSharedFloat16AtomicMinMax;
    VkBool32                              shaderSharedFloat32AtomicMinMax;
    VkBool32                              shaderSharedFloat64AtomicMinMax;
    VkBool32                              shaderImageFloat32AtomicMinMax;
    VkBool32                              sparseImageFloat32AtomicMinMax;
} VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT;

typedef struct VkPhysicalDeviceVertexAttributeDivisorFeatures {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             vertexAttributeInstanceRateDivisor;
    VkBool32                             vertexAttributeInstanceRateZeroDivisor;
} VkPhysicalDeviceVertexAttributeDivisorFeatures;

typedef struct VkPhysicalDeviceVertexAttributeDivisorFeatures  VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR;

typedef struct VkPhysicalDeviceVertexAttributeDivisorFeatures  VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;

typedef struct VkQueueFamilyCheckpointPropertiesNV {
    VkStructureType   sType;
    void *            pNext;
    VkPipelineStageFlags   checkpointExecutionStageMask;
} VkQueueFamilyCheckpointPropertiesNV;

typedef struct VkPhysicalDeviceDepthStencilResolveProperties {
    VkStructureType   sType;
    void *                                 pNext;
    VkResolveModeFlags                     supportedDepthResolveModes;
    VkResolveModeFlags                     supportedStencilResolveModes;
    VkBool32                               independentResolveNone;
    VkBool32                               independentResolve;
} VkPhysicalDeviceDepthStencilResolveProperties;

typedef struct VkPhysicalDeviceDepthStencilResolveProperties  VkPhysicalDeviceDepthStencilResolvePropertiesKHR;

typedef struct VkSubpassDescriptionDepthStencilResolve {
    VkStructureType   sType;
    const  void *                               pNext;
    VkResolveModeFlagBits                depthResolveMode;
    VkResolveModeFlagBits                stencilResolveMode;
    const  VkAttachmentReference2 *             pDepthStencilResolveAttachment;
} VkSubpassDescriptionDepthStencilResolve;

typedef struct VkSubpassDescriptionDepthStencilResolve  VkSubpassDescriptionDepthStencilResolveKHR;

typedef struct VkPhysicalDeviceASTCDecodeFeaturesEXT {
    VkStructureType   sType;
    void *       pNext;
    VkBool32                           decodeModeSharedExponent;
} VkPhysicalDeviceASTCDecodeFeaturesEXT;

typedef struct VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    VkStructureType   sType;
    void *                   pNext;
    VkBool32                 transformFeedback;
    VkBool32                 geometryStreams;
} VkPhysicalDeviceTransformFeedbackFeaturesEXT;

typedef struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    VkStructureType   sType;
    void *                   pNext;
    uint32_t                 maxTransformFeedbackStreams;
    uint32_t                 maxTransformFeedbackBuffers;
    VkDeviceSize             maxTransformFeedbackBufferSize;
    uint32_t                 maxTransformFeedbackStreamDataSize;
    uint32_t                 maxTransformFeedbackBufferDataSize;
    uint32_t                 maxTransformFeedbackBufferDataStride;
    VkBool32                 transformFeedbackQueries;
    VkBool32                 transformFeedbackStreamsLinesTriangles;
    VkBool32                 transformFeedbackRasterizationStreamSelect;
    VkBool32                 transformFeedbackDraw;
} VkPhysicalDeviceTransformFeedbackPropertiesEXT;

typedef struct VkPipelineRasterizationStateStreamCreateInfoEXT {
    VkStructureType   sType;
    const  void *                                                                       pNext;
    VkPipelineRasterizationStateStreamCreateFlagsEXT                   flags;
    uint32_t                                                                           rasterizationStream;
} VkPipelineRasterizationStateStreamCreateInfoEXT;

typedef struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    VkStructureType   sType;
    void *     pNext;
    VkBool32                         representativeFragmentTest;
} VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;

typedef struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    VkStructureType   sType;
    const  void *     pNext;
    VkBool32         representativeFragmentTestEnable;
} VkPipelineRepresentativeFragmentTestStateCreateInfoNV;

typedef struct VkPhysicalDeviceExclusiveScissorFeaturesNV {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           exclusiveScissor;
} VkPhysicalDeviceExclusiveScissorFeaturesNV;

typedef struct VkPhysicalDeviceCornerSampledImageFeaturesNV {
    VkStructureType   sType;
    void *                               pNext;
    VkBool32                             cornerSampledImage;
} VkPhysicalDeviceCornerSampledImageFeaturesNV;

typedef struct VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           computeDerivativeGroupQuads;
    VkBool32                           computeDerivativeGroupLinear;
} VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR;

typedef struct VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR  VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;

typedef struct VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           meshAndTaskShaderDerivatives;
} VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR;

typedef struct VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    VkStructureType   sType;
    void *                               pNext;
    VkBool32                             imageFootprint;
} VkPhysicalDeviceShaderImageFootprintFeaturesNV;

typedef struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           dedicatedAllocationImageAliasing;
} VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;

typedef struct VkPhysicalDeviceCopyMemoryIndirectFeaturesKHR {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           indirectMemoryCopy;
    VkBool32                           indirectMemoryToImageCopy;
} VkPhysicalDeviceCopyMemoryIndirectFeaturesKHR;

typedef struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNV {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           indirectCopy;
} VkPhysicalDeviceCopyMemoryIndirectFeaturesNV;

typedef struct VkPhysicalDeviceCopyMemoryIndirectPropertiesKHR {
    VkStructureType   sType;
    void *      pNext;
    VkQueueFlags          supportedQueues;
} VkPhysicalDeviceCopyMemoryIndirectPropertiesKHR;

typedef struct VkPhysicalDeviceCopyMemoryIndirectPropertiesKHR  VkPhysicalDeviceCopyMemoryIndirectPropertiesNV;

typedef struct VkPhysicalDeviceMemoryDecompressionFeaturesNV {
    VkStructureType   sType;
    void *        pNext;
    VkBool32                      memoryDecompression;
} VkPhysicalDeviceMemoryDecompressionFeaturesNV;

typedef struct VkPhysicalDeviceMemoryDecompressionPropertiesNV {
    VkStructureType   sType;
    void *      pNext;
    VkMemoryDecompressionMethodFlagsNV      decompressionMethods;
    uint64_t               maxDecompressionIndirectCount;
} VkPhysicalDeviceMemoryDecompressionPropertiesNV;

typedef struct VkPipelineViewportShadingRateImageStateCreateInfoNV {
    VkStructureType   sType;
    const  void *                                                              pNext;
    VkBool32                                                                  shadingRateImageEnable;
    uint32_t                                                  viewportCount;
    const  VkShadingRatePaletteNV *  pShadingRatePalettes;
} VkPipelineViewportShadingRateImageStateCreateInfoNV;

typedef struct VkPhysicalDeviceShadingRateImageFeaturesNV {
    VkStructureType   sType;
    void *                                pNext;
    VkBool32                              shadingRateImage;
    VkBool32                              shadingRateCoarseSampleOrder;
} VkPhysicalDeviceShadingRateImageFeaturesNV;

typedef struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI {
    VkStructureType   sType;
    void *                                pNext;
    VkBool32                              invocationMask;
} VkPhysicalDeviceInvocationMaskFeaturesHUAWEI;

typedef struct VkPhysicalDeviceMeshShaderFeaturesNV {
    VkStructureType   sType;
    void *                                pNext;
    VkBool32                              taskShader;
    VkBool32                              meshShader;
} VkPhysicalDeviceMeshShaderFeaturesNV;

typedef struct VkPhysicalDeviceMeshShaderFeaturesEXT {
    VkStructureType   sType;
    void *                                pNext;
    VkBool32                              taskShader;
    VkBool32                              meshShader;
    VkBool32                              multiviewMeshShader;
    VkBool32                              primitiveFragmentShadingRateMeshShader;
    VkBool32                              meshShaderQueries;
} VkPhysicalDeviceMeshShaderFeaturesEXT;

typedef struct VkPhysicalDeviceMeshShaderPropertiesEXT {
    VkStructureType   sType;
    void *                                pNext;
    uint32_t                              maxTaskWorkGroupTotalCount;
    uint32_t                              maxTaskWorkGroupCount [3];
    uint32_t                              maxTaskWorkGroupInvocations;
    uint32_t                              maxTaskWorkGroupSize [3];
    uint32_t                              maxTaskPayloadSize;
    uint32_t                              maxTaskSharedMemorySize;
    uint32_t                              maxTaskPayloadAndSharedMemorySize;
    uint32_t                              maxMeshWorkGroupTotalCount;
    uint32_t                              maxMeshWorkGroupCount [3];
    uint32_t                              maxMeshWorkGroupInvocations;
    uint32_t                              maxMeshWorkGroupSize [3];
    uint32_t                              maxMeshSharedMemorySize;
    uint32_t                              maxMeshPayloadAndSharedMemorySize;
    uint32_t                              maxMeshOutputMemorySize;
    uint32_t                              maxMeshPayloadAndOutputMemorySize;
    uint32_t                              maxMeshOutputComponents;
    uint32_t                              maxMeshOutputVertices;
    uint32_t                              maxMeshOutputPrimitives;
    uint32_t                              maxMeshOutputLayers;
    uint32_t                              maxMeshMultiviewViewCount;
    uint32_t                           meshOutputPerVertexGranularity;
    uint32_t                           meshOutputPerPrimitiveGranularity;
    uint32_t                              maxPreferredTaskWorkGroupInvocations;
    uint32_t                              maxPreferredMeshWorkGroupInvocations;
    VkBool32                              prefersLocalInvocationVertexOutput;
    VkBool32                              prefersLocalInvocationPrimitiveOutput;
    VkBool32                              prefersCompactVertexOutput;
    VkBool32                              prefersCompactPrimitiveOutput;
} VkPhysicalDeviceMeshShaderPropertiesEXT;

typedef struct VkRayTracingPipelineCreateInfoNV {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineCreateFlags    flags;
    uint32_t                 stageCount;
    const  VkPipelineShaderStageCreateInfo *  pStages;
    uint32_t                 groupCount;
    const  VkRayTracingShaderGroupCreateInfoNV *  pGroups;
    uint32_t                 maxRecursionDepth;
    VkPipelineLayout         layout;
    VkPipeline        basePipelineHandle;
    int32_t                  basePipelineIndex;
} VkRayTracingPipelineCreateInfoNV;

typedef struct VkRayTracingPipelineCreateInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineCreateFlags    flags;
    uint32_t   stageCount;
    const  VkPipelineShaderStageCreateInfo *  pStages;
    uint32_t   groupCount;
    const  VkRayTracingShaderGroupCreateInfoKHR *  pGroups;
    uint32_t                 maxPipelineRayRecursionDepth;
    const  VkPipelineLibraryCreateInfoKHR *  pLibraryInfo;
    const  VkRayTracingPipelineInterfaceCreateInfoKHR *  pLibraryInterface;
    const  VkPipelineDynamicStateCreateInfo *  pDynamicState;
    VkPipelineLayout         layout;
    VkPipeline        basePipelineHandle;
    int32_t                  basePipelineIndex;
} VkRayTracingPipelineCreateInfoKHR;

typedef struct VkGeometryTrianglesNV {
    VkStructureType   sType;
    const  void *                 pNext;
    VkBuffer     vertexData;
    VkDeviceSize                 vertexOffset;
    uint32_t                     vertexCount;
    VkDeviceSize                 vertexStride;
    VkFormat                     vertexFormat;
    VkBuffer     indexData;
    VkDeviceSize                 indexOffset;
    uint32_t                     indexCount;
    VkIndexType                  indexType;
    VkBuffer     transformData;
    VkDeviceSize                 transformOffset;
} VkGeometryTrianglesNV;

typedef struct VkGeometryAABBNV {
    VkStructureType   sType;
    const  void *                 pNext;
    VkBuffer     aabbData;
    uint32_t                     numAABBs;
    uint32_t                     stride;
    VkDeviceSize                 offset;
} VkGeometryAABBNV;

typedef struct VkGeometryDataNV {
    VkGeometryTrianglesNV                    triangles;
    VkGeometryAABBNV                         aabbs;
} VkGeometryDataNV;

typedef struct VkGeometryNV {
    VkStructureType   sType;
    const  void *                                    pNext;
    VkGeometryTypeKHR                    geometryType;
    VkGeometryDataNV                                geometry;
    VkGeometryFlagsKHR   flags;
} VkGeometryNV;

typedef struct VkAccelerationStructureInfoNV {
    VkStructureType   sType;
    const  void *                             pNext;
    VkAccelerationStructureTypeNV           type;
    VkBuildAccelerationStructureFlagsNV   flags;
    uint32_t                 instanceCount;
    uint32_t                 geometryCount;
    const  VkGeometryNV *  pGeometries;
} VkAccelerationStructureInfoNV;

typedef struct VkAccelerationStructureCreateInfoNV {
    VkStructureType   sType;
    const  void *                             pNext;
    VkDeviceSize                             compactedSize;
    VkAccelerationStructureInfoNV            info;
} VkAccelerationStructureCreateInfoNV;

typedef struct VkBindAccelerationStructureMemoryInfoNV {
    VkStructureType   sType;
    const  void *      pNext;
    VkAccelerationStructureNV         accelerationStructure;
    VkDeviceMemory                     memory;
    VkDeviceSize                       memoryOffset;
    uint32_t           deviceIndexCount;
    const  uint32_t *   pDeviceIndices;
} VkBindAccelerationStructureMemoryInfoNV;

typedef struct VkPhysicalDeviceAccelerationStructureFeaturesKHR {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           accelerationStructure;
    VkBool32                           accelerationStructureCaptureReplay;
    VkBool32                           accelerationStructureIndirectBuild;
    VkBool32                           accelerationStructureHostCommands;
    VkBool32                           descriptorBindingAccelerationStructureUpdateAfterBind;
} VkPhysicalDeviceAccelerationStructureFeaturesKHR;

typedef struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           rayTracingPipeline;
    VkBool32                           rayTracingPipelineShaderGroupHandleCaptureReplay;
    VkBool32                           rayTracingPipelineShaderGroupHandleCaptureReplayMixed;
    VkBool32                           rayTracingPipelineTraceRaysIndirect;
    VkBool32                           rayTraversalPrimitiveCulling;
} VkPhysicalDeviceRayTracingPipelineFeaturesKHR;

typedef struct VkPhysicalDeviceRayQueryFeaturesKHR {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           rayQuery;
} VkPhysicalDeviceRayQueryFeaturesKHR;

typedef struct VkStridedDeviceAddressRegionKHR {
    VkDeviceAddress    deviceAddress;
    VkDeviceSize                       stride;
    VkDeviceSize                       size;
} VkStridedDeviceAddressRegionKHR;

typedef struct VkTraceRaysIndirectCommand2KHR {
    VkDeviceAddress          raygenShaderRecordAddress;
    VkDeviceSize             raygenShaderRecordSize;
    VkDeviceAddress          missShaderBindingTableAddress;
    VkDeviceSize             missShaderBindingTableSize;
    VkDeviceSize             missShaderBindingTableStride;
    VkDeviceAddress          hitShaderBindingTableAddress;
    VkDeviceSize             hitShaderBindingTableSize;
    VkDeviceSize             hitShaderBindingTableStride;
    VkDeviceAddress          callableShaderBindingTableAddress;
    VkDeviceSize             callableShaderBindingTableSize;
    VkDeviceSize             callableShaderBindingTableStride;
    uint32_t                 width;
    uint32_t                 height;
    uint32_t                 depth;
} VkTraceRaysIndirectCommand2KHR;

typedef struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           rayTracingMaintenance1;
    VkBool32                           rayTracingPipelineTraceRaysIndirect2;
} VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR;

typedef struct VkDrmFormatModifierPropertiesEXT {
    uint64_t                 drmFormatModifier;
    uint32_t                 drmFormatModifierPlaneCount;
    VkFormatFeatureFlags   drmFormatModifierTilingFeatures;
} VkDrmFormatModifierPropertiesEXT;

typedef struct VkImageDrmFormatModifierExplicitCreateInfoEXT {
    VkStructureType   sType;
    const  void *  pNext;
    uint64_t   drmFormatModifier;
    uint32_t   drmFormatModifierPlaneCount;
    const  VkSubresourceLayout *  pPlaneLayouts;
} VkImageDrmFormatModifierExplicitCreateInfoEXT;

typedef struct VkImageStencilUsageCreateInfo {
    VkStructureType   sType;
    const  void *  pNext;
    VkImageUsageFlags   stencilUsage;
} VkImageStencilUsageCreateInfo;

typedef struct VkImageStencilUsageCreateInfo  VkImageStencilUsageCreateInfoEXT;

typedef struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           fragmentDensityMap;
    VkBool32                           fragmentDensityMapDynamic;
    VkBool32                           fragmentDensityMapNonSubsampledImages;
} VkPhysicalDeviceFragmentDensityMapFeaturesEXT;

typedef struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           fragmentDensityMapDeferred;
} VkPhysicalDeviceFragmentDensityMap2FeaturesEXT;

typedef struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           fragmentDensityMapOffset;
} VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT;

typedef struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT  VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM;

typedef struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    VkStructureType   sType;
    void *                             pNext;
    VkExtent2D                         minFragmentDensityTexelSize;
    VkExtent2D                         maxFragmentDensityTexelSize;
    VkBool32                           fragmentDensityInvocations;
} VkPhysicalDeviceFragmentDensityMapPropertiesEXT;

typedef struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
    VkStructureType   sType;
    void *                           pNext;
    VkBool32                    subsampledLoads;
    VkBool32                    subsampledCoarseReconstructionEarlyAccess;
    uint32_t                         maxSubsampledArrayLayers;
    uint32_t                         maxDescriptorSetSubsampledSamplers;
} VkPhysicalDeviceFragmentDensityMap2PropertiesEXT;

typedef struct VkPhysicalDeviceScalarBlockLayoutFeatures {
    VkStructureType   sType;
    void *                                pNext;
    VkBool32                              scalarBlockLayout;
} VkPhysicalDeviceScalarBlockLayoutFeatures;

typedef struct VkPhysicalDeviceScalarBlockLayoutFeatures  VkPhysicalDeviceScalarBlockLayoutFeaturesEXT;

typedef struct VkSurfaceProtectedCapabilitiesKHR {
    VkStructureType   sType;
    const  void *  pNext;
    VkBool32   supportsProtected;
} VkSurfaceProtectedCapabilitiesKHR;

typedef struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    VkStructureType   sType;
    void *                                pNext;
    VkBool32                              uniformBufferStandardLayout;
} VkPhysicalDeviceUniformBufferStandardLayoutFeatures;

typedef struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures  VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR;

typedef struct VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    VkStructureType   sType;
    void *                   pNext;
    VkBool32                 depthClipEnable;
} VkPhysicalDeviceDepthClipEnableFeaturesEXT;

typedef struct VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    VkStructureType   sType;
    const  void *                                                                  pNext;
    VkPipelineRasterizationDepthClipStateCreateFlagsEXT           flags;
    VkBool32                                                                      depthClipEnable;
} VkPipelineRasterizationDepthClipStateCreateInfoEXT;

typedef struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkDeviceSize                         heapBudget [ VK_MAX_MEMORY_HEAPS ];
    VkDeviceSize                         heapUsage [ VK_MAX_MEMORY_HEAPS ];
} VkPhysicalDeviceMemoryBudgetPropertiesEXT;

typedef struct VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             memoryPriority;
} VkPhysicalDeviceMemoryPriorityFeaturesEXT;

typedef struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
    VkStructureType   sType;
    void *               pNext;
    VkBool32                             pageableDeviceLocalMemory;
} VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT;

typedef struct VkPhysicalDeviceBufferDeviceAddressFeatures {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             bufferDeviceAddress;
    VkBool32                             bufferDeviceAddressCaptureReplay;
    VkBool32                             bufferDeviceAddressMultiDevice;
} VkPhysicalDeviceBufferDeviceAddressFeatures;

typedef struct VkPhysicalDeviceBufferDeviceAddressFeatures  VkPhysicalDeviceBufferDeviceAddressFeaturesKHR;

typedef struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             bufferDeviceAddress;
    VkBool32                bufferDeviceAddressCaptureReplay;
    VkBool32                  bufferDeviceAddressMultiDevice;
} VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;

typedef struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT  VkPhysicalDeviceBufferAddressFeaturesEXT;

typedef struct VkBufferDeviceAddressCreateInfoEXT {
    VkStructureType   sType;
    const  void *                       pNext;
    VkDeviceAddress                    deviceAddress;
} VkBufferDeviceAddressCreateInfoEXT;

typedef struct VkFilterCubicImageViewImageFormatPropertiesEXT {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           filterCubic;
    VkBool32                           filterCubicMinmax;
} VkFilterCubicImageViewImageFormatPropertiesEXT;

typedef struct VkPhysicalDeviceImagelessFramebufferFeatures {
    VkStructureType   sType;
    void *                                     pNext;
    VkBool32                                   imagelessFramebuffer;
} VkPhysicalDeviceImagelessFramebufferFeatures;

typedef struct VkPhysicalDeviceImagelessFramebufferFeatures  VkPhysicalDeviceImagelessFramebufferFeaturesKHR;

typedef struct VkFramebufferAttachmentImageInfo {
    VkStructureType   sType;
    const  void *                               pNext;
    VkImageCreateFlags         flags;
    VkImageUsageFlags                          usage;
    uint32_t                                   width;
    uint32_t                                   height;
    uint32_t                                   layerCount;
    uint32_t                   viewFormatCount;
    const  VkFormat *     pViewFormats;
} VkFramebufferAttachmentImageInfo;

typedef struct VkFramebufferAttachmentImageInfo  VkFramebufferAttachmentImageInfoKHR;

typedef struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures {
    VkStructureType   sType;
    void *   pNext;
    VkBool32                 textureCompressionASTC_HDR;
} VkPhysicalDeviceTextureCompressionASTCHDRFeatures;

typedef struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures  VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT;

typedef struct VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    VkStructureType   sType;
    void *                                pNext;
    VkBool32                               cooperativeMatrix;
    VkBool32             cooperativeMatrixRobustBufferAccess;
} VkPhysicalDeviceCooperativeMatrixFeaturesNV;

typedef struct VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    VkStructureType   sType;
    void *                                pNext;
    VkShaderStageFlags                    cooperativeMatrixSupportedStages;
} VkPhysicalDeviceCooperativeMatrixPropertiesNV;

typedef struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             ycbcrImageArrays;
} VkPhysicalDeviceYcbcrImageArraysFeaturesEXT;

typedef struct VkImageViewAddressPropertiesNVX {
    VkStructureType   sType;
    void *               pNext;
    VkDeviceAddress      deviceAddress;
    VkDeviceSize         size;
} VkImageViewAddressPropertiesNVX;

typedef struct VkPipelineCreationFeedback {
    VkPipelineCreationFeedbackFlags       flags;
    uint64_t                              duration;
} VkPipelineCreationFeedback;

typedef struct VkPipelineCreationFeedback  VkPipelineCreationFeedbackEXT;

typedef struct VkPipelineCreationFeedbackCreateInfo {
    VkStructureType   sType;
    const  void *          pNext;
    VkPipelineCreationFeedback *          pPipelineCreationFeedback;
    uint32_t              pipelineStageCreationFeedbackCount;
    VkPipelineCreationFeedback *  pPipelineStageCreationFeedbacks;
} VkPipelineCreationFeedbackCreateInfo;

typedef struct VkPipelineCreationFeedbackCreateInfo  VkPipelineCreationFeedbackCreateInfoEXT;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkSurfaceCapabilitiesFullScreenExclusiveEXT {
    VkStructureType   sType;
    void *             pNext;
    VkBool32           fullScreenExclusiveSupported;
} VkSurfaceCapabilitiesFullScreenExclusiveEXT;
#endif

typedef struct VkPhysicalDevicePresentBarrierFeaturesNV {
    VkStructureType   sType;
    void *                pNext;
    VkBool32                              presentBarrier;
} VkPhysicalDevicePresentBarrierFeaturesNV;

typedef struct VkSurfaceCapabilitiesPresentBarrierNV {
    VkStructureType   sType;
    void *             pNext;
    VkBool32         presentBarrierSupported;
} VkSurfaceCapabilitiesPresentBarrierNV;

typedef struct VkSwapchainPresentBarrierCreateInfoNV {
    VkStructureType   sType;
    void *     pNext;
    VkBool32      presentBarrierEnable;
} VkSwapchainPresentBarrierCreateInfoNV;

typedef struct VkPhysicalDevicePerformanceQueryFeaturesKHR {
    VkStructureType   sType;
    void *       pNext;
    VkBool32                           performanceCounterQueryPools;
    VkBool32                           performanceCounterMultipleQueryPools;
} VkPhysicalDevicePerformanceQueryFeaturesKHR;

typedef struct VkPhysicalDevicePerformanceQueryPropertiesKHR {
    VkStructureType   sType;
    void *  pNext;
    VkBool32   allowCommandBufferQueryCopies;
} VkPhysicalDevicePerformanceQueryPropertiesKHR;

typedef struct VkPerformanceCounterDescriptionKHR {
    VkStructureType   sType;
    void *                    pNext;
    VkPerformanceCounterDescriptionFlagsKHR   flags;
    char                name [ VK_MAX_DESCRIPTION_SIZE ];
    char                category [ VK_MAX_DESCRIPTION_SIZE ];
    char                description [ VK_MAX_DESCRIPTION_SIZE ];
} VkPerformanceCounterDescriptionKHR;

typedef struct VkAcquireProfilingLockInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkAcquireProfilingLockFlagsKHR   flags;
    uint64_t   timeout;
} VkAcquireProfilingLockInfoKHR;

typedef struct VkHeadlessSurfaceCreateInfoEXT {
    VkStructureType   sType;
    const  void *             pNext;
    VkHeadlessSurfaceCreateFlagsEXT     flags;
} VkHeadlessSurfaceCreateInfoEXT;

typedef struct VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    VkStructureType   sType;
    void *     pNext;
    VkBool32                         coverageReductionMode;
} VkPhysicalDeviceCoverageReductionModeFeaturesNV;

typedef struct VkPipelineCoverageReductionStateCreateInfoNV {
    VkStructureType   sType;
    const  void *                                                         pNext;
    VkPipelineCoverageReductionStateCreateFlagsNV        flags;
    VkCoverageReductionModeNV                                            coverageReductionMode;
} VkPipelineCoverageReductionStateCreateInfoNV;

typedef struct VkFramebufferMixedSamplesCombinationNV {
    VkStructureType   sType;
    void *                       pNext;
    VkCoverageReductionModeNV    coverageReductionMode;
    VkSampleCountFlagBits        rasterizationSamples;
    VkSampleCountFlags           depthStencilSamples;
    VkSampleCountFlags           colorSamples;
} VkFramebufferMixedSamplesCombinationNV;

typedef struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           shaderIntegerFunctions2;
} VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;

typedef union VkPerformanceValueDataINTEL {
    uint32_t                             value32;
    uint64_t                             value64;
    float                                 valueFloat;
    VkBool32                               valueBool;
    const  char *   valueString;
} VkPerformanceValueDataINTEL;

typedef struct VkPerformanceValueINTEL {
    VkPerformanceValueTypeINTEL          type;
    VkPerformanceValueDataINTEL          data;
} VkPerformanceValueINTEL;

typedef struct VkPerformanceOverrideInfoINTEL {
    VkStructureType   sType;
    const  void *                          pNext;
    VkPerformanceOverrideTypeINTEL        type;
    VkBool32                              enable;
    uint64_t                              parameter;
} VkPerformanceOverrideInfoINTEL;

typedef struct VkPhysicalDeviceShaderClockFeaturesKHR {
    VkStructureType   sType;
    void *                                pNext;
    VkBool32                              shaderSubgroupClock;
    VkBool32                              shaderDeviceClock;
} VkPhysicalDeviceShaderClockFeaturesKHR;

typedef struct VkPhysicalDeviceIndexTypeUint8Features {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             indexTypeUint8;
} VkPhysicalDeviceIndexTypeUint8Features;

typedef struct VkPhysicalDeviceIndexTypeUint8Features  VkPhysicalDeviceIndexTypeUint8FeaturesKHR;

typedef struct VkPhysicalDeviceIndexTypeUint8Features  VkPhysicalDeviceIndexTypeUint8FeaturesEXT;

typedef struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    VkStructureType   sType;
    void *     pNext;
    VkBool32                         shaderSMBuiltins;
} VkPhysicalDeviceShaderSMBuiltinsFeaturesNV;

typedef struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    VkStructureType   sType;
    void *                   pNext;
    VkBool32                 fragmentShaderSampleInterlock;
    VkBool32                 fragmentShaderPixelInterlock;
    VkBool32                 fragmentShaderShadingRateInterlock;
} VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;

typedef struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    VkStructureType   sType;
    void *     pNext;
    VkBool32                         separateDepthStencilLayouts;
} VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;

typedef struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures  VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR;

typedef struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                       primitiveTopologyListRestart;
    VkBool32                       primitiveTopologyPatchListRestart;
} VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT;

typedef struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    VkStructureType   sType;
    void *               pNext;
    VkBool32             pipelineExecutableInfo;
} VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;

typedef struct VkPipelineExecutablePropertiesKHR {
    VkStructureType   sType;
    void *               pNext;
    VkShaderStageFlags                   stages;
    char           name [ VK_MAX_DESCRIPTION_SIZE ];
    char           description [ VK_MAX_DESCRIPTION_SIZE ];
    uint32_t                             subgroupSize;
} VkPipelineExecutablePropertiesKHR;

typedef union VkPipelineExecutableStatisticValueKHR {
    VkBool32             b32;
    int64_t              i64;
    uint64_t             u64;
    double               f64;
} VkPipelineExecutableStatisticValueKHR;

typedef struct VkPipelineExecutableStatisticKHR {
    VkStructureType   sType;
    void *                   pNext;
    char               name [ VK_MAX_DESCRIPTION_SIZE ];
    char               description [ VK_MAX_DESCRIPTION_SIZE ];
    VkPipelineExecutableStatisticFormatKHR   format;
    VkPipelineExecutableStatisticValueKHR    value;
} VkPipelineExecutableStatisticKHR;

typedef struct VkPipelineExecutableInternalRepresentationKHR {
    VkStructureType   sType;
    void *                 pNext;
    char             name [ VK_MAX_DESCRIPTION_SIZE ];
    char             description [ VK_MAX_DESCRIPTION_SIZE ];
    VkBool32                               isText;
    size_t                                 dataSize;
    void *  pData;
} VkPipelineExecutableInternalRepresentationKHR;

typedef struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures {
    VkStructureType   sType;
    void *       pNext;
    VkBool32                     shaderDemoteToHelperInvocation;
} VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;

typedef struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures  VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT;

typedef struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             texelBufferAlignment;
} VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;

typedef struct VkPhysicalDeviceTexelBufferAlignmentProperties {
    VkStructureType   sType;
    void *               pNext;
    VkDeviceSize                         storageTexelBufferOffsetAlignmentBytes;
    VkBool32                           storageTexelBufferOffsetSingleTexelAlignment;
    VkDeviceSize                         uniformTexelBufferOffsetAlignmentBytes;
    VkBool32                           uniformTexelBufferOffsetSingleTexelAlignment;
} VkPhysicalDeviceTexelBufferAlignmentProperties;

typedef struct VkPhysicalDeviceTexelBufferAlignmentProperties  VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT;

typedef struct VkPhysicalDeviceSubgroupSizeControlFeatures {
    VkStructureType   sType;
    void *   pNext;
    VkBool32                 subgroupSizeControl;
    VkBool32                 computeFullSubgroups;
} VkPhysicalDeviceSubgroupSizeControlFeatures;

typedef struct VkPhysicalDeviceSubgroupSizeControlFeatures  VkPhysicalDeviceSubgroupSizeControlFeaturesEXT;

typedef struct VkPhysicalDeviceSubgroupSizeControlProperties {
    VkStructureType   sType;
    void *                           pNext;
    uint32_t   minSubgroupSize;
    uint32_t   maxSubgroupSize;
    uint32_t   maxComputeWorkgroupSubgroups;
    VkShaderStageFlags           requiredSubgroupSizeStages;
} VkPhysicalDeviceSubgroupSizeControlProperties;

typedef struct VkPhysicalDeviceSubgroupSizeControlProperties  VkPhysicalDeviceSubgroupSizeControlPropertiesEXT;

typedef struct VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI {
    VkStructureType   sType;
    void *                   pNext;
    uint32_t             maxWorkGroupCount [3];
    uint32_t             maxWorkGroupSize [3];
    uint32_t                 maxOutputClusterCount;
    VkDeviceSize           indirectBufferOffsetAlignment;
} VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI;

typedef struct VkPhysicalDeviceLineRasterizationFeatures {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             rectangularLines;
    VkBool32                             bresenhamLines;
    VkBool32                             smoothLines;
    VkBool32                             stippledRectangularLines;
    VkBool32                             stippledBresenhamLines;
    VkBool32                             stippledSmoothLines;
} VkPhysicalDeviceLineRasterizationFeatures;

typedef struct VkPhysicalDeviceLineRasterizationFeatures  VkPhysicalDeviceLineRasterizationFeaturesKHR;

typedef struct VkPhysicalDeviceLineRasterizationFeatures  VkPhysicalDeviceLineRasterizationFeaturesEXT;

typedef struct VkPipelineRasterizationLineStateCreateInfo {
    VkStructureType   sType;
    const  void *                                       pNext;
    VkLineRasterizationMode                                            lineRasterizationMode;
    VkBool32                                                           stippledLineEnable;
    uint32_t                                                           lineStippleFactor;
    uint16_t                                                           lineStipplePattern;
} VkPipelineRasterizationLineStateCreateInfo;

typedef struct VkPipelineRasterizationLineStateCreateInfo  VkPipelineRasterizationLineStateCreateInfoKHR;

typedef struct VkPipelineRasterizationLineStateCreateInfo  VkPipelineRasterizationLineStateCreateInfoEXT;

typedef struct VkPhysicalDevicePipelineCreationCacheControlFeatures {
    VkStructureType   sType;
    void *  pNext;
    VkBool32                pipelineCreationCacheControl;
} VkPhysicalDevicePipelineCreationCacheControlFeatures;

typedef struct VkPhysicalDevicePipelineCreationCacheControlFeatures  VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT;

typedef struct VkPhysicalDeviceVulkan11Features {
    VkStructureType   sType;
    void *     pNext;
    VkBool32                           storageBuffer16BitAccess;
    VkBool32                           uniformAndStorageBuffer16BitAccess;
    VkBool32                           storagePushConstant16;
    VkBool32                           storageInputOutput16;
    VkBool32                           multiview;
    VkBool32                           multiviewGeometryShader;
    VkBool32                           multiviewTessellationShader;
    VkBool32                           variablePointersStorageBuffer;
    VkBool32                           variablePointers;
    VkBool32                           protectedMemory;
    VkBool32                           samplerYcbcrConversion;
    VkBool32                           shaderDrawParameters;
} VkPhysicalDeviceVulkan11Features;

typedef struct VkPhysicalDeviceVulkan11Properties {
    VkStructureType   sType;
    void *       pNext;
    uint8_t                            deviceUUID [ VK_UUID_SIZE ];
    uint8_t                            driverUUID [ VK_UUID_SIZE ];
    uint8_t                            deviceLUID [ VK_LUID_SIZE ];
    uint32_t                           deviceNodeMask;
    VkBool32                           deviceLUIDValid;
    uint32_t                        subgroupSize;
    VkShaderStageFlags              subgroupSupportedStages;
    VkSubgroupFeatureFlags          subgroupSupportedOperations;
    VkBool32                            subgroupQuadOperationsInAllStages;
    VkPointClippingBehavior          pointClippingBehavior;
    uint32_t                           maxMultiviewViewCount;
    uint32_t                           maxMultiviewInstanceIndex;
    VkBool32                         protectedNoFault;
    uint32_t                           maxPerSetDescriptors;
    VkDeviceSize                       maxMemoryAllocationSize;
} VkPhysicalDeviceVulkan11Properties;

typedef struct VkPhysicalDeviceVulkan12Features {
    VkStructureType   sType;
    void *     pNext;
    VkBool32                           samplerMirrorClampToEdge;
    VkBool32                           drawIndirectCount;
    VkBool32                           storageBuffer8BitAccess;
    VkBool32                           uniformAndStorageBuffer8BitAccess;
    VkBool32                           storagePushConstant8;
    VkBool32                           shaderBufferInt64Atomics;
    VkBool32                           shaderSharedInt64Atomics;
    VkBool32                           shaderFloat16;
    VkBool32                           shaderInt8;
    VkBool32                           descriptorIndexing;
    VkBool32                           shaderInputAttachmentArrayDynamicIndexing;
    VkBool32                           shaderUniformTexelBufferArrayDynamicIndexing;
    VkBool32                           shaderStorageTexelBufferArrayDynamicIndexing;
    VkBool32                           shaderUniformBufferArrayNonUniformIndexing;
    VkBool32                           shaderSampledImageArrayNonUniformIndexing;
    VkBool32                           shaderStorageBufferArrayNonUniformIndexing;
    VkBool32                           shaderStorageImageArrayNonUniformIndexing;
    VkBool32                           shaderInputAttachmentArrayNonUniformIndexing;
    VkBool32                           shaderUniformTexelBufferArrayNonUniformIndexing;
    VkBool32                           shaderStorageTexelBufferArrayNonUniformIndexing;
    VkBool32                           descriptorBindingUniformBufferUpdateAfterBind;
    VkBool32                           descriptorBindingSampledImageUpdateAfterBind;
    VkBool32                           descriptorBindingStorageImageUpdateAfterBind;
    VkBool32                           descriptorBindingStorageBufferUpdateAfterBind;
    VkBool32                           descriptorBindingUniformTexelBufferUpdateAfterBind;
    VkBool32                           descriptorBindingStorageTexelBufferUpdateAfterBind;
    VkBool32                           descriptorBindingUpdateUnusedWhilePending;
    VkBool32                           descriptorBindingPartiallyBound;
    VkBool32                           descriptorBindingVariableDescriptorCount;
    VkBool32                           runtimeDescriptorArray;
    VkBool32                           samplerFilterMinmax;
    VkBool32                           scalarBlockLayout;
    VkBool32                           imagelessFramebuffer;
    VkBool32                           uniformBufferStandardLayout;
    VkBool32                           shaderSubgroupExtendedTypes;
    VkBool32                           separateDepthStencilLayouts;
    VkBool32                           hostQueryReset;
    VkBool32                           timelineSemaphore;
    VkBool32                           bufferDeviceAddress;
    VkBool32                           bufferDeviceAddressCaptureReplay;
    VkBool32                           bufferDeviceAddressMultiDevice;
    VkBool32                           vulkanMemoryModel;
    VkBool32                           vulkanMemoryModelDeviceScope;
    VkBool32                           vulkanMemoryModelAvailabilityVisibilityChains;
    VkBool32                           shaderOutputViewportIndex;
    VkBool32                           shaderOutputLayer;
    VkBool32                           subgroupBroadcastDynamicId;
} VkPhysicalDeviceVulkan12Features;

typedef struct VkPhysicalDeviceVulkan12Properties {
    VkStructureType   sType;
    void *     pNext;
    VkDriverId                         driverID;
    char         driverName [ VK_MAX_DRIVER_NAME_SIZE ];
    char         driverInfo [ VK_MAX_DRIVER_INFO_SIZE ];
    VkConformanceVersion               conformanceVersion;
    VkShaderFloatControlsIndependence   denormBehaviorIndependence;
    VkShaderFloatControlsIndependence   roundingModeIndependence;
    VkBool32                              shaderSignedZeroInfNanPreserveFloat16;
    VkBool32                              shaderSignedZeroInfNanPreserveFloat32;
    VkBool32                              shaderSignedZeroInfNanPreserveFloat64;
    VkBool32                              shaderDenormPreserveFloat16;
    VkBool32                              shaderDenormPreserveFloat32;
    VkBool32                              shaderDenormPreserveFloat64;
    VkBool32                              shaderDenormFlushToZeroFloat16;
    VkBool32                              shaderDenormFlushToZeroFloat32;
    VkBool32                              shaderDenormFlushToZeroFloat64;
    VkBool32                              shaderRoundingModeRTEFloat16;
    VkBool32                              shaderRoundingModeRTEFloat32;
    VkBool32                              shaderRoundingModeRTEFloat64;
    VkBool32                              shaderRoundingModeRTZFloat16;
    VkBool32                              shaderRoundingModeRTZFloat32;
    VkBool32                              shaderRoundingModeRTZFloat64;
    uint32_t                              maxUpdateAfterBindDescriptorsInAllPools;
    VkBool32                              shaderUniformBufferArrayNonUniformIndexingNative;
    VkBool32                              shaderSampledImageArrayNonUniformIndexingNative;
    VkBool32                              shaderStorageBufferArrayNonUniformIndexingNative;
    VkBool32                              shaderStorageImageArrayNonUniformIndexingNative;
    VkBool32                              shaderInputAttachmentArrayNonUniformIndexingNative;
    VkBool32                              robustBufferAccessUpdateAfterBind;
    VkBool32                              quadDivergentImplicitLod;
    uint32_t                              maxPerStageDescriptorUpdateAfterBindSamplers;
    uint32_t                              maxPerStageDescriptorUpdateAfterBindUniformBuffers;
    uint32_t                              maxPerStageDescriptorUpdateAfterBindStorageBuffers;
    uint32_t                              maxPerStageDescriptorUpdateAfterBindSampledImages;
    uint32_t                              maxPerStageDescriptorUpdateAfterBindStorageImages;
    uint32_t                              maxPerStageDescriptorUpdateAfterBindInputAttachments;
    uint32_t                              maxPerStageUpdateAfterBindResources;
    uint32_t                              maxDescriptorSetUpdateAfterBindSamplers;
    uint32_t                              maxDescriptorSetUpdateAfterBindUniformBuffers;
    uint32_t                              maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
    uint32_t                              maxDescriptorSetUpdateAfterBindStorageBuffers;
    uint32_t                              maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
    uint32_t                              maxDescriptorSetUpdateAfterBindSampledImages;
    uint32_t                              maxDescriptorSetUpdateAfterBindStorageImages;
    uint32_t                              maxDescriptorSetUpdateAfterBindInputAttachments;
    VkResolveModeFlags                supportedDepthResolveModes;
    VkResolveModeFlags                supportedStencilResolveModes;
    VkBool32                              independentResolveNone;
    VkBool32                              independentResolve;
    VkBool32                              filterMinmaxSingleComponentFormats;
    VkBool32                              filterMinmaxImageComponentMapping;
    uint64_t                              maxTimelineSemaphoreValueDifference;
    VkSampleCountFlags   framebufferIntegerColorSampleCounts;
} VkPhysicalDeviceVulkan12Properties;

typedef struct VkPhysicalDeviceVulkan13Features {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           robustImageAccess;
    VkBool32                           inlineUniformBlock;
    VkBool32                           descriptorBindingInlineUniformBlockUpdateAfterBind;
    VkBool32                           pipelineCreationCacheControl;
    VkBool32                           privateData;
    VkBool32                           shaderDemoteToHelperInvocation;
    VkBool32                           shaderTerminateInvocation;
    VkBool32                           subgroupSizeControl;
    VkBool32                           computeFullSubgroups;
    VkBool32                           synchronization2;
    VkBool32                           textureCompressionASTC_HDR;
    VkBool32                           shaderZeroInitializeWorkgroupMemory;
    VkBool32                           dynamicRendering;
    VkBool32                           shaderIntegerDotProduct;
    VkBool32                           maintenance4;
} VkPhysicalDeviceVulkan13Features;

typedef struct VkPhysicalDeviceVulkan13Properties {
    VkStructureType   sType;
    void *                           pNext;
    uint32_t   minSubgroupSize;
    uint32_t   maxSubgroupSize;
    uint32_t   maxComputeWorkgroupSubgroups;
    VkShaderStageFlags           requiredSubgroupSizeStages;
    uint32_t                         maxInlineUniformBlockSize;
    uint32_t                         maxPerStageDescriptorInlineUniformBlocks;
    uint32_t                         maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
    uint32_t                         maxDescriptorSetInlineUniformBlocks;
    uint32_t                         maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
    uint32_t                         maxInlineUniformTotalSize;
    VkBool32                         integerDotProduct8BitUnsignedAccelerated;
    VkBool32                         integerDotProduct8BitSignedAccelerated;
    VkBool32                         integerDotProduct8BitMixedSignednessAccelerated;
    VkBool32                         integerDotProduct4x8BitPackedUnsignedAccelerated;
    VkBool32                         integerDotProduct4x8BitPackedSignedAccelerated;
    VkBool32                         integerDotProduct4x8BitPackedMixedSignednessAccelerated;
    VkBool32                         integerDotProduct16BitUnsignedAccelerated;
    VkBool32                         integerDotProduct16BitSignedAccelerated;
    VkBool32                         integerDotProduct16BitMixedSignednessAccelerated;
    VkBool32                         integerDotProduct32BitUnsignedAccelerated;
    VkBool32                         integerDotProduct32BitSignedAccelerated;
    VkBool32                         integerDotProduct32BitMixedSignednessAccelerated;
    VkBool32                         integerDotProduct64BitUnsignedAccelerated;
    VkBool32                         integerDotProduct64BitSignedAccelerated;
    VkBool32                         integerDotProduct64BitMixedSignednessAccelerated;
    VkBool32                         integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
    VkBool32                         integerDotProductAccumulatingSaturating8BitSignedAccelerated;
    VkBool32                         integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
    VkBool32                         integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
    VkBool32                         integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
    VkBool32                         integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
    VkBool32                         integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
    VkBool32                         integerDotProductAccumulatingSaturating16BitSignedAccelerated;
    VkBool32                         integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
    VkBool32                         integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
    VkBool32                         integerDotProductAccumulatingSaturating32BitSignedAccelerated;
    VkBool32                         integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
    VkBool32                         integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
    VkBool32                         integerDotProductAccumulatingSaturating64BitSignedAccelerated;
    VkBool32                         integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
    VkDeviceSize                 storageTexelBufferOffsetAlignmentBytes;
    VkBool32                       storageTexelBufferOffsetSingleTexelAlignment;
    VkDeviceSize                 uniformTexelBufferOffsetAlignmentBytes;
    VkBool32                       uniformTexelBufferOffsetSingleTexelAlignment;
    VkDeviceSize                     maxBufferSize;
} VkPhysicalDeviceVulkan13Properties;

typedef struct VkPhysicalDeviceVulkan14Features {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           globalPriorityQuery;
    VkBool32                           shaderSubgroupRotate;
    VkBool32                           shaderSubgroupRotateClustered;
    VkBool32                           shaderFloatControls2;
    VkBool32                           shaderExpectAssume;
    VkBool32                           rectangularLines;
    VkBool32                           bresenhamLines;
    VkBool32                           smoothLines;
    VkBool32                           stippledRectangularLines;
    VkBool32                           stippledBresenhamLines;
    VkBool32                           stippledSmoothLines;
    VkBool32                           vertexAttributeInstanceRateDivisor;
    VkBool32                           vertexAttributeInstanceRateZeroDivisor;
    VkBool32                           indexTypeUint8;
    VkBool32                           dynamicRenderingLocalRead;
    VkBool32                           maintenance5;
    VkBool32                           maintenance6;
    VkBool32                           pipelineProtectedAccess;
    VkBool32                           pipelineRobustness;
    VkBool32                           hostImageCopy;
    VkBool32                           pushDescriptor;
} VkPhysicalDeviceVulkan14Features;

typedef struct VkPhysicalDeviceVulkan14Properties {
    VkStructureType   sType;
    void *                                                       pNext;
    uint32_t                                                    lineSubPixelPrecisionBits;
    uint32_t                                                     maxVertexAttribDivisor;
    VkBool32                                                     supportsNonZeroFirstInstance;
    uint32_t                                                     maxPushDescriptors;
    VkBool32                                                     dynamicRenderingLocalReadDepthStencilAttachments;
    VkBool32                                                     dynamicRenderingLocalReadMultisampledAttachments;
    VkBool32                                                     earlyFragmentMultisampleCoverageAfterSampleCounting;
    VkBool32                                                     earlyFragmentSampleMaskTestBeforeSampleCounting;
    VkBool32                                                     depthStencilSwizzleOneSupport;
    VkBool32                                                   polygonModePointSize;
    VkBool32                                                     nonStrictSinglePixelWideLinesUseParallelogram;
    VkBool32                                                     nonStrictWideLinesUseParallelogram;
    VkBool32                                                     blockTexelViewCompatibleMultipleLayers;
    uint32_t                                                     maxCombinedImageSamplerDescriptorCount;
    VkBool32                                                     fragmentShadingRateClampCombinerInputs;
    VkPipelineRobustnessBufferBehavior                         defaultRobustnessStorageBuffers;
    VkPipelineRobustnessBufferBehavior                         defaultRobustnessUniformBuffers;
    VkPipelineRobustnessBufferBehavior                         defaultRobustnessVertexInputs;
    VkPipelineRobustnessImageBehavior                          defaultRobustnessImages;
    uint32_t                                  copySrcLayoutCount;
    VkImageLayout *  pCopySrcLayouts;
    uint32_t                                  copyDstLayoutCount;
    VkImageLayout *  pCopyDstLayouts;
    uint8_t                                   optimalTilingLayoutUUID [ VK_UUID_SIZE ];
    VkBool32                                                     identicalMemoryTypeRequirements;
} VkPhysicalDeviceVulkan14Properties;

typedef struct VkPipelineCompilerControlCreateInfoAMD {
    VkStructureType     sType;
    const  void *                                                                             pNext;
    VkPipelineCompilerControlFlagsAMD                                        compilerControlFlags;
} VkPipelineCompilerControlCreateInfoAMD;

typedef struct VkPhysicalDeviceCoherentMemoryFeaturesAMD {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             deviceCoherentMemory;
} VkPhysicalDeviceCoherentMemoryFeaturesAMD;

typedef struct VkPhysicalDeviceToolProperties {
    VkStructureType   sType;
    void *       pNext;
    char   name [ VK_MAX_EXTENSION_NAME_SIZE ];
    char   version [ VK_MAX_EXTENSION_NAME_SIZE ];
    VkToolPurposeFlags           purposes;
    char   description [ VK_MAX_DESCRIPTION_SIZE ];
    char   layer [ VK_MAX_EXTENSION_NAME_SIZE ];
} VkPhysicalDeviceToolProperties;

typedef struct VkPhysicalDeviceToolProperties  VkPhysicalDeviceToolPropertiesEXT;

typedef struct VkPhysicalDeviceCustomBorderColorFeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             customBorderColors;
    VkBool32                             customBorderColorWithoutFormat;
} VkPhysicalDeviceCustomBorderColorFeaturesEXT;

typedef struct VkSamplerBorderColorComponentMappingCreateInfoEXT {
    VkStructureType   sType;
    const  void *                                                                        pNext;
    VkComponentMapping                                                                                  components;
    VkBool32                                                                                            srgb;
} VkSamplerBorderColorComponentMappingCreateInfoEXT;

typedef struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                       borderColorSwizzle;
    VkBool32                       borderColorSwizzleFromImage;
} VkPhysicalDeviceBorderColorSwizzleFeaturesEXT;

typedef union VkDeviceOrHostAddressKHR {
    VkDeviceAddress              deviceAddress;
    void *                       hostAddress;
} VkDeviceOrHostAddressKHR;

typedef union VkDeviceOrHostAddressConstKHR {
    VkDeviceAddress              deviceAddress;
    const  void *                 hostAddress;
} VkDeviceOrHostAddressConstKHR;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef union VkDeviceOrHostAddressConstAMDX {
    VkDeviceAddress              deviceAddress;
    const  void *                 hostAddress;
} VkDeviceOrHostAddressConstAMDX;
#endif

typedef struct VkAccelerationStructureGeometryTrianglesDataKHR {
    VkStructureType   sType;
    const  void *                    pNext;
    VkFormat                                        vertexFormat;
    VkDeviceOrHostAddressConstKHR                   vertexData;
    VkDeviceSize                                    vertexStride;
    uint32_t                                        maxVertex;
    VkIndexType                                     indexType;
    VkDeviceOrHostAddressConstKHR                   indexData;
    VkDeviceOrHostAddressConstKHR                   transformData;
} VkAccelerationStructureGeometryTrianglesDataKHR;

typedef struct VkAccelerationStructureGeometryAabbsDataKHR {
    VkStructureType   sType;
    const  void *                            pNext;
    VkDeviceOrHostAddressConstKHR           data;
    VkDeviceSize                            stride;
} VkAccelerationStructureGeometryAabbsDataKHR;

typedef struct VkAccelerationStructureGeometryInstancesDataKHR {
    VkStructureType   sType;
    const  void *                            pNext;
    VkBool32                                arrayOfPointers;
    VkDeviceOrHostAddressConstKHR           data;
} VkAccelerationStructureGeometryInstancesDataKHR;

typedef struct VkAccelerationStructureGeometryLinearSweptSpheresDataNV {
    VkStructureType   sType;
    const  void *                          pNext;
    VkFormat                                              vertexFormat;
    VkDeviceOrHostAddressConstKHR                         vertexData;
    VkDeviceSize                                          vertexStride;
    VkFormat                                              radiusFormat;
    VkDeviceOrHostAddressConstKHR                         radiusData;
    VkDeviceSize                                          radiusStride;
    VkIndexType                                           indexType;
    VkDeviceOrHostAddressConstKHR                         indexData;
    VkDeviceSize                                          indexStride;
    VkRayTracingLssIndexingModeNV                         indexingMode;
    VkRayTracingLssPrimitiveEndCapsModeNV                 endCapsMode;
} VkAccelerationStructureGeometryLinearSweptSpheresDataNV;

typedef struct VkAccelerationStructureGeometrySpheresDataNV {
    VkStructureType   sType;
    const  void *                          pNext;
    VkFormat                                              vertexFormat;
    VkDeviceOrHostAddressConstKHR                         vertexData;
    VkDeviceSize                                          vertexStride;
    VkFormat                                              radiusFormat;
    VkDeviceOrHostAddressConstKHR                         radiusData;
    VkDeviceSize                                          radiusStride;
    VkIndexType                                           indexType;
    VkDeviceOrHostAddressConstKHR                         indexData;
    VkDeviceSize                                          indexStride;
} VkAccelerationStructureGeometrySpheresDataNV;

typedef union VkAccelerationStructureGeometryDataKHR {
    VkAccelerationStructureGeometryTrianglesDataKHR   triangles;
    VkAccelerationStructureGeometryAabbsDataKHR           aabbs;
    VkAccelerationStructureGeometryInstancesDataKHR   instances;
} VkAccelerationStructureGeometryDataKHR;

typedef struct VkAccelerationStructureGeometryKHR {
    VkStructureType   sType;
    const  void *                             pNext;
    VkGeometryTypeKHR                        geometryType;
    VkAccelerationStructureGeometryDataKHR   geometry;
    VkGeometryFlagsKHR       flags;
} VkAccelerationStructureGeometryKHR;

typedef struct VkAccelerationStructureBuildGeometryInfoKHR {
    VkStructureType   sType;
    const  void *                                                         pNext;
    VkAccelerationStructureTypeKHR                                       type;
    VkBuildAccelerationStructureFlagsKHR                 flags;
    VkBuildAccelerationStructureModeKHR            mode;
    VkAccelerationStructureKHR                     srcAccelerationStructure;
    VkAccelerationStructureKHR                     dstAccelerationStructure;
    uint32_t                                             geometryCount;
    const  VkAccelerationStructureGeometryKHR *     pGeometries;
    const  VkAccelerationStructureGeometryKHR * const*    ppGeometries;
    VkDeviceOrHostAddressKHR                                             scratchData;
} VkAccelerationStructureBuildGeometryInfoKHR;

typedef struct VkAccelerationStructureCreateInfoKHR {
    VkStructureType   sType;
    const  void *                              pNext;
    VkAccelerationStructureCreateFlagsKHR     createFlags;
    VkBuffer                                                  buffer;
    VkDeviceSize                                              offset;
    VkDeviceSize                                              size;
    VkAccelerationStructureTypeKHR                            type;
    VkDeviceAddress                           deviceAddress;
} VkAccelerationStructureCreateInfoKHR;

typedef struct VkAccelerationStructureInstanceKHR {
    VkTransformMatrixKHR                                      transform;
    uint32_t                                                  instanceCustomIndex :24;
    uint32_t                                                  mask :8;
    uint32_t                                                  instanceShaderBindingTableRecordOffset :24;
    VkGeometryInstanceFlagsKHR                flags :8;
    uint64_t                                                  accelerationStructureReference;
} VkAccelerationStructureInstanceKHR;

typedef struct VkAccelerationStructureInstanceKHR  VkAccelerationStructureInstanceNV;

typedef struct VkCopyAccelerationStructureToMemoryInfoKHR {
    VkStructureType   sType;
    const  void *                                             pNext;
    VkAccelerationStructureKHR                               src;
    VkDeviceOrHostAddressKHR                                 dst;
    VkCopyAccelerationStructureModeKHR                       mode;
} VkCopyAccelerationStructureToMemoryInfoKHR;

typedef struct VkCopyMemoryToAccelerationStructureInfoKHR {
    VkStructureType   sType;
    const  void *                                             pNext;
    VkDeviceOrHostAddressConstKHR                            src;
    VkAccelerationStructureKHR                               dst;
    VkCopyAccelerationStructureModeKHR                       mode;
} VkCopyMemoryToAccelerationStructureInfoKHR;

typedef struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             extendedDynamicState;
} VkPhysicalDeviceExtendedDynamicStateFeaturesEXT;

typedef struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                       extendedDynamicState2;
    VkBool32                       extendedDynamicState2LogicOp;
    VkBool32                       extendedDynamicState2PatchControlPoints;
} VkPhysicalDeviceExtendedDynamicState2FeaturesEXT;

typedef struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                       extendedDynamicState3TessellationDomainOrigin;
    VkBool32                       extendedDynamicState3DepthClampEnable;
    VkBool32                       extendedDynamicState3PolygonMode;
    VkBool32                       extendedDynamicState3RasterizationSamples;
    VkBool32                       extendedDynamicState3SampleMask;
    VkBool32                       extendedDynamicState3AlphaToCoverageEnable;
    VkBool32                       extendedDynamicState3AlphaToOneEnable;
    VkBool32                       extendedDynamicState3LogicOpEnable;
    VkBool32                       extendedDynamicState3ColorBlendEnable;
    VkBool32                       extendedDynamicState3ColorBlendEquation;
    VkBool32                       extendedDynamicState3ColorWriteMask;
    VkBool32                       extendedDynamicState3RasterizationStream;
    VkBool32                       extendedDynamicState3ConservativeRasterizationMode;
    VkBool32                       extendedDynamicState3ExtraPrimitiveOverestimationSize;
    VkBool32                       extendedDynamicState3DepthClipEnable;
    VkBool32                       extendedDynamicState3SampleLocationsEnable;
    VkBool32                       extendedDynamicState3ColorBlendAdvanced;
    VkBool32                       extendedDynamicState3ProvokingVertexMode;
    VkBool32                       extendedDynamicState3LineRasterizationMode;
    VkBool32                       extendedDynamicState3LineStippleEnable;
    VkBool32                       extendedDynamicState3DepthClipNegativeOneToOne;
    VkBool32                       extendedDynamicState3ViewportWScalingEnable;
    VkBool32                       extendedDynamicState3ViewportSwizzle;
    VkBool32                       extendedDynamicState3CoverageToColorEnable;
    VkBool32                       extendedDynamicState3CoverageToColorLocation;
    VkBool32                       extendedDynamicState3CoverageModulationMode;
    VkBool32                       extendedDynamicState3CoverageModulationTableEnable;
    VkBool32                       extendedDynamicState3CoverageModulationTable;
    VkBool32                       extendedDynamicState3CoverageReductionMode;
    VkBool32                       extendedDynamicState3RepresentativeFragmentTestEnable;
    VkBool32                       extendedDynamicState3ShadingRateImageEnable;
} VkPhysicalDeviceExtendedDynamicState3FeaturesEXT;

typedef struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32       dynamicPrimitiveTopologyUnrestricted;
} VkPhysicalDeviceExtendedDynamicState3PropertiesEXT;

typedef struct VkColorBlendAdvancedEXT {
    VkBlendOp                     advancedBlendOp;
    VkBool32                      srcPremultiplied;
    VkBool32                      dstPremultiplied;
    VkBlendOverlapEXT             blendOverlap;
    VkBool32                      clampResults;
} VkColorBlendAdvancedEXT;

typedef struct VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV {
    VkStructureType   sType;
    void *                           pNext;
    VkBool32                                         partitionedAccelerationStructure;
} VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV;

typedef struct VkBuildPartitionedAccelerationStructureIndirectCommandNV {
    VkPartitionedAccelerationStructureOpTypeNV      opType;
    uint32_t                                         argCount;
    VkStridedDeviceAddressNV                        argData;
} VkBuildPartitionedAccelerationStructureIndirectCommandNV;

typedef struct VkPartitionedAccelerationStructureFlagsNV {
    VkStructureType   sType;
    void *                            pNext;
    VkBool32                                          enablePartitionTranslation;
} VkPartitionedAccelerationStructureFlagsNV;

typedef struct VkPartitionedAccelerationStructureWriteInstanceDataNV {
    VkTransformMatrixKHR                             transform;
    float                                            explicitAABB [6];
    uint32_t                                         instanceID;
    uint32_t                                         instanceMask;
    uint32_t                                         instanceContributionToHitGroupIndex;
    VkPartitionedAccelerationStructureInstanceFlagsNV   instanceFlags;
    uint32_t                                         instanceIndex;
    uint32_t                                         partitionIndex;
    VkDeviceAddress                                  accelerationStructure;
} VkPartitionedAccelerationStructureWriteInstanceDataNV;

typedef struct VkPartitionedAccelerationStructureUpdateInstanceDataNV {
    uint32_t                                         instanceIndex;
    uint32_t                                         instanceContributionToHitGroupIndex;
    VkDeviceAddress                                  accelerationStructure;
} VkPartitionedAccelerationStructureUpdateInstanceDataNV;

typedef struct VkWriteDescriptorSetPartitionedAccelerationStructureNV {
    VkStructureType   sType;
    void *                           pNext;
    uint32_t                                         accelerationStructureCount;
    const  VkDeviceAddress *  pAccelerationStructures;
} VkWriteDescriptorSetPartitionedAccelerationStructureNV;

typedef struct VkPartitionedAccelerationStructureInstancesInputNV {
    VkStructureType   sType;
    void *                           pNext;
    VkBuildAccelerationStructureFlagsKHR   flags;
    uint32_t                                         instanceCount;
    uint32_t                                         maxInstancePerPartitionCount;
    uint32_t                                         partitionCount;
    uint32_t                                         maxInstanceInGlobalPartitionCount;
} VkPartitionedAccelerationStructureInstancesInputNV;

typedef struct VkBuildPartitionedAccelerationStructureInfoNV {
    VkStructureType   sType;
    void *                           pNext;
    VkPartitionedAccelerationStructureInstancesInputNV   input;
    VkDeviceAddress                                  srcAccelerationStructureData;
    VkDeviceAddress                                  dstAccelerationStructureData;
    VkDeviceAddress                                  scratchData;
    VkDeviceAddress                                  srcInfos;
    VkDeviceAddress                                  srcInfosCount;
} VkBuildPartitionedAccelerationStructureInfoNV;

typedef struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
    VkStructureType   sType;
    void *     pNext;
    VkBool32                         diagnosticsConfig;
} VkPhysicalDeviceDiagnosticsConfigFeaturesNV;

typedef struct VkDeviceDiagnosticsConfigCreateInfoNV {
    VkStructureType   sType;
    const  void *                                          pNext;
    VkDeviceDiagnosticsConfigFlagsNV      flags;
} VkDeviceDiagnosticsConfigCreateInfoNV;

typedef struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
    VkStructureType   sType;
    void *           pNext;
    VkBool32         shaderZeroInitializeWorkgroupMemory;
} VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;

typedef struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures  VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR;

typedef struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
    VkStructureType   sType;
    void *     pNext;
    VkBool32   shaderSubgroupUniformControlFlow;
} VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;

typedef struct VkPhysicalDeviceRobustness2FeaturesKHR {
    VkStructureType   sType;
    void *               pNext;
    VkBool32                             robustBufferAccess2;
    VkBool32                             robustImageAccess2;
    VkBool32                             nullDescriptor;
} VkPhysicalDeviceRobustness2FeaturesKHR;

typedef struct VkPhysicalDeviceRobustness2FeaturesKHR  VkPhysicalDeviceRobustness2FeaturesEXT;

typedef struct VkPhysicalDeviceRobustness2PropertiesKHR {
    VkStructureType   sType;
    void *               pNext;
    VkDeviceSize      robustStorageBufferAccessSizeAlignment;
    VkDeviceSize      robustUniformBufferAccessSizeAlignment;
} VkPhysicalDeviceRobustness2PropertiesKHR;

typedef struct VkPhysicalDeviceRobustness2PropertiesKHR  VkPhysicalDeviceRobustness2PropertiesEXT;

typedef struct VkPhysicalDeviceImageRobustnessFeatures {
    VkStructureType   sType;
    void *               pNext;
    VkBool32                             robustImageAccess;
} VkPhysicalDeviceImageRobustnessFeatures;

typedef struct VkPhysicalDeviceImageRobustnessFeatures  VkPhysicalDeviceImageRobustnessFeaturesEXT;

typedef struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             workgroupMemoryExplicitLayout;
    VkBool32                             workgroupMemoryExplicitLayoutScalarBlockLayout;
    VkBool32                             workgroupMemoryExplicitLayout8BitAccess;
    VkBool32                             workgroupMemoryExplicitLayout16BitAccess;
} VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPhysicalDevicePortabilitySubsetFeaturesKHR {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             constantAlphaColorBlendFactors;
    VkBool32                             events;
    VkBool32                             imageViewFormatReinterpretation;
    VkBool32                             imageViewFormatSwizzle;
    VkBool32                             imageView2DOn3DImage;
    VkBool32                             multisampleArrayImage;
    VkBool32                             mutableComparisonSamplers;
    VkBool32                             pointPolygons;
    VkBool32                             samplerMipLodBias;
    VkBool32                             separateStencilMaskRef;
    VkBool32                             shaderSampleRateInterpolationFunctions;
    VkBool32                             tessellationIsolines;
    VkBool32                             tessellationPointMode;
    VkBool32                             triangleFans;
    VkBool32                             vertexAttributeAccessBeyondStride;
} VkPhysicalDevicePortabilitySubsetFeaturesKHR;
#endif

typedef struct VkPhysicalDevice4444FormatsFeaturesEXT {
    VkStructureType   sType;
    void *               pNext;
    VkBool32                             formatA4R4G4B4;
    VkBool32                             formatA4B4G4R4;
} VkPhysicalDevice4444FormatsFeaturesEXT;

typedef struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI {
    VkStructureType   sType;
    void *               pNext;
    VkBool32                             subpassShading;
} VkPhysicalDeviceSubpassShadingFeaturesHUAWEI;

typedef struct VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI {
    VkStructureType    sType;
    void *  pNext;
    VkBool32   clustercullingShader;
    VkBool32   multiviewClusterCullingShader;
} VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI;

typedef struct VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI {
    VkStructureType    sType;
    void *  pNext;
    VkBool32   clusterShadingRate;
} VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI;

typedef struct VkBufferCopy2 {
    VkStructureType   sType;
    const  void *         pNext;
    VkDeviceSize                         srcOffset;
    VkDeviceSize                         dstOffset;
    VkDeviceSize   size;
} VkBufferCopy2;

typedef struct VkBufferCopy2  VkBufferCopy2KHR;

typedef struct VkImageCopy2 {
    VkStructureType   sType;
    const  void *         pNext;
    VkImageSubresourceLayers             srcSubresource;
    VkOffset3D                           srcOffset;
    VkImageSubresourceLayers             dstSubresource;
    VkOffset3D                           dstOffset;
    VkExtent3D                           extent;
} VkImageCopy2;

typedef struct VkImageCopy2  VkImageCopy2KHR;

typedef struct VkImageBlit2 {
    VkStructureType   sType;
    const  void *         pNext;
    VkImageSubresourceLayers             srcSubresource;
    VkOffset3D                           srcOffsets [2];
    VkImageSubresourceLayers             dstSubresource;
    VkOffset3D                           dstOffsets [2];
} VkImageBlit2;

typedef struct VkImageBlit2  VkImageBlit2KHR;

typedef struct VkBufferImageCopy2 {
    VkStructureType   sType;
    const  void *         pNext;
    VkDeviceSize                         bufferOffset;
    uint32_t                             bufferRowLength;
    uint32_t                             bufferImageHeight;
    VkImageSubresourceLayers             imageSubresource;
    VkOffset3D                           imageOffset;
    VkExtent3D                           imageExtent;
} VkBufferImageCopy2;

typedef struct VkBufferImageCopy2  VkBufferImageCopy2KHR;

typedef struct VkImageResolve2 {
    VkStructureType   sType;
    const  void *         pNext;
    VkImageSubresourceLayers             srcSubresource;
    VkOffset3D                           srcOffset;
    VkImageSubresourceLayers             dstSubresource;
    VkOffset3D                           dstOffset;
    VkExtent3D                           extent;
} VkImageResolve2;

typedef struct VkImageResolve2  VkImageResolve2KHR;

typedef struct VkCopyBufferInfo2 {
    VkStructureType   sType;
    const  void *         pNext;
    VkBuffer                             srcBuffer;
    VkBuffer                             dstBuffer;
    uint32_t                             regionCount;
    const  VkBufferCopy2 *  pRegions;
} VkCopyBufferInfo2;

typedef struct VkCopyBufferInfo2  VkCopyBufferInfo2KHR;

typedef struct VkCopyImageInfo2 {
    VkStructureType   sType;
    const  void *         pNext;
    VkImage                              srcImage;
    VkImageLayout                        srcImageLayout;
    VkImage                              dstImage;
    VkImageLayout                        dstImageLayout;
    uint32_t                             regionCount;
    const  VkImageCopy2 *  pRegions;
} VkCopyImageInfo2;

typedef struct VkCopyImageInfo2  VkCopyImageInfo2KHR;

typedef struct VkBlitImageInfo2 {
    VkStructureType   sType;
    const  void *             pNext;
    VkImage                                  srcImage;
    VkImageLayout                            srcImageLayout;
    VkImage                                  dstImage;
    VkImageLayout                            dstImageLayout;
    uint32_t                                 regionCount;
    const  VkImageBlit2 *   pRegions;
    VkFilter                                 filter;
} VkBlitImageInfo2;

typedef struct VkBlitImageInfo2  VkBlitImageInfo2KHR;

typedef struct VkCopyBufferToImageInfo2 {
    VkStructureType   sType;
    const  void *                  pNext;
    VkBuffer                                      srcBuffer;
    VkImage                                       dstImage;
    VkImageLayout                                 dstImageLayout;
    uint32_t                                      regionCount;
    const  VkBufferImageCopy2 *  pRegions;
} VkCopyBufferToImageInfo2;

typedef struct VkCopyBufferToImageInfo2  VkCopyBufferToImageInfo2KHR;

typedef struct VkCopyImageToBufferInfo2 {
    VkStructureType   sType;
    const  void *                    pNext;
    VkImage                                         srcImage;
    VkImageLayout                                   srcImageLayout;
    VkBuffer                                        dstBuffer;
    uint32_t                                        regionCount;
    const  VkBufferImageCopy2 *    pRegions;
} VkCopyImageToBufferInfo2;

typedef struct VkCopyImageToBufferInfo2  VkCopyImageToBufferInfo2KHR;

typedef struct VkResolveImageInfo2 {
    VkStructureType   sType;
    const  void *                 pNext;
    VkImage                                      srcImage;
    VkImageLayout                                srcImageLayout;
    VkImage                                      dstImage;
    VkImageLayout                                dstImageLayout;
    uint32_t                                     regionCount;
    const  VkImageResolve2 *    pRegions;
} VkResolveImageInfo2;

typedef struct VkResolveImageInfo2  VkResolveImageInfo2KHR;

typedef struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
    VkStructureType   sType;
    void *                                pNext;
    VkBool32                              shaderImageInt64Atomics;
    VkBool32                              sparseImageInt64Atomics;
} VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT;

typedef struct VkFragmentShadingRateAttachmentInfoKHR {
    VkStructureType   sType;
    const  void *                 pNext;
    const  VkAttachmentReference2 *  pFragmentShadingRateAttachment;
    VkExtent2D                   shadingRateAttachmentTexelSize;
} VkFragmentShadingRateAttachmentInfoKHR;

typedef struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR {
    VkStructureType   sType;
    void *               pNext;
    VkBool32             pipelineFragmentShadingRate;
    VkBool32             primitiveFragmentShadingRate;
    VkBool32             attachmentFragmentShadingRate;
} VkPhysicalDeviceFragmentShadingRateFeaturesKHR;

typedef struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR {
    VkStructureType   sType;
    void *                   pNext;
    VkExtent2D               minFragmentShadingRateAttachmentTexelSize;
    VkExtent2D               maxFragmentShadingRateAttachmentTexelSize;
    uint32_t                  maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
    VkBool32                 primitiveFragmentShadingRateWithMultipleViewports;
    VkBool32                 layeredShadingRateAttachments;
    VkBool32                 fragmentShadingRateNonTrivialCombinerOps;
    VkExtent2D               maxFragmentSize;
    uint32_t                  maxFragmentSizeAspectRatio;
    uint32_t                     maxFragmentShadingRateCoverageSamples;
    VkSampleCountFlagBits    maxFragmentShadingRateRasterizationSamples;
    VkBool32                 fragmentShadingRateWithShaderDepthStencilWrites;
    VkBool32                 fragmentShadingRateWithSampleMask;
    VkBool32                 fragmentShadingRateWithShaderSampleMask;
    VkBool32                 fragmentShadingRateWithConservativeRasterization;
    VkBool32                 fragmentShadingRateWithFragmentShaderInterlock;
    VkBool32                 fragmentShadingRateWithCustomSampleLocations;
    VkBool32                 fragmentShadingRateStrictMultiplyCombiner;
} VkPhysicalDeviceFragmentShadingRatePropertiesKHR;

typedef struct VkPhysicalDeviceFragmentShadingRateKHR {
    VkStructureType   sType;
    void *               pNext;
    VkSampleCountFlags   sampleCounts;
    VkExtent2D           fragmentSize;
} VkPhysicalDeviceFragmentShadingRateKHR;

typedef struct VkPhysicalDeviceShaderTerminateInvocationFeatures {
    VkStructureType   sType;
    void *     pNext;
    VkBool32                                         shaderTerminateInvocation;
} VkPhysicalDeviceShaderTerminateInvocationFeatures;

typedef struct VkPhysicalDeviceShaderTerminateInvocationFeatures  VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR;

typedef struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
    VkStructureType   sType;
    void *               pNext;
    VkBool32                             fragmentShadingRateEnums;
    VkBool32                             supersampleFragmentShadingRates;
    VkBool32                             noInvocationFragmentShadingRates;
} VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV;

typedef struct VkAccelerationStructureBuildSizesInfoKHR {
    VkStructureType   sType;
    const  void *         pNext;
    VkDeviceSize                         accelerationStructureSize;
    VkDeviceSize                         updateScratchSize;
    VkDeviceSize                         buildScratchSize;
} VkAccelerationStructureBuildSizesInfoKHR;

typedef struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT {
    VkStructureType   sType;
    void *                      pNext;
    VkBool32                                          image2DViewOf3D;
    VkBool32                                          sampler2DViewOf3D;
} VkPhysicalDeviceImage2DViewOf3DFeaturesEXT;

typedef struct VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT {
    VkStructureType   sType;
    void *                      pNext;
    VkBool32                                          imageSlicedViewOf3D;
} VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT;

typedef struct VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT {
    VkStructureType   sType;
    void *      pNext;
    VkBool32                                          attachmentFeedbackLoopDynamicState;
} VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT;

typedef struct VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT {
    VkStructureType   sType;
    void *      pNext;
    VkBool32                                          legacyVertexAttributes;
} VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT;

typedef struct VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT {
    VkStructureType   sType;
    void *      pNext;
    VkBool32                          nativeUnalignedPerformance;
} VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT;

typedef struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT {
    VkStructureType   sType;
    void *      pNext;
    VkBool32                                          mutableDescriptorType;
} VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT;

typedef struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT  VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE;

typedef struct VkPhysicalDeviceDepthClipControlFeaturesEXT {
    VkStructureType   sType;
    void *  pNext;
    VkBool32                                      depthClipControl;
} VkPhysicalDeviceDepthClipControlFeaturesEXT;

typedef struct VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT {
    VkStructureType   sType;
    void *  pNext;
    VkBool32                                      zeroInitializeDeviceMemory;
} VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT;

typedef struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT {
    VkStructureType   sType;
    void *  pNext;
    VkBool32                                      deviceGeneratedCommands;
    VkBool32                                      dynamicGeneratedPipelineLayout;
} VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT;

typedef struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT {
    VkStructureType   sType;
    void *                                pNext;
    uint32_t                              maxIndirectPipelineCount;
    uint32_t                              maxIndirectShaderObjectCount;
    uint32_t                              maxIndirectSequenceCount;
    uint32_t                              maxIndirectCommandsTokenCount;
    uint32_t                              maxIndirectCommandsTokenOffset;
    uint32_t                              maxIndirectCommandsIndirectStride;
    VkIndirectCommandsInputModeFlagsEXT   supportedIndirectCommandsInputModes;
    VkShaderStageFlags                supportedIndirectCommandsShaderStages;
    VkShaderStageFlags                supportedIndirectCommandsShaderStagesPipelineBinding;
    VkShaderStageFlags                supportedIndirectCommandsShaderStagesShaderBinding;
    VkBool32                              deviceGeneratedCommandsTransformFeedback;
    VkBool32                              deviceGeneratedCommandsMultiDrawIndirectCount;
} VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT;

typedef struct VkIndirectExecutionSetShaderInfoEXT {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t                                                                  shaderCount;
    const  VkShaderEXT *                                pInitialShaders;
    const  VkIndirectExecutionSetShaderLayoutInfoEXT *   pSetLayoutInfos;
    uint32_t                                                                  maxShaderCount;
    uint32_t                                                  pushConstantRangeCount;
    const  VkPushConstantRange *                  pPushConstantRanges;
} VkIndirectExecutionSetShaderInfoEXT;

typedef union VkIndirectExecutionSetInfoEXT {
    const  VkIndirectExecutionSetPipelineInfoEXT *      pPipelineInfo;
    const  VkIndirectExecutionSetShaderInfoEXT *   pShaderInfo;
} VkIndirectExecutionSetInfoEXT;

typedef struct VkIndirectExecutionSetCreateInfoEXT {
    VkStructureType   sType;
    const  void *  pNext;
    VkIndirectExecutionSetInfoTypeEXT                   type;
    VkIndirectExecutionSetInfoEXT    info;
} VkIndirectExecutionSetCreateInfoEXT;

typedef struct VkGeneratedCommandsInfoEXT {
    VkStructureType   sType;
    const  void *  pNext;
    VkShaderStageFlags                            shaderStages;
    VkIndirectExecutionSetEXT     indirectExecutionSet;
    VkIndirectCommandsLayoutEXT                   indirectCommandsLayout;
    VkDeviceAddress                               indirectAddress;
    VkDeviceSize                                  indirectAddressSize;
    VkDeviceAddress               preprocessAddress;
    VkDeviceSize                                  preprocessSize;
    uint32_t                                      maxSequenceCount;
    VkDeviceAddress               sequenceCountAddress;
    uint32_t                                      maxDrawCount;
} VkGeneratedCommandsInfoEXT;

typedef struct VkDrawIndirectCountIndirectCommandEXT {
    VkDeviceAddress        bufferAddress;
    uint32_t               stride;
    uint32_t               commandCount;
} VkDrawIndirectCountIndirectCommandEXT;

typedef struct VkBindVertexBufferIndirectCommandEXT {
    VkDeviceAddress        bufferAddress;
    uint32_t               size;
    uint32_t               stride;
} VkBindVertexBufferIndirectCommandEXT;

typedef struct VkBindIndexBufferIndirectCommandEXT {
    VkDeviceAddress        bufferAddress;
    uint32_t               size;
    VkIndexType            indexType;
} VkBindIndexBufferIndirectCommandEXT;

typedef struct VkIndirectCommandsPushConstantTokenEXT {
    VkPushConstantRange        updateRange;
} VkIndirectCommandsPushConstantTokenEXT;

typedef struct VkIndirectCommandsExecutionSetTokenEXT {
    VkIndirectExecutionSetInfoTypeEXT          type;
    VkShaderStageFlags                              shaderStages;
} VkIndirectCommandsExecutionSetTokenEXT;

typedef union VkIndirectCommandsTokenDataEXT {
    const  VkIndirectCommandsPushConstantTokenEXT *   pPushConstant;
    const  VkIndirectCommandsVertexBufferTokenEXT *   pVertexBuffer;
    const  VkIndirectCommandsIndexBufferTokenEXT *     pIndexBuffer;
    const  VkIndirectCommandsExecutionSetTokenEXT *   pExecutionSet;
} VkIndirectCommandsTokenDataEXT;

typedef struct VkPipelineViewportDepthClipControlCreateInfoEXT {
    VkStructureType   sType;
    const  void *  pNext;
    VkBool32                      negativeOneToOne;
} VkPipelineViewportDepthClipControlCreateInfoEXT;

typedef struct VkPhysicalDeviceDepthClampControlFeaturesEXT {
    VkStructureType   sType;
    void *  pNext;
    VkBool32                                      depthClampControl;
} VkPhysicalDeviceDepthClampControlFeaturesEXT;

typedef struct VkPipelineViewportDepthClampControlCreateInfoEXT {
    VkStructureType   sType;
    const  void *                     pNext;
    VkDepthClampModeEXT                              depthClampMode;
    const  VkDepthClampRangeEXT *     pDepthClampRange;
} VkPipelineViewportDepthClampControlCreateInfoEXT;

typedef struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             vertexInputDynamicState;
} VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT;

typedef struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             externalMemoryRDMA;
} VkPhysicalDeviceExternalMemoryRDMAFeaturesNV;

typedef struct VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             shaderRelaxedExtendedInstruction;
} VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR;

typedef struct VkPhysicalDeviceColorWriteEnableFeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                       colorWriteEnable;
} VkPhysicalDeviceColorWriteEnableFeaturesEXT;

typedef struct VkPipelineColorWriteCreateInfoEXT {
    VkStructureType   sType;
    const  void *             pNext;
    uint32_t                 attachmentCount;
    const  VkBool32 *   pColorWriteEnables;
} VkPipelineColorWriteCreateInfoEXT;

typedef struct VkMemoryBarrier2 {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineStageFlags2    srcStageMask;
    VkAccessFlags2           srcAccessMask;
    VkPipelineStageFlags2    dstStageMask;
    VkAccessFlags2           dstAccessMask;
} VkMemoryBarrier2;

typedef struct VkMemoryBarrier2  VkMemoryBarrier2KHR;

typedef struct VkImageMemoryBarrier2 {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineStageFlags2    srcStageMask;
    VkAccessFlags2           srcAccessMask;
    VkPipelineStageFlags2    dstStageMask;
    VkAccessFlags2           dstAccessMask;
    VkImageLayout                            oldLayout;
    VkImageLayout                            newLayout;
    uint32_t                                 srcQueueFamilyIndex;
    uint32_t                                 dstQueueFamilyIndex;
    VkImage                                  image;
    VkImageSubresourceRange                  subresourceRange;
} VkImageMemoryBarrier2;

typedef struct VkImageMemoryBarrier2  VkImageMemoryBarrier2KHR;

typedef struct VkBufferMemoryBarrier2 {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineStageFlags2    srcStageMask;
    VkAccessFlags2           srcAccessMask;
    VkPipelineStageFlags2    dstStageMask;
    VkAccessFlags2           dstAccessMask;
    uint32_t                                 srcQueueFamilyIndex;
    uint32_t                                 dstQueueFamilyIndex;
    VkBuffer                                 buffer;
    VkDeviceSize                             offset;
    VkDeviceSize                             size;
} VkBufferMemoryBarrier2;

typedef struct VkBufferMemoryBarrier2  VkBufferMemoryBarrier2KHR;

typedef struct VkMemoryBarrierAccessFlags3KHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkAccessFlags3KHR        srcAccessMask3;
    VkAccessFlags3KHR        dstAccessMask3;
} VkMemoryBarrierAccessFlags3KHR;

typedef struct VkDependencyInfo {
    VkStructureType     sType;
    const  void *                                   pNext;
    VkDependencyFlags                              dependencyFlags;
    uint32_t                                       memoryBarrierCount;
    const  VkMemoryBarrier2 *              pMemoryBarriers;
    uint32_t                                       bufferMemoryBarrierCount;
    const  VkBufferMemoryBarrier2 *  pBufferMemoryBarriers;
    uint32_t                                       imageMemoryBarrierCount;
    const  VkImageMemoryBarrier2 *    pImageMemoryBarriers;
} VkDependencyInfo;

typedef struct VkDependencyInfo  VkDependencyInfoKHR;

typedef struct VkSemaphoreSubmitInfo {
    VkStructureType             sType;
    const  void *                                                 pNext;
    VkSemaphore                                                                  semaphore;
    uint64_t                                                                     value;
    VkPipelineStageFlags2                                        stageMask;
    uint32_t                                                                     deviceIndex;
} VkSemaphoreSubmitInfo;

typedef struct VkSemaphoreSubmitInfo  VkSemaphoreSubmitInfoKHR;

typedef struct VkSubmitInfo2 {
    VkStructureType                     sType;
    const  void *                                                 pNext;
    VkSubmitFlags                                                flags;
    uint32_t                                                     waitSemaphoreInfoCount;
    const  VkSemaphoreSubmitInfo *                   pWaitSemaphoreInfos;
    uint32_t                                                     commandBufferInfoCount;
    const  VkCommandBufferSubmitInfo *               pCommandBufferInfos;
    uint32_t                                                     signalSemaphoreInfoCount;
    const  VkSemaphoreSubmitInfo *                 pSignalSemaphoreInfos;
} VkSubmitInfo2;

typedef struct VkSubmitInfo2  VkSubmitInfo2KHR;

typedef struct VkQueueFamilyCheckpointProperties2NV {
    VkStructureType   sType;
    void *            pNext;
    VkPipelineStageFlags2   checkpointExecutionStageMask;
} VkQueueFamilyCheckpointProperties2NV;

typedef struct VkCheckpointData2NV {
    VkStructureType   sType;
    void *        pNext;
    VkPipelineStageFlags2         stage;
    void *  pCheckpointMarker;
} VkCheckpointData2NV;

typedef struct VkPhysicalDeviceSynchronization2Features {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                     synchronization2;
} VkPhysicalDeviceSynchronization2Features;

typedef struct VkPhysicalDeviceSynchronization2Features  VkPhysicalDeviceSynchronization2FeaturesKHR;

typedef struct VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR {
    VkStructureType   sType;
    void *       pNext;
    VkBool32                     unifiedImageLayouts;
    VkBool32                     unifiedImageLayoutsVideo;
} VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR;

typedef struct VkPhysicalDeviceHostImageCopyFeatures {
    VkStructureType   sType;
    void *       pNext;
    VkBool32                     hostImageCopy;
} VkPhysicalDeviceHostImageCopyFeatures;

typedef struct VkPhysicalDeviceHostImageCopyFeatures  VkPhysicalDeviceHostImageCopyFeaturesEXT;

typedef struct VkPhysicalDeviceHostImageCopyProperties {
    VkStructureType   sType;
    void *                                                         pNext;
    uint32_t                                    copySrcLayoutCount;
    VkImageLayout *    pCopySrcLayouts;
    uint32_t                                    copyDstLayoutCount;
    VkImageLayout *    pCopyDstLayouts;
    uint8_t                                     optimalTilingLayoutUUID [ VK_UUID_SIZE ];
    VkBool32                                                       identicalMemoryTypeRequirements;
} VkPhysicalDeviceHostImageCopyProperties;

typedef struct VkPhysicalDeviceHostImageCopyProperties  VkPhysicalDeviceHostImageCopyPropertiesEXT;

typedef struct VkMemoryToImageCopy {
    VkStructureType   sType;
    const  void *                     pNext;
    const  void *                                     pHostPointer;
    uint32_t                                         memoryRowLength;
    uint32_t                                         memoryImageHeight;
    VkImageSubresourceLayers                         imageSubresource;
    VkOffset3D                                       imageOffset;
    VkExtent3D                                       imageExtent;
} VkMemoryToImageCopy;

typedef struct VkMemoryToImageCopy  VkMemoryToImageCopyEXT;

typedef struct VkImageToMemoryCopy {
    VkStructureType   sType;
    const  void *                     pNext;
    void *                                           pHostPointer;
    uint32_t                                         memoryRowLength;
    uint32_t                                         memoryImageHeight;
    VkImageSubresourceLayers                         imageSubresource;
    VkOffset3D                                       imageOffset;
    VkExtent3D                                       imageExtent;
} VkImageToMemoryCopy;

typedef struct VkImageToMemoryCopy  VkImageToMemoryCopyEXT;

typedef struct VkCopyMemoryToImageInfo {
    VkStructureType   sType;
    const  void *                 pNext;
    VkHostImageCopyFlags         flags;
    VkImage                                      dstImage;
    VkImageLayout                                dstImageLayout;
    uint32_t                                     regionCount;
    const  VkMemoryToImageCopy *     pRegions;
} VkCopyMemoryToImageInfo;

typedef struct VkCopyMemoryToImageInfo  VkCopyMemoryToImageInfoEXT;

typedef struct VkCopyImageToMemoryInfo {
    VkStructureType   sType;
    const  void *                 pNext;
    VkHostImageCopyFlags         flags;
    VkImage                                      srcImage;
    VkImageLayout                                srcImageLayout;
    uint32_t                                     regionCount;
    const  VkImageToMemoryCopy *     pRegions;
} VkCopyImageToMemoryInfo;

typedef struct VkCopyImageToMemoryInfo  VkCopyImageToMemoryInfoEXT;

typedef struct VkCopyImageToImageInfo {
    VkStructureType   sType;
    const  void *                 pNext;
    VkHostImageCopyFlags         flags;
    VkImage                                      srcImage;
    VkImageLayout                                srcImageLayout;
    VkImage                                      dstImage;
    VkImageLayout                                dstImageLayout;
    uint32_t                                     regionCount;
    const  VkImageCopy2 *       pRegions;
} VkCopyImageToImageInfo;

typedef struct VkCopyImageToImageInfo  VkCopyImageToImageInfoEXT;

typedef struct VkHostImageLayoutTransitionInfo {
    VkStructureType   sType;
    const  void *   pNext;
    VkImage                        image;
    VkImageLayout                  oldLayout;
    VkImageLayout                  newLayout;
    VkImageSubresourceRange        subresourceRange;
} VkHostImageLayoutTransitionInfo;

typedef struct VkHostImageLayoutTransitionInfo  VkHostImageLayoutTransitionInfoEXT;

typedef struct VkSubresourceHostMemcpySize {
    VkStructureType   sType;
    void *         pNext;
    VkDeviceSize                   size;
} VkSubresourceHostMemcpySize;

typedef struct VkSubresourceHostMemcpySize  VkSubresourceHostMemcpySizeEXT;

typedef struct VkHostImageCopyDevicePerformanceQuery {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                       optimalDeviceAccess;
    VkBool32                       identicalMemoryLayout;
} VkHostImageCopyDevicePerformanceQuery;

typedef struct VkHostImageCopyDevicePerformanceQuery  VkHostImageCopyDevicePerformanceQueryEXT;

typedef struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {
    VkStructureType   sType;
    void *                   pNext;
    VkBool32                 primitivesGeneratedQuery;
    VkBool32                 primitivesGeneratedQueryWithRasterizerDiscard;
    VkBool32                 primitivesGeneratedQueryWithNonZeroStreams;
} VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT;

typedef struct VkPhysicalDeviceLegacyDitheringFeaturesEXT {
    VkStructureType   sType;
    void *                   pNext;
    VkBool32                 legacyDithering;
} VkPhysicalDeviceLegacyDitheringFeaturesEXT;

typedef struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {
    VkStructureType   sType;
    void *    pNext;
    VkBool32                  multisampledRenderToSingleSampled;
} VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT;

typedef struct VkSurfaceCapabilitiesPresentId2KHR {
    VkStructureType   sType;
    void *           pNext;
    VkBool32         presentId2Supported;
} VkSurfaceCapabilitiesPresentId2KHR;

typedef struct VkSurfaceCapabilitiesPresentWait2KHR {
    VkStructureType   sType;
    void *           pNext;
    VkBool32         presentWait2Supported;
} VkSurfaceCapabilitiesPresentWait2KHR;

typedef struct VkSubpassResolvePerformanceQueryEXT {
    VkStructureType   sType;
    void *     pNext;
    VkBool32   optimal;
} VkSubpassResolvePerformanceQueryEXT;

typedef struct VkMultisampledRenderToSingleSampledInfoEXT {
    VkStructureType   sType;
    const  void *    pNext;
    VkBool32                        multisampledRenderToSingleSampledEnable;
    VkSampleCountFlagBits           rasterizationSamples;
} VkMultisampledRenderToSingleSampledInfoEXT;

typedef struct VkPhysicalDevicePipelineProtectedAccessFeatures {
    VkStructureType   sType;
    void *   pNext;
    VkBool32                 pipelineProtectedAccess;
} VkPhysicalDevicePipelineProtectedAccessFeatures;

typedef struct VkPhysicalDevicePipelineProtectedAccessFeatures  VkPhysicalDevicePipelineProtectedAccessFeaturesEXT;

typedef struct VkQueueFamilyVideoPropertiesKHR {
    VkStructureType   sType;
    void *                               pNext;
    VkVideoCodecOperationFlagsKHR    videoCodecOperations;
} VkQueueFamilyVideoPropertiesKHR;

typedef struct VkQueueFamilyQueryResultStatusPropertiesKHR {
    VkStructureType   sType;
    void *                               pNext;
    VkBool32                             queryResultStatusSupport;
} VkQueueFamilyQueryResultStatusPropertiesKHR;

typedef struct VkPhysicalDeviceVideoFormatInfoKHR {
    VkStructureType   sType;
    const  void *                           pNext;
    VkImageUsageFlags                                      imageUsage;
} VkPhysicalDeviceVideoFormatInfoKHR;

typedef struct VkVideoFormatPropertiesKHR {
    VkStructureType   sType;
    void *                                                   pNext;
    VkFormat                                               format;
    VkComponentMapping                                     componentMapping;
    VkImageCreateFlags                                   imageCreateFlags;
    VkImageType                                            imageType;
    VkImageTiling                                          imageTiling;
    VkImageUsageFlags                                    imageUsageFlags;
} VkVideoFormatPropertiesKHR;

typedef struct VkVideoFormatH265QuantizationMapPropertiesKHR {
    VkStructureType   sType;
    void *               pNext;
    VkVideoEncodeH265CtbSizeFlagsKHR   compatibleCtbSizes;
} VkVideoFormatH265QuantizationMapPropertiesKHR;

typedef struct VkVideoFormatAV1QuantizationMapPropertiesKHR {
    VkStructureType   sType;
    void *               pNext;
    VkVideoEncodeAV1SuperblockSizeFlagsKHR   compatibleSuperblockSizes;
} VkVideoFormatAV1QuantizationMapPropertiesKHR;

typedef struct VkVideoProfileInfoKHR {
    VkStructureType   sType;
    const  void *         pNext;
    VkVideoCodecOperationFlagBitsKHR     videoCodecOperation;
    VkVideoChromaSubsamplingFlagsKHR     chromaSubsampling;
    VkVideoComponentBitDepthFlagsKHR     lumaBitDepth;
    VkVideoComponentBitDepthFlagsKHR   chromaBitDepth;
} VkVideoProfileInfoKHR;

typedef struct VkVideoCapabilitiesKHR {
    VkStructureType   sType;
    void *                           pNext;
    VkVideoCapabilityFlagsKHR    flags;
    VkDeviceSize                 minBitstreamBufferOffsetAlignment;
    VkDeviceSize                 minBitstreamBufferSizeAlignment;
    VkExtent2D                       pictureAccessGranularity;
    VkExtent2D                       minCodedExtent;
    VkExtent2D                       maxCodedExtent;
    uint32_t                         maxDpbSlots;
    uint32_t                         maxActiveReferencePictures;
    VkExtensionProperties         stdHeaderVersion;
} VkVideoCapabilitiesKHR;

typedef struct VkVideoSessionMemoryRequirementsKHR {
    VkStructureType   sType;
    void *              pNext;
    uint32_t                            memoryBindIndex;
    VkMemoryRequirements                memoryRequirements;
} VkVideoSessionMemoryRequirementsKHR;

typedef struct VkBindVideoSessionMemoryInfoKHR {
    VkStructureType   sType;
    const  void *        pNext;
    uint32_t                            memoryBindIndex;
    VkDeviceMemory                      memory;
    VkDeviceSize                        memoryOffset;
    VkDeviceSize                        memorySize;
} VkBindVideoSessionMemoryInfoKHR;

typedef struct VkVideoDecodeCapabilitiesKHR {
    VkStructureType   sType;
    void *                                  pNext;
    VkVideoDecodeCapabilityFlagsKHR   flags;
} VkVideoDecodeCapabilitiesKHR;

typedef struct VkVideoDecodeUsageInfoKHR {
    VkStructureType   sType;
    const  void *                 pNext;
    VkVideoDecodeUsageFlagsKHR   videoUsageHints;
} VkVideoDecodeUsageInfoKHR;

typedef struct VkVideoDecodeInfoKHR {
    VkStructureType   sType;
    const  void *                             pNext;
    VkVideoDecodeFlagsKHR    flags;
    VkBuffer                                 srcBuffer;
    VkDeviceSize                             srcBufferOffset;
    VkDeviceSize                             srcBufferRange;
    VkVideoPictureResourceInfoKHR            dstPictureResource;
    const  VkVideoReferenceSlotInfoKHR *  pSetupReferenceSlot;
    uint32_t                 referenceSlotCount;
    const  VkVideoReferenceSlotInfoKHR *  pReferenceSlots;
} VkVideoDecodeInfoKHR;

typedef struct VkPhysicalDeviceVideoMaintenance1FeaturesKHR {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           videoMaintenance1;
} VkPhysicalDeviceVideoMaintenance1FeaturesKHR;

typedef struct VkPhysicalDeviceVideoMaintenance2FeaturesKHR {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           videoMaintenance2;
} VkPhysicalDeviceVideoMaintenance2FeaturesKHR;

typedef struct VkPhysicalDeviceVideoDecodeVP9FeaturesKHR {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           videoDecodeVP9;
} VkPhysicalDeviceVideoDecodeVP9FeaturesKHR;

typedef struct VkVideoDecodeAV1ProfileInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    StdVideoAV1Profile                       stdProfile;
    VkBool32                                 filmGrainSupport;
} VkVideoDecodeAV1ProfileInfoKHR;

typedef struct VkVideoSessionCreateInfoKHR {
    VkStructureType   sType;
    const  void *                    pNext;
    uint32_t                                        queueFamilyIndex;
    VkVideoSessionCreateFlagsKHR    flags;
    const  VkVideoProfileInfoKHR *                   pVideoProfile;
    VkFormat                                        pictureFormat;
    VkExtent2D                                      maxCodedExtent;
    VkFormat                                        referencePictureFormat;
    uint32_t                                        maxDpbSlots;
    uint32_t                                        maxActiveReferencePictures;
    const  VkExtensionProperties *                   pStdHeaderVersion;
} VkVideoSessionCreateInfoKHR;

typedef struct VkVideoSessionParametersCreateInfoKHR {
    VkStructureType   sType;
    const  void *                             pNext;
    VkVideoSessionParametersCreateFlagsKHR   flags;
    VkVideoSessionParametersKHR              videoSessionParametersTemplate;
    VkVideoSessionKHR                                        videoSession;
} VkVideoSessionParametersCreateInfoKHR;

typedef struct VkVideoEncodeSessionParametersFeedbackInfoKHR {
    VkStructureType   sType;
    void *                           pNext;
    VkBool32                                         hasOverrides;
} VkVideoEncodeSessionParametersFeedbackInfoKHR;

typedef struct VkVideoBeginCodingInfoKHR {
    VkStructureType   sType;
    const  void *                                              pNext;
    VkVideoBeginCodingFlagsKHR                flags;
    VkVideoSessionKHR                                         videoSession;
    VkVideoSessionParametersKHR               videoSessionParameters;
    uint32_t                                  referenceSlotCount;
    const  VkVideoReferenceSlotInfoKHR *  pReferenceSlots;
} VkVideoBeginCodingInfoKHR;

typedef struct VkVideoEndCodingInfoKHR {
    VkStructureType   sType;
    const  void *                               pNext;
    VkVideoEndCodingFlagsKHR   flags;
} VkVideoEndCodingInfoKHR;

typedef struct VkVideoCodingControlInfoKHR {
    VkStructureType   sType;
    const  void *                     pNext;
    VkVideoCodingControlFlagsKHR                     flags;
} VkVideoCodingControlInfoKHR;

typedef struct VkVideoEncodeUsageInfoKHR {
    VkStructureType   sType;
    const  void *                     pNext;
    VkVideoEncodeUsageFlagsKHR       videoUsageHints;
    VkVideoEncodeContentFlagsKHR     videoContentHints;
    VkVideoEncodeTuningModeKHR       tuningMode;
} VkVideoEncodeUsageInfoKHR;

typedef struct VkVideoEncodeInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkVideoEncodeFlagsKHR    flags;
    VkBuffer                                 dstBuffer;
    VkDeviceSize                             dstBufferOffset;
    VkDeviceSize                             dstBufferRange;
    VkVideoPictureResourceInfoKHR            srcPictureResource;
    const  VkVideoReferenceSlotInfoKHR *  pSetupReferenceSlot;
    uint32_t                 referenceSlotCount;
    const  VkVideoReferenceSlotInfoKHR *  pReferenceSlots;
    uint32_t                                 precedingExternallyEncodedBytes;
} VkVideoEncodeInfoKHR;

typedef struct VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR {
    VkStructureType   sType;
    void *                        pNext;
    VkBool32                                      videoEncodeQuantizationMap;
} VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR;

typedef struct VkQueryPoolVideoEncodeFeedbackCreateInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkVideoEncodeFeedbackFlagsKHR            encodeFeedbackFlags;
} VkQueryPoolVideoEncodeFeedbackCreateInfoKHR;

typedef struct VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    const  VkVideoProfileInfoKHR *            pVideoProfile;
    uint32_t                                 qualityLevel;
} VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR;

typedef struct VkVideoEncodeRateControlInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkVideoEncodeRateControlFlagsKHR   flags;
    VkVideoEncodeRateControlModeFlagBitsKHR   rateControlMode;
    uint32_t                 layerCount;
    const  VkVideoEncodeRateControlLayerInfoKHR *  pLayers;
    uint32_t                                 virtualBufferSizeInMs;
    uint32_t                                 initialVirtualBufferSizeInMs;
} VkVideoEncodeRateControlInfoKHR;

typedef struct VkVideoEncodeCapabilitiesKHR {
    VkStructureType   sType;
    void *                  pNext;
    VkVideoEncodeCapabilityFlagsKHR   flags;
    VkVideoEncodeRateControlModeFlagsKHR   rateControlModes;
    uint32_t                maxRateControlLayers;
    uint64_t                maxBitrate;
    uint32_t                maxQualityLevels;
    VkExtent2D              encodeInputPictureGranularity;
    VkVideoEncodeFeedbackFlagsKHR   supportedEncodeFeedbackFlags;
} VkVideoEncodeCapabilitiesKHR;

typedef struct VkVideoEncodeH264CapabilitiesKHR {
    VkStructureType   sType;
    void *                  pNext;
    VkVideoEncodeH264CapabilityFlagsKHR   flags;
    StdVideoH264LevelIdc    maxLevelIdc;
    uint32_t                maxSliceCount;
    uint32_t                maxPPictureL0ReferenceCount;
    uint32_t                maxBPictureL0ReferenceCount;
    uint32_t                maxL1ReferenceCount;
    uint32_t                maxTemporalLayerCount;
    VkBool32                expectDyadicTemporalLayerPattern;
    int32_t                 minQp;
    int32_t                 maxQp;
    VkBool32                prefersGopRemainingFrames;
    VkBool32                requiresGopRemainingFrames;
    VkVideoEncodeH264StdFlagsKHR   stdSyntaxFlags;
} VkVideoEncodeH264CapabilitiesKHR;

typedef struct VkVideoEncodeH264QualityLevelPropertiesKHR {
    VkStructureType   sType;
    void *                   pNext;
    VkVideoEncodeH264RateControlFlagsKHR     preferredRateControlFlags;
    uint32_t                                 preferredGopFrameCount;
    uint32_t                                 preferredIdrPeriod;
    uint32_t                                 preferredConsecutiveBFrameCount;
    uint32_t                                 preferredTemporalLayerCount;
    VkVideoEncodeH264QpKHR                   preferredConstantQp;
    uint32_t                                 preferredMaxL0ReferenceCount;
    uint32_t                                 preferredMaxL1ReferenceCount;
    VkBool32                                 preferredStdEntropyCodingModeFlag;
} VkVideoEncodeH264QualityLevelPropertiesKHR;

typedef struct VkVideoEncodeH264SessionCreateInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkBool32                                 useMaxLevelIdc;
    StdVideoH264LevelIdc                     maxLevelIdc;
} VkVideoEncodeH264SessionCreateInfoKHR;

typedef struct VkVideoEncodeH264SessionParametersGetInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkBool32                                 writeStdSPS;
    VkBool32                                 writeStdPPS;
    uint32_t                                 stdSPSId;
    uint32_t                                 stdPPSId;
} VkVideoEncodeH264SessionParametersGetInfoKHR;

typedef struct VkVideoEncodeH264SessionParametersFeedbackInfoKHR {
    VkStructureType   sType;
    void *                   pNext;
    VkBool32                                 hasStdSPSOverrides;
    VkBool32                                 hasStdPPSOverrides;
} VkVideoEncodeH264SessionParametersFeedbackInfoKHR;

typedef struct VkVideoEncodeH264PictureInfoKHR {
    VkStructureType   sType;
    const  void *                                         pNext;
    uint32_t                                                             naluSliceEntryCount;
    const  VkVideoEncodeH264NaluSliceInfoKHR *  pNaluSliceEntries;
    const  StdVideoEncodeH264PictureInfo *                                pStdPictureInfo;
    VkBool32                                                             generatePrefixNalu;
} VkVideoEncodeH264PictureInfoKHR;

typedef struct VkVideoEncodeH264RateControlInfoKHR {
    VkStructureType   sType;
    const  void *                      pNext;
    VkVideoEncodeH264RateControlFlagsKHR   flags;
    uint32_t                                          gopFrameCount;
    uint32_t                                          idrPeriod;
    uint32_t                                          consecutiveBFrameCount;
    uint32_t                                          temporalLayerCount;
} VkVideoEncodeH264RateControlInfoKHR;

typedef struct VkVideoEncodeH264GopRemainingFrameInfoKHR {
    VkStructureType   sType;
    const  void *     pNext;
    VkBool32                         useGopRemainingFrames;
    uint32_t                         gopRemainingI;
    uint32_t                         gopRemainingP;
    uint32_t                         gopRemainingB;
} VkVideoEncodeH264GopRemainingFrameInfoKHR;

typedef struct VkVideoEncodeH264RateControlLayerInfoKHR {
    VkStructureType   sType;
    const  void *                      pNext;
    VkBool32                                          useMinQp;
    VkVideoEncodeH264QpKHR                            minQp;
    VkBool32                                          useMaxQp;
    VkVideoEncodeH264QpKHR                            maxQp;
    VkBool32                                          useMaxFrameSize;
    VkVideoEncodeH264FrameSizeKHR                     maxFrameSize;
} VkVideoEncodeH264RateControlLayerInfoKHR;

typedef struct VkVideoEncodeH265CapabilitiesKHR {
    VkStructureType   sType;
    void *                  pNext;
    VkVideoEncodeH265CapabilityFlagsKHR   flags;
    StdVideoH265LevelIdc    maxLevelIdc;
    uint32_t                maxSliceSegmentCount;
    VkExtent2D              maxTiles;
    VkVideoEncodeH265CtbSizeFlagsKHR   ctbSizes;
    VkVideoEncodeH265TransformBlockSizeFlagsKHR   transformBlockSizes;
    uint32_t                maxPPictureL0ReferenceCount;
    uint32_t                maxBPictureL0ReferenceCount;
    uint32_t                maxL1ReferenceCount;
    uint32_t                maxSubLayerCount;
    VkBool32                expectDyadicTemporalSubLayerPattern;
    int32_t                 minQp;
    int32_t                 maxQp;
    VkBool32                prefersGopRemainingFrames;
    VkBool32                requiresGopRemainingFrames;
    VkVideoEncodeH265StdFlagsKHR   stdSyntaxFlags;
} VkVideoEncodeH265CapabilitiesKHR;

typedef struct VkVideoEncodeH265QualityLevelPropertiesKHR {
    VkStructureType   sType;
    void *                   pNext;
    VkVideoEncodeH265RateControlFlagsKHR     preferredRateControlFlags;
    uint32_t                                 preferredGopFrameCount;
    uint32_t                                 preferredIdrPeriod;
    uint32_t                                 preferredConsecutiveBFrameCount;
    uint32_t                                 preferredSubLayerCount;
    VkVideoEncodeH265QpKHR                   preferredConstantQp;
    uint32_t                                 preferredMaxL0ReferenceCount;
    uint32_t                                 preferredMaxL1ReferenceCount;
} VkVideoEncodeH265QualityLevelPropertiesKHR;

typedef struct VkVideoEncodeH265SessionCreateInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkBool32                                 useMaxLevelIdc;
    StdVideoH265LevelIdc                     maxLevelIdc;
} VkVideoEncodeH265SessionCreateInfoKHR;

typedef struct VkVideoEncodeH265SessionParametersGetInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkBool32                                 writeStdVPS;
    VkBool32                                 writeStdSPS;
    VkBool32                                 writeStdPPS;
    uint32_t                                 stdVPSId;
    uint32_t                                 stdSPSId;
    uint32_t                                 stdPPSId;
} VkVideoEncodeH265SessionParametersGetInfoKHR;

typedef struct VkVideoEncodeH265SessionParametersFeedbackInfoKHR {
    VkStructureType   sType;
    void *                   pNext;
    VkBool32                                 hasStdVPSOverrides;
    VkBool32                                 hasStdSPSOverrides;
    VkBool32                                 hasStdPPSOverrides;
} VkVideoEncodeH265SessionParametersFeedbackInfoKHR;

typedef struct VkVideoEncodeH265PictureInfoKHR {
    VkStructureType   sType;
    const  void *                                        pNext;
    uint32_t                                                            naluSliceSegmentEntryCount;
    const  VkVideoEncodeH265NaluSliceSegmentInfoKHR *  pNaluSliceSegmentEntries;
    const  StdVideoEncodeH265PictureInfo *                               pStdPictureInfo;
} VkVideoEncodeH265PictureInfoKHR;

typedef struct VkVideoEncodeH265RateControlInfoKHR {
    VkStructureType   sType;
    const  void *                      pNext;
    VkVideoEncodeH265RateControlFlagsKHR   flags;
    uint32_t                                          gopFrameCount;
    uint32_t                                          idrPeriod;
    uint32_t                                          consecutiveBFrameCount;
    uint32_t                                          subLayerCount;
} VkVideoEncodeH265RateControlInfoKHR;

typedef struct VkVideoEncodeH265GopRemainingFrameInfoKHR {
    VkStructureType   sType;
    const  void *     pNext;
    VkBool32                         useGopRemainingFrames;
    uint32_t                         gopRemainingI;
    uint32_t                         gopRemainingP;
    uint32_t                         gopRemainingB;
} VkVideoEncodeH265GopRemainingFrameInfoKHR;

typedef struct VkVideoEncodeH265RateControlLayerInfoKHR {
    VkStructureType   sType;
    const  void *                      pNext;
    VkBool32                                          useMinQp;
    VkVideoEncodeH265QpKHR                            minQp;
    VkBool32                                          useMaxQp;
    VkVideoEncodeH265QpKHR                            maxQp;
    VkBool32                                          useMaxFrameSize;
    VkVideoEncodeH265FrameSizeKHR                     maxFrameSize;
} VkVideoEncodeH265RateControlLayerInfoKHR;

typedef struct VkVideoEncodeAV1CapabilitiesKHR {
    VkStructureType   sType;
    void *                  pNext;
    VkVideoEncodeAV1CapabilityFlagsKHR   flags;
    StdVideoAV1Level        maxLevel;
    VkExtent2D          codedPictureAlignment;
    VkExtent2D              maxTiles;
    VkExtent2D              minTileSize;
    VkExtent2D              maxTileSize;
    VkVideoEncodeAV1SuperblockSizeFlagsKHR   superblockSizes;
    uint32_t                maxSingleReferenceCount;
    uint32_t            singleReferenceNameMask;
    uint32_t                maxUnidirectionalCompoundReferenceCount;
    uint32_t                maxUnidirectionalCompoundGroup1ReferenceCount;
    uint32_t            unidirectionalCompoundReferenceNameMask;
    uint32_t                maxBidirectionalCompoundReferenceCount;
    uint32_t                maxBidirectionalCompoundGroup1ReferenceCount;
    uint32_t                maxBidirectionalCompoundGroup2ReferenceCount;
    uint32_t            bidirectionalCompoundReferenceNameMask;
    uint32_t                maxTemporalLayerCount;
    uint32_t                maxSpatialLayerCount;
    uint32_t                maxOperatingPoints;
    uint32_t                minQIndex;
    uint32_t                maxQIndex;
    VkBool32                prefersGopRemainingFrames;
    VkBool32                requiresGopRemainingFrames;
    VkVideoEncodeAV1StdFlagsKHR   stdSyntaxFlags;
} VkVideoEncodeAV1CapabilitiesKHR;

typedef struct VkVideoEncodeAV1QualityLevelPropertiesKHR {
    VkStructureType   sType;
    void *                   pNext;
    VkVideoEncodeAV1RateControlFlagsKHR      preferredRateControlFlags;
    uint32_t                                 preferredGopFrameCount;
    uint32_t                                 preferredKeyFramePeriod;
    uint32_t                                 preferredConsecutiveBipredictiveFrameCount;
    uint32_t                                 preferredTemporalLayerCount;
    VkVideoEncodeAV1QIndexKHR                preferredConstantQIndex;
    uint32_t                                 preferredMaxSingleReferenceCount;
    uint32_t                                 preferredSingleReferenceNameMask;
    uint32_t                                 preferredMaxUnidirectionalCompoundReferenceCount;
    uint32_t                                 preferredMaxUnidirectionalCompoundGroup1ReferenceCount;
    uint32_t                                 preferredUnidirectionalCompoundReferenceNameMask;
    uint32_t                                 preferredMaxBidirectionalCompoundReferenceCount;
    uint32_t                                 preferredMaxBidirectionalCompoundGroup1ReferenceCount;
    uint32_t                                 preferredMaxBidirectionalCompoundGroup2ReferenceCount;
    uint32_t                                 preferredBidirectionalCompoundReferenceNameMask;
} VkVideoEncodeAV1QualityLevelPropertiesKHR;

typedef struct VkPhysicalDeviceVideoEncodeAV1FeaturesKHR {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           videoEncodeAV1;
} VkPhysicalDeviceVideoEncodeAV1FeaturesKHR;

typedef struct VkVideoEncodeAV1SessionCreateInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkBool32                                 useMaxLevel;
    StdVideoAV1Level                         maxLevel;
} VkVideoEncodeAV1SessionCreateInfoKHR;

typedef struct VkVideoEncodeAV1PictureInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkVideoEncodeAV1PredictionModeKHR        predictionMode;
    VkVideoEncodeAV1RateControlGroupKHR      rateControlGroup;
    uint32_t                                 constantQIndex;
    const  StdVideoEncodeAV1PictureInfo *     pStdPictureInfo;
    int32_t                                  referenceNameSlotIndices [ VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR ];
    VkBool32                                 primaryReferenceCdfOnly;
    VkBool32                                 generateObuExtensionHeader;
} VkVideoEncodeAV1PictureInfoKHR;

typedef struct VkVideoEncodeAV1RateControlInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkVideoEncodeAV1RateControlFlagsKHR   flags;
    uint32_t                                 gopFrameCount;
    uint32_t                                 keyFramePeriod;
    uint32_t                                 consecutiveBipredictiveFrameCount;
    uint32_t                                 temporalLayerCount;
} VkVideoEncodeAV1RateControlInfoKHR;

typedef struct VkVideoEncodeAV1GopRemainingFrameInfoKHR {
    VkStructureType   sType;
    const  void *     pNext;
    VkBool32                         useGopRemainingFrames;
    uint32_t                         gopRemainingIntra;
    uint32_t                         gopRemainingPredictive;
    uint32_t                         gopRemainingBipredictive;
} VkVideoEncodeAV1GopRemainingFrameInfoKHR;

typedef struct VkVideoEncodeAV1RateControlLayerInfoKHR {
    VkStructureType   sType;
    const  void *             pNext;
    VkBool32                                 useMinQIndex;
    VkVideoEncodeAV1QIndexKHR                minQIndex;
    VkBool32                                 useMaxQIndex;
    VkVideoEncodeAV1QIndexKHR                maxQIndex;
    VkBool32                                 useMaxFrameSize;
    VkVideoEncodeAV1FrameSizeKHR             maxFrameSize;
} VkVideoEncodeAV1RateControlLayerInfoKHR;

typedef struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV {
    VkStructureType   sType;
    void *                                pNext;
    VkBool32                              inheritedViewportScissor2D;
} VkPhysicalDeviceInheritedViewportScissorFeaturesNV;

typedef struct VkCommandBufferInheritanceViewportScissorInfoNV {
    VkStructureType   sType;
    const  void *                                     pNext;
    VkBool32                                         viewportScissor2D;
    uint32_t                                         viewportDepthCount;
    const  VkViewport *         pViewportDepths;
} VkCommandBufferInheritanceViewportScissorInfoNV;

typedef struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                       ycbcr2plane444Formats;
} VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT;

typedef struct VkPhysicalDeviceProvokingVertexFeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             provokingVertexLast;
    VkBool32                             transformFeedbackPreservesProvokingVertex;
} VkPhysicalDeviceProvokingVertexFeaturesEXT;

typedef struct VkPhysicalDeviceProvokingVertexPropertiesEXT {
    VkStructureType   sType;
    void *                                pNext;
    VkBool32                              provokingVertexModePerPipeline;
    VkBool32                              transformFeedbackPreservesTriangleFanProvokingVertex;
} VkPhysicalDeviceProvokingVertexPropertiesEXT;

typedef struct VkVideoEncodeIntraRefreshCapabilitiesKHR {
    VkStructureType   sType;
    void *                   pNext;
    VkVideoEncodeIntraRefreshModeFlagsKHR   intraRefreshModes;
    uint32_t                 maxIntraRefreshCycleDuration;
    uint32_t                 maxIntraRefreshActiveReferencePictures;
    VkBool32                 partitionIndependentIntraRefreshRegions;
    VkBool32                 nonRectangularIntraRefreshRegions;
} VkVideoEncodeIntraRefreshCapabilitiesKHR;

typedef struct VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR {
    VkStructureType   sType;
    void *                        pNext;
    VkBool32                                      videoEncodeIntraRefresh;
} VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR;

typedef struct VkCuModuleTexturingModeCreateInfoNVX {
    VkStructureType   sType;
    const  void *             pNext;
    VkBool32   use64bitTexturing;
} VkCuModuleTexturingModeCreateInfoNVX;

typedef struct VkPhysicalDeviceDescriptorBufferFeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             descriptorBuffer;
    VkBool32                             descriptorBufferCaptureReplay;
    VkBool32                             descriptorBufferImageLayoutIgnored;
    VkBool32                             descriptorBufferPushDescriptors;
} VkPhysicalDeviceDescriptorBufferFeaturesEXT;

typedef struct VkPhysicalDeviceDescriptorBufferPropertiesEXT {
    VkStructureType   sType;
    void *                                pNext;
    VkBool32                              combinedImageSamplerDescriptorSingleArray;
    VkBool32                              bufferlessPushDescriptors;
    VkBool32                              allowSamplerImageViewPostSubmitCreation;
    VkDeviceSize                       descriptorBufferOffsetAlignment;
    uint32_t                              maxDescriptorBufferBindings;
    uint32_t                              maxResourceDescriptorBufferBindings;
    uint32_t                              maxSamplerDescriptorBufferBindings;
    uint32_t                              maxEmbeddedImmutableSamplerBindings;
    uint32_t                              maxEmbeddedImmutableSamplers;
    size_t                             bufferCaptureReplayDescriptorDataSize;
    size_t                             imageCaptureReplayDescriptorDataSize;
    size_t                             imageViewCaptureReplayDescriptorDataSize;
    size_t                             samplerCaptureReplayDescriptorDataSize;
    size_t                             accelerationStructureCaptureReplayDescriptorDataSize;
    size_t                                samplerDescriptorSize;
    size_t                                combinedImageSamplerDescriptorSize;
    size_t                                sampledImageDescriptorSize;
    size_t                                storageImageDescriptorSize;
    size_t                                uniformTexelBufferDescriptorSize;
    size_t                                robustUniformTexelBufferDescriptorSize;
    size_t                                storageTexelBufferDescriptorSize;
    size_t                                robustStorageTexelBufferDescriptorSize;
    size_t                                uniformBufferDescriptorSize;
    size_t                                robustUniformBufferDescriptorSize;
    size_t                                storageBufferDescriptorSize;
    size_t                                robustStorageBufferDescriptorSize;
    size_t                                inputAttachmentDescriptorSize;
    size_t                                accelerationStructureDescriptorSize;
    VkDeviceSize                          maxSamplerDescriptorBufferRange;
    VkDeviceSize                          maxResourceDescriptorBufferRange;
    VkDeviceSize                          samplerDescriptorBufferAddressSpaceSize;
    VkDeviceSize                          resourceDescriptorBufferAddressSpaceSize;
    VkDeviceSize                          descriptorBufferAddressSpaceSize;
} VkPhysicalDeviceDescriptorBufferPropertiesEXT;

typedef struct VkDescriptorAddressInfoEXT {
    VkStructureType   sType;
    void *                    pNext;
    VkDeviceAddress           address;
    VkDeviceSize                              range;
    VkFormat                                  format;
} VkDescriptorAddressInfoEXT;

typedef struct VkDescriptorBufferBindingInfoEXT {
    VkStructureType   sType;
    const  void *              pNext;
    VkDeviceAddress                           address;
    VkBufferUsageFlags   usage;
} VkDescriptorBufferBindingInfoEXT;

typedef union VkDescriptorDataEXT {
    const  VkSampler *                                                      pSampler;
    const  VkDescriptorImageInfo *                           pCombinedImageSampler;
    const  VkDescriptorImageInfo *                                 pInputAttachmentImage;
    const  VkDescriptorImageInfo *                    pSampledImage;
    const  VkDescriptorImageInfo *                    pStorageImage;
    const  VkDescriptorAddressInfoEXT *        pUniformTexelBuffer;
    const  VkDescriptorAddressInfoEXT *        pStorageTexelBuffer;
    const  VkDescriptorAddressInfoEXT *              pUniformBuffer;
    const  VkDescriptorAddressInfoEXT *              pStorageBuffer;
    VkDeviceAddress   accelerationStructure;
} VkDescriptorDataEXT;

typedef struct VkDescriptorGetInfoEXT {
    VkStructureType   sType;
    const  void *             pNext;
    VkDescriptorType         type;
    VkDescriptorDataEXT    data;
} VkDescriptorGetInfoEXT;

typedef struct VkPhysicalDeviceShaderIntegerDotProductFeatures {
    VkStructureType   sType;
    void *                pNext;
    VkBool32                              shaderIntegerDotProduct;
} VkPhysicalDeviceShaderIntegerDotProductFeatures;

typedef struct VkPhysicalDeviceShaderIntegerDotProductFeatures  VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR;

typedef struct VkPhysicalDeviceShaderIntegerDotProductProperties {
    VkStructureType   sType;
    void *                pNext;
    VkBool32            integerDotProduct8BitUnsignedAccelerated;
    VkBool32            integerDotProduct8BitSignedAccelerated;
    VkBool32            integerDotProduct8BitMixedSignednessAccelerated;
    VkBool32            integerDotProduct4x8BitPackedUnsignedAccelerated;
    VkBool32            integerDotProduct4x8BitPackedSignedAccelerated;
    VkBool32            integerDotProduct4x8BitPackedMixedSignednessAccelerated;
    VkBool32            integerDotProduct16BitUnsignedAccelerated;
    VkBool32            integerDotProduct16BitSignedAccelerated;
    VkBool32            integerDotProduct16BitMixedSignednessAccelerated;
    VkBool32            integerDotProduct32BitUnsignedAccelerated;
    VkBool32            integerDotProduct32BitSignedAccelerated;
    VkBool32            integerDotProduct32BitMixedSignednessAccelerated;
    VkBool32            integerDotProduct64BitUnsignedAccelerated;
    VkBool32            integerDotProduct64BitSignedAccelerated;
    VkBool32            integerDotProduct64BitMixedSignednessAccelerated;
    VkBool32            integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
    VkBool32            integerDotProductAccumulatingSaturating8BitSignedAccelerated;
    VkBool32            integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
    VkBool32            integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
    VkBool32            integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
    VkBool32            integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
    VkBool32            integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
    VkBool32            integerDotProductAccumulatingSaturating16BitSignedAccelerated;
    VkBool32            integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
    VkBool32            integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
    VkBool32            integerDotProductAccumulatingSaturating32BitSignedAccelerated;
    VkBool32            integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
    VkBool32            integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
    VkBool32            integerDotProductAccumulatingSaturating64BitSignedAccelerated;
    VkBool32            integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
} VkPhysicalDeviceShaderIntegerDotProductProperties;

typedef struct VkPhysicalDeviceShaderIntegerDotProductProperties  VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR;

typedef struct VkPhysicalDeviceDrmPropertiesEXT {
    VkStructureType   sType;
    void *  pNext;
    VkBool32     hasPrimary;
    VkBool32     hasRender;
    int64_t   primaryMajor;
    int64_t   primaryMinor;
    int64_t   renderMajor;
    int64_t   renderMinor;
} VkPhysicalDeviceDrmPropertiesEXT;

typedef struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR {
    VkStructureType   sType;
    void *   pNext;
    VkBool32                 fragmentShaderBarycentric;
} VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;

typedef struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR {
    VkStructureType   sType;
    void *   pNext;
    VkBool32                  triStripVertexOrderIndependentOfProvokingVertex;
} VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR;

typedef struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             rayTracingMotionBlur;
    VkBool32                             rayTracingMotionBlurPipelineTraceRaysIndirect;
} VkPhysicalDeviceRayTracingMotionBlurFeaturesNV;

typedef struct VkPhysicalDeviceRayTracingValidationFeaturesNV {
    VkStructureType   sType;
    void *                               pNext;
    VkBool32                                             rayTracingValidation;
} VkPhysicalDeviceRayTracingValidationFeaturesNV;

typedef struct VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV {
    VkStructureType   sType;
    void *   pNext;
    VkBool32                                       spheres;
    VkBool32                                       linearSweptSpheres;
} VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV;

typedef struct VkAccelerationStructureGeometryMotionTrianglesDataNV {
    VkStructureType   sType;
    const  void *                    pNext;
    VkDeviceOrHostAddressConstKHR                   vertexData;
} VkAccelerationStructureGeometryMotionTrianglesDataNV;

typedef struct VkAccelerationStructureMotionInfoNV {
    VkStructureType   sType;
    const  void *                     pNext;
    uint32_t                                         maxInstances;
    VkAccelerationStructureMotionInfoFlagsNV   flags;
} VkAccelerationStructureMotionInfoNV;

typedef struct VkAccelerationStructureSRTMotionInstanceNV {
    VkSRTDataNV                                               transformT0;
    VkSRTDataNV                                               transformT1;
    uint32_t                                                  instanceCustomIndex :24;
    uint32_t                                                  mask :8;
    uint32_t                                                  instanceShaderBindingTableRecordOffset :24;
    VkGeometryInstanceFlagsKHR                flags :8;
    uint64_t                                                  accelerationStructureReference;
} VkAccelerationStructureSRTMotionInstanceNV;

typedef struct VkAccelerationStructureMatrixMotionInstanceNV {
    VkTransformMatrixKHR                                      transformT0;
    VkTransformMatrixKHR                                      transformT1;
    uint32_t                                                  instanceCustomIndex :24;
    uint32_t                                                  mask :8;
    uint32_t                                                  instanceShaderBindingTableRecordOffset :24;
    VkGeometryInstanceFlagsKHR                flags :8;
    uint64_t                                                  accelerationStructureReference;
} VkAccelerationStructureMatrixMotionInstanceNV;

typedef union VkAccelerationStructureMotionInstanceDataNV {
    VkAccelerationStructureInstanceKHR              staticInstance;
    VkAccelerationStructureMatrixMotionInstanceNV   matrixMotionInstance;
    VkAccelerationStructureSRTMotionInstanceNV      srtMotionInstance;
} VkAccelerationStructureMotionInstanceDataNV;

typedef struct VkAccelerationStructureMotionInstanceNV {
    VkAccelerationStructureMotionInstanceTypeNV   type;
    VkAccelerationStructureMotionInstanceFlagsNV   flags;
    VkAccelerationStructureMotionInstanceDataNV   data;
} VkAccelerationStructureMotionInstanceNV;

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkBufferCollectionPropertiesFUCHSIA {
    VkStructureType   sType;
    void *             pNext;
    uint32_t                           memoryTypeBits;
    uint32_t                           bufferCount;
    uint32_t                           createInfoIndex;
    uint64_t                           sysmemPixelFormat;
    VkFormatFeatureFlags               formatFeatures;
    VkSysmemColorSpaceFUCHSIA          sysmemColorSpaceIndex;
    VkComponentMapping                 samplerYcbcrConversionComponents;
    VkSamplerYcbcrModelConversion      suggestedYcbcrModel;
    VkSamplerYcbcrRange                suggestedYcbcrRange;
    VkChromaLocation                   suggestedXChromaOffset;
    VkChromaLocation                   suggestedYChromaOffset;
} VkBufferCollectionPropertiesFUCHSIA;
#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkBufferConstraintsInfoFUCHSIA {
    VkStructureType   sType;
    const  void *                pNext;
    VkBufferCreateInfo                          createInfo;
    VkFormatFeatureFlags        requiredFormatFeatures;
    VkBufferCollectionConstraintsInfoFUCHSIA    bufferCollectionConstraints;
} VkBufferConstraintsInfoFUCHSIA;
#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkImageFormatConstraintsInfoFUCHSIA {
    VkStructureType   sType;
    const  void *                             pNext;
    VkImageCreateInfo                                        imageCreateInfo;
    VkFormatFeatureFlags                                     requiredFormatFeatures;
    VkImageFormatConstraintsFlagsFUCHSIA     flags;
    uint64_t                                 sysmemPixelFormat;
    uint32_t                                                 colorSpaceCount;
    const  VkSysmemColorSpaceFUCHSIA *  pColorSpaces;
} VkImageFormatConstraintsInfoFUCHSIA;
#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkImageConstraintsInfoFUCHSIA {
    VkStructureType   sType;
    const  void *                                       pNext;
    uint32_t                                                           formatConstraintsCount;
    const  VkImageFormatConstraintsInfoFUCHSIA *  pFormatConstraints;
    VkBufferCollectionConstraintsInfoFUCHSIA                           bufferCollectionConstraints;
    VkImageConstraintsInfoFlagsFUCHSIA                 flags;
} VkImageConstraintsInfoFUCHSIA;
#endif

typedef struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             formatRgba10x6WithoutYCbCrSampler;
} VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT;

typedef struct VkFormatProperties3 {
    VkStructureType   sType;
    void *                             pNext;
    VkFormatFeatureFlags2              linearTilingFeatures;
    VkFormatFeatureFlags2              optimalTilingFeatures;
    VkFormatFeatureFlags2              bufferFeatures;
} VkFormatProperties3;

typedef struct VkFormatProperties3  VkFormatProperties3KHR;

typedef struct VkDrmFormatModifierProperties2EXT {
    uint64_t                   drmFormatModifier;
    uint32_t                   drmFormatModifierPlaneCount;
    VkFormatFeatureFlags2    drmFormatModifierTilingFeatures;
} VkDrmFormatModifierProperties2EXT;

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkAndroidHardwareBufferFormatProperties2ANDROID {
    VkStructureType   sType;
    void *                               pNext;
    VkFormat                             format;
    uint64_t                             externalFormat;
    VkFormatFeatureFlags2                formatFeatures;
    VkComponentMapping                   samplerYcbcrConversionComponents;
    VkSamplerYcbcrModelConversion        suggestedYcbcrModel;
    VkSamplerYcbcrRange                  suggestedYcbcrRange;
    VkChromaLocation                     suggestedXChromaOffset;
    VkChromaLocation                     suggestedYChromaOffset;
} VkAndroidHardwareBufferFormatProperties2ANDROID;
#endif

typedef struct VkRenderingInfo {
    VkStructureType                    sType;
    const  void *                                                 pNext;
    VkRenderingFlags                                             flags;
    VkRect2D                                                                     renderArea;
    uint32_t                                                                     layerCount;
    uint32_t                                                                     viewMask;
    uint32_t                                                     colorAttachmentCount;
    const  VkRenderingAttachmentInfo *                 pColorAttachments;
    const  VkRenderingAttachmentInfo *                            pDepthAttachment;
    const  VkRenderingAttachmentInfo *                            pStencilAttachment;
} VkRenderingInfo;

typedef struct VkRenderingInfo  VkRenderingInfoKHR;

typedef struct VkPhysicalDeviceDynamicRenderingFeatures {
    VkStructureType   sType;
    void *                                 pNext;
    VkBool32                                                                     dynamicRendering;
} VkPhysicalDeviceDynamicRenderingFeatures;

typedef struct VkPhysicalDeviceDynamicRenderingFeatures  VkPhysicalDeviceDynamicRenderingFeaturesKHR;

typedef struct VkCommandBufferInheritanceRenderingInfo {
    VkStructureType   sType;
    const  void *                                                 pNext;
    VkRenderingFlags                                             flags;
    uint32_t                                                                     viewMask;
    uint32_t                                        colorAttachmentCount;
    const  VkFormat *                                  pColorAttachmentFormats;
    VkFormat                                                                     depthAttachmentFormat;
    VkFormat                                                                     stencilAttachmentFormat;
    VkSampleCountFlagBits                                        rasterizationSamples;
} VkCommandBufferInheritanceRenderingInfo;

typedef struct VkCommandBufferInheritanceRenderingInfo  VkCommandBufferInheritanceRenderingInfoKHR;

typedef struct VkMultiviewPerViewAttributesInfoNVX {
    VkStructureType   sType;
    const  void *             pNext;
    VkBool32                                 perViewAttributes;
    VkBool32                                 perViewAttributesPositionXOnly;
} VkMultiviewPerViewAttributesInfoNVX;

typedef struct VkPhysicalDeviceImageViewMinLodFeaturesEXT {
    VkStructureType   sType;
    void *      pNext;
    VkBool32                                          minLod;
} VkPhysicalDeviceImageViewMinLodFeaturesEXT;

typedef struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           rasterizationOrderColorAttachmentAccess;
    VkBool32                           rasterizationOrderDepthAttachmentAccess;
    VkBool32                           rasterizationOrderStencilAttachmentAccess;
} VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;

typedef struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT  VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM;

typedef struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV {
    VkStructureType   sType;
    void *      pNext;
    VkBool32                                          linearColorAttachment;
} VkPhysicalDeviceLinearColorAttachmentFeaturesNV;

typedef struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                       graphicsPipelineLibrary;
} VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT;

typedef struct VkPhysicalDevicePipelineBinaryFeaturesKHR {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                       pipelineBinaries;
} VkPhysicalDevicePipelineBinaryFeaturesKHR;

typedef struct VkDevicePipelineBinaryInternalCacheControlKHR {
    VkStructureType   sType;
    const  void *   pNext;
    VkBool32                       disableInternalCache;
} VkDevicePipelineBinaryInternalCacheControlKHR;

typedef struct VkPhysicalDevicePipelineBinaryPropertiesKHR {
    VkStructureType   sType;
    void *         pNext;
    VkBool32       pipelineBinaryInternalCache;
    VkBool32       pipelineBinaryInternalCacheControl;
    VkBool32       pipelineBinaryPrefersInternalCache;
    VkBool32       pipelineBinaryPrecompiledInternalCache;
    VkBool32       pipelineBinaryCompressedData;
} VkPhysicalDevicePipelineBinaryPropertiesKHR;

typedef struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                         graphicsPipelineLibraryFastLinking;
    VkBool32                         graphicsPipelineLibraryIndependentInterpolationDecoration;
} VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT;

typedef struct VkGraphicsPipelineLibraryCreateInfoEXT {
    VkStructureType   sType;
    const  void *        pNext;
    VkGraphicsPipelineLibraryFlagsEXT   flags;
} VkGraphicsPipelineLibraryCreateInfoEXT;

typedef struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
    VkStructureType   sType;
    void *                                                            pNext;
    VkBool32                                                                                                descriptorSetHostMapping;
} VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;

typedef struct VkPhysicalDeviceNestedCommandBufferFeaturesEXT {
    VkStructureType   sType;
    void *      pNext;
    VkBool32                                          nestedCommandBuffer;
    VkBool32                                          nestedCommandBufferRendering;
    VkBool32                                          nestedCommandBufferSimultaneousUse;
} VkPhysicalDeviceNestedCommandBufferFeaturesEXT;

typedef struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT {
    VkStructureType   sType;
    void *                                                       pNext;
    VkBool32                                                                                           shaderModuleIdentifier;
} VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT;

typedef struct VkImageCompressionControlEXT {
    VkStructureType   sType;
    const  void *                         pNext;
    VkImageCompressionFlagsEXT     flags;
    uint32_t               compressionControlPlaneCount;
    VkImageCompressionFixedRateFlagsEXT *  pFixedRateFlags;
} VkImageCompressionControlEXT;

typedef struct VkPhysicalDeviceImageCompressionControlFeaturesEXT {
    VkStructureType   sType;
    void *  pNext;
    VkBool32                               imageCompressionControl;
} VkPhysicalDeviceImageCompressionControlFeaturesEXT;

typedef struct VkImageCompressionPropertiesEXT {
    VkStructureType   sType;
    void *                 pNext;
    VkImageCompressionFlagsEXT             imageCompressionFlags;
    VkImageCompressionFixedRateFlagsEXT    imageCompressionFixedRateFlags;
} VkImageCompressionPropertiesEXT;

typedef struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {
    VkStructureType   sType;
    void *  pNext;
    VkBool32                               imageCompressionControlSwapchain;
} VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT;

typedef struct VkImageSubresource2 {
    VkStructureType   sType;
    void *   pNext;
    VkImageSubresource       imageSubresource;
} VkImageSubresource2;

typedef struct VkImageSubresource2  VkImageSubresource2KHR;

typedef struct VkImageSubresource2  VkImageSubresource2EXT;

typedef struct VkSubresourceLayout2 {
    VkStructureType   sType;
    void *   pNext;
    VkSubresourceLayout      subresourceLayout;
} VkSubresourceLayout2;

typedef struct VkSubresourceLayout2  VkSubresourceLayout2KHR;

typedef struct VkSubresourceLayout2  VkSubresourceLayout2EXT;

typedef struct VkRenderPassCreationControlEXT {
    VkStructureType   sType;
    const  void *                                                  pNext;
    VkBool32                                                                      disallowMerging;
} VkRenderPassCreationControlEXT;

typedef struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT {
    VkStructureType   sType;
    void *                                                     pNext;
    VkBool32                                                                                         subpassMergeFeedback;
} VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT;

typedef struct VkMicromapBuildInfoEXT {
    VkStructureType   sType;
    const  void *                                                         pNext;
    VkMicromapTypeEXT                                       type;
    VkBuildMicromapFlagsEXT                 flags;
    VkBuildMicromapModeEXT            mode;
    VkMicromapEXT                     dstMicromap;
    uint32_t                                             usageCountsCount;
    const  VkMicromapUsageEXT *     pUsageCounts;
    const  VkMicromapUsageEXT * const*    ppUsageCounts;
    VkDeviceOrHostAddressConstKHR                                 data;
    VkDeviceOrHostAddressKHR                                      scratchData;
    VkDeviceOrHostAddressConstKHR                                 triangleArray;
    VkDeviceSize                                                                        triangleArrayStride;
} VkMicromapBuildInfoEXT;

typedef struct VkMicromapCreateInfoEXT {
    VkStructureType   sType;
    const  void *                              pNext;
    VkMicromapCreateFlagsEXT     createFlags;
    VkBuffer                                                  buffer;
    VkDeviceSize                                              offset;
    VkDeviceSize                                              size;
    VkMicromapTypeEXT                            type;
    VkDeviceAddress                           deviceAddress;
} VkMicromapCreateInfoEXT;

typedef struct VkCopyMicromapToMemoryInfoEXT {
    VkStructureType   sType;
    const  void *                                             pNext;
    VkMicromapEXT                               src;
    VkDeviceOrHostAddressKHR                                 dst;
    VkCopyMicromapModeEXT                       mode;
} VkCopyMicromapToMemoryInfoEXT;

typedef struct VkCopyMemoryToMicromapInfoEXT {
    VkStructureType   sType;
    const  void *                                             pNext;
    VkDeviceOrHostAddressConstKHR                            src;
    VkMicromapEXT                               dst;
    VkCopyMicromapModeEXT                       mode;
} VkCopyMemoryToMicromapInfoEXT;

typedef struct VkMicromapBuildSizesInfoEXT {
    VkStructureType   sType;
    const  void *         pNext;
    VkDeviceSize                         micromapSize;
    VkDeviceSize                         buildScratchSize;
    VkBool32                             discardable;
} VkMicromapBuildSizesInfoEXT;

typedef struct VkPhysicalDeviceOpacityMicromapFeaturesEXT {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           micromap;
    VkBool32                           micromapCaptureReplay;
    VkBool32                           micromapHostCommands;
} VkPhysicalDeviceOpacityMicromapFeaturesEXT;

typedef struct VkAccelerationStructureTrianglesOpacityMicromapEXT {
    VkStructureType   sType;
    void *                                   pNext;
    VkIndexType                                              indexType;
    VkDeviceOrHostAddressConstKHR      indexBuffer;
    VkDeviceSize                                             indexStride;
    uint32_t                                                 baseTriangle;
    uint32_t                                 usageCountsCount;
    const  VkMicromapUsageEXT *   pUsageCounts;
    const  VkMicromapUsageEXT * const*  ppUsageCounts;
    VkMicromapEXT                            micromap;
} VkAccelerationStructureTrianglesOpacityMicromapEXT;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPhysicalDeviceDisplacementMicromapFeaturesNV {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                           displacementMicromap;
} VkPhysicalDeviceDisplacementMicromapFeaturesNV;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkAccelerationStructureTrianglesDisplacementMicromapNV {
    VkStructureType   sType;
    void *                                   pNext;
    VkFormat                                                 displacementBiasAndScaleFormat;
    VkFormat                                                 displacementVectorFormat;
    VkDeviceOrHostAddressConstKHR      displacementBiasAndScaleBuffer;
    VkDeviceSize                                             displacementBiasAndScaleStride;
    VkDeviceOrHostAddressConstKHR      displacementVectorBuffer;
    VkDeviceSize                                             displacementVectorStride;
    VkDeviceOrHostAddressConstKHR      displacedMicromapPrimitiveFlags;
    VkDeviceSize                                             displacedMicromapPrimitiveFlagsStride;
    VkIndexType                                              indexType;
    VkDeviceOrHostAddressConstKHR      indexBuffer;
    VkDeviceSize                                             indexStride;
    uint32_t                                                 baseTriangle;
    uint32_t                                                            usageCountsCount;
    const  VkMicromapUsageEXT *                   pUsageCounts;
    const  VkMicromapUsageEXT * const*    ppUsageCounts;
    VkMicromapEXT                            micromap;
} VkAccelerationStructureTrianglesDisplacementMicromapNV;
#endif

typedef struct VkPhysicalDevicePipelinePropertiesFeaturesEXT {
    VkStructureType   sType;
    void *  pNext;
    VkBool32                             pipelinePropertiesIdentifier;
} VkPhysicalDevicePipelinePropertiesFeaturesEXT;

typedef struct VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             shaderEarlyAndLateFragmentTests;
} VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD;

typedef struct VkExternalMemoryAcquireUnmodifiedEXT {
    VkStructureType   sType;
    const  void *     pNext;
    VkBool32                         acquireUnmodifiedMemory;
} VkExternalMemoryAcquireUnmodifiedEXT;

typedef struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT {
    VkStructureType   sType;
    void *                                                    pNext;
    VkBool32                                                                                        nonSeamlessCubeMap;
} VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT;

typedef struct VkPhysicalDevicePipelineRobustnessFeatures {
    VkStructureType   sType;
    void *     pNext;
    VkBool32                                         pipelineRobustness;
} VkPhysicalDevicePipelineRobustnessFeatures;

typedef struct VkPhysicalDevicePipelineRobustnessFeatures  VkPhysicalDevicePipelineRobustnessFeaturesEXT;

typedef struct VkPhysicalDeviceImageProcessingFeaturesQCOM {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             textureSampleWeighted;
    VkBool32                             textureBoxFilter;
    VkBool32                             textureBlockMatch;
} VkPhysicalDeviceImageProcessingFeaturesQCOM;

typedef struct VkPhysicalDeviceTilePropertiesFeaturesQCOM {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           tileProperties;
} VkPhysicalDeviceTilePropertiesFeaturesQCOM;

typedef struct VkPhysicalDeviceAmigoProfilingFeaturesSEC {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           amigoProfiling;
} VkPhysicalDeviceAmigoProfilingFeaturesSEC;

typedef struct VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {
    VkStructureType   sType;
    void *               pNext;
    VkBool32                             attachmentFeedbackLoopLayout;
} VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;

typedef struct VkAttachmentFeedbackLoopInfoEXT {
    VkStructureType   sType;
    const  void *    pNext;
    VkBool32                        feedbackLoopEnable;
} VkAttachmentFeedbackLoopInfoEXT;

typedef struct VkPhysicalDeviceAddressBindingReportFeaturesEXT {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             reportAddressBinding;
} VkPhysicalDeviceAddressBindingReportFeaturesEXT;

typedef struct VkDeviceAddressBindingCallbackDataEXT {
    VkStructureType   sType;
    void *         pNext;
    VkDeviceAddressBindingFlagsEXT       flags;
    VkDeviceAddress                      baseAddress;
    VkDeviceSize                         size;
    VkDeviceAddressBindingTypeEXT        bindingType;
} VkDeviceAddressBindingCallbackDataEXT;

typedef struct VkPhysicalDeviceOpticalFlowFeaturesNV {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             opticalFlow;
} VkPhysicalDeviceOpticalFlowFeaturesNV;

typedef struct VkPhysicalDeviceOpticalFlowPropertiesNV {
    VkStructureType   sType;
    void *  pNext;
    VkOpticalFlowGridSizeFlagsNV   supportedOutputGridSizes;
    VkOpticalFlowGridSizeFlagsNV   supportedHintGridSizes;
    VkBool32       hintSupported;
    VkBool32       costSupported;
    VkBool32       bidirectionalFlowSupported;
    VkBool32       globalFlowSupported;
    uint32_t    minWidth;
    uint32_t    minHeight;
    uint32_t    maxWidth;
    uint32_t    maxHeight;
    uint32_t    maxNumRegionsOfInterest;
} VkPhysicalDeviceOpticalFlowPropertiesNV;

typedef struct VkOpticalFlowImageFormatInfoNV {
    VkStructureType   sType;
    const  void *   pNext;
    VkOpticalFlowUsageFlagsNV   usage;
} VkOpticalFlowImageFormatInfoNV;

typedef struct VkOpticalFlowSessionCreateInfoNV {
    VkStructureType   sType;
    void *                                               pNext;
    uint32_t                                                             width;
    uint32_t                                                             height;
    VkFormat                                                             imageFormat;
    VkFormat                                                             flowVectorFormat;
    VkFormat                                             costFormat;
    VkOpticalFlowGridSizeFlagsNV                                         outputGridSize;
    VkOpticalFlowGridSizeFlagsNV                         hintGridSize;
    VkOpticalFlowPerformanceLevelNV                      performanceLevel;
    VkOpticalFlowSessionCreateFlagsNV                    flags;
} VkOpticalFlowSessionCreateInfoNV;

typedef struct VkOpticalFlowExecuteInfoNV {
    VkStructureType   sType;
    void *  pNext;
    VkOpticalFlowExecuteFlagsNV          flags;
    uint32_t                             regionCount;
    const  VkRect2D *                   pRegions;
} VkOpticalFlowExecuteInfoNV;

typedef struct VkPhysicalDeviceFaultFeaturesEXT {
    VkStructureType   sType;
    void *                pNext;
    VkBool32                              deviceFault;
    VkBool32                              deviceFaultVendorBinary;
} VkPhysicalDeviceFaultFeaturesEXT;

typedef struct VkDeviceFaultAddressInfoEXT {
    VkDeviceFaultAddressTypeEXT           addressType;
    VkDeviceAddress                       reportedAddress;
    VkDeviceSize                          addressPrecision;
} VkDeviceFaultAddressInfoEXT;

typedef struct VkDeviceFaultCountsEXT {
    VkStructureType   sType;
    void *                pNext;
    uint32_t                              addressInfoCount;
    uint32_t                              vendorInfoCount;
    VkDeviceSize                          vendorBinarySize;
} VkDeviceFaultCountsEXT;

typedef struct VkDeviceFaultInfoEXT {
    VkStructureType   sType;
    void *                             pNext;
    char   description [ VK_MAX_DESCRIPTION_SIZE ];
    VkDeviceFaultAddressInfoEXT *      pAddressInfos;
    VkDeviceFaultVendorInfoEXT *       pVendorInfos;
    void *                             pVendorBinaryData;
} VkDeviceFaultInfoEXT;

typedef struct VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT {
    VkStructureType   sType;
    void *                                                             pNext;
    VkBool32                                                                                                 pipelineLibraryGroupHandles;
} VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT;

typedef struct VkDepthBiasRepresentationInfoEXT {
    VkStructureType   sType;
    const  void *         pNext;
    VkDepthBiasRepresentationEXT         depthBiasRepresentation;
    VkBool32                             depthBiasExact;
} VkDepthBiasRepresentationInfoEXT;

typedef struct VkDecompressMemoryRegionNV {
    VkDeviceAddress     srcAddress;
    VkDeviceAddress     dstAddress;
    VkDeviceSize        compressedSize;
    VkDeviceSize        decompressedSize;
    VkMemoryDecompressionMethodFlagsNV   decompressionMethod;
} VkDecompressMemoryRegionNV;

typedef struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM {
    VkStructureType   sType;
    void *     pNext;
    VkBool32                   shaderCoreBuiltins;
} VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM;

typedef struct VkFrameBoundaryEXT {
    VkStructureType   sType;
    const  void *                         pNext;
    VkFrameBoundaryFlagsEXT              flags;
    uint64_t                                             frameID;
    uint32_t                             imageCount;
    const  VkImage *     pImages;
    uint32_t                             bufferCount;
    const  VkBuffer *   pBuffers;
    uint64_t                             tagName;
    size_t                               tagSize;
    const  void *           pTag;
} VkFrameBoundaryEXT;

typedef struct VkPhysicalDeviceFrameBoundaryFeaturesEXT {
    VkStructureType   sType;
    void *     pNext;
    VkBool32                   frameBoundary;
} VkPhysicalDeviceFrameBoundaryFeaturesEXT;

typedef struct VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT {
    VkStructureType   sType;
    void *     pNext;
    VkBool32                   dynamicRenderingUnusedAttachments;
} VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT;

typedef struct VkSurfacePresentScalingCapabilitiesKHR {
    VkStructureType   sType;
    void *                     pNext;
    VkPresentScalingFlagsKHR   supportedPresentScaling;
    VkPresentGravityFlagsKHR   supportedPresentGravityX;
    VkPresentGravityFlagsKHR   supportedPresentGravityY;
    VkExtent2D                 minScaledImageExtent;
    VkExtent2D                 maxScaledImageExtent;
} VkSurfacePresentScalingCapabilitiesKHR;

typedef struct VkSurfacePresentScalingCapabilitiesKHR  VkSurfacePresentScalingCapabilitiesEXT;

typedef struct VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR {
    VkStructureType   sType;
    void *                pNext;
    VkBool32                              swapchainMaintenance1;
} VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR;

typedef struct VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR  VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT;

typedef struct VkSwapchainPresentScalingCreateInfoKHR {
    VkStructureType   sType;
    const  void *                  pNext;
    VkPresentScalingFlagsKHR      scalingBehavior;
    VkPresentGravityFlagsKHR      presentGravityX;
    VkPresentGravityFlagsKHR      presentGravityY;
} VkSwapchainPresentScalingCreateInfoKHR;

typedef struct VkSwapchainPresentScalingCreateInfoKHR  VkSwapchainPresentScalingCreateInfoEXT;

typedef struct VkPhysicalDeviceDepthBiasControlFeaturesEXT {
    VkStructureType   sType;
    void *               pNext;
    VkBool32                             depthBiasControl;
    VkBool32                             leastRepresentableValueForceUnormRepresentation;
    VkBool32                             floatRepresentation;
    VkBool32                             depthBiasExact;
} VkPhysicalDeviceDepthBiasControlFeaturesEXT;

typedef struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV {
    VkStructureType   sType;
    void *                                                       pNext;
    VkBool32                                                                                           rayTracingInvocationReorder;
} VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV;

typedef struct VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV {
    VkStructureType   sType;
    void *   pNext;
    VkBool32                                       extendedSparseAddressSpace;
} VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV;

typedef struct VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV {
    VkStructureType   sType;
    void *                         pNext;
    VkDeviceSize                   extendedSparseAddressSpaceSize;
    VkImageUsageFlags          extendedSparseImageUsageFlags;
    VkBufferUsageFlags         extendedSparseBufferUsageFlags;
} VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV;

typedef struct VkDirectDriverLoadingInfoLUNARG {
    VkStructureType   sType;
    void *                                   pNext;
    VkDirectDriverLoadingFlagsLUNARG                                               flags;
    PFN_vkGetInstanceProcAddrLUNARG                          pfnGetInstanceProcAddr;
} VkDirectDriverLoadingInfoLUNARG;

typedef struct VkDirectDriverLoadingListLUNARG {
    VkStructureType   sType;
    const  void *            pNext;
    VkDirectDriverLoadingModeLUNARG                               mode;
    uint32_t                                                      driverCount;
    const  VkDirectDriverLoadingInfoLUNARG *     pDrivers;
} VkDirectDriverLoadingListLUNARG;

typedef struct VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           multiviewPerViewViewports;
} VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM;

typedef struct VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                       rayTracingPositionFetch;
} VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR;

typedef struct VkDeviceImageSubresourceInfo {
    VkStructureType   sType;
    const  void *                                               pNext;
    const  VkImageCreateInfo *                                                  pCreateInfo;
    const  VkImageSubresource2 *                                                pSubresource;
} VkDeviceImageSubresourceInfo;

typedef struct VkDeviceImageSubresourceInfo  VkDeviceImageSubresourceInfoKHR;

typedef struct VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           multiviewPerViewRenderAreas;
} VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM;

typedef struct VkMemoryMapInfo {
    VkStructureType   sType;
    const  void *       pNext;
    VkMemoryMapFlags   flags;
    VkDeviceMemory   memory;
    VkDeviceSize                       offset;
    VkDeviceSize                       size;
} VkMemoryMapInfo;

typedef struct VkMemoryMapInfo  VkMemoryMapInfoKHR;

typedef struct VkMemoryUnmapInfo {
    VkStructureType   sType;
    const  void *             pNext;
    VkMemoryUnmapFlags    flags;
    VkDeviceMemory         memory;
} VkMemoryUnmapInfo;

typedef struct VkMemoryUnmapInfo  VkMemoryUnmapInfoKHR;

typedef struct VkPhysicalDeviceShaderObjectFeaturesEXT {
    VkStructureType   sType;
    void *                                            pNext;
    VkBool32                                                                                shaderObject;
} VkPhysicalDeviceShaderObjectFeaturesEXT;

typedef struct VkShaderCreateInfoEXT {
    VkStructureType         sType;
    const  void *                                              pNext;
    VkShaderCreateFlagsEXT                                    flags;
    VkShaderStageFlagBits                                                     stage;
    VkShaderStageFlags                                        nextStage;
    VkShaderCodeTypeEXT                                                       codeType;
    size_t                                                                    codeSize;
    const  void *                                               pCode;
    const  char *                        pName;
    uint32_t                                                  setLayoutCount;
    const  VkDescriptorSetLayout *        pSetLayouts;
    uint32_t                                                  pushConstantRangeCount;
    const  VkPushConstantRange *  pPushConstantRanges;
    const  VkSpecializationInfo *                              pSpecializationInfo;
} VkShaderCreateInfoEXT;

typedef struct VkPhysicalDeviceShaderTileImageFeaturesEXT {
    VkStructureType   sType;
    void *               pNext;
    VkBool32                             shaderTileImageColorReadAccess;
    VkBool32                             shaderTileImageDepthReadAccess;
    VkBool32                             shaderTileImageStencilReadAccess;
} VkPhysicalDeviceShaderTileImageFeaturesEXT;

typedef struct VkPhysicalDeviceShaderTileImagePropertiesEXT {
    VkStructureType   sType;
    void *               pNext;
    VkBool32             shaderTileImageCoherentReadAccelerated;
    VkBool32             shaderTileImageReadSampleFromPixelRateInvocation;
    VkBool32             shaderTileImageReadFromHelperInvocation;
} VkPhysicalDeviceShaderTileImagePropertiesEXT;

#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef struct VkScreenBufferPropertiesQNX {
    VkStructureType   sType;
    void *                               pNext;
    VkDeviceSize                         allocationSize;
    uint32_t                             memoryTypeBits;
} VkScreenBufferPropertiesQNX;
#endif

#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef struct VkScreenBufferFormatPropertiesQNX {
    VkStructureType   sType;
    void *                               pNext;
    VkFormat                             format;
    uint64_t                             externalFormat;
    uint64_t                             screenUsage;
    VkFormatFeatureFlags                 formatFeatures;
    VkComponentMapping                   samplerYcbcrConversionComponents;
    VkSamplerYcbcrModelConversion        suggestedYcbcrModel;
    VkSamplerYcbcrRange                  suggestedYcbcrRange;
    VkChromaLocation                     suggestedXChromaOffset;
    VkChromaLocation                     suggestedYChromaOffset;
} VkScreenBufferFormatPropertiesQNX;
#endif

#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef struct VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX {
    VkStructureType   sType;
    void *                        pNext;
    VkBool32                                      screenBufferImport;
} VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX;
#endif

typedef struct VkPhysicalDeviceCooperativeMatrixFeaturesKHR {
    VkStructureType   sType;
    void *                pNext;
    VkBool32                              cooperativeMatrix;
    VkBool32                              cooperativeMatrixRobustBufferAccess;
} VkPhysicalDeviceCooperativeMatrixFeaturesKHR;

typedef struct VkCooperativeMatrixPropertiesKHR {
    VkStructureType   sType;
    void *                                pNext;
    uint32_t                              MSize;
    uint32_t                              NSize;
    uint32_t                              KSize;
    VkComponentTypeKHR                    AType;
    VkComponentTypeKHR                    BType;
    VkComponentTypeKHR                    CType;
    VkComponentTypeKHR                    ResultType;
    VkBool32                              saturatingAccumulation;
    VkScopeKHR                            scope;
} VkCooperativeMatrixPropertiesKHR;

typedef struct VkPhysicalDeviceCooperativeMatrixPropertiesKHR {
    VkStructureType   sType;
    void *                                pNext;
    VkShaderStageFlags                cooperativeMatrixSupportedStages;
} VkPhysicalDeviceCooperativeMatrixPropertiesKHR;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPhysicalDeviceShaderEnqueueFeaturesAMDX {
    VkStructureType   sType;
    void *                 pNext;
    VkBool32                                                     shaderEnqueue;
    VkBool32                                                     shaderMeshEnqueue;
} VkPhysicalDeviceShaderEnqueueFeaturesAMDX;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkExecutionGraphPipelineCreateInfoAMDX {
    VkStructureType   sType;
    const  void *                                 pNext;
    VkPipelineCreateFlags                        flags;
    uint32_t                                     stageCount;
    const  VkPipelineShaderStageCreateInfo *     pStages;
    const  VkPipelineLibraryCreateInfoKHR *       pLibraryInfo;
    VkPipelineLayout                                             layout;
    VkPipeline             basePipelineHandle;
    int32_t                                                      basePipelineIndex;
} VkExecutionGraphPipelineCreateInfoAMDX;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkExecutionGraphPipelineScratchSizeAMDX {
    VkStructureType   sType;
    void *                 pNext;
    VkDeviceSize                                                 minSize;
    VkDeviceSize                                                 maxSize;
    VkDeviceSize                                                 sizeGranularity;
} VkExecutionGraphPipelineScratchSizeAMDX;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkDispatchGraphInfoAMDX {
    uint32_t                                                     nodeIndex;
    uint32_t                                     payloadCount;
    VkDeviceOrHostAddressConstAMDX             payloads;
    uint64_t                                                     payloadStride;
} VkDispatchGraphInfoAMDX;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkDispatchGraphCountInfoAMDX {
    uint32_t                                     count;
    VkDeviceOrHostAddressConstAMDX                    infos;
    uint64_t                                                     stride;
} VkDispatchGraphCountInfoAMDX;
#endif

typedef struct VkPhysicalDeviceAntiLagFeaturesAMD {
    VkStructureType   sType;
    void *                 pNext;
    VkBool32                                                     antiLag;
} VkPhysicalDeviceAntiLagFeaturesAMD;

typedef struct VkAntiLagDataAMD {
    VkStructureType   sType;
    const  void *           pNext;
    VkAntiLagModeAMD                                             mode;
    uint32_t                                                     maxFPS;
    const  VkAntiLagPresentationInfoAMD *         pPresentationInfo;
} VkAntiLagDataAMD;

typedef struct VkPhysicalDeviceTileMemoryHeapFeaturesQCOM {
    VkStructureType   sType;
    void *                 pNext;
    VkBool32                                                     tileMemoryHeap;
} VkPhysicalDeviceTileMemoryHeapFeaturesQCOM;

typedef struct VkPhysicalDeviceTileMemoryHeapPropertiesQCOM {
    VkStructureType   sType;
    void *                 pNext;
    VkBool32                                     queueSubmitBoundary;
    VkBool32                                     tileBufferTransfers;
} VkPhysicalDeviceTileMemoryHeapPropertiesQCOM;

typedef struct VkTileMemorySizeInfoQCOM {
    VkStructureType   sType;
    const  void *           pNext;
    VkDeviceSize                                                 size;
} VkTileMemorySizeInfoQCOM;

typedef struct VkTileMemoryRequirementsQCOM {
    VkStructureType   sType;
    void *                                       pNext;
    VkDeviceSize                                                 size;
    VkDeviceSize                                                 alignment;
} VkTileMemoryRequirementsQCOM;

typedef struct VkBindDescriptorSetsInfo {
    VkStructureType   sType;
    const  void *                                     pNext;
    VkShaderStageFlags                                               stageFlags;
    VkPipelineLayout                                 layout;
    uint32_t                                         firstSet;
    uint32_t                                                         descriptorSetCount;
    const  VkDescriptorSet *                 pDescriptorSets;
    uint32_t                                         dynamicOffsetCount;
    const  uint32_t *   pDynamicOffsets;
} VkBindDescriptorSetsInfo;

typedef struct VkBindDescriptorSetsInfo  VkBindDescriptorSetsInfoKHR;

typedef struct VkPushConstantsInfo {
    VkStructureType   sType;
    const  void *                                     pNext;
    VkPipelineLayout                                 layout;
    VkShaderStageFlags                                               stageFlags;
    uint32_t                                         offset;
    uint32_t                                                         size;
    const  void *                                          pValues;
} VkPushConstantsInfo;

typedef struct VkPushConstantsInfo  VkPushConstantsInfoKHR;

typedef struct VkPushDescriptorSetInfo {
    VkStructureType   sType;
    const  void *                                     pNext;
    VkShaderStageFlags                                               stageFlags;
    VkPipelineLayout                                 layout;
    uint32_t                                         set;
    uint32_t                                                         descriptorWriteCount;
    const  VkWriteDescriptorSet *          pDescriptorWrites;
} VkPushDescriptorSetInfo;

typedef struct VkPushDescriptorSetInfo  VkPushDescriptorSetInfoKHR;

typedef struct VkSetDescriptorBufferOffsetsInfoEXT {
    VkStructureType   sType;
    const  void *                                     pNext;
    VkShaderStageFlags                                               stageFlags;
    VkPipelineLayout                                 layout;
    uint32_t                                         firstSet;
    uint32_t                                                         setCount;
    const  uint32_t *                                  pBufferIndices;
    const  VkDeviceSize *                              pOffsets;
} VkSetDescriptorBufferOffsetsInfoEXT;

typedef struct VkBindDescriptorBufferEmbeddedSamplersInfoEXT {
    VkStructureType   sType;
    const  void *                                     pNext;
    VkShaderStageFlags                                               stageFlags;
    VkPipelineLayout                                 layout;
    uint32_t                                         set;
} VkBindDescriptorBufferEmbeddedSamplersInfoEXT;

typedef struct VkPhysicalDeviceCubicClampFeaturesQCOM {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           cubicRangeClamp;
} VkPhysicalDeviceCubicClampFeaturesQCOM;

typedef struct VkPhysicalDeviceYcbcrDegammaFeaturesQCOM {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                       ycbcrDegamma;
} VkPhysicalDeviceYcbcrDegammaFeaturesQCOM;

typedef struct VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM {
    VkStructureType   sType;
    void *               pNext;
    VkBool32                             enableYDegamma;
    VkBool32                             enableCbCrDegamma;
} VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM;

typedef struct VkPhysicalDeviceCubicWeightsFeaturesQCOM {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           selectableCubicWeights;
} VkPhysicalDeviceCubicWeightsFeaturesQCOM;

typedef struct VkPhysicalDeviceImageProcessing2FeaturesQCOM {
    VkStructureType   sType;
    void *    pNext;
    VkBool32                                        textureBlockMatch2;
} VkPhysicalDeviceImageProcessing2FeaturesQCOM;

typedef struct VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV {
    VkStructureType   sType;
    void *      pNext;
    VkBool32                                          descriptorPoolOverallocation;
} VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV;

typedef struct VkPhysicalDevicePerStageDescriptorSetFeaturesNV {
    VkStructureType   sType;
    void *  pNext;
    VkBool32                                      perStageDescriptorSet;
    VkBool32                                      dynamicPipelineLayout;
} VkPhysicalDevicePerStageDescriptorSetFeaturesNV;

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkPhysicalDeviceExternalFormatResolveFeaturesANDROID {
    VkStructureType   sType;
    void *                 pNext;
    VkBool32                               externalFormatResolve;
} VkPhysicalDeviceExternalFormatResolveFeaturesANDROID;
#endif

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkPhysicalDeviceExternalFormatResolvePropertiesANDROID {
    VkStructureType   sType;
    void *                 pNext;
    VkBool32               nullColorAttachmentWithExternalFormatResolve;
    VkChromaLocation    externalFormatResolveChromaOffsetX;
    VkChromaLocation    externalFormatResolveChromaOffsetY;
} VkPhysicalDeviceExternalFormatResolvePropertiesANDROID;
#endif

typedef struct VkLatencySleepModeInfoNV {
    VkStructureType   sType;
    const  void *  pNext;
    VkBool32   lowLatencyMode;
    VkBool32   lowLatencyBoost;
    uint32_t   minimumIntervalUs;
} VkLatencySleepModeInfoNV;

typedef struct VkGetLatencyMarkerInfoNV {
    VkStructureType   sType;
    const  void *  pNext;
    uint32_t   timingCount;
    VkLatencyTimingsFrameReportNV *  pTimings;
} VkGetLatencyMarkerInfoNV;

typedef struct VkSwapchainLatencyCreateInfoNV {
    VkStructureType   sType;
    const  void *                         pNext;
    VkBool32                             latencyModeEnable;
} VkSwapchainLatencyCreateInfoNV;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPhysicalDeviceCudaKernelLaunchFeaturesNV {
    VkStructureType   sType;
    void *     pNext;
    VkBool32                         cudaKernelLaunchFeatures;
} VkPhysicalDeviceCudaKernelLaunchFeaturesNV;
#endif

typedef struct VkPhysicalDeviceSchedulingControlsFeaturesARM {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           schedulingControls;
} VkPhysicalDeviceSchedulingControlsFeaturesARM;

typedef struct VkPhysicalDeviceSchedulingControlsPropertiesARM {
    VkStructureType   sType;
    void *                                               pNext;
    VkPhysicalDeviceSchedulingControlsFlagsARM       schedulingControlsFlags;
} VkPhysicalDeviceSchedulingControlsPropertiesARM;

typedef struct VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG {
    VkStructureType   sType;
    void *                           pNext;
    VkBool32                                         relaxedLineRasterization;
} VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG;

typedef struct VkPhysicalDeviceRenderPassStripedFeaturesARM {
    VkStructureType   sType;
    void *     pNext;
    VkBool32                                         renderPassStriped;
} VkPhysicalDeviceRenderPassStripedFeaturesARM;

typedef struct VkRenderPassStripeSubmitInfoARM {
    VkStructureType   sType;
    const  void *                                  pNext;
    uint32_t                                                      stripeSemaphoreInfoCount;
    const  VkSemaphoreSubmitInfo *  pStripeSemaphoreInfos;
} VkRenderPassStripeSubmitInfoARM;

typedef struct VkPhysicalDevicePipelineOpacityMicromapFeaturesARM {
    VkStructureType   sType;
    void *      pNext;
    VkBool32                                          pipelineOpacityMicromap;
} VkPhysicalDevicePipelineOpacityMicromapFeaturesARM;

typedef struct VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR {
    VkStructureType   sType;
    void *     pNext;
    VkBool32   shaderMaximalReconvergence;
} VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR;

typedef struct VkPhysicalDeviceShaderSubgroupRotateFeatures {
    VkStructureType   sType;
    void *     pNext;
    VkBool32   shaderSubgroupRotate;
    VkBool32   shaderSubgroupRotateClustered;
} VkPhysicalDeviceShaderSubgroupRotateFeatures;

typedef struct VkPhysicalDeviceShaderSubgroupRotateFeatures  VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR;

typedef struct VkPhysicalDeviceShaderExpectAssumeFeatures {
    VkStructureType   sType;
    void *      pNext;
    VkBool32                                          shaderExpectAssume;
} VkPhysicalDeviceShaderExpectAssumeFeatures;

typedef struct VkPhysicalDeviceShaderExpectAssumeFeatures  VkPhysicalDeviceShaderExpectAssumeFeaturesKHR;

typedef struct VkPhysicalDeviceShaderFloatControls2Features {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                       shaderFloatControls2;
} VkPhysicalDeviceShaderFloatControls2Features;

typedef struct VkPhysicalDeviceShaderFloatControls2Features  VkPhysicalDeviceShaderFloatControls2FeaturesKHR;

typedef struct VkPhysicalDeviceDynamicRenderingLocalReadFeatures {
    VkStructureType   sType;
    void *                                 pNext;
    VkBool32                                                                     dynamicRenderingLocalRead;
} VkPhysicalDeviceDynamicRenderingLocalReadFeatures;

typedef struct VkPhysicalDeviceDynamicRenderingLocalReadFeatures  VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR;

typedef struct VkPhysicalDeviceShaderQuadControlFeaturesKHR {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             shaderQuadControl;
} VkPhysicalDeviceShaderQuadControlFeaturesKHR;

typedef struct VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV {
    VkStructureType   sType;
    void *                pNext;
    VkBool32                              shaderFloat16VectorAtomics;
} VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV;

typedef struct VkPhysicalDeviceMapMemoryPlacedFeaturesEXT {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           memoryMapPlaced;
    VkBool32                           memoryMapRangePlaced;
    VkBool32                           memoryUnmapReserve;
} VkPhysicalDeviceMapMemoryPlacedFeaturesEXT;

typedef struct VkPhysicalDeviceMapMemoryPlacedPropertiesEXT {
    VkStructureType   sType;
    void *             pNext;
    VkDeviceSize   minPlacedMemoryMapAlignment;
} VkPhysicalDeviceMapMemoryPlacedPropertiesEXT;

typedef struct VkPhysicalDeviceShaderBfloat16FeaturesKHR {
    VkStructureType   sType;
    void *                            pNext;
    VkBool32                                          shaderBFloat16Type;
    VkBool32                                          shaderBFloat16DotProduct;
    VkBool32                                          shaderBFloat16CooperativeMatrix;
} VkPhysicalDeviceShaderBfloat16FeaturesKHR;

typedef struct VkPhysicalDeviceRawAccessChainsFeaturesNV {
    VkStructureType   sType;
    void *                            pNext;
    VkBool32                                          shaderRawAccessChains;
} VkPhysicalDeviceRawAccessChainsFeaturesNV;

typedef struct VkPhysicalDeviceCommandBufferInheritanceFeaturesNV {
    VkStructureType   sType;
    void *                            pNext;
    VkBool32                                          commandBufferInheritance;
} VkPhysicalDeviceCommandBufferInheritanceFeaturesNV;

typedef struct VkPhysicalDeviceImageAlignmentControlFeaturesMESA {
    VkStructureType   sType;
    void *                            pNext;
    VkBool32                                          imageAlignmentControl;
} VkPhysicalDeviceImageAlignmentControlFeaturesMESA;

typedef struct VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT {
    VkStructureType   sType;
    void *      pNext;
    VkBool32                                          shaderReplicatedComposites;
} VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT;

typedef struct VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR {
    VkStructureType   sType;
    void *                            pNext;
    VkBool32                                          presentModeFifoLatestReady;
} VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR;

typedef struct VkPhysicalDeviceCooperativeMatrix2FeaturesNV {
    VkStructureType   sType;
    void *                pNext;
    VkBool32                              cooperativeMatrixWorkgroupScope;
    VkBool32                              cooperativeMatrixFlexibleDimensions;
    VkBool32                              cooperativeMatrixReductions;
    VkBool32                              cooperativeMatrixConversions;
    VkBool32                              cooperativeMatrixPerElementOperations;
    VkBool32                              cooperativeMatrixTensorAddressing;
    VkBool32                              cooperativeMatrixBlockLoads;
} VkPhysicalDeviceCooperativeMatrix2FeaturesNV;

typedef struct VkCooperativeMatrixFlexibleDimensionsPropertiesNV {
    VkStructureType   sType;
    void *                pNext;
    uint32_t                              MGranularity;
    uint32_t                              NGranularity;
    uint32_t                              KGranularity;
    VkComponentTypeKHR                    AType;
    VkComponentTypeKHR                    BType;
    VkComponentTypeKHR                    CType;
    VkComponentTypeKHR                    ResultType;
    VkBool32                              saturatingAccumulation;
    VkScopeKHR                            scope;
    uint32_t                              workgroupInvocations;
} VkCooperativeMatrixFlexibleDimensionsPropertiesNV;

typedef struct VkPhysicalDeviceHdrVividFeaturesHUAWEI {
    VkStructureType   sType;
    void *     pNext;
    VkBool32                                         hdrVivid;
} VkPhysicalDeviceHdrVividFeaturesHUAWEI;

typedef struct VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT {
    VkStructureType   sType;
    void *                            pNext;
    VkBool32                                          vertexAttributeRobustness;
} VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPhysicalDeviceDenseGeometryFormatFeaturesAMDX {
    VkStructureType   sType;
    void *      pNext;
    VkBool32                                          denseGeometryFormat;
} VkPhysicalDeviceDenseGeometryFormatFeaturesAMDX;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkAccelerationStructureDenseGeometryFormatTrianglesDataAMDX {
    VkStructureType   sType;
    const  void *                      pNext;
    VkDeviceOrHostAddressConstKHR                     compressedData;
    VkDeviceSize                                      dataSize;
    uint32_t                                          numTriangles;
    uint32_t                                          numVertices;
    uint32_t                                          maxPrimitiveIndex;
    uint32_t                                          maxGeometryIndex;
    VkCompressedTriangleFormatAMDX                    format;
} VkAccelerationStructureDenseGeometryFormatTrianglesDataAMDX;
#endif

typedef struct VkPhysicalDeviceDepthClampZeroOneFeaturesKHR {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                       depthClampZeroOne;
} VkPhysicalDeviceDepthClampZeroOneFeaturesKHR;

typedef struct VkPhysicalDeviceCooperativeVectorFeaturesNV {
    VkStructureType   sType;
    void *                pNext;
    VkBool32                              cooperativeVector;
    VkBool32                              cooperativeVectorTraining;
} VkPhysicalDeviceCooperativeVectorFeaturesNV;

typedef struct VkCooperativeVectorPropertiesNV {
    VkStructureType   sType;
    void *                pNext;
    VkComponentTypeKHR                    inputType;
    VkComponentTypeKHR                    inputInterpretation;
    VkComponentTypeKHR                    matrixInterpretation;
    VkComponentTypeKHR                    biasInterpretation;
    VkComponentTypeKHR                    resultType;
    VkBool32                              transpose;
} VkCooperativeVectorPropertiesNV;

typedef struct VkPhysicalDeviceCooperativeVectorPropertiesNV {
    VkStructureType   sType;
    void *                                pNext;
    VkShaderStageFlags                cooperativeVectorSupportedStages;
    VkBool32                            cooperativeVectorTrainingFloat16Accumulation;
    VkBool32                            cooperativeVectorTrainingFloat32Accumulation;
    uint32_t                              maxCooperativeVectorComponents;
} VkPhysicalDeviceCooperativeVectorPropertiesNV;

typedef struct VkConvertCooperativeVectorMatrixInfoNV {
    VkStructureType   sType;
    const  void *                          pNext;
    size_t                                                srcSize;
    VkDeviceOrHostAddressConstKHR                         srcData;
    size_t *                        pDstSize;
    VkDeviceOrHostAddressKHR                              dstData;
    VkComponentTypeKHR                                    srcComponentType;
    VkComponentTypeKHR                                    dstComponentType;
    uint32_t                                              numRows;
    uint32_t                                              numColumns;
    VkCooperativeVectorMatrixLayoutNV                     srcLayout;
    size_t                                                srcStride;
    VkCooperativeVectorMatrixLayoutNV                     dstLayout;
    size_t                                                dstStride;
} VkConvertCooperativeVectorMatrixInfoNV;

typedef struct VkPhysicalDeviceTileShadingFeaturesQCOM {
    VkStructureType   sType;
    void *         pNext;
    VkBool32                             tileShading;
    VkBool32                             tileShadingFragmentStage;
    VkBool32                             tileShadingColorAttachments;
    VkBool32                             tileShadingDepthAttachments;
    VkBool32                             tileShadingStencilAttachments;
    VkBool32                             tileShadingInputAttachments;
    VkBool32                             tileShadingSampledAttachments;
    VkBool32                             tileShadingPerTileDraw;
    VkBool32                             tileShadingPerTileDispatch;
    VkBool32                             tileShadingDispatchTile;
    VkBool32                             tileShadingApron;
    VkBool32                             tileShadingAnisotropicApron;
    VkBool32                             tileShadingAtomicOps;
    VkBool32                             tileShadingImageProcessing;
} VkPhysicalDeviceTileShadingFeaturesQCOM;

typedef struct VkPhysicalDeviceTileShadingPropertiesQCOM {
    VkStructureType   sType;
    void *                     pNext;
    uint32_t                   maxApronSize;
    VkBool32                   preferNonCoherent;
    VkExtent2D             tileGranularity;
    VkExtent2D                 maxTileShadingRate;
} VkPhysicalDeviceTileShadingPropertiesQCOM;

typedef struct VkRenderPassTileShadingCreateInfoQCOM {
    VkStructureType   sType;
    const  void *                       pNext;
    VkTileShadingRenderPassFlagsQCOM   flags;
    VkExtent2D                         tileApronSize;
} VkRenderPassTileShadingCreateInfoQCOM;

typedef struct VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE {
    VkStructureType   sType;
    void *                             pNext;
    VkBool32                                           fragmentDensityMapLayered;
} VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPhysicalDevicePresentMeteringFeaturesNV {
    VkStructureType   sType;
    void *                            pNext;
    VkBool32                                          presentMetering;
} VkPhysicalDevicePresentMeteringFeaturesNV;
#endif

typedef struct VkPhysicalDeviceFormatPackFeaturesARM {
    VkStructureType   sType;
    void *               pNext;
    VkBool32                             formatPack;
} VkPhysicalDeviceFormatPackFeaturesARM;

typedef struct VkTensorDescriptionARM {
    VkStructureType   sType;
    const  void *               pNext;
    VkTensorTilingARM                          tiling;
    VkFormat                                   format;
    uint32_t                                   dimensionCount;
    const  int64_t *       pDimensions;
    const  int64_t *  pStrides;
    VkTensorUsageFlagsARM                      usage;
} VkTensorDescriptionARM;

typedef struct VkTensorCreateInfoARM {
    VkStructureType   sType;
    const  void *             pNext;
    VkTensorCreateFlagsARM   flags;
    const  VkTensorDescriptionARM *           pDescription;
    VkSharingMode                            sharingMode;
    uint32_t                 queueFamilyIndexCount;
    const  uint32_t *   pQueueFamilyIndices;
} VkTensorCreateInfoARM;

typedef struct VkTensorViewCreateInfoARM {
    VkStructureType   sType;
    const  void *                 pNext;
    VkTensorViewCreateFlagsARM   flags;
    VkTensorARM                                  tensor;
    VkFormat                                     format;
} VkTensorViewCreateInfoARM;

typedef struct VkBindTensorMemoryInfoARM {
    VkStructureType   sType;
    const  void *       pNext;
    VkTensorARM                        tensor;
    VkDeviceMemory                     memory;
    VkDeviceSize                       memoryOffset;
} VkBindTensorMemoryInfoARM;

typedef struct VkTensorFormatPropertiesARM {
    VkStructureType   sType;
    const  void *                 pNext;
    VkFormatFeatureFlags2    optimalTilingTensorFeatures;
    VkFormatFeatureFlags2    linearTilingTensorFeatures;
} VkTensorFormatPropertiesARM;

typedef struct VkPhysicalDeviceTensorPropertiesARM {
    VkStructureType   sType;
    void *           pNext;
    uint32_t         maxTensorDimensionCount;
    uint64_t         maxTensorElements;
    uint64_t         maxPerDimensionTensorElements;
    int64_t          maxTensorStride;
    uint64_t         maxTensorSize;
    uint32_t         maxTensorShaderAccessArrayLength;
    uint32_t         maxTensorShaderAccessSize;
    uint32_t         maxDescriptorSetStorageTensors;
    uint32_t         maxPerStageDescriptorSetStorageTensors;
    uint32_t         maxDescriptorSetUpdateAfterBindStorageTensors;
    uint32_t         maxPerStageDescriptorUpdateAfterBindStorageTensors;
    VkBool32         shaderStorageTensorArrayNonUniformIndexingNative;
    VkShaderStageFlags     shaderTensorSupportedStages;
} VkPhysicalDeviceTensorPropertiesARM;

typedef struct VkTensorMemoryBarrierARM {
    VkStructureType   sType;
    const  void *             pNext;
    VkPipelineStageFlags2    srcStageMask;
    VkAccessFlags2           srcAccessMask;
    VkPipelineStageFlags2    dstStageMask;
    VkAccessFlags2           dstAccessMask;
    uint32_t                                 srcQueueFamilyIndex;
    uint32_t                                 dstQueueFamilyIndex;
    VkTensorARM                              tensor;
} VkTensorMemoryBarrierARM;

typedef struct VkTensorDependencyInfoARM {
    VkStructureType   sType;
    const  void *            pNext;
    uint32_t                                tensorMemoryBarrierCount;
    const  VkTensorMemoryBarrierARM *        pTensorMemoryBarriers;
} VkTensorDependencyInfoARM;

typedef struct VkPhysicalDeviceTensorFeaturesARM {
    VkStructureType   sType;
    void *          pNext;
    VkBool32                        tensorNonPacked;
    VkBool32                        shaderTensorAccess;
    VkBool32                        shaderStorageTensorArrayDynamicIndexing;
    VkBool32                        shaderStorageTensorArrayNonUniformIndexing;
    VkBool32                        descriptorBindingStorageTensorUpdateAfterBind;
    VkBool32                        tensors;
} VkPhysicalDeviceTensorFeaturesARM;

typedef struct VkDeviceTensorMemoryRequirementsARM {
    VkStructureType   sType;
    const  void *    pNext;
    const  VkTensorCreateInfoARM *   pCreateInfo;
} VkDeviceTensorMemoryRequirementsARM;

typedef struct VkCopyTensorInfoARM {
    VkStructureType   sType;
    const  void *   pNext;
    VkTensorARM                    srcTensor;
    VkTensorARM                    dstTensor;
    uint32_t                       regionCount;
    const  VkTensorCopyARM *  pRegions;
} VkCopyTensorInfoARM;

typedef struct VkPhysicalDeviceDescriptorBufferTensorFeaturesARM {
    VkStructureType   sType;
    void *  pNext;
    VkBool32                descriptorBufferTensorDescriptors;
} VkPhysicalDeviceDescriptorBufferTensorFeaturesARM;

typedef struct VkPhysicalDeviceExternalTensorInfoARM {
    VkStructureType   sType;
    const  void *             pNext;
    VkTensorCreateFlagsARM   flags;
    const  VkTensorDescriptionARM *           pDescription;
    VkExternalMemoryHandleTypeFlagBits       handleType;
} VkPhysicalDeviceExternalTensorInfoARM;

typedef struct VkExternalTensorPropertiesARM {
    VkStructureType   sType;
    const  void *   pNext;
    VkExternalMemoryProperties     externalMemoryProperties;
} VkExternalTensorPropertiesARM;

typedef struct VkExternalMemoryTensorCreateInfoARM {
    VkStructureType   sType;
    const  void *                       pNext;
    VkExternalMemoryHandleTypeFlags   handleTypes;
} VkExternalMemoryTensorCreateInfoARM;

typedef struct VkPhysicalDeviceShaderFloat8FeaturesEXT {
    VkStructureType   sType;
    void *      pNext;
    VkBool32                                          shaderFloat8;
    VkBool32                                          shaderFloat8CooperativeMatrix;
} VkPhysicalDeviceShaderFloat8FeaturesEXT;

#if defined(VK_USE_PLATFORM_OHOS)
typedef struct VkSurfaceCreateInfoOHOS {
    VkStructureType   sType;
    const  void *                                     pNext;
    VkSurfaceCreateFlagsOHOS   flags;
    OHNativeWindow *     window;
} VkSurfaceCreateInfoOHOS;
#endif

typedef struct VkPhysicalDeviceDataGraphFeaturesARM {
    VkStructureType   sType;
    void *  pNext;
    VkBool32   dataGraph;
    VkBool32   dataGraphUpdateAfterBind;
    VkBool32   dataGraphSpecializationConstants;
    VkBool32   dataGraphDescriptorBuffer;
    VkBool32   dataGraphShaderModule;
} VkPhysicalDeviceDataGraphFeaturesARM;

typedef struct VkDataGraphPipelineCreateInfoARM {
    VkStructureType   sType;
    const  void *                                    pNext;
    VkPipelineCreateFlags2KHR                       flags;
    VkPipelineLayout                                                layout;
    uint32_t                                                        resourceInfoCount;
    const  VkDataGraphPipelineResourceInfoARM *  pResourceInfos;
} VkDataGraphPipelineCreateInfoARM;

typedef struct VkDataGraphPipelineSessionCreateInfoARM {
    VkStructureType   sType;
    const  void *  pNext;
    VkDataGraphPipelineSessionCreateFlagsARM   flags;
    VkPipeline                    dataGraphPipeline;
} VkDataGraphPipelineSessionCreateInfoARM;

typedef struct VkBindDataGraphPipelineSessionMemoryInfoARM {
    VkStructureType   sType;
    const  void *  pNext;
    VkDataGraphPipelineSessionARM     session;
    VkDataGraphPipelineSessionBindPointARM     bindPoint;
    uint32_t                                   objectIndex;
    VkDeviceMemory                memory;
    VkDeviceSize                  memoryOffset;
} VkBindDataGraphPipelineSessionMemoryInfoARM;

typedef struct VkDataGraphPipelinePropertyQueryResultARM {
    VkStructureType   sType;
    const  void *  pNext;
    VkDataGraphPipelinePropertyARM   property;
    VkBool32                     isText;
    size_t       dataSize;
    void *  pData;
} VkDataGraphPipelinePropertyQueryResultARM;

typedef struct VkDataGraphPipelineDispatchInfoARM {
    VkStructureType   sType;
    void *  pNext;
    VkDataGraphPipelineDispatchFlagsARM   flags;
} VkDataGraphPipelineDispatchInfoARM;

typedef struct VkPhysicalDeviceDataGraphProcessingEngineARM {
    VkPhysicalDeviceDataGraphProcessingEngineTypeARM   type;
    VkBool32                                           isForeign;
} VkPhysicalDeviceDataGraphProcessingEngineARM;

typedef struct VkQueueFamilyDataGraphPropertiesARM {
    VkStructureType   sType;
    const  void *  pNext;
    VkPhysicalDeviceDataGraphProcessingEngineARM   engine;
    VkPhysicalDeviceDataGraphOperationSupportARM   operation;
} VkQueueFamilyDataGraphPropertiesARM;

typedef struct VkQueueFamilyDataGraphProcessingEnginePropertiesARM {
    VkStructureType   sType;
    const  void *  pNext;
    VkExternalSemaphoreHandleTypeFlags   foreignSemaphoreHandleTypes;
    VkExternalMemoryHandleTypeFlags   foreignMemoryHandleTypes;
} VkQueueFamilyDataGraphProcessingEnginePropertiesARM;

typedef struct VkDataGraphProcessingEngineCreateInfoARM {
    VkStructureType   sType;
    const  void *                    pNext;
    uint32_t                                        processingEngineCount;
    VkPhysicalDeviceDataGraphProcessingEngineARM *  pProcessingEngines;
} VkDataGraphProcessingEngineCreateInfoARM;

typedef struct VkPhysicalDevicePipelineCacheIncrementalModeFeaturesSEC {
    VkStructureType   sType;
    void *             pNext;
    VkBool32                           pipelineCacheIncrementalMode;
} VkPhysicalDevicePipelineCacheIncrementalModeFeaturesSEC;

typedef struct VkPhysicalDeviceShaderUntypedPointersFeaturesKHR {
    VkStructureType   sType;
    void *           pNext;
    VkBool32         shaderUntypedPointers;
} VkPhysicalDeviceShaderUntypedPointersFeaturesKHR;

typedef struct VkPhysicalDeviceVideoEncodeRgbConversionFeaturesVALVE {
    VkStructureType   sType;
    void *                        pNext;
    VkBool32                                      videoEncodeRgbConversion;
} VkPhysicalDeviceVideoEncodeRgbConversionFeaturesVALVE;

typedef struct VkVideoEncodeRgbConversionCapabilitiesVALVE {
    VkStructureType   sType;
    void *                 pNext;
    VkVideoEncodeRgbModelConversionFlagsVALVE    rgbModels;
    VkVideoEncodeRgbRangeCompressionFlagsVALVE   rgbRanges;
    VkVideoEncodeRgbChromaOffsetFlagsVALVE       xChromaOffsets;
    VkVideoEncodeRgbChromaOffsetFlagsVALVE       yChromaOffsets;
} VkVideoEncodeRgbConversionCapabilitiesVALVE;

typedef struct VkVideoEncodeProfileRgbConversionInfoVALVE {
    VkStructureType   sType;
    const  void *                        pNext;
    VkBool32                                            performEncodeRgbConversion;
} VkVideoEncodeProfileRgbConversionInfoVALVE;

typedef VkBool32 (VKAPI_PTR *PFN_vkDebugUtilsMessengerCallbackEXT)(
    VkDebugUtilsMessageSeverityFlagBitsEXT           messageSeverity,
    VkDebugUtilsMessageTypeFlagsEXT                  messageTypes,
    const VkDebugUtilsMessengerCallbackDataEXT*      pCallbackData,
    void*                                            pUserData);

typedef void (VKAPI_PTR *PFN_vkDeviceMemoryReportCallbackEXT)(
    const VkDeviceMemoryReportCallbackDataEXT*  pCallbackData,
    void*                                       pUserData);

typedef struct VkPhysicalDeviceProperties {
    uint32_t         apiVersion;
    uint32_t         driverVersion;
    uint32_t         vendorID;
    uint32_t         deviceID;
    VkPhysicalDeviceType   deviceType;
    char             deviceName [ VK_MAX_PHYSICAL_DEVICE_NAME_SIZE ];
    uint8_t          pipelineCacheUUID [ VK_UUID_SIZE ];
    VkPhysicalDeviceLimits   limits;
    VkPhysicalDeviceSparseProperties   sparseProperties;
} VkPhysicalDeviceProperties;

typedef struct VkDeviceCreateInfo {
    VkStructureType   sType;
    const  void *      pNext;
    VkDeviceCreateFlags      flags;
    uint32_t          queueCreateInfoCount;
    const  VkDeviceQueueCreateInfo *  pQueueCreateInfos;
    uint32_t                 enabledLayerCount;
    const  char * const*       ppEnabledLayerNames;
    uint32_t                 enabledExtensionCount;
    const  char * const*       ppEnabledExtensionNames;
    const  VkPhysicalDeviceFeatures *  pEnabledFeatures;
} VkDeviceCreateInfo;

typedef struct VkPhysicalDeviceMemoryProperties {
    uint32_t                                       memoryTypeCount;
    VkMemoryType             memoryTypes [ VK_MAX_MEMORY_TYPES ];
    uint32_t                                       memoryHeapCount;
    VkMemoryHeap             memoryHeaps [ VK_MAX_MEMORY_HEAPS ];
} VkPhysicalDeviceMemoryProperties;

typedef struct VkPipelineBinaryCreateInfoKHR {
    VkStructureType   sType;
    const  void *                            pNext;
    const  VkPipelineBinaryKeysAndDataKHR *  pKeysAndDataInfo;
    VkPipeline                              pipeline;
    const  VkPipelineCreateInfoKHR *          pPipelineCreateInfo;
} VkPipelineBinaryCreateInfoKHR;

typedef struct VkClusterAccelerationStructureCommandsInfoNV {
    VkStructureType   sType;
    void *                           pNext;
    VkClusterAccelerationStructureInputInfoNV        input;
    VkDeviceAddress                                  dstImplicitData;
    VkDeviceAddress                                  scratchData;
    VkStridedDeviceAddressRegionKHR                  dstAddressesArray;
    VkStridedDeviceAddressRegionKHR                  dstSizesArray;
    VkStridedDeviceAddressRegionKHR                  srcInfosArray;
    VkDeviceAddress                                  srcInfosCount;
    VkClusterAccelerationStructureAddressResolutionFlagsNV   addressResolutionFlags;
} VkClusterAccelerationStructureCommandsInfoNV;

typedef struct VkPhysicalDeviceProperties2 {
    VkStructureType   sType;
    void *                             pNext;
    VkPhysicalDeviceProperties         properties;
} VkPhysicalDeviceProperties2;

typedef struct VkPhysicalDeviceProperties2  VkPhysicalDeviceProperties2KHR;

typedef struct VkPhysicalDeviceMemoryProperties2 {
    VkStructureType   sType;
    void *                             pNext;
    VkPhysicalDeviceMemoryProperties   memoryProperties;
} VkPhysicalDeviceMemoryProperties2;

typedef struct VkPhysicalDeviceMemoryProperties2  VkPhysicalDeviceMemoryProperties2KHR;

typedef struct VkPresentRegionsKHR {
    VkStructureType   sType;
    const  void *                       pNext;
    uint32_t                           swapchainCount;
    const  VkPresentRegionKHR *    pRegions;
} VkPresentRegionsKHR;

typedef struct VkPhysicalDeviceLayeredApiVulkanPropertiesKHR {
    VkStructureType   sType;
    void *                             pNext;
    VkPhysicalDeviceProperties2     properties;
} VkPhysicalDeviceLayeredApiVulkanPropertiesKHR;

typedef struct VkDebugUtilsMessengerCreateInfoEXT {
    VkStructureType   sType;
    const  void *                                           pNext;
    VkDebugUtilsMessengerCreateFlagsEXT    flags;
    VkDebugUtilsMessageSeverityFlagsEXT                    messageSeverity;
    VkDebugUtilsMessageTypeFlagsEXT                        messageType;
    PFN_vkDebugUtilsMessengerCallbackEXT                   pfnUserCallback;
    void *                                 pUserData;
} VkDebugUtilsMessengerCreateInfoEXT;

typedef struct VkDeviceDeviceMemoryReportCreateInfoEXT {
    VkStructureType   sType;
    const  void *          pNext;
    VkDeviceMemoryReportFlagsEXT          flags;
    PFN_vkDeviceMemoryReportCallbackEXT   pfnUserCallback;
    void *                                pUserData;
} VkDeviceDeviceMemoryReportCreateInfoEXT;

typedef struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR  VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV;

typedef struct VkDrmFormatModifierPropertiesListEXT {
    VkStructureType   sType;
    void *  pNext;
    uint32_t   drmFormatModifierCount;
    VkDrmFormatModifierPropertiesEXT *  pDrmFormatModifierProperties;
} VkDrmFormatModifierPropertiesListEXT;

typedef struct VkFramebufferAttachmentsCreateInfo {
    VkStructureType   sType;
    const  void *                               pNext;
    uint32_t                   attachmentImageInfoCount;
    const  VkFramebufferAttachmentImageInfo *  pAttachmentImageInfos;
} VkFramebufferAttachmentsCreateInfo;

typedef struct VkFramebufferAttachmentsCreateInfo  VkFramebufferAttachmentsCreateInfoKHR;

typedef struct VkIndirectCommandsLayoutTokenEXT {
    VkStructureType   sType;
    const  void *  pNext;
    VkIndirectCommandsTokenTypeEXT                type;
    VkIndirectCommandsTokenDataEXT   data;
    uint32_t                                      offset;
} VkIndirectCommandsLayoutTokenEXT;

typedef struct VkVideoProfileListInfoKHR {
    VkStructureType   sType;
    const  void *                                    pNext;
    uint32_t                                        profileCount;
    const  VkVideoProfileInfoKHR *                pProfiles;
} VkVideoProfileListInfoKHR;

typedef struct VkDrmFormatModifierPropertiesList2EXT {
    VkStructureType   sType;
    void *  pNext;
    uint32_t   drmFormatModifierCount;
    VkDrmFormatModifierProperties2EXT *  pDrmFormatModifierProperties;
} VkDrmFormatModifierPropertiesList2EXT;

typedef struct VkPhysicalDeviceDepthClampZeroOneFeaturesKHR  VkPhysicalDeviceDepthClampZeroOneFeaturesEXT;

typedef struct VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR  VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT;

typedef struct VkIndirectCommandsLayoutCreateInfoEXT {
    VkStructureType   sType;
    const  void *  pNext;
    VkIndirectCommandsLayoutUsageFlagsEXT   flags;
    VkShaderStageFlags                                      shaderStages;
    uint32_t                                                indirectStride;
    VkPipelineLayout                        pipelineLayout;
    uint32_t                                                tokenCount;
    const  VkIndirectCommandsLayoutTokenEXT *                    pTokens;
} VkIndirectCommandsLayoutCreateInfoEXT;


#define VK_VERSION_1_0 1
#define VK_VERSION_1_1 1
#define VK_VERSION_1_2 1
#define VK_VERSION_1_3 1
#define VK_VERSION_1_4 1
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_AMDX_dense_geometry_format 1
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_AMDX_shader_enqueue 1
#endif
#define VK_AMD_anti_lag 1
#define VK_AMD_buffer_marker 1
#define VK_AMD_device_coherent_memory 1
#define VK_AMD_display_native_hdr 1
#define VK_AMD_draw_indirect_count 1
#define VK_AMD_gcn_shader 1
#define VK_AMD_gpu_shader_half_float 1
#define VK_AMD_gpu_shader_int16 1
#define VK_AMD_memory_overallocation_behavior 1
#define VK_AMD_mixed_attachment_samples 1
#define VK_AMD_negative_viewport_height 1
#define VK_AMD_pipeline_compiler_control 1
#define VK_AMD_rasterization_order 1
#define VK_AMD_shader_ballot 1
#define VK_AMD_shader_core_properties 1
#define VK_AMD_shader_core_properties2 1
#define VK_AMD_shader_early_and_late_fragment_tests 1
#define VK_AMD_shader_explicit_vertex_parameter 1
#define VK_AMD_shader_fragment_mask 1
#define VK_AMD_shader_image_load_store_lod 1
#define VK_AMD_shader_info 1
#define VK_AMD_shader_trinary_minmax 1
#define VK_AMD_texture_gather_bias_lod 1
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
#define VK_ANDROID_external_format_resolve 1
#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
#define VK_ANDROID_external_memory_android_hardware_buffer 1
#endif
#define VK_ARM_data_graph 1
#define VK_ARM_format_pack 1
#define VK_ARM_pipeline_opacity_micromap 1
#define VK_ARM_rasterization_order_attachment_access 1
#define VK_ARM_render_pass_striped 1
#define VK_ARM_scheduling_controls 1
#define VK_ARM_shader_core_builtins 1
#define VK_ARM_shader_core_properties 1
#define VK_ARM_tensors 1
#define VK_EXT_4444_formats 1
#define VK_EXT_acquire_drm_display 1
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
#define VK_EXT_acquire_xlib_display 1
#endif
#define VK_EXT_astc_decode_mode 1
#define VK_EXT_attachment_feedback_loop_dynamic_state 1
#define VK_EXT_attachment_feedback_loop_layout 1
#define VK_EXT_blend_operation_advanced 1
#define VK_EXT_border_color_swizzle 1
#define VK_EXT_buffer_device_address 1
#define VK_EXT_calibrated_timestamps 1
#define VK_EXT_color_write_enable 1
#define VK_EXT_conditional_rendering 1
#define VK_EXT_conservative_rasterization 1
#define VK_EXT_custom_border_color 1
#define VK_EXT_debug_marker 1
#define VK_EXT_debug_report 1
#define VK_EXT_debug_utils 1
#define VK_EXT_depth_bias_control 1
#define VK_EXT_depth_clamp_control 1
#define VK_EXT_depth_clamp_zero_one 1
#define VK_EXT_depth_clip_control 1
#define VK_EXT_depth_clip_enable 1
#define VK_EXT_depth_range_unrestricted 1
#define VK_EXT_descriptor_buffer 1
#define VK_EXT_descriptor_indexing 1
#define VK_EXT_device_address_binding_report 1
#define VK_EXT_device_fault 1
#define VK_EXT_device_generated_commands 1
#define VK_EXT_device_memory_report 1
#define VK_EXT_direct_mode_display 1
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
#define VK_EXT_directfb_surface 1
#endif
#define VK_EXT_discard_rectangles 1
#define VK_EXT_display_control 1
#define VK_EXT_display_surface_counter 1
#define VK_EXT_dynamic_rendering_unused_attachments 1
#define VK_EXT_extended_dynamic_state 1
#define VK_EXT_extended_dynamic_state2 1
#define VK_EXT_extended_dynamic_state3 1
#define VK_EXT_external_memory_acquire_unmodified 1
#define VK_EXT_external_memory_dma_buf 1
#define VK_EXT_external_memory_host 1
#if defined(VK_USE_PLATFORM_METAL_EXT)
#define VK_EXT_external_memory_metal 1
#endif
#define VK_EXT_filter_cubic 1
#define VK_EXT_fragment_density_map 1
#define VK_EXT_fragment_density_map2 1
#define VK_EXT_fragment_density_map_offset 1
#define VK_EXT_fragment_shader_interlock 1
#define VK_EXT_frame_boundary 1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_EXT_full_screen_exclusive 1
#endif
#define VK_EXT_global_priority 1
#define VK_EXT_global_priority_query 1
#define VK_EXT_graphics_pipeline_library 1
#define VK_EXT_hdr_metadata 1
#define VK_EXT_headless_surface 1
#define VK_EXT_host_image_copy 1
#define VK_EXT_host_query_reset 1
#define VK_EXT_image_2d_view_of_3d 1
#define VK_EXT_image_compression_control 1
#define VK_EXT_image_compression_control_swapchain 1
#define VK_EXT_image_drm_format_modifier 1
#define VK_EXT_image_robustness 1
#define VK_EXT_image_sliced_view_of_3d 1
#define VK_EXT_image_view_min_lod 1
#define VK_EXT_index_type_uint8 1
#define VK_EXT_inline_uniform_block 1
#define VK_EXT_layer_settings 1
#define VK_EXT_legacy_dithering 1
#define VK_EXT_legacy_vertex_attributes 1
#define VK_EXT_line_rasterization 1
#define VK_EXT_load_store_op_none 1
#define VK_EXT_map_memory_placed 1
#define VK_EXT_memory_budget 1
#define VK_EXT_memory_priority 1
#define VK_EXT_mesh_shader 1
#if defined(VK_USE_PLATFORM_METAL_EXT)
#define VK_EXT_metal_objects 1
#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
#define VK_EXT_metal_surface 1
#endif
#define VK_EXT_multi_draw 1
#define VK_EXT_multisampled_render_to_single_sampled 1
#define VK_EXT_mutable_descriptor_type 1
#define VK_EXT_nested_command_buffer 1
#define VK_EXT_non_seamless_cube_map 1
#define VK_EXT_opacity_micromap 1
#define VK_EXT_pageable_device_local_memory 1
#define VK_EXT_pci_bus_info 1
#define VK_EXT_physical_device_drm 1
#define VK_EXT_pipeline_creation_cache_control 1
#define VK_EXT_pipeline_creation_feedback 1
#define VK_EXT_pipeline_library_group_handles 1
#define VK_EXT_pipeline_properties 1
#define VK_EXT_pipeline_protected_access 1
#define VK_EXT_pipeline_robustness 1
#define VK_EXT_post_depth_coverage 1
#define VK_EXT_present_mode_fifo_latest_ready 1
#define VK_EXT_primitive_topology_list_restart 1
#define VK_EXT_primitives_generated_query 1
#define VK_EXT_private_data 1
#define VK_EXT_provoking_vertex 1
#define VK_EXT_queue_family_foreign 1
#define VK_EXT_rasterization_order_attachment_access 1
#define VK_EXT_rgba10x6_formats 1
#define VK_EXT_robustness2 1
#define VK_EXT_sample_locations 1
#define VK_EXT_sampler_filter_minmax 1
#define VK_EXT_scalar_block_layout 1
#define VK_EXT_separate_stencil_usage 1
#define VK_EXT_shader_atomic_float 1
#define VK_EXT_shader_atomic_float2 1
#define VK_EXT_shader_demote_to_helper_invocation 1
#define VK_EXT_shader_float8 1
#define VK_EXT_shader_image_atomic_int64 1
#define VK_EXT_shader_module_identifier 1
#define VK_EXT_shader_object 1
#define VK_EXT_shader_replicated_composites 1
#define VK_EXT_shader_stencil_export 1
#define VK_EXT_shader_subgroup_ballot 1
#define VK_EXT_shader_subgroup_vote 1
#define VK_EXT_shader_tile_image 1
#define VK_EXT_shader_viewport_index_layer 1
#define VK_EXT_subgroup_size_control 1
#define VK_EXT_subpass_merge_feedback 1
#define VK_EXT_surface_maintenance1 1
#define VK_EXT_swapchain_colorspace 1
#define VK_EXT_swapchain_maintenance1 1
#define VK_EXT_texel_buffer_alignment 1
#define VK_EXT_texture_compression_astc_hdr 1
#define VK_EXT_tooling_info 1
#define VK_EXT_transform_feedback 1
#define VK_EXT_validation_cache 1
#define VK_EXT_validation_features 1
#define VK_EXT_validation_flags 1
#define VK_EXT_vertex_attribute_divisor 1
#define VK_EXT_vertex_attribute_robustness 1
#define VK_EXT_vertex_input_dynamic_state 1
#define VK_EXT_ycbcr_2plane_444_formats 1
#define VK_EXT_ycbcr_image_arrays 1
#define VK_EXT_zero_initialize_device_memory 1
#if defined(VK_USE_PLATFORM_FUCHSIA)
#define VK_FUCHSIA_buffer_collection 1
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
#define VK_FUCHSIA_external_memory 1
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
#define VK_FUCHSIA_external_semaphore 1
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
#define VK_FUCHSIA_imagepipe_surface 1
#endif
#if defined(VK_USE_PLATFORM_GGP)
#define VK_GGP_frame_token 1
#endif
#if defined(VK_USE_PLATFORM_GGP)
#define VK_GGP_stream_descriptor_surface 1
#endif
#define VK_GOOGLE_decorate_string 1
#define VK_GOOGLE_display_timing 1
#define VK_GOOGLE_hlsl_functionality1 1
#define VK_GOOGLE_surfaceless_query 1
#define VK_GOOGLE_user_type 1
#define VK_HUAWEI_cluster_culling_shader 1
#define VK_HUAWEI_hdr_vivid 1
#define VK_HUAWEI_invocation_mask 1
#define VK_HUAWEI_subpass_shading 1
#define VK_IMG_filter_cubic 1
#define VK_IMG_format_pvrtc 1
#define VK_IMG_relaxed_line_rasterization 1
#define VK_INTEL_performance_query 1
#define VK_INTEL_shader_integer_functions2 1
#define VK_KHR_16bit_storage 1
#define VK_KHR_8bit_storage 1
#define VK_KHR_acceleration_structure 1
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
#define VK_KHR_android_surface 1
#endif
#define VK_KHR_bind_memory2 1
#define VK_KHR_buffer_device_address 1
#define VK_KHR_calibrated_timestamps 1
#define VK_KHR_compute_shader_derivatives 1
#define VK_KHR_cooperative_matrix 1
#define VK_KHR_copy_commands2 1
#define VK_KHR_copy_memory_indirect 1
#define VK_KHR_create_renderpass2 1
#define VK_KHR_dedicated_allocation 1
#define VK_KHR_deferred_host_operations 1
#define VK_KHR_depth_clamp_zero_one 1
#define VK_KHR_depth_stencil_resolve 1
#define VK_KHR_descriptor_update_template 1
#define VK_KHR_device_group 1
#define VK_KHR_device_group_creation 1
#define VK_KHR_display 1
#define VK_KHR_display_swapchain 1
#define VK_KHR_draw_indirect_count 1
#define VK_KHR_driver_properties 1
#define VK_KHR_dynamic_rendering 1
#define VK_KHR_dynamic_rendering_local_read 1
#define VK_KHR_external_fence 1
#define VK_KHR_external_fence_capabilities 1
#define VK_KHR_external_fence_fd 1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_KHR_external_fence_win32 1
#endif
#define VK_KHR_external_memory 1
#define VK_KHR_external_memory_capabilities 1
#define VK_KHR_external_memory_fd 1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_KHR_external_memory_win32 1
#endif
#define VK_KHR_external_semaphore 1
#define VK_KHR_external_semaphore_capabilities 1
#define VK_KHR_external_semaphore_fd 1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_KHR_external_semaphore_win32 1
#endif
#define VK_KHR_format_feature_flags2 1
#define VK_KHR_fragment_shader_barycentric 1
#define VK_KHR_fragment_shading_rate 1
#define VK_KHR_get_display_properties2 1
#define VK_KHR_get_memory_requirements2 1
#define VK_KHR_get_physical_device_properties2 1
#define VK_KHR_get_surface_capabilities2 1
#define VK_KHR_global_priority 1
#define VK_KHR_image_format_list 1
#define VK_KHR_imageless_framebuffer 1
#define VK_KHR_incremental_present 1
#define VK_KHR_index_type_uint8 1
#define VK_KHR_line_rasterization 1
#define VK_KHR_load_store_op_none 1
#define VK_KHR_maintenance1 1
#define VK_KHR_maintenance2 1
#define VK_KHR_maintenance3 1
#define VK_KHR_maintenance4 1
#define VK_KHR_maintenance5 1
#define VK_KHR_maintenance6 1
#define VK_KHR_maintenance7 1
#define VK_KHR_maintenance8 1
#define VK_KHR_maintenance9 1
#define VK_KHR_map_memory2 1
#define VK_KHR_multiview 1
#define VK_KHR_performance_query 1
#define VK_KHR_pipeline_binary 1
#define VK_KHR_pipeline_executable_properties 1
#define VK_KHR_pipeline_library 1
#define VK_KHR_portability_enumeration 1
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_KHR_portability_subset 1
#endif
#define VK_KHR_present_id 1
#define VK_KHR_present_id2 1
#define VK_KHR_present_mode_fifo_latest_ready 1
#define VK_KHR_present_wait 1
#define VK_KHR_present_wait2 1
#define VK_KHR_push_descriptor 1
#define VK_KHR_ray_query 1
#define VK_KHR_ray_tracing_maintenance1 1
#define VK_KHR_ray_tracing_pipeline 1
#define VK_KHR_ray_tracing_position_fetch 1
#define VK_KHR_relaxed_block_layout 1
#define VK_KHR_robustness2 1
#define VK_KHR_sampler_mirror_clamp_to_edge 1
#define VK_KHR_sampler_ycbcr_conversion 1
#define VK_KHR_separate_depth_stencil_layouts 1
#define VK_KHR_shader_atomic_int64 1
#define VK_KHR_shader_bfloat16 1
#define VK_KHR_shader_clock 1
#define VK_KHR_shader_draw_parameters 1
#define VK_KHR_shader_expect_assume 1
#define VK_KHR_shader_float16_int8 1
#define VK_KHR_shader_float_controls 1
#define VK_KHR_shader_float_controls2 1
#define VK_KHR_shader_integer_dot_product 1
#define VK_KHR_shader_maximal_reconvergence 1
#define VK_KHR_shader_non_semantic_info 1
#define VK_KHR_shader_quad_control 1
#define VK_KHR_shader_relaxed_extended_instruction 1
#define VK_KHR_shader_subgroup_extended_types 1
#define VK_KHR_shader_subgroup_rotate 1
#define VK_KHR_shader_subgroup_uniform_control_flow 1
#define VK_KHR_shader_terminate_invocation 1
#define VK_KHR_shader_untyped_pointers 1
#define VK_KHR_shared_presentable_image 1
#define VK_KHR_spirv_1_4 1
#define VK_KHR_storage_buffer_storage_class 1
#define VK_KHR_surface 1
#define VK_KHR_surface_maintenance1 1
#define VK_KHR_surface_protected_capabilities 1
#define VK_KHR_swapchain 1
#define VK_KHR_swapchain_maintenance1 1
#define VK_KHR_swapchain_mutable_format 1
#define VK_KHR_synchronization2 1
#define VK_KHR_timeline_semaphore 1
#define VK_KHR_unified_image_layouts 1
#define VK_KHR_uniform_buffer_standard_layout 1
#define VK_KHR_variable_pointers 1
#define VK_KHR_vertex_attribute_divisor 1
#define VK_KHR_video_decode_av1 1
#define VK_KHR_video_decode_h264 1
#define VK_KHR_video_decode_h265 1
#define VK_KHR_video_decode_queue 1
#define VK_KHR_video_decode_vp9 1
#define VK_KHR_video_encode_av1 1
#define VK_KHR_video_encode_h264 1
#define VK_KHR_video_encode_h265 1
#define VK_KHR_video_encode_intra_refresh 1
#define VK_KHR_video_encode_quantization_map 1
#define VK_KHR_video_encode_queue 1
#define VK_KHR_video_maintenance1 1
#define VK_KHR_video_maintenance2 1
#define VK_KHR_video_queue 1
#define VK_KHR_vulkan_memory_model 1
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
#define VK_KHR_wayland_surface 1
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_KHR_win32_keyed_mutex 1
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_KHR_win32_surface 1
#endif
#define VK_KHR_workgroup_memory_explicit_layout 1
#if defined(VK_USE_PLATFORM_XCB_KHR)
#define VK_KHR_xcb_surface 1
#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
#define VK_KHR_xlib_surface 1
#endif
#define VK_KHR_zero_initialize_workgroup_memory 1
#define VK_LUNARG_direct_driver_loading 1
#define VK_MESA_image_alignment_control 1
#define VK_MSFT_layered_driver 1
#if defined(VK_USE_PLATFORM_IOS_MVK)
#define VK_MVK_ios_surface 1
#endif
#if defined(VK_USE_PLATFORM_MACOS_MVK)
#define VK_MVK_macos_surface 1
#endif
#if defined(VK_USE_PLATFORM_VI_NN)
#define VK_NN_vi_surface 1
#endif
#define VK_NVX_binary_import 1
#define VK_NVX_image_view_handle 1
#define VK_NVX_multiview_per_view_attributes 1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_NV_acquire_winrt_display 1
#endif
#define VK_NV_clip_space_w_scaling 1
#define VK_NV_cluster_acceleration_structure 1
#define VK_NV_command_buffer_inheritance 1
#define VK_NV_compute_shader_derivatives 1
#define VK_NV_cooperative_matrix 1
#define VK_NV_cooperative_matrix2 1
#define VK_NV_cooperative_vector 1
#define VK_NV_copy_memory_indirect 1
#define VK_NV_corner_sampled_image 1
#define VK_NV_coverage_reduction_mode 1
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_NV_cuda_kernel_launch 1
#endif
#define VK_NV_dedicated_allocation 1
#define VK_NV_dedicated_allocation_image_aliasing 1
#define VK_NV_descriptor_pool_overallocation 1
#define VK_NV_device_diagnostic_checkpoints 1
#define VK_NV_device_diagnostics_config 1
#define VK_NV_device_generated_commands 1
#define VK_NV_device_generated_commands_compute 1
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_NV_displacement_micromap 1
#endif
#define VK_NV_display_stereo 1
#define VK_NV_extended_sparse_address_space 1
#define VK_NV_external_compute_queue 1
#define VK_NV_external_memory 1
#define VK_NV_external_memory_capabilities 1
#define VK_NV_external_memory_rdma 1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_NV_external_memory_win32 1
#endif
#define VK_NV_fill_rectangle 1
#define VK_NV_fragment_coverage_to_color 1
#define VK_NV_fragment_shader_barycentric 1
#define VK_NV_fragment_shading_rate_enums 1
#define VK_NV_framebuffer_mixed_samples 1
#define VK_NV_geometry_shader_passthrough 1
#define VK_NV_glsl_shader 1
#define VK_NV_inherited_viewport_scissor 1
#define VK_NV_linear_color_attachment 1
#define VK_NV_low_latency 1
#define VK_NV_low_latency2 1
#define VK_NV_memory_decompression 1
#define VK_NV_mesh_shader 1
#define VK_NV_optical_flow 1
#define VK_NV_partitioned_acceleration_structure 1
#define VK_NV_per_stage_descriptor_set 1
#define VK_NV_present_barrier 1
#if defined(VK_ENABLE_BETA_EXTENSIONS)
#define VK_NV_present_metering 1
#endif
#define VK_NV_raw_access_chains 1
#define VK_NV_ray_tracing 1
#define VK_NV_ray_tracing_invocation_reorder 1
#define VK_NV_ray_tracing_linear_swept_spheres 1
#define VK_NV_ray_tracing_motion_blur 1
#define VK_NV_ray_tracing_validation 1
#define VK_NV_representative_fragment_test 1
#define VK_NV_sample_mask_override_coverage 1
#define VK_NV_scissor_exclusive 1
#define VK_NV_shader_atomic_float16_vector 1
#define VK_NV_shader_image_footprint 1
#define VK_NV_shader_sm_builtins 1
#define VK_NV_shader_subgroup_partitioned 1
#define VK_NV_shading_rate_image 1
#define VK_NV_viewport_array2 1
#define VK_NV_viewport_swizzle 1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#define VK_NV_win32_keyed_mutex 1
#endif
#if defined(VK_USE_PLATFORM_OHOS)
#define VK_OHOS_surface 1
#endif
#define VK_QCOM_filter_cubic_clamp 1
#define VK_QCOM_filter_cubic_weights 1
#define VK_QCOM_fragment_density_map_offset 1
#define VK_QCOM_image_processing 1
#define VK_QCOM_image_processing2 1
#define VK_QCOM_multiview_per_view_render_areas 1
#define VK_QCOM_multiview_per_view_viewports 1
#define VK_QCOM_render_pass_shader_resolve 1
#define VK_QCOM_render_pass_store_ops 1
#define VK_QCOM_render_pass_transform 1
#define VK_QCOM_rotated_copy_commands 1
#define VK_QCOM_tile_memory_heap 1
#define VK_QCOM_tile_properties 1
#define VK_QCOM_tile_shading 1
#define VK_QCOM_ycbcr_degamma 1
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
#define VK_QNX_external_memory_screen_buffer 1
#endif
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
#define VK_QNX_screen_surface 1
#endif
#define VK_SEC_amigo_profiling 1
#define VK_SEC_pipeline_cache_incremental_mode 1
#define VK_VALVE_descriptor_set_host_mapping 1
#define VK_VALVE_fragment_density_map_layered 1
#define VK_VALVE_mutable_descriptor_type 1
#define VK_VALVE_video_encode_rgb_conversion 1


typedef VkResult (GLAD_API_PTR *PFN_vkCreateInstance)(const VkInstanceCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkInstance * pInstance);
typedef void (GLAD_API_PTR *PFN_vkDestroyInstance)(VkInstance instance, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkEnumeratePhysicalDevices)(VkInstance instance, uint32_t * pPhysicalDeviceCount, VkPhysicalDevice * pPhysicalDevices);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceFeatures)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures * pFeatures);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties * pFormatProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceImageFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties * pImageFormatProperties);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceProperties)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties * pProperties);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceQueueFamilyProperties)(VkPhysicalDevice physicalDevice, uint32_t * pQueueFamilyPropertyCount, VkQueueFamilyProperties * pQueueFamilyProperties);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceMemoryProperties)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties * pMemoryProperties);
typedef PFN_vkVoidFunction (GLAD_API_PTR *PFN_vkGetInstanceProcAddr)(VkInstance instance, const char * pName);
typedef PFN_vkVoidFunction (GLAD_API_PTR *PFN_vkGetDeviceProcAddr)(VkDevice device, const char * pName);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateDevice)(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDevice * pDevice);
typedef void (GLAD_API_PTR *PFN_vkDestroyDevice)(VkDevice device, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkEnumerateInstanceExtensionProperties)(const char * pLayerName, uint32_t * pPropertyCount, VkExtensionProperties * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkEnumerateDeviceExtensionProperties)(VkPhysicalDevice physicalDevice, const char * pLayerName, uint32_t * pPropertyCount, VkExtensionProperties * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkEnumerateInstanceLayerProperties)(uint32_t * pPropertyCount, VkLayerProperties * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkEnumerateDeviceLayerProperties)(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkLayerProperties * pProperties);
typedef void (GLAD_API_PTR *PFN_vkGetDeviceQueue)(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue * pQueue);
typedef VkResult (GLAD_API_PTR *PFN_vkQueueSubmit)(VkQueue queue, uint32_t submitCount, const VkSubmitInfo * pSubmits, VkFence fence);
typedef VkResult (GLAD_API_PTR *PFN_vkQueueWaitIdle)(VkQueue queue);
typedef VkResult (GLAD_API_PTR *PFN_vkDeviceWaitIdle)(VkDevice device);
typedef VkResult (GLAD_API_PTR *PFN_vkAllocateMemory)(VkDevice device, const VkMemoryAllocateInfo * pAllocateInfo, const VkAllocationCallbacks * pAllocator, VkDeviceMemory * pMemory);
typedef void (GLAD_API_PTR *PFN_vkFreeMemory)(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkMapMemory)(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void ** ppData);
typedef void (GLAD_API_PTR *PFN_vkUnmapMemory)(VkDevice device, VkDeviceMemory memory);
typedef VkResult (GLAD_API_PTR *PFN_vkFlushMappedMemoryRanges)(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange * pMemoryRanges);
typedef VkResult (GLAD_API_PTR *PFN_vkInvalidateMappedMemoryRanges)(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange * pMemoryRanges);
typedef void (GLAD_API_PTR *PFN_vkGetDeviceMemoryCommitment)(VkDevice device, VkDeviceMemory memory, VkDeviceSize * pCommittedMemoryInBytes);
typedef VkResult (GLAD_API_PTR *PFN_vkBindBufferMemory)(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset);
typedef VkResult (GLAD_API_PTR *PFN_vkBindImageMemory)(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset);
typedef void (GLAD_API_PTR *PFN_vkGetBufferMemoryRequirements)(VkDevice device, VkBuffer buffer, VkMemoryRequirements * pMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkGetImageMemoryRequirements)(VkDevice device, VkImage image, VkMemoryRequirements * pMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkGetImageSparseMemoryRequirements)(VkDevice device, VkImage image, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements * pSparseMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceSparseImageFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t * pPropertyCount, VkSparseImageFormatProperties * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkQueueBindSparse)(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo * pBindInfo, VkFence fence);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateFence)(VkDevice device, const VkFenceCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkFence * pFence);
typedef void (GLAD_API_PTR *PFN_vkDestroyFence)(VkDevice device, VkFence fence, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkResetFences)(VkDevice device, uint32_t fenceCount, const VkFence * pFences);
typedef VkResult (GLAD_API_PTR *PFN_vkGetFenceStatus)(VkDevice device, VkFence fence);
typedef VkResult (GLAD_API_PTR *PFN_vkWaitForFences)(VkDevice device, uint32_t fenceCount, const VkFence * pFences, VkBool32 waitAll, uint64_t timeout);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateSemaphore)(VkDevice device, const VkSemaphoreCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSemaphore * pSemaphore);
typedef void (GLAD_API_PTR *PFN_vkDestroySemaphore)(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateEvent)(VkDevice device, const VkEventCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkEvent * pEvent);
typedef void (GLAD_API_PTR *PFN_vkDestroyEvent)(VkDevice device, VkEvent event, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkGetEventStatus)(VkDevice device, VkEvent event);
typedef VkResult (GLAD_API_PTR *PFN_vkSetEvent)(VkDevice device, VkEvent event);
typedef VkResult (GLAD_API_PTR *PFN_vkResetEvent)(VkDevice device, VkEvent event);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateQueryPool)(VkDevice device, const VkQueryPoolCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkQueryPool * pQueryPool);
typedef void (GLAD_API_PTR *PFN_vkDestroyQueryPool)(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkGetQueryPoolResults)(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void * pData, VkDeviceSize stride, VkQueryResultFlags flags);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateBuffer)(VkDevice device, const VkBufferCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkBuffer * pBuffer);
typedef void (GLAD_API_PTR *PFN_vkDestroyBuffer)(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateBufferView)(VkDevice device, const VkBufferViewCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkBufferView * pView);
typedef void (GLAD_API_PTR *PFN_vkDestroyBufferView)(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateImage)(VkDevice device, const VkImageCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkImage * pImage);
typedef void (GLAD_API_PTR *PFN_vkDestroyImage)(VkDevice device, VkImage image, const VkAllocationCallbacks * pAllocator);
typedef void (GLAD_API_PTR *PFN_vkGetImageSubresourceLayout)(VkDevice device, VkImage image, const VkImageSubresource * pSubresource, VkSubresourceLayout * pLayout);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateImageView)(VkDevice device, const VkImageViewCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkImageView * pView);
typedef void (GLAD_API_PTR *PFN_vkDestroyImageView)(VkDevice device, VkImageView imageView, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateShaderModule)(VkDevice device, const VkShaderModuleCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkShaderModule * pShaderModule);
typedef void (GLAD_API_PTR *PFN_vkDestroyShaderModule)(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkCreatePipelineCache)(VkDevice device, const VkPipelineCacheCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkPipelineCache * pPipelineCache);
typedef void (GLAD_API_PTR *PFN_vkDestroyPipelineCache)(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPipelineCacheData)(VkDevice device, VkPipelineCache pipelineCache, size_t * pDataSize, void * pData);
typedef VkResult (GLAD_API_PTR *PFN_vkMergePipelineCaches)(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache * pSrcCaches);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateGraphicsPipelines)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkPipeline * pPipelines);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateComputePipelines)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkPipeline * pPipelines);
typedef void (GLAD_API_PTR *PFN_vkDestroyPipeline)(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkCreatePipelineLayout)(VkDevice device, const VkPipelineLayoutCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkPipelineLayout * pPipelineLayout);
typedef void (GLAD_API_PTR *PFN_vkDestroyPipelineLayout)(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateSampler)(VkDevice device, const VkSamplerCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSampler * pSampler);
typedef void (GLAD_API_PTR *PFN_vkDestroySampler)(VkDevice device, VkSampler sampler, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateDescriptorSetLayout)(VkDevice device, const VkDescriptorSetLayoutCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDescriptorSetLayout * pSetLayout);
typedef void (GLAD_API_PTR *PFN_vkDestroyDescriptorSetLayout)(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateDescriptorPool)(VkDevice device, const VkDescriptorPoolCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDescriptorPool * pDescriptorPool);
typedef void (GLAD_API_PTR *PFN_vkDestroyDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkResetDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags);
typedef VkResult (GLAD_API_PTR *PFN_vkAllocateDescriptorSets)(VkDevice device, const VkDescriptorSetAllocateInfo * pAllocateInfo, VkDescriptorSet * pDescriptorSets);
typedef VkResult (GLAD_API_PTR *PFN_vkFreeDescriptorSets)(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet * pDescriptorSets);
typedef void (GLAD_API_PTR *PFN_vkUpdateDescriptorSets)(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet * pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet * pDescriptorCopies);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateFramebuffer)(VkDevice device, const VkFramebufferCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkFramebuffer * pFramebuffer);
typedef void (GLAD_API_PTR *PFN_vkDestroyFramebuffer)(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateRenderPass)(VkDevice device, const VkRenderPassCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkRenderPass * pRenderPass);
typedef void (GLAD_API_PTR *PFN_vkDestroyRenderPass)(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks * pAllocator);
typedef void (GLAD_API_PTR *PFN_vkGetRenderAreaGranularity)(VkDevice device, VkRenderPass renderPass, VkExtent2D * pGranularity);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateCommandPool)(VkDevice device, const VkCommandPoolCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkCommandPool * pCommandPool);
typedef void (GLAD_API_PTR *PFN_vkDestroyCommandPool)(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkResetCommandPool)(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);
typedef VkResult (GLAD_API_PTR *PFN_vkAllocateCommandBuffers)(VkDevice device, const VkCommandBufferAllocateInfo * pAllocateInfo, VkCommandBuffer * pCommandBuffers);
typedef void (GLAD_API_PTR *PFN_vkFreeCommandBuffers)(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer * pCommandBuffers);
typedef VkResult (GLAD_API_PTR *PFN_vkBeginCommandBuffer)(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo * pBeginInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkEndCommandBuffer)(VkCommandBuffer commandBuffer);
typedef VkResult (GLAD_API_PTR *PFN_vkResetCommandBuffer)(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags);
typedef void (GLAD_API_PTR *PFN_vkCmdBindPipeline)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
typedef void (GLAD_API_PTR *PFN_vkCmdSetViewport)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport * pViewports);
typedef void (GLAD_API_PTR *PFN_vkCmdSetScissor)(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D * pScissors);
typedef void (GLAD_API_PTR *PFN_vkCmdSetLineWidth)(VkCommandBuffer commandBuffer, float lineWidth);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDepthBias)(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
typedef void (GLAD_API_PTR *PFN_vkCmdSetBlendConstants)(VkCommandBuffer commandBuffer, const float blendConstants [4]);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDepthBounds)(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);
typedef void (GLAD_API_PTR *PFN_vkCmdSetStencilCompareMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask);
typedef void (GLAD_API_PTR *PFN_vkCmdSetStencilWriteMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask);
typedef void (GLAD_API_PTR *PFN_vkCmdSetStencilReference)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference);
typedef void (GLAD_API_PTR *PFN_vkCmdBindDescriptorSets)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet * pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t * pDynamicOffsets);
typedef void (GLAD_API_PTR *PFN_vkCmdBindIndexBuffer)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType);
typedef void (GLAD_API_PTR *PFN_vkCmdBindVertexBuffers)(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer * pBuffers, const VkDeviceSize * pOffsets);
typedef void (GLAD_API_PTR *PFN_vkCmdDraw)(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawIndexed)(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawIndexedIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
typedef void (GLAD_API_PTR *PFN_vkCmdDispatch)(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
typedef void (GLAD_API_PTR *PFN_vkCmdDispatchIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyBuffer)(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy * pRegions);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy * pRegions);
typedef void (GLAD_API_PTR *PFN_vkCmdBlitImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit * pRegions, VkFilter filter);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyBufferToImage)(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy * pRegions);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyImageToBuffer)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy * pRegions);
typedef void (GLAD_API_PTR *PFN_vkCmdUpdateBuffer)(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void * pData);
typedef void (GLAD_API_PTR *PFN_vkCmdFillBuffer)(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data);
typedef void (GLAD_API_PTR *PFN_vkCmdClearColorImage)(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue * pColor, uint32_t rangeCount, const VkImageSubresourceRange * pRanges);
typedef void (GLAD_API_PTR *PFN_vkCmdClearDepthStencilImage)(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue * pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange * pRanges);
typedef void (GLAD_API_PTR *PFN_vkCmdClearAttachments)(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment * pAttachments, uint32_t rectCount, const VkClearRect * pRects);
typedef void (GLAD_API_PTR *PFN_vkCmdResolveImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve * pRegions);
typedef void (GLAD_API_PTR *PFN_vkCmdSetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
typedef void (GLAD_API_PTR *PFN_vkCmdResetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
typedef void (GLAD_API_PTR *PFN_vkCmdWaitEvents)(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent * pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier * pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier * pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier * pImageMemoryBarriers);
typedef void (GLAD_API_PTR *PFN_vkCmdPipelineBarrier)(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier * pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier * pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier * pImageMemoryBarriers);
typedef void (GLAD_API_PTR *PFN_vkCmdBeginQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags);
typedef void (GLAD_API_PTR *PFN_vkCmdEndQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query);
typedef void (GLAD_API_PTR *PFN_vkCmdResetQueryPool)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
typedef void (GLAD_API_PTR *PFN_vkCmdWriteTimestamp)(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyQueryPoolResults)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);
typedef void (GLAD_API_PTR *PFN_vkCmdPushConstants)(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void * pValues);
typedef void (GLAD_API_PTR *PFN_vkCmdBeginRenderPass)(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo * pRenderPassBegin, VkSubpassContents contents);
typedef void (GLAD_API_PTR *PFN_vkCmdNextSubpass)(VkCommandBuffer commandBuffer, VkSubpassContents contents);
typedef void (GLAD_API_PTR *PFN_vkCmdEndRenderPass)(VkCommandBuffer commandBuffer);
typedef void (GLAD_API_PTR *PFN_vkCmdExecuteCommands)(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer * pCommandBuffers);
typedef VkResult (GLAD_API_PTR *PFN_vkEnumerateInstanceVersion)(uint32_t * pApiVersion);
typedef VkResult (GLAD_API_PTR *PFN_vkBindBufferMemory2)(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo * pBindInfos);
typedef VkResult (GLAD_API_PTR *PFN_vkBindImageMemory2)(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo * pBindInfos);
typedef void (GLAD_API_PTR *PFN_vkGetDeviceGroupPeerMemoryFeatures)(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags * pPeerMemoryFeatures);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDeviceMask)(VkCommandBuffer commandBuffer, uint32_t deviceMask);
typedef void (GLAD_API_PTR *PFN_vkCmdDispatchBase)(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
typedef VkResult (GLAD_API_PTR *PFN_vkEnumeratePhysicalDeviceGroups)(VkInstance instance, uint32_t * pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties * pPhysicalDeviceGroupProperties);
typedef void (GLAD_API_PTR *PFN_vkGetImageMemoryRequirements2)(VkDevice device, const VkImageMemoryRequirementsInfo2 * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkGetBufferMemoryRequirements2)(VkDevice device, const VkBufferMemoryRequirementsInfo2 * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkGetImageSparseMemoryRequirements2)(VkDevice device, const VkImageSparseMemoryRequirementsInfo2 * pInfo, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 * pSparseMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceFeatures2)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2 * pFeatures);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceProperties2)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 * pProperties);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceFormatProperties2)(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2 * pFormatProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceImageFormatProperties2)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2 * pImageFormatInfo, VkImageFormatProperties2 * pImageFormatProperties);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceQueueFamilyProperties2)(VkPhysicalDevice physicalDevice, uint32_t * pQueueFamilyPropertyCount, VkQueueFamilyProperties2 * pQueueFamilyProperties);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceMemoryProperties2)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2 * pMemoryProperties);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceSparseImageFormatProperties2)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2 * pFormatInfo, uint32_t * pPropertyCount, VkSparseImageFormatProperties2 * pProperties);
typedef void (GLAD_API_PTR *PFN_vkTrimCommandPool)(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);
typedef void (GLAD_API_PTR *PFN_vkGetDeviceQueue2)(VkDevice device, const VkDeviceQueueInfo2 * pQueueInfo, VkQueue * pQueue);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateSamplerYcbcrConversion)(VkDevice device, const VkSamplerYcbcrConversionCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSamplerYcbcrConversion * pYcbcrConversion);
typedef void (GLAD_API_PTR *PFN_vkDestroySamplerYcbcrConversion)(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateDescriptorUpdateTemplate)(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDescriptorUpdateTemplate * pDescriptorUpdateTemplate);
typedef void (GLAD_API_PTR *PFN_vkDestroyDescriptorUpdateTemplate)(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks * pAllocator);
typedef void (GLAD_API_PTR *PFN_vkUpdateDescriptorSetWithTemplate)(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void * pData);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceExternalBufferProperties)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo * pExternalBufferInfo, VkExternalBufferProperties * pExternalBufferProperties);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceExternalFenceProperties)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo * pExternalFenceInfo, VkExternalFenceProperties * pExternalFenceProperties);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceExternalSemaphoreProperties)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo * pExternalSemaphoreInfo, VkExternalSemaphoreProperties * pExternalSemaphoreProperties);
typedef void (GLAD_API_PTR *PFN_vkGetDescriptorSetLayoutSupport)(VkDevice device, const VkDescriptorSetLayoutCreateInfo * pCreateInfo, VkDescriptorSetLayoutSupport * pSupport);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawIndirectCount)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawIndexedIndirectCount)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateRenderPass2)(VkDevice device, const VkRenderPassCreateInfo2 * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkRenderPass * pRenderPass);
typedef void (GLAD_API_PTR *PFN_vkCmdBeginRenderPass2)(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo * pRenderPassBegin, const VkSubpassBeginInfo * pSubpassBeginInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdNextSubpass2)(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo * pSubpassBeginInfo, const VkSubpassEndInfo * pSubpassEndInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdEndRenderPass2)(VkCommandBuffer commandBuffer, const VkSubpassEndInfo * pSubpassEndInfo);
typedef void (GLAD_API_PTR *PFN_vkResetQueryPool)(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
typedef VkResult (GLAD_API_PTR *PFN_vkGetSemaphoreCounterValue)(VkDevice device, VkSemaphore semaphore, uint64_t * pValue);
typedef VkResult (GLAD_API_PTR *PFN_vkWaitSemaphores)(VkDevice device, const VkSemaphoreWaitInfo * pWaitInfo, uint64_t timeout);
typedef VkResult (GLAD_API_PTR *PFN_vkSignalSemaphore)(VkDevice device, const VkSemaphoreSignalInfo * pSignalInfo);
typedef VkDeviceAddress (GLAD_API_PTR *PFN_vkGetBufferDeviceAddress)(VkDevice device, const VkBufferDeviceAddressInfo * pInfo);
typedef uint64_t (GLAD_API_PTR *PFN_vkGetBufferOpaqueCaptureAddress)(VkDevice device, const VkBufferDeviceAddressInfo * pInfo);
typedef uint64_t (GLAD_API_PTR *PFN_vkGetDeviceMemoryOpaqueCaptureAddress)(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo * pInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceToolProperties)(VkPhysicalDevice physicalDevice, uint32_t * pToolCount, VkPhysicalDeviceToolProperties * pToolProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkCreatePrivateDataSlot)(VkDevice device, const VkPrivateDataSlotCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkPrivateDataSlot * pPrivateDataSlot);
typedef void (GLAD_API_PTR *PFN_vkDestroyPrivateDataSlot)(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkSetPrivateData)(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data);
typedef void (GLAD_API_PTR *PFN_vkGetPrivateData)(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t * pData);
typedef void (GLAD_API_PTR *PFN_vkCmdSetEvent2)(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo * pDependencyInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdResetEvent2)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask);
typedef void (GLAD_API_PTR *PFN_vkCmdWaitEvents2)(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent * pEvents, const VkDependencyInfo * pDependencyInfos);
typedef void (GLAD_API_PTR *PFN_vkCmdPipelineBarrier2)(VkCommandBuffer commandBuffer, const VkDependencyInfo * pDependencyInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdWriteTimestamp2)(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query);
typedef VkResult (GLAD_API_PTR *PFN_vkQueueSubmit2)(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 * pSubmits, VkFence fence);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyBuffer2)(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 * pCopyBufferInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyImage2)(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 * pCopyImageInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyBufferToImage2)(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 * pCopyBufferToImageInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyImageToBuffer2)(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 * pCopyImageToBufferInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdBlitImage2)(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 * pBlitImageInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdResolveImage2)(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 * pResolveImageInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdBeginRendering)(VkCommandBuffer commandBuffer, const VkRenderingInfo * pRenderingInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdEndRendering)(VkCommandBuffer commandBuffer);
typedef void (GLAD_API_PTR *PFN_vkCmdSetCullMode)(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode);
typedef void (GLAD_API_PTR *PFN_vkCmdSetFrontFace)(VkCommandBuffer commandBuffer, VkFrontFace frontFace);
typedef void (GLAD_API_PTR *PFN_vkCmdSetPrimitiveTopology)(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology);
typedef void (GLAD_API_PTR *PFN_vkCmdSetViewportWithCount)(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport * pViewports);
typedef void (GLAD_API_PTR *PFN_vkCmdSetScissorWithCount)(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D * pScissors);
typedef void (GLAD_API_PTR *PFN_vkCmdBindVertexBuffers2)(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer * pBuffers, const VkDeviceSize * pOffsets, const VkDeviceSize * pSizes, const VkDeviceSize * pStrides);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDepthTestEnable)(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDepthWriteEnable)(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDepthCompareOp)(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDepthBoundsTestEnable)(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetStencilTestEnable)(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetStencilOp)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp);
typedef void (GLAD_API_PTR *PFN_vkCmdSetRasterizerDiscardEnable)(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDepthBiasEnable)(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetPrimitiveRestartEnable)(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable);
typedef void (GLAD_API_PTR *PFN_vkGetDeviceBufferMemoryRequirements)(VkDevice device, const VkDeviceBufferMemoryRequirements * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkGetDeviceImageMemoryRequirements)(VkDevice device, const VkDeviceImageMemoryRequirements * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkGetDeviceImageSparseMemoryRequirements)(VkDevice device, const VkDeviceImageMemoryRequirements * pInfo, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 * pSparseMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkCmdSetLineStipple)(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern);
typedef VkResult (GLAD_API_PTR *PFN_vkMapMemory2)(VkDevice device, const VkMemoryMapInfo * pMemoryMapInfo, void ** ppData);
typedef VkResult (GLAD_API_PTR *PFN_vkUnmapMemory2)(VkDevice device, const VkMemoryUnmapInfo * pMemoryUnmapInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdBindIndexBuffer2)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType);
typedef void (GLAD_API_PTR *PFN_vkGetRenderingAreaGranularity)(VkDevice device, const VkRenderingAreaInfo * pRenderingAreaInfo, VkExtent2D * pGranularity);
typedef void (GLAD_API_PTR *PFN_vkGetDeviceImageSubresourceLayout)(VkDevice device, const VkDeviceImageSubresourceInfo * pInfo, VkSubresourceLayout2 * pLayout);
typedef void (GLAD_API_PTR *PFN_vkGetImageSubresourceLayout2)(VkDevice device, VkImage image, const VkImageSubresource2 * pSubresource, VkSubresourceLayout2 * pLayout);
typedef void (GLAD_API_PTR *PFN_vkCmdPushDescriptorSet)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet * pDescriptorWrites);
typedef void (GLAD_API_PTR *PFN_vkCmdPushDescriptorSetWithTemplate)(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void * pData);
typedef void (GLAD_API_PTR *PFN_vkCmdSetRenderingAttachmentLocations)(VkCommandBuffer commandBuffer, const VkRenderingAttachmentLocationInfo * pLocationInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdSetRenderingInputAttachmentIndices)(VkCommandBuffer commandBuffer, const VkRenderingInputAttachmentIndexInfo * pInputAttachmentIndexInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdBindDescriptorSets2)(VkCommandBuffer commandBuffer, const VkBindDescriptorSetsInfo * pBindDescriptorSetsInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdPushConstants2)(VkCommandBuffer commandBuffer, const VkPushConstantsInfo * pPushConstantsInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdPushDescriptorSet2)(VkCommandBuffer commandBuffer, const VkPushDescriptorSetInfo * pPushDescriptorSetInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdPushDescriptorSetWithTemplate2)(VkCommandBuffer commandBuffer, const VkPushDescriptorSetWithTemplateInfo * pPushDescriptorSetWithTemplateInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkCopyMemoryToImage)(VkDevice device, const VkCopyMemoryToImageInfo * pCopyMemoryToImageInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkCopyImageToMemory)(VkDevice device, const VkCopyImageToMemoryInfo * pCopyImageToMemoryInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkCopyImageToImage)(VkDevice device, const VkCopyImageToImageInfo * pCopyImageToImageInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkTransitionImageLayout)(VkDevice device, uint32_t transitionCount, const VkHostImageLayoutTransitionInfo * pTransitions);
typedef void (GLAD_API_PTR *PFN_vkDestroySurfaceKHR)(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceSurfaceSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32 * pSupported);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR * pSurfaceCapabilities);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t * pSurfaceFormatCount, VkSurfaceFormatKHR * pSurfaceFormats);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t * pPresentModeCount, VkPresentModeKHR * pPresentModes);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateSwapchainKHR)(VkDevice device, const VkSwapchainCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSwapchainKHR * pSwapchain);
typedef void (GLAD_API_PTR *PFN_vkDestroySwapchainKHR)(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkGetSwapchainImagesKHR)(VkDevice device, VkSwapchainKHR swapchain, uint32_t * pSwapchainImageCount, VkImage * pSwapchainImages);
typedef VkResult (GLAD_API_PTR *PFN_vkAcquireNextImageKHR)(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t * pImageIndex);
typedef VkResult (GLAD_API_PTR *PFN_vkQueuePresentKHR)(VkQueue queue, const VkPresentInfoKHR * pPresentInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkGetDeviceGroupPresentCapabilitiesKHR)(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR * pDeviceGroupPresentCapabilities);
typedef VkResult (GLAD_API_PTR *PFN_vkGetDeviceGroupSurfacePresentModesKHR)(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR * pModes);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDevicePresentRectanglesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t * pRectCount, VkRect2D * pRects);
typedef VkResult (GLAD_API_PTR *PFN_vkAcquireNextImage2KHR)(VkDevice device, const VkAcquireNextImageInfoKHR * pAcquireInfo, uint32_t * pImageIndex);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceDisplayPropertiesKHR)(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkDisplayPropertiesKHR * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR)(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkDisplayPlanePropertiesKHR * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkGetDisplayPlaneSupportedDisplaysKHR)(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t * pDisplayCount, VkDisplayKHR * pDisplays);
typedef VkResult (GLAD_API_PTR *PFN_vkGetDisplayModePropertiesKHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t * pPropertyCount, VkDisplayModePropertiesKHR * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateDisplayModeKHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDisplayModeKHR * pMode);
typedef VkResult (GLAD_API_PTR *PFN_vkGetDisplayPlaneCapabilitiesKHR)(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR * pCapabilities);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateDisplayPlaneSurfaceKHR)(VkInstance instance, const VkDisplaySurfaceCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateSharedSwapchainsKHR)(VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkSwapchainKHR * pSwapchains);
#if defined(VK_USE_PLATFORM_XLIB_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateXlibSurfaceKHR)(VkInstance instance, const VkXlibSurfaceCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
typedef VkBool32 (GLAD_API_PTR *PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, Display * dpy, VisualID visualID);
#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateXcbSurfaceKHR)(VkInstance instance, const VkXcbSurfaceCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
typedef VkBool32 (GLAD_API_PTR *PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, xcb_connection_t * connection, xcb_visualid_t visual_id);
#endif
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateWaylandSurfaceKHR)(VkInstance instance, const VkWaylandSurfaceCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
typedef VkBool32 (GLAD_API_PTR *PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, struct wl_display * display);
#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateAndroidSurfaceKHR)(VkInstance instance, const VkAndroidSurfaceCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateWin32SurfaceKHR)(VkInstance instance, const VkWin32SurfaceCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkBool32 (GLAD_API_PTR *PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex);
#endif
typedef VkResult (GLAD_API_PTR *PFN_vkCreateDebugReportCallbackEXT)(VkInstance instance, const VkDebugReportCallbackCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDebugReportCallbackEXT * pCallback);
typedef void (GLAD_API_PTR *PFN_vkDestroyDebugReportCallbackEXT)(VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks * pAllocator);
typedef void (GLAD_API_PTR *PFN_vkDebugReportMessageEXT)(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char * pLayerPrefix, const char * pMessage);
typedef VkResult (GLAD_API_PTR *PFN_vkDebugMarkerSetObjectTagEXT)(VkDevice device, const VkDebugMarkerObjectTagInfoEXT * pTagInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkDebugMarkerSetObjectNameEXT)(VkDevice device, const VkDebugMarkerObjectNameInfoEXT * pNameInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdDebugMarkerBeginEXT)(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT * pMarkerInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdDebugMarkerEndEXT)(VkCommandBuffer commandBuffer);
typedef void (GLAD_API_PTR *PFN_vkCmdDebugMarkerInsertEXT)(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT * pMarkerInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR)(VkPhysicalDevice physicalDevice, const VkVideoProfileInfoKHR * pVideoProfile, VkVideoCapabilitiesKHR * pCapabilities);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoFormatInfoKHR * pVideoFormatInfo, uint32_t * pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR * pVideoFormatProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateVideoSessionKHR)(VkDevice device, const VkVideoSessionCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkVideoSessionKHR * pVideoSession);
typedef void (GLAD_API_PTR *PFN_vkDestroyVideoSessionKHR)(VkDevice device, VkVideoSessionKHR videoSession, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkGetVideoSessionMemoryRequirementsKHR)(VkDevice device, VkVideoSessionKHR videoSession, uint32_t * pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR * pMemoryRequirements);
typedef VkResult (GLAD_API_PTR *PFN_vkBindVideoSessionMemoryKHR)(VkDevice device, VkVideoSessionKHR videoSession, uint32_t bindSessionMemoryInfoCount, const VkBindVideoSessionMemoryInfoKHR * pBindSessionMemoryInfos);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateVideoSessionParametersKHR)(VkDevice device, const VkVideoSessionParametersCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkVideoSessionParametersKHR * pVideoSessionParameters);
typedef VkResult (GLAD_API_PTR *PFN_vkUpdateVideoSessionParametersKHR)(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkVideoSessionParametersUpdateInfoKHR * pUpdateInfo);
typedef void (GLAD_API_PTR *PFN_vkDestroyVideoSessionParametersKHR)(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkAllocationCallbacks * pAllocator);
typedef void (GLAD_API_PTR *PFN_vkCmdBeginVideoCodingKHR)(VkCommandBuffer commandBuffer, const VkVideoBeginCodingInfoKHR * pBeginInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdEndVideoCodingKHR)(VkCommandBuffer commandBuffer, const VkVideoEndCodingInfoKHR * pEndCodingInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdControlVideoCodingKHR)(VkCommandBuffer commandBuffer, const VkVideoCodingControlInfoKHR * pCodingControlInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdDecodeVideoKHR)(VkCommandBuffer commandBuffer, const VkVideoDecodeInfoKHR * pDecodeInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdBindTransformFeedbackBuffersEXT)(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer * pBuffers, const VkDeviceSize * pOffsets, const VkDeviceSize * pSizes);
typedef void (GLAD_API_PTR *PFN_vkCmdBeginTransformFeedbackEXT)(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer * pCounterBuffers, const VkDeviceSize * pCounterBufferOffsets);
typedef void (GLAD_API_PTR *PFN_vkCmdEndTransformFeedbackEXT)(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer * pCounterBuffers, const VkDeviceSize * pCounterBufferOffsets);
typedef void (GLAD_API_PTR *PFN_vkCmdBeginQueryIndexedEXT)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index);
typedef void (GLAD_API_PTR *PFN_vkCmdEndQueryIndexedEXT)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawIndirectByteCountEXT)(VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateCuModuleNVX)(VkDevice device, const VkCuModuleCreateInfoNVX * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkCuModuleNVX * pModule);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateCuFunctionNVX)(VkDevice device, const VkCuFunctionCreateInfoNVX * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkCuFunctionNVX * pFunction);
typedef void (GLAD_API_PTR *PFN_vkDestroyCuModuleNVX)(VkDevice device, VkCuModuleNVX module, const VkAllocationCallbacks * pAllocator);
typedef void (GLAD_API_PTR *PFN_vkDestroyCuFunctionNVX)(VkDevice device, VkCuFunctionNVX function, const VkAllocationCallbacks * pAllocator);
typedef void (GLAD_API_PTR *PFN_vkCmdCuLaunchKernelNVX)(VkCommandBuffer commandBuffer, const VkCuLaunchInfoNVX * pLaunchInfo);
typedef uint32_t (GLAD_API_PTR *PFN_vkGetImageViewHandleNVX)(VkDevice device, const VkImageViewHandleInfoNVX * pInfo);
typedef uint64_t (GLAD_API_PTR *PFN_vkGetImageViewHandle64NVX)(VkDevice device, const VkImageViewHandleInfoNVX * pInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkGetImageViewAddressNVX)(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX * pProperties);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawIndirectCountAMD)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawIndexedIndirectCountAMD)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
typedef VkResult (GLAD_API_PTR *PFN_vkGetShaderInfoAMD)(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t * pInfoSize, void * pInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdBeginRenderingKHR)(VkCommandBuffer commandBuffer, const VkRenderingInfo * pRenderingInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdEndRenderingKHR)(VkCommandBuffer commandBuffer);
#if defined(VK_USE_PLATFORM_GGP)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateStreamDescriptorSurfaceGGP)(VkInstance instance, const VkStreamDescriptorSurfaceCreateInfoGGP * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV * pExternalImageFormatProperties);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkGetMemoryWin32HandleNV)(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagsNV handleType, HANDLE * pHandle);
#endif
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceFeatures2KHR)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2 * pFeatures);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceProperties2KHR)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 * pProperties);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceFormatProperties2KHR)(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2 * pFormatProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceImageFormatProperties2KHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2 * pImageFormatInfo, VkImageFormatProperties2 * pImageFormatProperties);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR)(VkPhysicalDevice physicalDevice, uint32_t * pQueueFamilyPropertyCount, VkQueueFamilyProperties2 * pQueueFamilyProperties);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceMemoryProperties2KHR)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2 * pMemoryProperties);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2 * pFormatInfo, uint32_t * pPropertyCount, VkSparseImageFormatProperties2 * pProperties);
typedef void (GLAD_API_PTR *PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR)(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags * pPeerMemoryFeatures);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDeviceMaskKHR)(VkCommandBuffer commandBuffer, uint32_t deviceMask);
typedef void (GLAD_API_PTR *PFN_vkCmdDispatchBaseKHR)(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
#if defined(VK_USE_PLATFORM_VI_NN)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateViSurfaceNN)(VkInstance instance, const VkViSurfaceCreateInfoNN * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
typedef void (GLAD_API_PTR *PFN_vkTrimCommandPoolKHR)(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);
typedef VkResult (GLAD_API_PTR *PFN_vkEnumeratePhysicalDeviceGroupsKHR)(VkInstance instance, uint32_t * pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties * pPhysicalDeviceGroupProperties);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo * pExternalBufferInfo, VkExternalBufferProperties * pExternalBufferProperties);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkGetMemoryWin32HandleKHR)(VkDevice device, const VkMemoryGetWin32HandleInfoKHR * pGetWin32HandleInfo, HANDLE * pHandle);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkGetMemoryWin32HandlePropertiesKHR)(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, HANDLE handle, VkMemoryWin32HandlePropertiesKHR * pMemoryWin32HandleProperties);
#endif
typedef VkResult (GLAD_API_PTR *PFN_vkGetMemoryFdKHR)(VkDevice device, const VkMemoryGetFdInfoKHR * pGetFdInfo, int * pFd);
typedef VkResult (GLAD_API_PTR *PFN_vkGetMemoryFdPropertiesKHR)(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR * pMemoryFdProperties);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo * pExternalSemaphoreInfo, VkExternalSemaphoreProperties * pExternalSemaphoreProperties);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkImportSemaphoreWin32HandleKHR)(VkDevice device, const VkImportSemaphoreWin32HandleInfoKHR * pImportSemaphoreWin32HandleInfo);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkGetSemaphoreWin32HandleKHR)(VkDevice device, const VkSemaphoreGetWin32HandleInfoKHR * pGetWin32HandleInfo, HANDLE * pHandle);
#endif
typedef VkResult (GLAD_API_PTR *PFN_vkImportSemaphoreFdKHR)(VkDevice device, const VkImportSemaphoreFdInfoKHR * pImportSemaphoreFdInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkGetSemaphoreFdKHR)(VkDevice device, const VkSemaphoreGetFdInfoKHR * pGetFdInfo, int * pFd);
typedef void (GLAD_API_PTR *PFN_vkCmdPushDescriptorSetKHR)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet * pDescriptorWrites);
typedef void (GLAD_API_PTR *PFN_vkCmdPushDescriptorSetWithTemplateKHR)(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void * pData);
typedef void (GLAD_API_PTR *PFN_vkCmdBeginConditionalRenderingEXT)(VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT * pConditionalRenderingBegin);
typedef void (GLAD_API_PTR *PFN_vkCmdEndConditionalRenderingEXT)(VkCommandBuffer commandBuffer);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateDescriptorUpdateTemplateKHR)(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDescriptorUpdateTemplate * pDescriptorUpdateTemplate);
typedef void (GLAD_API_PTR *PFN_vkDestroyDescriptorUpdateTemplateKHR)(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks * pAllocator);
typedef void (GLAD_API_PTR *PFN_vkUpdateDescriptorSetWithTemplateKHR)(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void * pData);
typedef void (GLAD_API_PTR *PFN_vkCmdSetViewportWScalingNV)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV * pViewportWScalings);
typedef VkResult (GLAD_API_PTR *PFN_vkReleaseDisplayEXT)(VkPhysicalDevice physicalDevice, VkDisplayKHR display);
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
typedef VkResult (GLAD_API_PTR *PFN_vkAcquireXlibDisplayEXT)(VkPhysicalDevice physicalDevice, Display * dpy, VkDisplayKHR display);
#endif
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
typedef VkResult (GLAD_API_PTR *PFN_vkGetRandROutputDisplayEXT)(VkPhysicalDevice physicalDevice, Display * dpy, RROutput rrOutput, VkDisplayKHR * pDisplay);
#endif
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT * pSurfaceCapabilities);
typedef VkResult (GLAD_API_PTR *PFN_vkDisplayPowerControlEXT)(VkDevice device, VkDisplayKHR display, const VkDisplayPowerInfoEXT * pDisplayPowerInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkRegisterDeviceEventEXT)(VkDevice device, const VkDeviceEventInfoEXT * pDeviceEventInfo, const VkAllocationCallbacks * pAllocator, VkFence * pFence);
typedef VkResult (GLAD_API_PTR *PFN_vkRegisterDisplayEventEXT)(VkDevice device, VkDisplayKHR display, const VkDisplayEventInfoEXT * pDisplayEventInfo, const VkAllocationCallbacks * pAllocator, VkFence * pFence);
typedef VkResult (GLAD_API_PTR *PFN_vkGetSwapchainCounterEXT)(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t * pCounterValue);
typedef VkResult (GLAD_API_PTR *PFN_vkGetRefreshCycleDurationGOOGLE)(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE * pDisplayTimingProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPastPresentationTimingGOOGLE)(VkDevice device, VkSwapchainKHR swapchain, uint32_t * pPresentationTimingCount, VkPastPresentationTimingGOOGLE * pPresentationTimings);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDiscardRectangleEXT)(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D * pDiscardRectangles);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDiscardRectangleEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDiscardRectangleModeEXT)(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode);
typedef void (GLAD_API_PTR *PFN_vkSetHdrMetadataEXT)(VkDevice device, uint32_t swapchainCount, const VkSwapchainKHR * pSwapchains, const VkHdrMetadataEXT * pMetadata);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateRenderPass2KHR)(VkDevice device, const VkRenderPassCreateInfo2 * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkRenderPass * pRenderPass);
typedef void (GLAD_API_PTR *PFN_vkCmdBeginRenderPass2KHR)(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo * pRenderPassBegin, const VkSubpassBeginInfo * pSubpassBeginInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdNextSubpass2KHR)(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo * pSubpassBeginInfo, const VkSubpassEndInfo * pSubpassEndInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdEndRenderPass2KHR)(VkCommandBuffer commandBuffer, const VkSubpassEndInfo * pSubpassEndInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkGetSwapchainStatusKHR)(VkDevice device, VkSwapchainKHR swapchain);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo * pExternalFenceInfo, VkExternalFenceProperties * pExternalFenceProperties);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkImportFenceWin32HandleKHR)(VkDevice device, const VkImportFenceWin32HandleInfoKHR * pImportFenceWin32HandleInfo);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkGetFenceWin32HandleKHR)(VkDevice device, const VkFenceGetWin32HandleInfoKHR * pGetWin32HandleInfo, HANDLE * pHandle);
#endif
typedef VkResult (GLAD_API_PTR *PFN_vkImportFenceFdKHR)(VkDevice device, const VkImportFenceFdInfoKHR * pImportFenceFdInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkGetFenceFdKHR)(VkDevice device, const VkFenceGetFdInfoKHR * pGetFdInfo, int * pFd);
typedef VkResult (GLAD_API_PTR *PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t * pCounterCount, VkPerformanceCounterKHR * pCounters, VkPerformanceCounterDescriptionKHR * pCounterDescriptions);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR)(VkPhysicalDevice physicalDevice, const VkQueryPoolPerformanceCreateInfoKHR * pPerformanceQueryCreateInfo, uint32_t * pNumPasses);
typedef VkResult (GLAD_API_PTR *PFN_vkAcquireProfilingLockKHR)(VkDevice device, const VkAcquireProfilingLockInfoKHR * pInfo);
typedef void (GLAD_API_PTR *PFN_vkReleaseProfilingLockKHR)(VkDevice device);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR * pSurfaceInfo, VkSurfaceCapabilities2KHR * pSurfaceCapabilities);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceSurfaceFormats2KHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR * pSurfaceInfo, uint32_t * pSurfaceFormatCount, VkSurfaceFormat2KHR * pSurfaceFormats);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceDisplayProperties2KHR)(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkDisplayProperties2KHR * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR)(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkDisplayPlaneProperties2KHR * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkGetDisplayModeProperties2KHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t * pPropertyCount, VkDisplayModeProperties2KHR * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkGetDisplayPlaneCapabilities2KHR)(VkPhysicalDevice physicalDevice, const VkDisplayPlaneInfo2KHR * pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR * pCapabilities);
#if defined(VK_USE_PLATFORM_IOS_MVK)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateIOSSurfaceMVK)(VkInstance instance, const VkIOSSurfaceCreateInfoMVK * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_MACOS_MVK)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateMacOSSurfaceMVK)(VkInstance instance, const VkMacOSSurfaceCreateInfoMVK * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
typedef VkResult (GLAD_API_PTR *PFN_vkSetDebugUtilsObjectNameEXT)(VkDevice device, const VkDebugUtilsObjectNameInfoEXT * pNameInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkSetDebugUtilsObjectTagEXT)(VkDevice device, const VkDebugUtilsObjectTagInfoEXT * pTagInfo);
typedef void (GLAD_API_PTR *PFN_vkQueueBeginDebugUtilsLabelEXT)(VkQueue queue, const VkDebugUtilsLabelEXT * pLabelInfo);
typedef void (GLAD_API_PTR *PFN_vkQueueEndDebugUtilsLabelEXT)(VkQueue queue);
typedef void (GLAD_API_PTR *PFN_vkQueueInsertDebugUtilsLabelEXT)(VkQueue queue, const VkDebugUtilsLabelEXT * pLabelInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdBeginDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT * pLabelInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdEndDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer);
typedef void (GLAD_API_PTR *PFN_vkCmdInsertDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT * pLabelInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateDebugUtilsMessengerEXT)(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDebugUtilsMessengerEXT * pMessenger);
typedef void (GLAD_API_PTR *PFN_vkDestroyDebugUtilsMessengerEXT)(VkInstance instance, VkDebugUtilsMessengerEXT messenger, const VkAllocationCallbacks * pAllocator);
typedef void (GLAD_API_PTR *PFN_vkSubmitDebugUtilsMessageEXT)(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT * pCallbackData);
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkGetAndroidHardwareBufferPropertiesANDROID)(VkDevice device, const struct AHardwareBuffer * buffer, VkAndroidHardwareBufferPropertiesANDROID * pProperties);
#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkGetMemoryAndroidHardwareBufferANDROID)(VkDevice device, const VkMemoryGetAndroidHardwareBufferInfoANDROID * pInfo, struct AHardwareBuffer ** pBuffer);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateExecutionGraphPipelinesAMDX)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkExecutionGraphPipelineCreateInfoAMDX * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkPipeline * pPipelines);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkResult (GLAD_API_PTR *PFN_vkGetExecutionGraphPipelineScratchSizeAMDX)(VkDevice device, VkPipeline executionGraph, VkExecutionGraphPipelineScratchSizeAMDX * pSizeInfo);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkResult (GLAD_API_PTR *PFN_vkGetExecutionGraphPipelineNodeIndexAMDX)(VkDevice device, VkPipeline executionGraph, const VkPipelineShaderStageNodeCreateInfoAMDX * pNodeInfo, uint32_t * pNodeIndex);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef void (GLAD_API_PTR *PFN_vkCmdInitializeGraphScratchMemoryAMDX)(VkCommandBuffer commandBuffer, VkPipeline executionGraph, VkDeviceAddress scratch, VkDeviceSize scratchSize);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef void (GLAD_API_PTR *PFN_vkCmdDispatchGraphAMDX)(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, VkDeviceSize scratchSize, const VkDispatchGraphCountInfoAMDX * pCountInfo);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef void (GLAD_API_PTR *PFN_vkCmdDispatchGraphIndirectAMDX)(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, VkDeviceSize scratchSize, const VkDispatchGraphCountInfoAMDX * pCountInfo);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef void (GLAD_API_PTR *PFN_vkCmdDispatchGraphIndirectCountAMDX)(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, VkDeviceSize scratchSize, VkDeviceAddress countInfo);
#endif
typedef void (GLAD_API_PTR *PFN_vkCmdSetSampleLocationsEXT)(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT * pSampleLocationsInfo);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT)(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT * pMultisampleProperties);
typedef void (GLAD_API_PTR *PFN_vkGetImageMemoryRequirements2KHR)(VkDevice device, const VkImageMemoryRequirementsInfo2 * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkGetBufferMemoryRequirements2KHR)(VkDevice device, const VkBufferMemoryRequirementsInfo2 * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkGetImageSparseMemoryRequirements2KHR)(VkDevice device, const VkImageSparseMemoryRequirementsInfo2 * pInfo, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 * pSparseMemoryRequirements);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateAccelerationStructureKHR)(VkDevice device, const VkAccelerationStructureCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkAccelerationStructureKHR * pAccelerationStructure);
typedef void (GLAD_API_PTR *PFN_vkDestroyAccelerationStructureKHR)(VkDevice device, VkAccelerationStructureKHR accelerationStructure, const VkAllocationCallbacks * pAllocator);
typedef void (GLAD_API_PTR *PFN_vkCmdBuildAccelerationStructuresKHR)(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR * pInfos, const VkAccelerationStructureBuildRangeInfoKHR * const* ppBuildRangeInfos);
typedef void (GLAD_API_PTR *PFN_vkCmdBuildAccelerationStructuresIndirectKHR)(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR * pInfos, const VkDeviceAddress * pIndirectDeviceAddresses, const uint32_t * pIndirectStrides, const uint32_t * const* ppMaxPrimitiveCounts);
typedef VkResult (GLAD_API_PTR *PFN_vkBuildAccelerationStructuresKHR)(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR * pInfos, const VkAccelerationStructureBuildRangeInfoKHR * const* ppBuildRangeInfos);
typedef VkResult (GLAD_API_PTR *PFN_vkCopyAccelerationStructureKHR)(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureInfoKHR * pInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkCopyAccelerationStructureToMemoryKHR)(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureToMemoryInfoKHR * pInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkCopyMemoryToAccelerationStructureKHR)(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToAccelerationStructureInfoKHR * pInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkWriteAccelerationStructuresPropertiesKHR)(VkDevice device, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR * pAccelerationStructures, VkQueryType queryType, size_t dataSize, void * pData, size_t stride);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyAccelerationStructureKHR)(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureInfoKHR * pInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyAccelerationStructureToMemoryKHR)(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR * pInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyMemoryToAccelerationStructureKHR)(VkCommandBuffer commandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR * pInfo);
typedef VkDeviceAddress (GLAD_API_PTR *PFN_vkGetAccelerationStructureDeviceAddressKHR)(VkDevice device, const VkAccelerationStructureDeviceAddressInfoKHR * pInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdWriteAccelerationStructuresPropertiesKHR)(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR * pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery);
typedef void (GLAD_API_PTR *PFN_vkGetDeviceAccelerationStructureCompatibilityKHR)(VkDevice device, const VkAccelerationStructureVersionInfoKHR * pVersionInfo, VkAccelerationStructureCompatibilityKHR * pCompatibility);
typedef void (GLAD_API_PTR *PFN_vkGetAccelerationStructureBuildSizesKHR)(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkAccelerationStructureBuildGeometryInfoKHR * pBuildInfo, const uint32_t * pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR * pSizeInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdTraceRaysKHR)(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR * pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateRayTracingPipelinesKHR)(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoKHR * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkPipeline * pPipelines);
typedef VkResult (GLAD_API_PTR *PFN_vkGetRayTracingShaderGroupHandlesKHR)(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void * pData);
typedef VkResult (GLAD_API_PTR *PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR)(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void * pData);
typedef void (GLAD_API_PTR *PFN_vkCmdTraceRaysIndirectKHR)(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR * pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress);
typedef VkDeviceSize (GLAD_API_PTR *PFN_vkGetRayTracingShaderGroupStackSizeKHR)(VkDevice device, VkPipeline pipeline, uint32_t group, VkShaderGroupShaderKHR groupShader);
typedef void (GLAD_API_PTR *PFN_vkCmdSetRayTracingPipelineStackSizeKHR)(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateSamplerYcbcrConversionKHR)(VkDevice device, const VkSamplerYcbcrConversionCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSamplerYcbcrConversion * pYcbcrConversion);
typedef void (GLAD_API_PTR *PFN_vkDestroySamplerYcbcrConversionKHR)(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkBindBufferMemory2KHR)(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo * pBindInfos);
typedef VkResult (GLAD_API_PTR *PFN_vkBindImageMemory2KHR)(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo * pBindInfos);
typedef VkResult (GLAD_API_PTR *PFN_vkGetImageDrmFormatModifierPropertiesEXT)(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateValidationCacheEXT)(VkDevice device, const VkValidationCacheCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkValidationCacheEXT * pValidationCache);
typedef void (GLAD_API_PTR *PFN_vkDestroyValidationCacheEXT)(VkDevice device, VkValidationCacheEXT validationCache, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkMergeValidationCachesEXT)(VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, const VkValidationCacheEXT * pSrcCaches);
typedef VkResult (GLAD_API_PTR *PFN_vkGetValidationCacheDataEXT)(VkDevice device, VkValidationCacheEXT validationCache, size_t * pDataSize, void * pData);
typedef void (GLAD_API_PTR *PFN_vkCmdBindShadingRateImageNV)(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout);
typedef void (GLAD_API_PTR *PFN_vkCmdSetViewportShadingRatePaletteNV)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkShadingRatePaletteNV * pShadingRatePalettes);
typedef void (GLAD_API_PTR *PFN_vkCmdSetCoarseSampleOrderNV)(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const VkCoarseSampleOrderCustomNV * pCustomSampleOrders);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateAccelerationStructureNV)(VkDevice device, const VkAccelerationStructureCreateInfoNV * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkAccelerationStructureNV * pAccelerationStructure);
typedef void (GLAD_API_PTR *PFN_vkDestroyAccelerationStructureNV)(VkDevice device, VkAccelerationStructureNV accelerationStructure, const VkAllocationCallbacks * pAllocator);
typedef void (GLAD_API_PTR *PFN_vkGetAccelerationStructureMemoryRequirementsNV)(VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoNV * pInfo, VkMemoryRequirements2KHR * pMemoryRequirements);
typedef VkResult (GLAD_API_PTR *PFN_vkBindAccelerationStructureMemoryNV)(VkDevice device, uint32_t bindInfoCount, const VkBindAccelerationStructureMemoryInfoNV * pBindInfos);
typedef void (GLAD_API_PTR *PFN_vkCmdBuildAccelerationStructureNV)(VkCommandBuffer commandBuffer, const VkAccelerationStructureInfoNV * pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyAccelerationStructureNV)(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode);
typedef void (GLAD_API_PTR *PFN_vkCmdTraceRaysNV)(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateRayTracingPipelinesNV)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoNV * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkPipeline * pPipelines);
typedef VkResult (GLAD_API_PTR *PFN_vkGetRayTracingShaderGroupHandlesNV)(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void * pData);
typedef VkResult (GLAD_API_PTR *PFN_vkGetAccelerationStructureHandleNV)(VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void * pData);
typedef void (GLAD_API_PTR *PFN_vkCmdWriteAccelerationStructuresPropertiesNV)(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureNV * pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery);
typedef VkResult (GLAD_API_PTR *PFN_vkCompileDeferredNV)(VkDevice device, VkPipeline pipeline, uint32_t shader);
typedef void (GLAD_API_PTR *PFN_vkGetDescriptorSetLayoutSupportKHR)(VkDevice device, const VkDescriptorSetLayoutCreateInfo * pCreateInfo, VkDescriptorSetLayoutSupport * pSupport);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawIndirectCountKHR)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawIndexedIndirectCountKHR)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
typedef VkResult (GLAD_API_PTR *PFN_vkGetMemoryHostPointerPropertiesEXT)(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const void * pHostPointer, VkMemoryHostPointerPropertiesEXT * pMemoryHostPointerProperties);
typedef void (GLAD_API_PTR *PFN_vkCmdWriteBufferMarkerAMD)(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker);
typedef void (GLAD_API_PTR *PFN_vkCmdWriteBufferMarker2AMD)(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT)(VkPhysicalDevice physicalDevice, uint32_t * pTimeDomainCount, VkTimeDomainKHR * pTimeDomains);
typedef VkResult (GLAD_API_PTR *PFN_vkGetCalibratedTimestampsEXT)(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoKHR * pTimestampInfos, uint64_t * pTimestamps, uint64_t * pMaxDeviation);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawMeshTasksNV)(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawMeshTasksIndirectNV)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawMeshTasksIndirectCountNV)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
typedef void (GLAD_API_PTR *PFN_vkCmdSetExclusiveScissorEnableNV)(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkBool32 * pExclusiveScissorEnables);
typedef void (GLAD_API_PTR *PFN_vkCmdSetExclusiveScissorNV)(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkRect2D * pExclusiveScissors);
typedef void (GLAD_API_PTR *PFN_vkCmdSetCheckpointNV)(VkCommandBuffer commandBuffer, const void * pCheckpointMarker);
typedef void (GLAD_API_PTR *PFN_vkGetQueueCheckpointDataNV)(VkQueue queue, uint32_t * pCheckpointDataCount, VkCheckpointDataNV * pCheckpointData);
typedef void (GLAD_API_PTR *PFN_vkGetQueueCheckpointData2NV)(VkQueue queue, uint32_t * pCheckpointDataCount, VkCheckpointData2NV * pCheckpointData);
typedef VkResult (GLAD_API_PTR *PFN_vkGetSemaphoreCounterValueKHR)(VkDevice device, VkSemaphore semaphore, uint64_t * pValue);
typedef VkResult (GLAD_API_PTR *PFN_vkWaitSemaphoresKHR)(VkDevice device, const VkSemaphoreWaitInfo * pWaitInfo, uint64_t timeout);
typedef VkResult (GLAD_API_PTR *PFN_vkSignalSemaphoreKHR)(VkDevice device, const VkSemaphoreSignalInfo * pSignalInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkInitializePerformanceApiINTEL)(VkDevice device, const VkInitializePerformanceApiInfoINTEL * pInitializeInfo);
typedef void (GLAD_API_PTR *PFN_vkUninitializePerformanceApiINTEL)(VkDevice device);
typedef VkResult (GLAD_API_PTR *PFN_vkCmdSetPerformanceMarkerINTEL)(VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL * pMarkerInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkCmdSetPerformanceStreamMarkerINTEL)(VkCommandBuffer commandBuffer, const VkPerformanceStreamMarkerInfoINTEL * pMarkerInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkCmdSetPerformanceOverrideINTEL)(VkCommandBuffer commandBuffer, const VkPerformanceOverrideInfoINTEL * pOverrideInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkAcquirePerformanceConfigurationINTEL)(VkDevice device, const VkPerformanceConfigurationAcquireInfoINTEL * pAcquireInfo, VkPerformanceConfigurationINTEL * pConfiguration);
typedef VkResult (GLAD_API_PTR *PFN_vkReleasePerformanceConfigurationINTEL)(VkDevice device, VkPerformanceConfigurationINTEL configuration);
typedef VkResult (GLAD_API_PTR *PFN_vkQueueSetPerformanceConfigurationINTEL)(VkQueue queue, VkPerformanceConfigurationINTEL configuration);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPerformanceParameterINTEL)(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL * pValue);
typedef void (GLAD_API_PTR *PFN_vkSetLocalDimmingAMD)(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable);
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateImagePipeSurfaceFUCHSIA)(VkInstance instance, const VkImagePipeSurfaceCreateInfoFUCHSIA * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateMetalSurfaceEXT)(VkInstance instance, const VkMetalSurfaceCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR)(VkPhysicalDevice physicalDevice, uint32_t * pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR * pFragmentShadingRates);
typedef void (GLAD_API_PTR *PFN_vkCmdSetFragmentShadingRateKHR)(VkCommandBuffer commandBuffer, const VkExtent2D * pFragmentSize, const VkFragmentShadingRateCombinerOpKHR combinerOps [2]);
typedef void (GLAD_API_PTR *PFN_vkCmdSetRenderingAttachmentLocationsKHR)(VkCommandBuffer commandBuffer, const VkRenderingAttachmentLocationInfo * pLocationInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdSetRenderingInputAttachmentIndicesKHR)(VkCommandBuffer commandBuffer, const VkRenderingInputAttachmentIndexInfo * pInputAttachmentIndexInfo);
typedef VkDeviceAddress (GLAD_API_PTR *PFN_vkGetBufferDeviceAddressEXT)(VkDevice device, const VkBufferDeviceAddressInfo * pInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceToolPropertiesEXT)(VkPhysicalDevice physicalDevice, uint32_t * pToolCount, VkPhysicalDeviceToolProperties * pToolProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkWaitForPresentKHR)(VkDevice device, VkSwapchainKHR swapchain, uint64_t presentId, uint64_t timeout);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV)(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkCooperativeMatrixPropertiesNV * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV)(VkPhysicalDevice physicalDevice, uint32_t * pCombinationCount, VkFramebufferMixedSamplesCombinationNV * pCombinations);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR * pSurfaceInfo, uint32_t * pPresentModeCount, VkPresentModeKHR * pPresentModes);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkAcquireFullScreenExclusiveModeEXT)(VkDevice device, VkSwapchainKHR swapchain);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkReleaseFullScreenExclusiveModeEXT)(VkDevice device, VkSwapchainKHR swapchain);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkGetDeviceGroupSurfacePresentModes2EXT)(VkDevice device, const VkPhysicalDeviceSurfaceInfo2KHR * pSurfaceInfo, VkDeviceGroupPresentModeFlagsKHR * pModes);
#endif
typedef VkResult (GLAD_API_PTR *PFN_vkCreateHeadlessSurfaceEXT)(VkInstance instance, const VkHeadlessSurfaceCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
typedef VkDeviceAddress (GLAD_API_PTR *PFN_vkGetBufferDeviceAddressKHR)(VkDevice device, const VkBufferDeviceAddressInfo * pInfo);
typedef uint64_t (GLAD_API_PTR *PFN_vkGetBufferOpaqueCaptureAddressKHR)(VkDevice device, const VkBufferDeviceAddressInfo * pInfo);
typedef uint64_t (GLAD_API_PTR *PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR)(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo * pInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdSetLineStippleEXT)(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern);
typedef void (GLAD_API_PTR *PFN_vkResetQueryPoolEXT)(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
typedef void (GLAD_API_PTR *PFN_vkCmdSetCullModeEXT)(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode);
typedef void (GLAD_API_PTR *PFN_vkCmdSetFrontFaceEXT)(VkCommandBuffer commandBuffer, VkFrontFace frontFace);
typedef void (GLAD_API_PTR *PFN_vkCmdSetPrimitiveTopologyEXT)(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology);
typedef void (GLAD_API_PTR *PFN_vkCmdSetViewportWithCountEXT)(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport * pViewports);
typedef void (GLAD_API_PTR *PFN_vkCmdSetScissorWithCountEXT)(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D * pScissors);
typedef void (GLAD_API_PTR *PFN_vkCmdBindVertexBuffers2EXT)(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer * pBuffers, const VkDeviceSize * pOffsets, const VkDeviceSize * pSizes, const VkDeviceSize * pStrides);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDepthTestEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDepthWriteEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDepthCompareOpEXT)(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDepthBoundsTestEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetStencilTestEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetStencilOpEXT)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateDeferredOperationKHR)(VkDevice device, const VkAllocationCallbacks * pAllocator, VkDeferredOperationKHR * pDeferredOperation);
typedef void (GLAD_API_PTR *PFN_vkDestroyDeferredOperationKHR)(VkDevice device, VkDeferredOperationKHR operation, const VkAllocationCallbacks * pAllocator);
typedef uint32_t (GLAD_API_PTR *PFN_vkGetDeferredOperationMaxConcurrencyKHR)(VkDevice device, VkDeferredOperationKHR operation);
typedef VkResult (GLAD_API_PTR *PFN_vkGetDeferredOperationResultKHR)(VkDevice device, VkDeferredOperationKHR operation);
typedef VkResult (GLAD_API_PTR *PFN_vkDeferredOperationJoinKHR)(VkDevice device, VkDeferredOperationKHR operation);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPipelineExecutablePropertiesKHR)(VkDevice device, const VkPipelineInfoKHR * pPipelineInfo, uint32_t * pExecutableCount, VkPipelineExecutablePropertiesKHR * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPipelineExecutableStatisticsKHR)(VkDevice device, const VkPipelineExecutableInfoKHR * pExecutableInfo, uint32_t * pStatisticCount, VkPipelineExecutableStatisticKHR * pStatistics);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPipelineExecutableInternalRepresentationsKHR)(VkDevice device, const VkPipelineExecutableInfoKHR * pExecutableInfo, uint32_t * pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR * pInternalRepresentations);
typedef VkResult (GLAD_API_PTR *PFN_vkCopyMemoryToImageEXT)(VkDevice device, const VkCopyMemoryToImageInfo * pCopyMemoryToImageInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkCopyImageToMemoryEXT)(VkDevice device, const VkCopyImageToMemoryInfo * pCopyImageToMemoryInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkCopyImageToImageEXT)(VkDevice device, const VkCopyImageToImageInfo * pCopyImageToImageInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkTransitionImageLayoutEXT)(VkDevice device, uint32_t transitionCount, const VkHostImageLayoutTransitionInfo * pTransitions);
typedef void (GLAD_API_PTR *PFN_vkGetImageSubresourceLayout2EXT)(VkDevice device, VkImage image, const VkImageSubresource2 * pSubresource, VkSubresourceLayout2 * pLayout);
typedef VkResult (GLAD_API_PTR *PFN_vkMapMemory2KHR)(VkDevice device, const VkMemoryMapInfo * pMemoryMapInfo, void ** ppData);
typedef VkResult (GLAD_API_PTR *PFN_vkUnmapMemory2KHR)(VkDevice device, const VkMemoryUnmapInfo * pMemoryUnmapInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkReleaseSwapchainImagesEXT)(VkDevice device, const VkReleaseSwapchainImagesInfoKHR * pReleaseInfo);
typedef void (GLAD_API_PTR *PFN_vkGetGeneratedCommandsMemoryRequirementsNV)(VkDevice device, const VkGeneratedCommandsMemoryRequirementsInfoNV * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkCmdPreprocessGeneratedCommandsNV)(VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoNV * pGeneratedCommandsInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdExecuteGeneratedCommandsNV)(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const VkGeneratedCommandsInfoNV * pGeneratedCommandsInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdBindPipelineShaderGroupNV)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32_t groupIndex);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateIndirectCommandsLayoutNV)(VkDevice device, const VkIndirectCommandsLayoutCreateInfoNV * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkIndirectCommandsLayoutNV * pIndirectCommandsLayout);
typedef void (GLAD_API_PTR *PFN_vkDestroyIndirectCommandsLayoutNV)(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, const VkAllocationCallbacks * pAllocator);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDepthBias2EXT)(VkCommandBuffer commandBuffer, const VkDepthBiasInfoEXT * pDepthBiasInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkAcquireDrmDisplayEXT)(VkPhysicalDevice physicalDevice, int32_t drmFd, VkDisplayKHR display);
typedef VkResult (GLAD_API_PTR *PFN_vkGetDrmDisplayEXT)(VkPhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId, VkDisplayKHR * display);
typedef VkResult (GLAD_API_PTR *PFN_vkCreatePrivateDataSlotEXT)(VkDevice device, const VkPrivateDataSlotCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkPrivateDataSlot * pPrivateDataSlot);
typedef void (GLAD_API_PTR *PFN_vkDestroyPrivateDataSlotEXT)(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkSetPrivateDataEXT)(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data);
typedef void (GLAD_API_PTR *PFN_vkGetPrivateDataEXT)(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t * pData);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR * pQualityLevelInfo, VkVideoEncodeQualityLevelPropertiesKHR * pQualityLevelProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkGetEncodedVideoSessionParametersKHR)(VkDevice device, const VkVideoEncodeSessionParametersGetInfoKHR * pVideoSessionParametersInfo, VkVideoEncodeSessionParametersFeedbackInfoKHR * pFeedbackInfo, size_t * pDataSize, void * pData);
typedef void (GLAD_API_PTR *PFN_vkCmdEncodeVideoKHR)(VkCommandBuffer commandBuffer, const VkVideoEncodeInfoKHR * pEncodeInfo);
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateCudaModuleNV)(VkDevice device, const VkCudaModuleCreateInfoNV * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkCudaModuleNV * pModule);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkResult (GLAD_API_PTR *PFN_vkGetCudaModuleCacheNV)(VkDevice device, VkCudaModuleNV module, size_t * pCacheSize, void * pCacheData);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateCudaFunctionNV)(VkDevice device, const VkCudaFunctionCreateInfoNV * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkCudaFunctionNV * pFunction);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef void (GLAD_API_PTR *PFN_vkDestroyCudaModuleNV)(VkDevice device, VkCudaModuleNV module, const VkAllocationCallbacks * pAllocator);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef void (GLAD_API_PTR *PFN_vkDestroyCudaFunctionNV)(VkDevice device, VkCudaFunctionNV function, const VkAllocationCallbacks * pAllocator);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef void (GLAD_API_PTR *PFN_vkCmdCudaLaunchKernelNV)(VkCommandBuffer commandBuffer, const VkCudaLaunchInfoNV * pLaunchInfo);
#endif
typedef void (GLAD_API_PTR *PFN_vkCmdDispatchTileQCOM)(VkCommandBuffer commandBuffer, const VkDispatchTileInfoQCOM * pDispatchTileInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdBeginPerTileExecutionQCOM)(VkCommandBuffer commandBuffer, const VkPerTileBeginInfoQCOM * pPerTileBeginInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdEndPerTileExecutionQCOM)(VkCommandBuffer commandBuffer, const VkPerTileEndInfoQCOM * pPerTileEndInfo);
#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef void (GLAD_API_PTR *PFN_vkExportMetalObjectsEXT)(VkDevice device, VkExportMetalObjectsInfoEXT * pMetalObjectsInfo);
#endif
typedef void (GLAD_API_PTR *PFN_vkCmdSetEvent2KHR)(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo * pDependencyInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdResetEvent2KHR)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask);
typedef void (GLAD_API_PTR *PFN_vkCmdWaitEvents2KHR)(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent * pEvents, const VkDependencyInfo * pDependencyInfos);
typedef void (GLAD_API_PTR *PFN_vkCmdPipelineBarrier2KHR)(VkCommandBuffer commandBuffer, const VkDependencyInfo * pDependencyInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdWriteTimestamp2KHR)(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query);
typedef VkResult (GLAD_API_PTR *PFN_vkQueueSubmit2KHR)(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 * pSubmits, VkFence fence);
typedef void (GLAD_API_PTR *PFN_vkGetDescriptorSetLayoutSizeEXT)(VkDevice device, VkDescriptorSetLayout layout, VkDeviceSize * pLayoutSizeInBytes);
typedef void (GLAD_API_PTR *PFN_vkGetDescriptorSetLayoutBindingOffsetEXT)(VkDevice device, VkDescriptorSetLayout layout, uint32_t binding, VkDeviceSize * pOffset);
typedef void (GLAD_API_PTR *PFN_vkGetDescriptorEXT)(VkDevice device, const VkDescriptorGetInfoEXT * pDescriptorInfo, size_t dataSize, void * pDescriptor);
typedef void (GLAD_API_PTR *PFN_vkCmdBindDescriptorBuffersEXT)(VkCommandBuffer commandBuffer, uint32_t bufferCount, const VkDescriptorBufferBindingInfoEXT * pBindingInfos);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDescriptorBufferOffsetsEXT)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t setCount, const uint32_t * pBufferIndices, const VkDeviceSize * pOffsets);
typedef void (GLAD_API_PTR *PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set);
typedef VkResult (GLAD_API_PTR *PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT)(VkDevice device, const VkBufferCaptureDescriptorDataInfoEXT * pInfo, void * pData);
typedef VkResult (GLAD_API_PTR *PFN_vkGetImageOpaqueCaptureDescriptorDataEXT)(VkDevice device, const VkImageCaptureDescriptorDataInfoEXT * pInfo, void * pData);
typedef VkResult (GLAD_API_PTR *PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT)(VkDevice device, const VkImageViewCaptureDescriptorDataInfoEXT * pInfo, void * pData);
typedef VkResult (GLAD_API_PTR *PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT)(VkDevice device, const VkSamplerCaptureDescriptorDataInfoEXT * pInfo, void * pData);
typedef VkResult (GLAD_API_PTR *PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT)(VkDevice device, const VkAccelerationStructureCaptureDescriptorDataInfoEXT * pInfo, void * pData);
typedef void (GLAD_API_PTR *PFN_vkCmdSetFragmentShadingRateEnumNV)(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, const VkFragmentShadingRateCombinerOpKHR combinerOps [2]);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawMeshTasksEXT)(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawMeshTasksIndirectEXT)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawMeshTasksIndirectCountEXT)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyBuffer2KHR)(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 * pCopyBufferInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyImage2KHR)(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 * pCopyImageInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyBufferToImage2KHR)(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 * pCopyBufferToImageInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyImageToBuffer2KHR)(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 * pCopyImageToBufferInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdBlitImage2KHR)(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 * pBlitImageInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdResolveImage2KHR)(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 * pResolveImageInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkGetDeviceFaultInfoEXT)(VkDevice device, VkDeviceFaultCountsEXT * pFaultCounts, VkDeviceFaultInfoEXT * pFaultInfo);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkAcquireWinrtDisplayNV)(VkPhysicalDevice physicalDevice, VkDisplayKHR display);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult (GLAD_API_PTR *PFN_vkGetWinrtDisplayNV)(VkPhysicalDevice physicalDevice, uint32_t deviceRelativeId, VkDisplayKHR * pDisplay);
#endif
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateDirectFBSurfaceEXT)(VkInstance instance, const VkDirectFBSurfaceCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
typedef VkBool32 (GLAD_API_PTR *PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, IDirectFB * dfb);
#endif
typedef void (GLAD_API_PTR *PFN_vkCmdSetVertexInputEXT)(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT * pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT * pVertexAttributeDescriptions);
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult (GLAD_API_PTR *PFN_vkGetMemoryZirconHandleFUCHSIA)(VkDevice device, const VkMemoryGetZirconHandleInfoFUCHSIA * pGetZirconHandleInfo, zx_handle_t * pZirconHandle);
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult (GLAD_API_PTR *PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA)(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, zx_handle_t zirconHandle, VkMemoryZirconHandlePropertiesFUCHSIA * pMemoryZirconHandleProperties);
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult (GLAD_API_PTR *PFN_vkImportSemaphoreZirconHandleFUCHSIA)(VkDevice device, const VkImportSemaphoreZirconHandleInfoFUCHSIA * pImportSemaphoreZirconHandleInfo);
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult (GLAD_API_PTR *PFN_vkGetSemaphoreZirconHandleFUCHSIA)(VkDevice device, const VkSemaphoreGetZirconHandleInfoFUCHSIA * pGetZirconHandleInfo, zx_handle_t * pZirconHandle);
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateBufferCollectionFUCHSIA)(VkDevice device, const VkBufferCollectionCreateInfoFUCHSIA * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkBufferCollectionFUCHSIA * pCollection);
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult (GLAD_API_PTR *PFN_vkSetBufferCollectionImageConstraintsFUCHSIA)(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkImageConstraintsInfoFUCHSIA * pImageConstraintsInfo);
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult (GLAD_API_PTR *PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA)(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkBufferConstraintsInfoFUCHSIA * pBufferConstraintsInfo);
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef void (GLAD_API_PTR *PFN_vkDestroyBufferCollectionFUCHSIA)(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkAllocationCallbacks * pAllocator);
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult (GLAD_API_PTR *PFN_vkGetBufferCollectionPropertiesFUCHSIA)(VkDevice device, VkBufferCollectionFUCHSIA collection, VkBufferCollectionPropertiesFUCHSIA * pProperties);
#endif
typedef VkResult (GLAD_API_PTR *PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI)(VkDevice device, VkRenderPass renderpass, VkExtent2D * pMaxWorkgroupSize);
typedef void (GLAD_API_PTR *PFN_vkCmdSubpassShadingHUAWEI)(VkCommandBuffer commandBuffer);
typedef void (GLAD_API_PTR *PFN_vkCmdBindInvocationMaskHUAWEI)(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout);
typedef VkResult (GLAD_API_PTR *PFN_vkGetMemoryRemoteAddressNV)(VkDevice device, const VkMemoryGetRemoteAddressInfoNV * pMemoryGetRemoteAddressInfo, VkRemoteAddressNV * pAddress);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPipelinePropertiesEXT)(VkDevice device, const VkPipelineInfoEXT * pPipelineInfo, VkBaseOutStructure * pPipelineProperties);
typedef void (GLAD_API_PTR *PFN_vkCmdSetPatchControlPointsEXT)(VkCommandBuffer commandBuffer, uint32_t patchControlPoints);
typedef void (GLAD_API_PTR *PFN_vkCmdSetRasterizerDiscardEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDepthBiasEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetLogicOpEXT)(VkCommandBuffer commandBuffer, VkLogicOp logicOp);
typedef void (GLAD_API_PTR *PFN_vkCmdSetPrimitiveRestartEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable);
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateScreenSurfaceQNX)(VkInstance instance, const VkScreenSurfaceCreateInfoQNX * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef VkBool32 (GLAD_API_PTR *PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, struct _screen_window * window);
#endif
typedef void (GLAD_API_PTR *PFN_vkCmdSetColorWriteEnableEXT)(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkBool32 * pColorWriteEnables);
typedef void (GLAD_API_PTR *PFN_vkCmdTraceRaysIndirect2KHR)(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawMultiEXT)(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawInfoEXT * pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawMultiIndexedEXT)(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawIndexedInfoEXT * pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, const int32_t * pVertexOffset);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateMicromapEXT)(VkDevice device, const VkMicromapCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkMicromapEXT * pMicromap);
typedef void (GLAD_API_PTR *PFN_vkDestroyMicromapEXT)(VkDevice device, VkMicromapEXT micromap, const VkAllocationCallbacks * pAllocator);
typedef void (GLAD_API_PTR *PFN_vkCmdBuildMicromapsEXT)(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkMicromapBuildInfoEXT * pInfos);
typedef VkResult (GLAD_API_PTR *PFN_vkBuildMicromapsEXT)(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkMicromapBuildInfoEXT * pInfos);
typedef VkResult (GLAD_API_PTR *PFN_vkCopyMicromapEXT)(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapInfoEXT * pInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkCopyMicromapToMemoryEXT)(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapToMemoryInfoEXT * pInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkCopyMemoryToMicromapEXT)(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToMicromapInfoEXT * pInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkWriteMicromapsPropertiesEXT)(VkDevice device, uint32_t micromapCount, const VkMicromapEXT * pMicromaps, VkQueryType queryType, size_t dataSize, void * pData, size_t stride);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyMicromapEXT)(VkCommandBuffer commandBuffer, const VkCopyMicromapInfoEXT * pInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyMicromapToMemoryEXT)(VkCommandBuffer commandBuffer, const VkCopyMicromapToMemoryInfoEXT * pInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyMemoryToMicromapEXT)(VkCommandBuffer commandBuffer, const VkCopyMemoryToMicromapInfoEXT * pInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdWriteMicromapsPropertiesEXT)(VkCommandBuffer commandBuffer, uint32_t micromapCount, const VkMicromapEXT * pMicromaps, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery);
typedef void (GLAD_API_PTR *PFN_vkGetDeviceMicromapCompatibilityEXT)(VkDevice device, const VkMicromapVersionInfoEXT * pVersionInfo, VkAccelerationStructureCompatibilityKHR * pCompatibility);
typedef void (GLAD_API_PTR *PFN_vkGetMicromapBuildSizesEXT)(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkMicromapBuildInfoEXT * pBuildInfo, VkMicromapBuildSizesInfoEXT * pSizeInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawClusterHUAWEI)(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
typedef void (GLAD_API_PTR *PFN_vkCmdDrawClusterIndirectHUAWEI)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);
typedef void (GLAD_API_PTR *PFN_vkSetDeviceMemoryPriorityEXT)(VkDevice device, VkDeviceMemory memory, float priority);
typedef void (GLAD_API_PTR *PFN_vkGetDeviceBufferMemoryRequirementsKHR)(VkDevice device, const VkDeviceBufferMemoryRequirements * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkGetDeviceImageMemoryRequirementsKHR)(VkDevice device, const VkDeviceImageMemoryRequirements * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkGetDeviceImageSparseMemoryRequirementsKHR)(VkDevice device, const VkDeviceImageMemoryRequirements * pInfo, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 * pSparseMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE)(VkDevice device, const VkDescriptorSetBindingReferenceVALVE * pBindingReference, VkDescriptorSetLayoutHostMappingInfoVALVE * pHostMapping);
typedef void (GLAD_API_PTR *PFN_vkGetDescriptorSetHostMappingVALVE)(VkDevice device, VkDescriptorSet descriptorSet, void ** ppData);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyMemoryIndirectNV)(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyMemoryToImageIndirectNV)(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride, VkImage dstImage, VkImageLayout dstImageLayout, const VkImageSubresourceLayers * pImageSubresources);
typedef void (GLAD_API_PTR *PFN_vkCmdDecompressMemoryNV)(VkCommandBuffer commandBuffer, uint32_t decompressRegionCount, const VkDecompressMemoryRegionNV * pDecompressMemoryRegions);
typedef void (GLAD_API_PTR *PFN_vkCmdDecompressMemoryIndirectCountNV)(VkCommandBuffer commandBuffer, VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint32_t stride);
typedef void (GLAD_API_PTR *PFN_vkGetPipelineIndirectMemoryRequirementsNV)(VkDevice device, const VkComputePipelineCreateInfo * pCreateInfo, VkMemoryRequirements2 * pMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkCmdUpdatePipelineIndirectBufferNV)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
typedef VkDeviceAddress (GLAD_API_PTR *PFN_vkGetPipelineIndirectDeviceAddressNV)(VkDevice device, const VkPipelineIndirectDeviceAddressInfoNV * pInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDepthClampEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetPolygonModeEXT)(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode);
typedef void (GLAD_API_PTR *PFN_vkCmdSetRasterizationSamplesEXT)(VkCommandBuffer commandBuffer, VkSampleCountFlagBits rasterizationSamples);
typedef void (GLAD_API_PTR *PFN_vkCmdSetSampleMaskEXT)(VkCommandBuffer commandBuffer, VkSampleCountFlagBits samples, const VkSampleMask * pSampleMask);
typedef void (GLAD_API_PTR *PFN_vkCmdSetAlphaToCoverageEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetAlphaToOneEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetLogicOpEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetColorBlendEnableEXT)(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkBool32 * pColorBlendEnables);
typedef void (GLAD_API_PTR *PFN_vkCmdSetColorBlendEquationEXT)(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendEquationEXT * pColorBlendEquations);
typedef void (GLAD_API_PTR *PFN_vkCmdSetColorWriteMaskEXT)(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorComponentFlags * pColorWriteMasks);
typedef void (GLAD_API_PTR *PFN_vkCmdSetTessellationDomainOriginEXT)(VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin);
typedef void (GLAD_API_PTR *PFN_vkCmdSetRasterizationStreamEXT)(VkCommandBuffer commandBuffer, uint32_t rasterizationStream);
typedef void (GLAD_API_PTR *PFN_vkCmdSetConservativeRasterizationModeEXT)(VkCommandBuffer commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode);
typedef void (GLAD_API_PTR *PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT)(VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDepthClipEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetSampleLocationsEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetColorBlendAdvancedEXT)(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendAdvancedEXT * pColorBlendAdvanced);
typedef void (GLAD_API_PTR *PFN_vkCmdSetProvokingVertexModeEXT)(VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode);
typedef void (GLAD_API_PTR *PFN_vkCmdSetLineRasterizationModeEXT)(VkCommandBuffer commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode);
typedef void (GLAD_API_PTR *PFN_vkCmdSetLineStippleEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDepthClipNegativeOneToOneEXT)(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne);
typedef void (GLAD_API_PTR *PFN_vkCmdSetViewportWScalingEnableNV)(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetViewportSwizzleNV)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportSwizzleNV * pViewportSwizzles);
typedef void (GLAD_API_PTR *PFN_vkCmdSetCoverageToColorEnableNV)(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetCoverageToColorLocationNV)(VkCommandBuffer commandBuffer, uint32_t coverageToColorLocation);
typedef void (GLAD_API_PTR *PFN_vkCmdSetCoverageModulationModeNV)(VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode);
typedef void (GLAD_API_PTR *PFN_vkCmdSetCoverageModulationTableEnableNV)(VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetCoverageModulationTableNV)(VkCommandBuffer commandBuffer, uint32_t coverageModulationTableCount, const float * pCoverageModulationTable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetShadingRateImageEnableNV)(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetRepresentativeFragmentTestEnableNV)(VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable);
typedef void (GLAD_API_PTR *PFN_vkCmdSetCoverageReductionModeNV)(VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateTensorARM)(VkDevice device, const VkTensorCreateInfoARM * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkTensorARM * pTensor);
typedef void (GLAD_API_PTR *PFN_vkDestroyTensorARM)(VkDevice device, VkTensorARM tensor, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateTensorViewARM)(VkDevice device, const VkTensorViewCreateInfoARM * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkTensorViewARM * pView);
typedef void (GLAD_API_PTR *PFN_vkDestroyTensorViewARM)(VkDevice device, VkTensorViewARM tensorView, const VkAllocationCallbacks * pAllocator);
typedef void (GLAD_API_PTR *PFN_vkGetTensorMemoryRequirementsARM)(VkDevice device, const VkTensorMemoryRequirementsInfoARM * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
typedef VkResult (GLAD_API_PTR *PFN_vkBindTensorMemoryARM)(VkDevice device, uint32_t bindInfoCount, const VkBindTensorMemoryInfoARM * pBindInfos);
typedef void (GLAD_API_PTR *PFN_vkGetDeviceTensorMemoryRequirementsARM)(VkDevice device, const VkDeviceTensorMemoryRequirementsARM * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyTensorARM)(VkCommandBuffer commandBuffer, const VkCopyTensorInfoARM * pCopyTensorInfo);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceExternalTensorPropertiesARM)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalTensorInfoARM * pExternalTensorInfo, VkExternalTensorPropertiesARM * pExternalTensorProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkGetTensorOpaqueCaptureDescriptorDataARM)(VkDevice device, const VkTensorCaptureDescriptorDataInfoARM * pInfo, void * pData);
typedef VkResult (GLAD_API_PTR *PFN_vkGetTensorViewOpaqueCaptureDescriptorDataARM)(VkDevice device, const VkTensorViewCaptureDescriptorDataInfoARM * pInfo, void * pData);
typedef void (GLAD_API_PTR *PFN_vkGetShaderModuleIdentifierEXT)(VkDevice device, VkShaderModule shaderModule, VkShaderModuleIdentifierEXT * pIdentifier);
typedef void (GLAD_API_PTR *PFN_vkGetShaderModuleCreateInfoIdentifierEXT)(VkDevice device, const VkShaderModuleCreateInfo * pCreateInfo, VkShaderModuleIdentifierEXT * pIdentifier);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV)(VkPhysicalDevice physicalDevice, const VkOpticalFlowImageFormatInfoNV * pOpticalFlowImageFormatInfo, uint32_t * pFormatCount, VkOpticalFlowImageFormatPropertiesNV * pImageFormatProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateOpticalFlowSessionNV)(VkDevice device, const VkOpticalFlowSessionCreateInfoNV * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkOpticalFlowSessionNV * pSession);
typedef void (GLAD_API_PTR *PFN_vkDestroyOpticalFlowSessionNV)(VkDevice device, VkOpticalFlowSessionNV session, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkBindOpticalFlowSessionImageNV)(VkDevice device, VkOpticalFlowSessionNV session, VkOpticalFlowSessionBindingPointNV bindingPoint, VkImageView view, VkImageLayout layout);
typedef void (GLAD_API_PTR *PFN_vkCmdOpticalFlowExecuteNV)(VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session, const VkOpticalFlowExecuteInfoNV * pExecuteInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdBindIndexBuffer2KHR)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType);
typedef void (GLAD_API_PTR *PFN_vkGetRenderingAreaGranularityKHR)(VkDevice device, const VkRenderingAreaInfo * pRenderingAreaInfo, VkExtent2D * pGranularity);
typedef void (GLAD_API_PTR *PFN_vkGetDeviceImageSubresourceLayoutKHR)(VkDevice device, const VkDeviceImageSubresourceInfo * pInfo, VkSubresourceLayout2 * pLayout);
typedef void (GLAD_API_PTR *PFN_vkGetImageSubresourceLayout2KHR)(VkDevice device, VkImage image, const VkImageSubresource2 * pSubresource, VkSubresourceLayout2 * pLayout);
typedef void (GLAD_API_PTR *PFN_vkAntiLagUpdateAMD)(VkDevice device, const VkAntiLagDataAMD * pData);
typedef VkResult (GLAD_API_PTR *PFN_vkWaitForPresent2KHR)(VkDevice device, VkSwapchainKHR swapchain, const VkPresentWait2InfoKHR * pPresentWait2Info);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateShadersEXT)(VkDevice device, uint32_t createInfoCount, const VkShaderCreateInfoEXT * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkShaderEXT * pShaders);
typedef void (GLAD_API_PTR *PFN_vkDestroyShaderEXT)(VkDevice device, VkShaderEXT shader, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkGetShaderBinaryDataEXT)(VkDevice device, VkShaderEXT shader, size_t * pDataSize, void * pData);
typedef void (GLAD_API_PTR *PFN_vkCmdBindShadersEXT)(VkCommandBuffer commandBuffer, uint32_t stageCount, const VkShaderStageFlagBits * pStages, const VkShaderEXT * pShaders);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDepthClampRangeEXT)(VkCommandBuffer commandBuffer, VkDepthClampModeEXT depthClampMode, const VkDepthClampRangeEXT * pDepthClampRange);
typedef VkResult (GLAD_API_PTR *PFN_vkCreatePipelineBinariesKHR)(VkDevice device, const VkPipelineBinaryCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkPipelineBinaryHandlesInfoKHR * pBinaries);
typedef void (GLAD_API_PTR *PFN_vkDestroyPipelineBinaryKHR)(VkDevice device, VkPipelineBinaryKHR pipelineBinary, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPipelineKeyKHR)(VkDevice device, const VkPipelineCreateInfoKHR * pPipelineCreateInfo, VkPipelineBinaryKeyKHR * pPipelineKey);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPipelineBinaryDataKHR)(VkDevice device, const VkPipelineBinaryDataInfoKHR * pInfo, VkPipelineBinaryKeyKHR * pPipelineBinaryKey, size_t * pPipelineBinaryDataSize, void * pPipelineBinaryData);
typedef VkResult (GLAD_API_PTR *PFN_vkReleaseCapturedPipelineDataKHR)(VkDevice device, const VkReleaseCapturedPipelineDataInfoKHR * pInfo, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkGetFramebufferTilePropertiesQCOM)(VkDevice device, VkFramebuffer framebuffer, uint32_t * pPropertiesCount, VkTilePropertiesQCOM * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkGetDynamicRenderingTilePropertiesQCOM)(VkDevice device, const VkRenderingInfo * pRenderingInfo, VkTilePropertiesQCOM * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkReleaseSwapchainImagesKHR)(VkDevice device, const VkReleaseSwapchainImagesInfoKHR * pReleaseInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceCooperativeVectorPropertiesNV)(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkCooperativeVectorPropertiesNV * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkConvertCooperativeVectorMatrixNV)(VkDevice device, const VkConvertCooperativeVectorMatrixInfoNV * pInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdConvertCooperativeVectorMatrixNV)(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkConvertCooperativeVectorMatrixInfoNV * pInfos);
typedef VkResult (GLAD_API_PTR *PFN_vkSetLatencySleepModeNV)(VkDevice device, VkSwapchainKHR swapchain, const VkLatencySleepModeInfoNV * pSleepModeInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkLatencySleepNV)(VkDevice device, VkSwapchainKHR swapchain, const VkLatencySleepInfoNV * pSleepInfo);
typedef void (GLAD_API_PTR *PFN_vkSetLatencyMarkerNV)(VkDevice device, VkSwapchainKHR swapchain, const VkSetLatencyMarkerInfoNV * pLatencyMarkerInfo);
typedef void (GLAD_API_PTR *PFN_vkGetLatencyTimingsNV)(VkDevice device, VkSwapchainKHR swapchain, VkGetLatencyMarkerInfoNV * pLatencyMarkerInfo);
typedef void (GLAD_API_PTR *PFN_vkQueueNotifyOutOfBandNV)(VkQueue queue, const VkOutOfBandQueueTypeInfoNV * pQueueTypeInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR)(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkCooperativeMatrixPropertiesKHR * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateDataGraphPipelinesARM)(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkDataGraphPipelineCreateInfoARM * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkPipeline * pPipelines);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateDataGraphPipelineSessionARM)(VkDevice device, const VkDataGraphPipelineSessionCreateInfoARM * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDataGraphPipelineSessionARM * pSession);
typedef VkResult (GLAD_API_PTR *PFN_vkGetDataGraphPipelineSessionBindPointRequirementsARM)(VkDevice device, const VkDataGraphPipelineSessionBindPointRequirementsInfoARM * pInfo, uint32_t * pBindPointRequirementCount, VkDataGraphPipelineSessionBindPointRequirementARM * pBindPointRequirements);
typedef void (GLAD_API_PTR *PFN_vkGetDataGraphPipelineSessionMemoryRequirementsARM)(VkDevice device, const VkDataGraphPipelineSessionMemoryRequirementsInfoARM * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
typedef VkResult (GLAD_API_PTR *PFN_vkBindDataGraphPipelineSessionMemoryARM)(VkDevice device, uint32_t bindInfoCount, const VkBindDataGraphPipelineSessionMemoryInfoARM * pBindInfos);
typedef void (GLAD_API_PTR *PFN_vkDestroyDataGraphPipelineSessionARM)(VkDevice device, VkDataGraphPipelineSessionARM session, const VkAllocationCallbacks * pAllocator);
typedef void (GLAD_API_PTR *PFN_vkCmdDispatchDataGraphARM)(VkCommandBuffer commandBuffer, VkDataGraphPipelineSessionARM session, const VkDataGraphPipelineDispatchInfoARM * pInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkGetDataGraphPipelineAvailablePropertiesARM)(VkDevice device, const VkDataGraphPipelineInfoARM * pPipelineInfo, uint32_t * pPropertiesCount, VkDataGraphPipelinePropertyARM * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkGetDataGraphPipelinePropertiesARM)(VkDevice device, const VkDataGraphPipelineInfoARM * pPipelineInfo, uint32_t propertiesCount, VkDataGraphPipelinePropertyQueryResultARM * pProperties);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t * pQueueFamilyDataGraphPropertyCount, VkQueueFamilyDataGraphPropertiesARM * pQueueFamilyDataGraphProperties);
typedef void (GLAD_API_PTR *PFN_vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM * pQueueFamilyDataGraphProcessingEngineInfo, VkQueueFamilyDataGraphProcessingEnginePropertiesARM * pQueueFamilyDataGraphProcessingEngineProperties);
typedef void (GLAD_API_PTR *PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT)(VkCommandBuffer commandBuffer, VkImageAspectFlags aspectMask);
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef VkResult (GLAD_API_PTR *PFN_vkGetScreenBufferPropertiesQNX)(VkDevice device, const struct _screen_buffer * buffer, VkScreenBufferPropertiesQNX * pProperties);
#endif
typedef void (GLAD_API_PTR *PFN_vkCmdSetLineStippleKHR)(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern);
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR)(VkPhysicalDevice physicalDevice, uint32_t * pTimeDomainCount, VkTimeDomainKHR * pTimeDomains);
typedef VkResult (GLAD_API_PTR *PFN_vkGetCalibratedTimestampsKHR)(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoKHR * pTimestampInfos, uint64_t * pTimestamps, uint64_t * pMaxDeviation);
typedef void (GLAD_API_PTR *PFN_vkCmdBindDescriptorSets2KHR)(VkCommandBuffer commandBuffer, const VkBindDescriptorSetsInfo * pBindDescriptorSetsInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdPushConstants2KHR)(VkCommandBuffer commandBuffer, const VkPushConstantsInfo * pPushConstantsInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdPushDescriptorSet2KHR)(VkCommandBuffer commandBuffer, const VkPushDescriptorSetInfo * pPushDescriptorSetInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdPushDescriptorSetWithTemplate2KHR)(VkCommandBuffer commandBuffer, const VkPushDescriptorSetWithTemplateInfo * pPushDescriptorSetWithTemplateInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdSetDescriptorBufferOffsets2EXT)(VkCommandBuffer commandBuffer, const VkSetDescriptorBufferOffsetsInfoEXT * pSetDescriptorBufferOffsetsInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT)(VkCommandBuffer commandBuffer, const VkBindDescriptorBufferEmbeddedSamplersInfoEXT * pBindDescriptorBufferEmbeddedSamplersInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdBindTileMemoryQCOM)(VkCommandBuffer commandBuffer, const VkTileMemoryBindInfoQCOM * pTileMemoryBindInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyMemoryIndirectKHR)(VkCommandBuffer commandBuffer, const VkCopyMemoryIndirectInfoKHR * pCopyMemoryIndirectInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdCopyMemoryToImageIndirectKHR)(VkCommandBuffer commandBuffer, const VkCopyMemoryToImageIndirectInfoKHR * pCopyMemoryToImageIndirectInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateExternalComputeQueueNV)(VkDevice device, const VkExternalComputeQueueCreateInfoNV * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkExternalComputeQueueNV * pExternalQueue);
typedef void (GLAD_API_PTR *PFN_vkDestroyExternalComputeQueueNV)(VkDevice device, VkExternalComputeQueueNV externalQueue, const VkAllocationCallbacks * pAllocator);
typedef void (GLAD_API_PTR *PFN_vkGetExternalComputeQueueDataNV)(VkExternalComputeQueueNV externalQueue, VkExternalComputeQueueDataParamsNV * params, void * pData);
typedef void (GLAD_API_PTR *PFN_vkGetClusterAccelerationStructureBuildSizesNV)(VkDevice device, const VkClusterAccelerationStructureInputInfoNV * pInfo, VkAccelerationStructureBuildSizesInfoKHR * pSizeInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdBuildClusterAccelerationStructureIndirectNV)(VkCommandBuffer commandBuffer, const VkClusterAccelerationStructureCommandsInfoNV * pCommandInfos);
typedef void (GLAD_API_PTR *PFN_vkGetPartitionedAccelerationStructuresBuildSizesNV)(VkDevice device, const VkPartitionedAccelerationStructureInstancesInputNV * pInfo, VkAccelerationStructureBuildSizesInfoKHR * pSizeInfo);
typedef void (GLAD_API_PTR *PFN_vkCmdBuildPartitionedAccelerationStructuresNV)(VkCommandBuffer commandBuffer, const VkBuildPartitionedAccelerationStructureInfoNV * pBuildInfo);
typedef void (GLAD_API_PTR *PFN_vkGetGeneratedCommandsMemoryRequirementsEXT)(VkDevice device, const VkGeneratedCommandsMemoryRequirementsInfoEXT * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
typedef void (GLAD_API_PTR *PFN_vkCmdPreprocessGeneratedCommandsEXT)(VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoEXT * pGeneratedCommandsInfo, VkCommandBuffer stateCommandBuffer);
typedef void (GLAD_API_PTR *PFN_vkCmdExecuteGeneratedCommandsEXT)(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const VkGeneratedCommandsInfoEXT * pGeneratedCommandsInfo);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateIndirectCommandsLayoutEXT)(VkDevice device, const VkIndirectCommandsLayoutCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkIndirectCommandsLayoutEXT * pIndirectCommandsLayout);
typedef void (GLAD_API_PTR *PFN_vkDestroyIndirectCommandsLayoutEXT)(VkDevice device, VkIndirectCommandsLayoutEXT indirectCommandsLayout, const VkAllocationCallbacks * pAllocator);
typedef VkResult (GLAD_API_PTR *PFN_vkCreateIndirectExecutionSetEXT)(VkDevice device, const VkIndirectExecutionSetCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkIndirectExecutionSetEXT * pIndirectExecutionSet);
typedef void (GLAD_API_PTR *PFN_vkDestroyIndirectExecutionSetEXT)(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, const VkAllocationCallbacks * pAllocator);
typedef void (GLAD_API_PTR *PFN_vkUpdateIndirectExecutionSetPipelineEXT)(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, uint32_t executionSetWriteCount, const VkWriteIndirectExecutionSetPipelineEXT * pExecutionSetWrites);
typedef void (GLAD_API_PTR *PFN_vkUpdateIndirectExecutionSetShaderEXT)(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, uint32_t executionSetWriteCount, const VkWriteIndirectExecutionSetShaderEXT * pExecutionSetWrites);
#if defined(VK_USE_PLATFORM_OHOS)
typedef VkResult (GLAD_API_PTR *PFN_vkCreateSurfaceOHOS)(VkInstance instance, const VkSurfaceCreateInfoOHOS * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
typedef VkResult (GLAD_API_PTR *PFN_vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV)(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkCooperativeMatrixFlexibleDimensionsPropertiesNV * pProperties);
#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef VkResult (GLAD_API_PTR *PFN_vkGetMemoryMetalHandleEXT)(VkDevice device, const VkMemoryGetMetalHandleInfoEXT * pGetMetalHandleInfo, void ** pHandle);
#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef VkResult (GLAD_API_PTR *PFN_vkGetMemoryMetalHandlePropertiesEXT)(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const void * pHandle, VkMemoryMetalHandlePropertiesEXT * pMemoryMetalHandleProperties);
#endif
typedef void (GLAD_API_PTR *PFN_vkCmdEndRendering2EXT)(VkCommandBuffer commandBuffer, const VkRenderingEndInfoEXT * pRenderingEndInfo);

typedef struct GladVulkanContext {
    void* userptr;

    union {
        unsigned char featArray[5];
        struct {
        /*    0 */ unsigned char VERSION_1_0;
        /*    1 */ unsigned char VERSION_1_1;
        /*    2 */ unsigned char VERSION_1_2;
        /*    3 */ unsigned char VERSION_1_3;
        /*    4 */ unsigned char VERSION_1_4;
        };
    };

    union {
        unsigned char extArray[425];
        struct {
        /*    0 */ unsigned char AMDX_dense_geometry_format;
        /*    1 */ unsigned char AMDX_shader_enqueue;
        /*    2 */ unsigned char AMD_anti_lag;
        /*    3 */ unsigned char AMD_buffer_marker;
        /*    4 */ unsigned char AMD_device_coherent_memory;
        /*    5 */ unsigned char AMD_display_native_hdr;
        /*    6 */ unsigned char AMD_draw_indirect_count;
        /*    7 */ unsigned char AMD_gcn_shader;
        /*    8 */ unsigned char AMD_gpu_shader_half_float;
        /*    9 */ unsigned char AMD_gpu_shader_int16;
        /*   10 */ unsigned char AMD_memory_overallocation_behavior;
        /*   11 */ unsigned char AMD_mixed_attachment_samples;
        /*   12 */ unsigned char AMD_negative_viewport_height;
        /*   13 */ unsigned char AMD_pipeline_compiler_control;
        /*   14 */ unsigned char AMD_rasterization_order;
        /*   15 */ unsigned char AMD_shader_ballot;
        /*   16 */ unsigned char AMD_shader_core_properties;
        /*   17 */ unsigned char AMD_shader_core_properties2;
        /*   18 */ unsigned char AMD_shader_early_and_late_fragment_tests;
        /*   19 */ unsigned char AMD_shader_explicit_vertex_parameter;
        /*   20 */ unsigned char AMD_shader_fragment_mask;
        /*   21 */ unsigned char AMD_shader_image_load_store_lod;
        /*   22 */ unsigned char AMD_shader_info;
        /*   23 */ unsigned char AMD_shader_trinary_minmax;
        /*   24 */ unsigned char AMD_texture_gather_bias_lod;
        /*   25 */ unsigned char ANDROID_external_format_resolve;
        /*   26 */ unsigned char ANDROID_external_memory_android_hardware_buffer;
        /*   27 */ unsigned char ARM_data_graph;
        /*   28 */ unsigned char ARM_format_pack;
        /*   29 */ unsigned char ARM_pipeline_opacity_micromap;
        /*   30 */ unsigned char ARM_rasterization_order_attachment_access;
        /*   31 */ unsigned char ARM_render_pass_striped;
        /*   32 */ unsigned char ARM_scheduling_controls;
        /*   33 */ unsigned char ARM_shader_core_builtins;
        /*   34 */ unsigned char ARM_shader_core_properties;
        /*   35 */ unsigned char ARM_tensors;
        /*   36 */ unsigned char EXT_4444_formats;
        /*   37 */ unsigned char EXT_acquire_drm_display;
        /*   38 */ unsigned char EXT_acquire_xlib_display;
        /*   39 */ unsigned char EXT_astc_decode_mode;
        /*   40 */ unsigned char EXT_attachment_feedback_loop_dynamic_state;
        /*   41 */ unsigned char EXT_attachment_feedback_loop_layout;
        /*   42 */ unsigned char EXT_blend_operation_advanced;
        /*   43 */ unsigned char EXT_border_color_swizzle;
        /*   44 */ unsigned char EXT_buffer_device_address;
        /*   45 */ unsigned char EXT_calibrated_timestamps;
        /*   46 */ unsigned char EXT_color_write_enable;
        /*   47 */ unsigned char EXT_conditional_rendering;
        /*   48 */ unsigned char EXT_conservative_rasterization;
        /*   49 */ unsigned char EXT_custom_border_color;
        /*   50 */ unsigned char EXT_debug_marker;
        /*   51 */ unsigned char EXT_debug_report;
        /*   52 */ unsigned char EXT_debug_utils;
        /*   53 */ unsigned char EXT_depth_bias_control;
        /*   54 */ unsigned char EXT_depth_clamp_control;
        /*   55 */ unsigned char EXT_depth_clamp_zero_one;
        /*   56 */ unsigned char EXT_depth_clip_control;
        /*   57 */ unsigned char EXT_depth_clip_enable;
        /*   58 */ unsigned char EXT_depth_range_unrestricted;
        /*   59 */ unsigned char EXT_descriptor_buffer;
        /*   60 */ unsigned char EXT_descriptor_indexing;
        /*   61 */ unsigned char EXT_device_address_binding_report;
        /*   62 */ unsigned char EXT_device_fault;
        /*   63 */ unsigned char EXT_device_generated_commands;
        /*   64 */ unsigned char EXT_device_memory_report;
        /*   65 */ unsigned char EXT_direct_mode_display;
        /*   66 */ unsigned char EXT_directfb_surface;
        /*   67 */ unsigned char EXT_discard_rectangles;
        /*   68 */ unsigned char EXT_display_control;
        /*   69 */ unsigned char EXT_display_surface_counter;
        /*   70 */ unsigned char EXT_dynamic_rendering_unused_attachments;
        /*   71 */ unsigned char EXT_extended_dynamic_state;
        /*   72 */ unsigned char EXT_extended_dynamic_state2;
        /*   73 */ unsigned char EXT_extended_dynamic_state3;
        /*   74 */ unsigned char EXT_external_memory_acquire_unmodified;
        /*   75 */ unsigned char EXT_external_memory_dma_buf;
        /*   76 */ unsigned char EXT_external_memory_host;
        /*   77 */ unsigned char EXT_external_memory_metal;
        /*   78 */ unsigned char EXT_filter_cubic;
        /*   79 */ unsigned char EXT_fragment_density_map;
        /*   80 */ unsigned char EXT_fragment_density_map2;
        /*   81 */ unsigned char EXT_fragment_density_map_offset;
        /*   82 */ unsigned char EXT_fragment_shader_interlock;
        /*   83 */ unsigned char EXT_frame_boundary;
        /*   84 */ unsigned char EXT_full_screen_exclusive;
        /*   85 */ unsigned char EXT_global_priority;
        /*   86 */ unsigned char EXT_global_priority_query;
        /*   87 */ unsigned char EXT_graphics_pipeline_library;
        /*   88 */ unsigned char EXT_hdr_metadata;
        /*   89 */ unsigned char EXT_headless_surface;
        /*   90 */ unsigned char EXT_host_image_copy;
        /*   91 */ unsigned char EXT_host_query_reset;
        /*   92 */ unsigned char EXT_image_2d_view_of_3d;
        /*   93 */ unsigned char EXT_image_compression_control;
        /*   94 */ unsigned char EXT_image_compression_control_swapchain;
        /*   95 */ unsigned char EXT_image_drm_format_modifier;
        /*   96 */ unsigned char EXT_image_robustness;
        /*   97 */ unsigned char EXT_image_sliced_view_of_3d;
        /*   98 */ unsigned char EXT_image_view_min_lod;
        /*   99 */ unsigned char EXT_index_type_uint8;
        /*  100 */ unsigned char EXT_inline_uniform_block;
        /*  101 */ unsigned char EXT_layer_settings;
        /*  102 */ unsigned char EXT_legacy_dithering;
        /*  103 */ unsigned char EXT_legacy_vertex_attributes;
        /*  104 */ unsigned char EXT_line_rasterization;
        /*  105 */ unsigned char EXT_load_store_op_none;
        /*  106 */ unsigned char EXT_map_memory_placed;
        /*  107 */ unsigned char EXT_memory_budget;
        /*  108 */ unsigned char EXT_memory_priority;
        /*  109 */ unsigned char EXT_mesh_shader;
        /*  110 */ unsigned char EXT_metal_objects;
        /*  111 */ unsigned char EXT_metal_surface;
        /*  112 */ unsigned char EXT_multi_draw;
        /*  113 */ unsigned char EXT_multisampled_render_to_single_sampled;
        /*  114 */ unsigned char EXT_mutable_descriptor_type;
        /*  115 */ unsigned char EXT_nested_command_buffer;
        /*  116 */ unsigned char EXT_non_seamless_cube_map;
        /*  117 */ unsigned char EXT_opacity_micromap;
        /*  118 */ unsigned char EXT_pageable_device_local_memory;
        /*  119 */ unsigned char EXT_pci_bus_info;
        /*  120 */ unsigned char EXT_physical_device_drm;
        /*  121 */ unsigned char EXT_pipeline_creation_cache_control;
        /*  122 */ unsigned char EXT_pipeline_creation_feedback;
        /*  123 */ unsigned char EXT_pipeline_library_group_handles;
        /*  124 */ unsigned char EXT_pipeline_properties;
        /*  125 */ unsigned char EXT_pipeline_protected_access;
        /*  126 */ unsigned char EXT_pipeline_robustness;
        /*  127 */ unsigned char EXT_post_depth_coverage;
        /*  128 */ unsigned char EXT_present_mode_fifo_latest_ready;
        /*  129 */ unsigned char EXT_primitive_topology_list_restart;
        /*  130 */ unsigned char EXT_primitives_generated_query;
        /*  131 */ unsigned char EXT_private_data;
        /*  132 */ unsigned char EXT_provoking_vertex;
        /*  133 */ unsigned char EXT_queue_family_foreign;
        /*  134 */ unsigned char EXT_rasterization_order_attachment_access;
        /*  135 */ unsigned char EXT_rgba10x6_formats;
        /*  136 */ unsigned char EXT_robustness2;
        /*  137 */ unsigned char EXT_sample_locations;
        /*  138 */ unsigned char EXT_sampler_filter_minmax;
        /*  139 */ unsigned char EXT_scalar_block_layout;
        /*  140 */ unsigned char EXT_separate_stencil_usage;
        /*  141 */ unsigned char EXT_shader_atomic_float;
        /*  142 */ unsigned char EXT_shader_atomic_float2;
        /*  143 */ unsigned char EXT_shader_demote_to_helper_invocation;
        /*  144 */ unsigned char EXT_shader_float8;
        /*  145 */ unsigned char EXT_shader_image_atomic_int64;
        /*  146 */ unsigned char EXT_shader_module_identifier;
        /*  147 */ unsigned char EXT_shader_object;
        /*  148 */ unsigned char EXT_shader_replicated_composites;
        /*  149 */ unsigned char EXT_shader_stencil_export;
        /*  150 */ unsigned char EXT_shader_subgroup_ballot;
        /*  151 */ unsigned char EXT_shader_subgroup_vote;
        /*  152 */ unsigned char EXT_shader_tile_image;
        /*  153 */ unsigned char EXT_shader_viewport_index_layer;
        /*  154 */ unsigned char EXT_subgroup_size_control;
        /*  155 */ unsigned char EXT_subpass_merge_feedback;
        /*  156 */ unsigned char EXT_surface_maintenance1;
        /*  157 */ unsigned char EXT_swapchain_colorspace;
        /*  158 */ unsigned char EXT_swapchain_maintenance1;
        /*  159 */ unsigned char EXT_texel_buffer_alignment;
        /*  160 */ unsigned char EXT_texture_compression_astc_hdr;
        /*  161 */ unsigned char EXT_tooling_info;
        /*  162 */ unsigned char EXT_transform_feedback;
        /*  163 */ unsigned char EXT_validation_cache;
        /*  164 */ unsigned char EXT_validation_features;
        /*  165 */ unsigned char EXT_validation_flags;
        /*  166 */ unsigned char EXT_vertex_attribute_divisor;
        /*  167 */ unsigned char EXT_vertex_attribute_robustness;
        /*  168 */ unsigned char EXT_vertex_input_dynamic_state;
        /*  169 */ unsigned char EXT_ycbcr_2plane_444_formats;
        /*  170 */ unsigned char EXT_ycbcr_image_arrays;
        /*  171 */ unsigned char EXT_zero_initialize_device_memory;
        /*  172 */ unsigned char FUCHSIA_buffer_collection;
        /*  173 */ unsigned char FUCHSIA_external_memory;
        /*  174 */ unsigned char FUCHSIA_external_semaphore;
        /*  175 */ unsigned char FUCHSIA_imagepipe_surface;
        /*  176 */ unsigned char GGP_frame_token;
        /*  177 */ unsigned char GGP_stream_descriptor_surface;
        /*  178 */ unsigned char GOOGLE_decorate_string;
        /*  179 */ unsigned char GOOGLE_display_timing;
        /*  180 */ unsigned char GOOGLE_hlsl_functionality1;
        /*  181 */ unsigned char GOOGLE_surfaceless_query;
        /*  182 */ unsigned char GOOGLE_user_type;
        /*  183 */ unsigned char HUAWEI_cluster_culling_shader;
        /*  184 */ unsigned char HUAWEI_hdr_vivid;
        /*  185 */ unsigned char HUAWEI_invocation_mask;
        /*  186 */ unsigned char HUAWEI_subpass_shading;
        /*  187 */ unsigned char IMG_filter_cubic;
        /*  188 */ unsigned char IMG_format_pvrtc;
        /*  189 */ unsigned char IMG_relaxed_line_rasterization;
        /*  190 */ unsigned char INTEL_performance_query;
        /*  191 */ unsigned char INTEL_shader_integer_functions2;
        /*  192 */ unsigned char KHR_16bit_storage;
        /*  193 */ unsigned char KHR_8bit_storage;
        /*  194 */ unsigned char KHR_acceleration_structure;
        /*  195 */ unsigned char KHR_android_surface;
        /*  196 */ unsigned char KHR_bind_memory2;
        /*  197 */ unsigned char KHR_buffer_device_address;
        /*  198 */ unsigned char KHR_calibrated_timestamps;
        /*  199 */ unsigned char KHR_compute_shader_derivatives;
        /*  200 */ unsigned char KHR_cooperative_matrix;
        /*  201 */ unsigned char KHR_copy_commands2;
        /*  202 */ unsigned char KHR_copy_memory_indirect;
        /*  203 */ unsigned char KHR_create_renderpass2;
        /*  204 */ unsigned char KHR_dedicated_allocation;
        /*  205 */ unsigned char KHR_deferred_host_operations;
        /*  206 */ unsigned char KHR_depth_clamp_zero_one;
        /*  207 */ unsigned char KHR_depth_stencil_resolve;
        /*  208 */ unsigned char KHR_descriptor_update_template;
        /*  209 */ unsigned char KHR_device_group;
        /*  210 */ unsigned char KHR_device_group_creation;
        /*  211 */ unsigned char KHR_display;
        /*  212 */ unsigned char KHR_display_swapchain;
        /*  213 */ unsigned char KHR_draw_indirect_count;
        /*  214 */ unsigned char KHR_driver_properties;
        /*  215 */ unsigned char KHR_dynamic_rendering;
        /*  216 */ unsigned char KHR_dynamic_rendering_local_read;
        /*  217 */ unsigned char KHR_external_fence;
        /*  218 */ unsigned char KHR_external_fence_capabilities;
        /*  219 */ unsigned char KHR_external_fence_fd;
        /*  220 */ unsigned char KHR_external_fence_win32;
        /*  221 */ unsigned char KHR_external_memory;
        /*  222 */ unsigned char KHR_external_memory_capabilities;
        /*  223 */ unsigned char KHR_external_memory_fd;
        /*  224 */ unsigned char KHR_external_memory_win32;
        /*  225 */ unsigned char KHR_external_semaphore;
        /*  226 */ unsigned char KHR_external_semaphore_capabilities;
        /*  227 */ unsigned char KHR_external_semaphore_fd;
        /*  228 */ unsigned char KHR_external_semaphore_win32;
        /*  229 */ unsigned char KHR_format_feature_flags2;
        /*  230 */ unsigned char KHR_fragment_shader_barycentric;
        /*  231 */ unsigned char KHR_fragment_shading_rate;
        /*  232 */ unsigned char KHR_get_display_properties2;
        /*  233 */ unsigned char KHR_get_memory_requirements2;
        /*  234 */ unsigned char KHR_get_physical_device_properties2;
        /*  235 */ unsigned char KHR_get_surface_capabilities2;
        /*  236 */ unsigned char KHR_global_priority;
        /*  237 */ unsigned char KHR_image_format_list;
        /*  238 */ unsigned char KHR_imageless_framebuffer;
        /*  239 */ unsigned char KHR_incremental_present;
        /*  240 */ unsigned char KHR_index_type_uint8;
        /*  241 */ unsigned char KHR_line_rasterization;
        /*  242 */ unsigned char KHR_load_store_op_none;
        /*  243 */ unsigned char KHR_maintenance1;
        /*  244 */ unsigned char KHR_maintenance2;
        /*  245 */ unsigned char KHR_maintenance3;
        /*  246 */ unsigned char KHR_maintenance4;
        /*  247 */ unsigned char KHR_maintenance5;
        /*  248 */ unsigned char KHR_maintenance6;
        /*  249 */ unsigned char KHR_maintenance7;
        /*  250 */ unsigned char KHR_maintenance8;
        /*  251 */ unsigned char KHR_maintenance9;
        /*  252 */ unsigned char KHR_map_memory2;
        /*  253 */ unsigned char KHR_multiview;
        /*  254 */ unsigned char KHR_performance_query;
        /*  255 */ unsigned char KHR_pipeline_binary;
        /*  256 */ unsigned char KHR_pipeline_executable_properties;
        /*  257 */ unsigned char KHR_pipeline_library;
        /*  258 */ unsigned char KHR_portability_enumeration;
        /*  259 */ unsigned char KHR_portability_subset;
        /*  260 */ unsigned char KHR_present_id;
        /*  261 */ unsigned char KHR_present_id2;
        /*  262 */ unsigned char KHR_present_mode_fifo_latest_ready;
        /*  263 */ unsigned char KHR_present_wait;
        /*  264 */ unsigned char KHR_present_wait2;
        /*  265 */ unsigned char KHR_push_descriptor;
        /*  266 */ unsigned char KHR_ray_query;
        /*  267 */ unsigned char KHR_ray_tracing_maintenance1;
        /*  268 */ unsigned char KHR_ray_tracing_pipeline;
        /*  269 */ unsigned char KHR_ray_tracing_position_fetch;
        /*  270 */ unsigned char KHR_relaxed_block_layout;
        /*  271 */ unsigned char KHR_robustness2;
        /*  272 */ unsigned char KHR_sampler_mirror_clamp_to_edge;
        /*  273 */ unsigned char KHR_sampler_ycbcr_conversion;
        /*  274 */ unsigned char KHR_separate_depth_stencil_layouts;
        /*  275 */ unsigned char KHR_shader_atomic_int64;
        /*  276 */ unsigned char KHR_shader_bfloat16;
        /*  277 */ unsigned char KHR_shader_clock;
        /*  278 */ unsigned char KHR_shader_draw_parameters;
        /*  279 */ unsigned char KHR_shader_expect_assume;
        /*  280 */ unsigned char KHR_shader_float16_int8;
        /*  281 */ unsigned char KHR_shader_float_controls;
        /*  282 */ unsigned char KHR_shader_float_controls2;
        /*  283 */ unsigned char KHR_shader_integer_dot_product;
        /*  284 */ unsigned char KHR_shader_maximal_reconvergence;
        /*  285 */ unsigned char KHR_shader_non_semantic_info;
        /*  286 */ unsigned char KHR_shader_quad_control;
        /*  287 */ unsigned char KHR_shader_relaxed_extended_instruction;
        /*  288 */ unsigned char KHR_shader_subgroup_extended_types;
        /*  289 */ unsigned char KHR_shader_subgroup_rotate;
        /*  290 */ unsigned char KHR_shader_subgroup_uniform_control_flow;
        /*  291 */ unsigned char KHR_shader_terminate_invocation;
        /*  292 */ unsigned char KHR_shader_untyped_pointers;
        /*  293 */ unsigned char KHR_shared_presentable_image;
        /*  294 */ unsigned char KHR_spirv_1_4;
        /*  295 */ unsigned char KHR_storage_buffer_storage_class;
        /*  296 */ unsigned char KHR_surface;
        /*  297 */ unsigned char KHR_surface_maintenance1;
        /*  298 */ unsigned char KHR_surface_protected_capabilities;
        /*  299 */ unsigned char KHR_swapchain;
        /*  300 */ unsigned char KHR_swapchain_maintenance1;
        /*  301 */ unsigned char KHR_swapchain_mutable_format;
        /*  302 */ unsigned char KHR_synchronization2;
        /*  303 */ unsigned char KHR_timeline_semaphore;
        /*  304 */ unsigned char KHR_unified_image_layouts;
        /*  305 */ unsigned char KHR_uniform_buffer_standard_layout;
        /*  306 */ unsigned char KHR_variable_pointers;
        /*  307 */ unsigned char KHR_vertex_attribute_divisor;
        /*  308 */ unsigned char KHR_video_decode_av1;
        /*  309 */ unsigned char KHR_video_decode_h264;
        /*  310 */ unsigned char KHR_video_decode_h265;
        /*  311 */ unsigned char KHR_video_decode_queue;
        /*  312 */ unsigned char KHR_video_decode_vp9;
        /*  313 */ unsigned char KHR_video_encode_av1;
        /*  314 */ unsigned char KHR_video_encode_h264;
        /*  315 */ unsigned char KHR_video_encode_h265;
        /*  316 */ unsigned char KHR_video_encode_intra_refresh;
        /*  317 */ unsigned char KHR_video_encode_quantization_map;
        /*  318 */ unsigned char KHR_video_encode_queue;
        /*  319 */ unsigned char KHR_video_maintenance1;
        /*  320 */ unsigned char KHR_video_maintenance2;
        /*  321 */ unsigned char KHR_video_queue;
        /*  322 */ unsigned char KHR_vulkan_memory_model;
        /*  323 */ unsigned char KHR_wayland_surface;
        /*  324 */ unsigned char KHR_win32_keyed_mutex;
        /*  325 */ unsigned char KHR_win32_surface;
        /*  326 */ unsigned char KHR_workgroup_memory_explicit_layout;
        /*  327 */ unsigned char KHR_xcb_surface;
        /*  328 */ unsigned char KHR_xlib_surface;
        /*  329 */ unsigned char KHR_zero_initialize_workgroup_memory;
        /*  330 */ unsigned char LUNARG_direct_driver_loading;
        /*  331 */ unsigned char MESA_image_alignment_control;
        /*  332 */ unsigned char MSFT_layered_driver;
        /*  333 */ unsigned char MVK_ios_surface;
        /*  334 */ unsigned char MVK_macos_surface;
        /*  335 */ unsigned char NN_vi_surface;
        /*  336 */ unsigned char NVX_binary_import;
        /*  337 */ unsigned char NVX_image_view_handle;
        /*  338 */ unsigned char NVX_multiview_per_view_attributes;
        /*  339 */ unsigned char NV_acquire_winrt_display;
        /*  340 */ unsigned char NV_clip_space_w_scaling;
        /*  341 */ unsigned char NV_cluster_acceleration_structure;
        /*  342 */ unsigned char NV_command_buffer_inheritance;
        /*  343 */ unsigned char NV_compute_shader_derivatives;
        /*  344 */ unsigned char NV_cooperative_matrix;
        /*  345 */ unsigned char NV_cooperative_matrix2;
        /*  346 */ unsigned char NV_cooperative_vector;
        /*  347 */ unsigned char NV_copy_memory_indirect;
        /*  348 */ unsigned char NV_corner_sampled_image;
        /*  349 */ unsigned char NV_coverage_reduction_mode;
        /*  350 */ unsigned char NV_cuda_kernel_launch;
        /*  351 */ unsigned char NV_dedicated_allocation;
        /*  352 */ unsigned char NV_dedicated_allocation_image_aliasing;
        /*  353 */ unsigned char NV_descriptor_pool_overallocation;
        /*  354 */ unsigned char NV_device_diagnostic_checkpoints;
        /*  355 */ unsigned char NV_device_diagnostics_config;
        /*  356 */ unsigned char NV_device_generated_commands;
        /*  357 */ unsigned char NV_device_generated_commands_compute;
        /*  358 */ unsigned char NV_displacement_micromap;
        /*  359 */ unsigned char NV_display_stereo;
        /*  360 */ unsigned char NV_extended_sparse_address_space;
        /*  361 */ unsigned char NV_external_compute_queue;
        /*  362 */ unsigned char NV_external_memory;
        /*  363 */ unsigned char NV_external_memory_capabilities;
        /*  364 */ unsigned char NV_external_memory_rdma;
        /*  365 */ unsigned char NV_external_memory_win32;
        /*  366 */ unsigned char NV_fill_rectangle;
        /*  367 */ unsigned char NV_fragment_coverage_to_color;
        /*  368 */ unsigned char NV_fragment_shader_barycentric;
        /*  369 */ unsigned char NV_fragment_shading_rate_enums;
        /*  370 */ unsigned char NV_framebuffer_mixed_samples;
        /*  371 */ unsigned char NV_geometry_shader_passthrough;
        /*  372 */ unsigned char NV_glsl_shader;
        /*  373 */ unsigned char NV_inherited_viewport_scissor;
        /*  374 */ unsigned char NV_linear_color_attachment;
        /*  375 */ unsigned char NV_low_latency;
        /*  376 */ unsigned char NV_low_latency2;
        /*  377 */ unsigned char NV_memory_decompression;
        /*  378 */ unsigned char NV_mesh_shader;
        /*  379 */ unsigned char NV_optical_flow;
        /*  380 */ unsigned char NV_partitioned_acceleration_structure;
        /*  381 */ unsigned char NV_per_stage_descriptor_set;
        /*  382 */ unsigned char NV_present_barrier;
        /*  383 */ unsigned char NV_present_metering;
        /*  384 */ unsigned char NV_raw_access_chains;
        /*  385 */ unsigned char NV_ray_tracing;
        /*  386 */ unsigned char NV_ray_tracing_invocation_reorder;
        /*  387 */ unsigned char NV_ray_tracing_linear_swept_spheres;
        /*  388 */ unsigned char NV_ray_tracing_motion_blur;
        /*  389 */ unsigned char NV_ray_tracing_validation;
        /*  390 */ unsigned char NV_representative_fragment_test;
        /*  391 */ unsigned char NV_sample_mask_override_coverage;
        /*  392 */ unsigned char NV_scissor_exclusive;
        /*  393 */ unsigned char NV_shader_atomic_float16_vector;
        /*  394 */ unsigned char NV_shader_image_footprint;
        /*  395 */ unsigned char NV_shader_sm_builtins;
        /*  396 */ unsigned char NV_shader_subgroup_partitioned;
        /*  397 */ unsigned char NV_shading_rate_image;
        /*  398 */ unsigned char NV_viewport_array2;
        /*  399 */ unsigned char NV_viewport_swizzle;
        /*  400 */ unsigned char NV_win32_keyed_mutex;
        /*  401 */ unsigned char OHOS_surface;
        /*  402 */ unsigned char QCOM_filter_cubic_clamp;
        /*  403 */ unsigned char QCOM_filter_cubic_weights;
        /*  404 */ unsigned char QCOM_fragment_density_map_offset;
        /*  405 */ unsigned char QCOM_image_processing;
        /*  406 */ unsigned char QCOM_image_processing2;
        /*  407 */ unsigned char QCOM_multiview_per_view_render_areas;
        /*  408 */ unsigned char QCOM_multiview_per_view_viewports;
        /*  409 */ unsigned char QCOM_render_pass_shader_resolve;
        /*  410 */ unsigned char QCOM_render_pass_store_ops;
        /*  411 */ unsigned char QCOM_render_pass_transform;
        /*  412 */ unsigned char QCOM_rotated_copy_commands;
        /*  413 */ unsigned char QCOM_tile_memory_heap;
        /*  414 */ unsigned char QCOM_tile_properties;
        /*  415 */ unsigned char QCOM_tile_shading;
        /*  416 */ unsigned char QCOM_ycbcr_degamma;
        /*  417 */ unsigned char QNX_external_memory_screen_buffer;
        /*  418 */ unsigned char QNX_screen_surface;
        /*  419 */ unsigned char SEC_amigo_profiling;
        /*  420 */ unsigned char SEC_pipeline_cache_incremental_mode;
        /*  421 */ unsigned char VALVE_descriptor_set_host_mapping;
        /*  422 */ unsigned char VALVE_fragment_density_map_layered;
        /*  423 */ unsigned char VALVE_mutable_descriptor_type;
        /*  424 */ unsigned char VALVE_video_encode_rgb_conversion;
        };
    };

    union {
        void *pfnArray[761];
        struct {
        /*    0 */ PFN_vkCreateInstance CreateInstance;
        /*    1 */ PFN_vkDestroyInstance DestroyInstance;
        /*    2 */ PFN_vkEnumeratePhysicalDevices EnumeratePhysicalDevices;
        /*    3 */ PFN_vkGetPhysicalDeviceFeatures GetPhysicalDeviceFeatures;
        /*    4 */ PFN_vkGetPhysicalDeviceFormatProperties GetPhysicalDeviceFormatProperties;
        /*    5 */ PFN_vkGetPhysicalDeviceImageFormatProperties GetPhysicalDeviceImageFormatProperties;
        /*    6 */ PFN_vkGetPhysicalDeviceProperties GetPhysicalDeviceProperties;
        /*    7 */ PFN_vkGetPhysicalDeviceQueueFamilyProperties GetPhysicalDeviceQueueFamilyProperties;
        /*    8 */ PFN_vkGetPhysicalDeviceMemoryProperties GetPhysicalDeviceMemoryProperties;
        /*    9 */ PFN_vkGetInstanceProcAddr GetInstanceProcAddr;
        /*   10 */ PFN_vkGetDeviceProcAddr GetDeviceProcAddr;
        /*   11 */ PFN_vkCreateDevice CreateDevice;
        /*   12 */ PFN_vkDestroyDevice DestroyDevice;
        /*   13 */ PFN_vkEnumerateInstanceExtensionProperties EnumerateInstanceExtensionProperties;
        /*   14 */ PFN_vkEnumerateDeviceExtensionProperties EnumerateDeviceExtensionProperties;
        /*   15 */ PFN_vkEnumerateInstanceLayerProperties EnumerateInstanceLayerProperties;
        /*   16 */ PFN_vkEnumerateDeviceLayerProperties EnumerateDeviceLayerProperties;
        /*   17 */ PFN_vkGetDeviceQueue GetDeviceQueue;
        /*   18 */ PFN_vkQueueSubmit QueueSubmit;
        /*   19 */ PFN_vkQueueWaitIdle QueueWaitIdle;
        /*   20 */ PFN_vkDeviceWaitIdle DeviceWaitIdle;
        /*   21 */ PFN_vkAllocateMemory AllocateMemory;
        /*   22 */ PFN_vkFreeMemory FreeMemory;
        /*   23 */ PFN_vkMapMemory MapMemory;
        /*   24 */ PFN_vkUnmapMemory UnmapMemory;
        /*   25 */ PFN_vkFlushMappedMemoryRanges FlushMappedMemoryRanges;
        /*   26 */ PFN_vkInvalidateMappedMemoryRanges InvalidateMappedMemoryRanges;
        /*   27 */ PFN_vkGetDeviceMemoryCommitment GetDeviceMemoryCommitment;
        /*   28 */ PFN_vkBindBufferMemory BindBufferMemory;
        /*   29 */ PFN_vkBindImageMemory BindImageMemory;
        /*   30 */ PFN_vkGetBufferMemoryRequirements GetBufferMemoryRequirements;
        /*   31 */ PFN_vkGetImageMemoryRequirements GetImageMemoryRequirements;
        /*   32 */ PFN_vkGetImageSparseMemoryRequirements GetImageSparseMemoryRequirements;
        /*   33 */ PFN_vkGetPhysicalDeviceSparseImageFormatProperties GetPhysicalDeviceSparseImageFormatProperties;
        /*   34 */ PFN_vkQueueBindSparse QueueBindSparse;
        /*   35 */ PFN_vkCreateFence CreateFence;
        /*   36 */ PFN_vkDestroyFence DestroyFence;
        /*   37 */ PFN_vkResetFences ResetFences;
        /*   38 */ PFN_vkGetFenceStatus GetFenceStatus;
        /*   39 */ PFN_vkWaitForFences WaitForFences;
        /*   40 */ PFN_vkCreateSemaphore CreateSemaphore;
        /*   41 */ PFN_vkDestroySemaphore DestroySemaphore;
        /*   42 */ PFN_vkCreateEvent CreateEvent;
        /*   43 */ PFN_vkDestroyEvent DestroyEvent;
        /*   44 */ PFN_vkGetEventStatus GetEventStatus;
        /*   45 */ PFN_vkSetEvent SetEvent;
        /*   46 */ PFN_vkResetEvent ResetEvent;
        /*   47 */ PFN_vkCreateQueryPool CreateQueryPool;
        /*   48 */ PFN_vkDestroyQueryPool DestroyQueryPool;
        /*   49 */ PFN_vkGetQueryPoolResults GetQueryPoolResults;
        /*   50 */ PFN_vkCreateBuffer CreateBuffer;
        /*   51 */ PFN_vkDestroyBuffer DestroyBuffer;
        /*   52 */ PFN_vkCreateBufferView CreateBufferView;
        /*   53 */ PFN_vkDestroyBufferView DestroyBufferView;
        /*   54 */ PFN_vkCreateImage CreateImage;
        /*   55 */ PFN_vkDestroyImage DestroyImage;
        /*   56 */ PFN_vkGetImageSubresourceLayout GetImageSubresourceLayout;
        /*   57 */ PFN_vkCreateImageView CreateImageView;
        /*   58 */ PFN_vkDestroyImageView DestroyImageView;
        /*   59 */ PFN_vkCreateShaderModule CreateShaderModule;
        /*   60 */ PFN_vkDestroyShaderModule DestroyShaderModule;
        /*   61 */ PFN_vkCreatePipelineCache CreatePipelineCache;
        /*   62 */ PFN_vkDestroyPipelineCache DestroyPipelineCache;
        /*   63 */ PFN_vkGetPipelineCacheData GetPipelineCacheData;
        /*   64 */ PFN_vkMergePipelineCaches MergePipelineCaches;
        /*   65 */ PFN_vkCreateGraphicsPipelines CreateGraphicsPipelines;
        /*   66 */ PFN_vkCreateComputePipelines CreateComputePipelines;
        /*   67 */ PFN_vkDestroyPipeline DestroyPipeline;
        /*   68 */ PFN_vkCreatePipelineLayout CreatePipelineLayout;
        /*   69 */ PFN_vkDestroyPipelineLayout DestroyPipelineLayout;
        /*   70 */ PFN_vkCreateSampler CreateSampler;
        /*   71 */ PFN_vkDestroySampler DestroySampler;
        /*   72 */ PFN_vkCreateDescriptorSetLayout CreateDescriptorSetLayout;
        /*   73 */ PFN_vkDestroyDescriptorSetLayout DestroyDescriptorSetLayout;
        /*   74 */ PFN_vkCreateDescriptorPool CreateDescriptorPool;
        /*   75 */ PFN_vkDestroyDescriptorPool DestroyDescriptorPool;
        /*   76 */ PFN_vkResetDescriptorPool ResetDescriptorPool;
        /*   77 */ PFN_vkAllocateDescriptorSets AllocateDescriptorSets;
        /*   78 */ PFN_vkFreeDescriptorSets FreeDescriptorSets;
        /*   79 */ PFN_vkUpdateDescriptorSets UpdateDescriptorSets;
        /*   80 */ PFN_vkCreateFramebuffer CreateFramebuffer;
        /*   81 */ PFN_vkDestroyFramebuffer DestroyFramebuffer;
        /*   82 */ PFN_vkCreateRenderPass CreateRenderPass;
        /*   83 */ PFN_vkDestroyRenderPass DestroyRenderPass;
        /*   84 */ PFN_vkGetRenderAreaGranularity GetRenderAreaGranularity;
        /*   85 */ PFN_vkCreateCommandPool CreateCommandPool;
        /*   86 */ PFN_vkDestroyCommandPool DestroyCommandPool;
        /*   87 */ PFN_vkResetCommandPool ResetCommandPool;
        /*   88 */ PFN_vkAllocateCommandBuffers AllocateCommandBuffers;
        /*   89 */ PFN_vkFreeCommandBuffers FreeCommandBuffers;
        /*   90 */ PFN_vkBeginCommandBuffer BeginCommandBuffer;
        /*   91 */ PFN_vkEndCommandBuffer EndCommandBuffer;
        /*   92 */ PFN_vkResetCommandBuffer ResetCommandBuffer;
        /*   93 */ PFN_vkCmdBindPipeline CmdBindPipeline;
        /*   94 */ PFN_vkCmdSetViewport CmdSetViewport;
        /*   95 */ PFN_vkCmdSetScissor CmdSetScissor;
        /*   96 */ PFN_vkCmdSetLineWidth CmdSetLineWidth;
        /*   97 */ PFN_vkCmdSetDepthBias CmdSetDepthBias;
        /*   98 */ PFN_vkCmdSetBlendConstants CmdSetBlendConstants;
        /*   99 */ PFN_vkCmdSetDepthBounds CmdSetDepthBounds;
        /*  100 */ PFN_vkCmdSetStencilCompareMask CmdSetStencilCompareMask;
        /*  101 */ PFN_vkCmdSetStencilWriteMask CmdSetStencilWriteMask;
        /*  102 */ PFN_vkCmdSetStencilReference CmdSetStencilReference;
        /*  103 */ PFN_vkCmdBindDescriptorSets CmdBindDescriptorSets;
        /*  104 */ PFN_vkCmdBindIndexBuffer CmdBindIndexBuffer;
        /*  105 */ PFN_vkCmdBindVertexBuffers CmdBindVertexBuffers;
        /*  106 */ PFN_vkCmdDraw CmdDraw;
        /*  107 */ PFN_vkCmdDrawIndexed CmdDrawIndexed;
        /*  108 */ PFN_vkCmdDrawIndirect CmdDrawIndirect;
        /*  109 */ PFN_vkCmdDrawIndexedIndirect CmdDrawIndexedIndirect;
        /*  110 */ PFN_vkCmdDispatch CmdDispatch;
        /*  111 */ PFN_vkCmdDispatchIndirect CmdDispatchIndirect;
        /*  112 */ PFN_vkCmdCopyBuffer CmdCopyBuffer;
        /*  113 */ PFN_vkCmdCopyImage CmdCopyImage;
        /*  114 */ PFN_vkCmdBlitImage CmdBlitImage;
        /*  115 */ PFN_vkCmdCopyBufferToImage CmdCopyBufferToImage;
        /*  116 */ PFN_vkCmdCopyImageToBuffer CmdCopyImageToBuffer;
        /*  117 */ PFN_vkCmdUpdateBuffer CmdUpdateBuffer;
        /*  118 */ PFN_vkCmdFillBuffer CmdFillBuffer;
        /*  119 */ PFN_vkCmdClearColorImage CmdClearColorImage;
        /*  120 */ PFN_vkCmdClearDepthStencilImage CmdClearDepthStencilImage;
        /*  121 */ PFN_vkCmdClearAttachments CmdClearAttachments;
        /*  122 */ PFN_vkCmdResolveImage CmdResolveImage;
        /*  123 */ PFN_vkCmdSetEvent CmdSetEvent;
        /*  124 */ PFN_vkCmdResetEvent CmdResetEvent;
        /*  125 */ PFN_vkCmdWaitEvents CmdWaitEvents;
        /*  126 */ PFN_vkCmdPipelineBarrier CmdPipelineBarrier;
        /*  127 */ PFN_vkCmdBeginQuery CmdBeginQuery;
        /*  128 */ PFN_vkCmdEndQuery CmdEndQuery;
        /*  129 */ PFN_vkCmdResetQueryPool CmdResetQueryPool;
        /*  130 */ PFN_vkCmdWriteTimestamp CmdWriteTimestamp;
        /*  131 */ PFN_vkCmdCopyQueryPoolResults CmdCopyQueryPoolResults;
        /*  132 */ PFN_vkCmdPushConstants CmdPushConstants;
        /*  133 */ PFN_vkCmdBeginRenderPass CmdBeginRenderPass;
        /*  134 */ PFN_vkCmdNextSubpass CmdNextSubpass;
        /*  135 */ PFN_vkCmdEndRenderPass CmdEndRenderPass;
        /*  136 */ PFN_vkCmdExecuteCommands CmdExecuteCommands;
        /*  137 */ PFN_vkEnumerateInstanceVersion EnumerateInstanceVersion;
        /*  138 */ PFN_vkBindBufferMemory2 BindBufferMemory2;
        /*  139 */ PFN_vkBindImageMemory2 BindImageMemory2;
        /*  140 */ PFN_vkGetDeviceGroupPeerMemoryFeatures GetDeviceGroupPeerMemoryFeatures;
        /*  141 */ PFN_vkCmdSetDeviceMask CmdSetDeviceMask;
        /*  142 */ PFN_vkCmdDispatchBase CmdDispatchBase;
        /*  143 */ PFN_vkEnumeratePhysicalDeviceGroups EnumeratePhysicalDeviceGroups;
        /*  144 */ PFN_vkGetImageMemoryRequirements2 GetImageMemoryRequirements2;
        /*  145 */ PFN_vkGetBufferMemoryRequirements2 GetBufferMemoryRequirements2;
        /*  146 */ PFN_vkGetImageSparseMemoryRequirements2 GetImageSparseMemoryRequirements2;
        /*  147 */ PFN_vkGetPhysicalDeviceFeatures2 GetPhysicalDeviceFeatures2;
        /*  148 */ PFN_vkGetPhysicalDeviceProperties2 GetPhysicalDeviceProperties2;
        /*  149 */ PFN_vkGetPhysicalDeviceFormatProperties2 GetPhysicalDeviceFormatProperties2;
        /*  150 */ PFN_vkGetPhysicalDeviceImageFormatProperties2 GetPhysicalDeviceImageFormatProperties2;
        /*  151 */ PFN_vkGetPhysicalDeviceQueueFamilyProperties2 GetPhysicalDeviceQueueFamilyProperties2;
        /*  152 */ PFN_vkGetPhysicalDeviceMemoryProperties2 GetPhysicalDeviceMemoryProperties2;
        /*  153 */ PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 GetPhysicalDeviceSparseImageFormatProperties2;
        /*  154 */ PFN_vkTrimCommandPool TrimCommandPool;
        /*  155 */ PFN_vkGetDeviceQueue2 GetDeviceQueue2;
        /*  156 */ PFN_vkCreateSamplerYcbcrConversion CreateSamplerYcbcrConversion;
        /*  157 */ PFN_vkDestroySamplerYcbcrConversion DestroySamplerYcbcrConversion;
        /*  158 */ PFN_vkCreateDescriptorUpdateTemplate CreateDescriptorUpdateTemplate;
        /*  159 */ PFN_vkDestroyDescriptorUpdateTemplate DestroyDescriptorUpdateTemplate;
        /*  160 */ PFN_vkUpdateDescriptorSetWithTemplate UpdateDescriptorSetWithTemplate;
        /*  161 */ PFN_vkGetPhysicalDeviceExternalBufferProperties GetPhysicalDeviceExternalBufferProperties;
        /*  162 */ PFN_vkGetPhysicalDeviceExternalFenceProperties GetPhysicalDeviceExternalFenceProperties;
        /*  163 */ PFN_vkGetPhysicalDeviceExternalSemaphoreProperties GetPhysicalDeviceExternalSemaphoreProperties;
        /*  164 */ PFN_vkGetDescriptorSetLayoutSupport GetDescriptorSetLayoutSupport;
        /*  165 */ PFN_vkCmdDrawIndirectCount CmdDrawIndirectCount;
        /*  166 */ PFN_vkCmdDrawIndexedIndirectCount CmdDrawIndexedIndirectCount;
        /*  167 */ PFN_vkCreateRenderPass2 CreateRenderPass2;
        /*  168 */ PFN_vkCmdBeginRenderPass2 CmdBeginRenderPass2;
        /*  169 */ PFN_vkCmdNextSubpass2 CmdNextSubpass2;
        /*  170 */ PFN_vkCmdEndRenderPass2 CmdEndRenderPass2;
        /*  171 */ PFN_vkResetQueryPool ResetQueryPool;
        /*  172 */ PFN_vkGetSemaphoreCounterValue GetSemaphoreCounterValue;
        /*  173 */ PFN_vkWaitSemaphores WaitSemaphores;
        /*  174 */ PFN_vkSignalSemaphore SignalSemaphore;
        /*  175 */ PFN_vkGetBufferDeviceAddress GetBufferDeviceAddress;
        /*  176 */ PFN_vkGetBufferOpaqueCaptureAddress GetBufferOpaqueCaptureAddress;
        /*  177 */ PFN_vkGetDeviceMemoryOpaqueCaptureAddress GetDeviceMemoryOpaqueCaptureAddress;
        /*  178 */ PFN_vkGetPhysicalDeviceToolProperties GetPhysicalDeviceToolProperties;
        /*  179 */ PFN_vkCreatePrivateDataSlot CreatePrivateDataSlot;
        /*  180 */ PFN_vkDestroyPrivateDataSlot DestroyPrivateDataSlot;
        /*  181 */ PFN_vkSetPrivateData SetPrivateData;
        /*  182 */ PFN_vkGetPrivateData GetPrivateData;
        /*  183 */ PFN_vkCmdSetEvent2 CmdSetEvent2;
        /*  184 */ PFN_vkCmdResetEvent2 CmdResetEvent2;
        /*  185 */ PFN_vkCmdWaitEvents2 CmdWaitEvents2;
        /*  186 */ PFN_vkCmdPipelineBarrier2 CmdPipelineBarrier2;
        /*  187 */ PFN_vkCmdWriteTimestamp2 CmdWriteTimestamp2;
        /*  188 */ PFN_vkQueueSubmit2 QueueSubmit2;
        /*  189 */ PFN_vkCmdCopyBuffer2 CmdCopyBuffer2;
        /*  190 */ PFN_vkCmdCopyImage2 CmdCopyImage2;
        /*  191 */ PFN_vkCmdCopyBufferToImage2 CmdCopyBufferToImage2;
        /*  192 */ PFN_vkCmdCopyImageToBuffer2 CmdCopyImageToBuffer2;
        /*  193 */ PFN_vkCmdBlitImage2 CmdBlitImage2;
        /*  194 */ PFN_vkCmdResolveImage2 CmdResolveImage2;
        /*  195 */ PFN_vkCmdBeginRendering CmdBeginRendering;
        /*  196 */ PFN_vkCmdEndRendering CmdEndRendering;
        /*  197 */ PFN_vkCmdSetCullMode CmdSetCullMode;
        /*  198 */ PFN_vkCmdSetFrontFace CmdSetFrontFace;
        /*  199 */ PFN_vkCmdSetPrimitiveTopology CmdSetPrimitiveTopology;
        /*  200 */ PFN_vkCmdSetViewportWithCount CmdSetViewportWithCount;
        /*  201 */ PFN_vkCmdSetScissorWithCount CmdSetScissorWithCount;
        /*  202 */ PFN_vkCmdBindVertexBuffers2 CmdBindVertexBuffers2;
        /*  203 */ PFN_vkCmdSetDepthTestEnable CmdSetDepthTestEnable;
        /*  204 */ PFN_vkCmdSetDepthWriteEnable CmdSetDepthWriteEnable;
        /*  205 */ PFN_vkCmdSetDepthCompareOp CmdSetDepthCompareOp;
        /*  206 */ PFN_vkCmdSetDepthBoundsTestEnable CmdSetDepthBoundsTestEnable;
        /*  207 */ PFN_vkCmdSetStencilTestEnable CmdSetStencilTestEnable;
        /*  208 */ PFN_vkCmdSetStencilOp CmdSetStencilOp;
        /*  209 */ PFN_vkCmdSetRasterizerDiscardEnable CmdSetRasterizerDiscardEnable;
        /*  210 */ PFN_vkCmdSetDepthBiasEnable CmdSetDepthBiasEnable;
        /*  211 */ PFN_vkCmdSetPrimitiveRestartEnable CmdSetPrimitiveRestartEnable;
        /*  212 */ PFN_vkGetDeviceBufferMemoryRequirements GetDeviceBufferMemoryRequirements;
        /*  213 */ PFN_vkGetDeviceImageMemoryRequirements GetDeviceImageMemoryRequirements;
        /*  214 */ PFN_vkGetDeviceImageSparseMemoryRequirements GetDeviceImageSparseMemoryRequirements;
        /*  215 */ PFN_vkCmdSetLineStipple CmdSetLineStipple;
        /*  216 */ PFN_vkMapMemory2 MapMemory2;
        /*  217 */ PFN_vkUnmapMemory2 UnmapMemory2;
        /*  218 */ PFN_vkCmdBindIndexBuffer2 CmdBindIndexBuffer2;
        /*  219 */ PFN_vkGetRenderingAreaGranularity GetRenderingAreaGranularity;
        /*  220 */ PFN_vkGetDeviceImageSubresourceLayout GetDeviceImageSubresourceLayout;
        /*  221 */ PFN_vkGetImageSubresourceLayout2 GetImageSubresourceLayout2;
        /*  222 */ PFN_vkCmdPushDescriptorSet CmdPushDescriptorSet;
        /*  223 */ PFN_vkCmdPushDescriptorSetWithTemplate CmdPushDescriptorSetWithTemplate;
        /*  224 */ PFN_vkCmdSetRenderingAttachmentLocations CmdSetRenderingAttachmentLocations;
        /*  225 */ PFN_vkCmdSetRenderingInputAttachmentIndices CmdSetRenderingInputAttachmentIndices;
        /*  226 */ PFN_vkCmdBindDescriptorSets2 CmdBindDescriptorSets2;
        /*  227 */ PFN_vkCmdPushConstants2 CmdPushConstants2;
        /*  228 */ PFN_vkCmdPushDescriptorSet2 CmdPushDescriptorSet2;
        /*  229 */ PFN_vkCmdPushDescriptorSetWithTemplate2 CmdPushDescriptorSetWithTemplate2;
        /*  230 */ PFN_vkCopyMemoryToImage CopyMemoryToImage;
        /*  231 */ PFN_vkCopyImageToMemory CopyImageToMemory;
        /*  232 */ PFN_vkCopyImageToImage CopyImageToImage;
        /*  233 */ PFN_vkTransitionImageLayout TransitionImageLayout;
        /*  234 */ PFN_vkDestroySurfaceKHR DestroySurfaceKHR;
        /*  235 */ PFN_vkGetPhysicalDeviceSurfaceSupportKHR GetPhysicalDeviceSurfaceSupportKHR;
        /*  236 */ PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR GetPhysicalDeviceSurfaceCapabilitiesKHR;
        /*  237 */ PFN_vkGetPhysicalDeviceSurfaceFormatsKHR GetPhysicalDeviceSurfaceFormatsKHR;
        /*  238 */ PFN_vkGetPhysicalDeviceSurfacePresentModesKHR GetPhysicalDeviceSurfacePresentModesKHR;
        /*  239 */ PFN_vkCreateSwapchainKHR CreateSwapchainKHR;
        /*  240 */ PFN_vkDestroySwapchainKHR DestroySwapchainKHR;
        /*  241 */ PFN_vkGetSwapchainImagesKHR GetSwapchainImagesKHR;
        /*  242 */ PFN_vkAcquireNextImageKHR AcquireNextImageKHR;
        /*  243 */ PFN_vkQueuePresentKHR QueuePresentKHR;
        /*  244 */ PFN_vkGetDeviceGroupPresentCapabilitiesKHR GetDeviceGroupPresentCapabilitiesKHR;
        /*  245 */ PFN_vkGetDeviceGroupSurfacePresentModesKHR GetDeviceGroupSurfacePresentModesKHR;
        /*  246 */ PFN_vkGetPhysicalDevicePresentRectanglesKHR GetPhysicalDevicePresentRectanglesKHR;
        /*  247 */ PFN_vkAcquireNextImage2KHR AcquireNextImage2KHR;
        /*  248 */ PFN_vkGetPhysicalDeviceDisplayPropertiesKHR GetPhysicalDeviceDisplayPropertiesKHR;
        /*  249 */ PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR GetPhysicalDeviceDisplayPlanePropertiesKHR;
        /*  250 */ PFN_vkGetDisplayPlaneSupportedDisplaysKHR GetDisplayPlaneSupportedDisplaysKHR;
        /*  251 */ PFN_vkGetDisplayModePropertiesKHR GetDisplayModePropertiesKHR;
        /*  252 */ PFN_vkCreateDisplayModeKHR CreateDisplayModeKHR;
        /*  253 */ PFN_vkGetDisplayPlaneCapabilitiesKHR GetDisplayPlaneCapabilitiesKHR;
        /*  254 */ PFN_vkCreateDisplayPlaneSurfaceKHR CreateDisplayPlaneSurfaceKHR;
        /*  255 */ PFN_vkCreateSharedSwapchainsKHR CreateSharedSwapchainsKHR;
#if defined(VK_USE_PLATFORM_XLIB_KHR)
        /*  256 */ PFN_vkCreateXlibSurfaceKHR CreateXlibSurfaceKHR;
#else
        /*  256 */ void *paddingPfn256;
#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
        /*  257 */ PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR GetPhysicalDeviceXlibPresentationSupportKHR;
#else
        /*  257 */ void *paddingPfn257;
#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
        /*  258 */ PFN_vkCreateXcbSurfaceKHR CreateXcbSurfaceKHR;
#else
        /*  258 */ void *paddingPfn258;
#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
        /*  259 */ PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR GetPhysicalDeviceXcbPresentationSupportKHR;
#else
        /*  259 */ void *paddingPfn259;
#endif
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
        /*  260 */ PFN_vkCreateWaylandSurfaceKHR CreateWaylandSurfaceKHR;
#else
        /*  260 */ void *paddingPfn260;
#endif
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
        /*  261 */ PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR GetPhysicalDeviceWaylandPresentationSupportKHR;
#else
        /*  261 */ void *paddingPfn261;
#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
        /*  262 */ PFN_vkCreateAndroidSurfaceKHR CreateAndroidSurfaceKHR;
#else
        /*  262 */ void *paddingPfn262;
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
        /*  263 */ PFN_vkCreateWin32SurfaceKHR CreateWin32SurfaceKHR;
#else
        /*  263 */ void *paddingPfn263;
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
        /*  264 */ PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR GetPhysicalDeviceWin32PresentationSupportKHR;
#else
        /*  264 */ void *paddingPfn264;
#endif
        /*  265 */ PFN_vkCreateDebugReportCallbackEXT CreateDebugReportCallbackEXT;
        /*  266 */ PFN_vkDestroyDebugReportCallbackEXT DestroyDebugReportCallbackEXT;
        /*  267 */ PFN_vkDebugReportMessageEXT DebugReportMessageEXT;
        /*  268 */ PFN_vkDebugMarkerSetObjectTagEXT DebugMarkerSetObjectTagEXT;
        /*  269 */ PFN_vkDebugMarkerSetObjectNameEXT DebugMarkerSetObjectNameEXT;
        /*  270 */ PFN_vkCmdDebugMarkerBeginEXT CmdDebugMarkerBeginEXT;
        /*  271 */ PFN_vkCmdDebugMarkerEndEXT CmdDebugMarkerEndEXT;
        /*  272 */ PFN_vkCmdDebugMarkerInsertEXT CmdDebugMarkerInsertEXT;
        /*  273 */ PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR GetPhysicalDeviceVideoCapabilitiesKHR;
        /*  274 */ PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR GetPhysicalDeviceVideoFormatPropertiesKHR;
        /*  275 */ PFN_vkCreateVideoSessionKHR CreateVideoSessionKHR;
        /*  276 */ PFN_vkDestroyVideoSessionKHR DestroyVideoSessionKHR;
        /*  277 */ PFN_vkGetVideoSessionMemoryRequirementsKHR GetVideoSessionMemoryRequirementsKHR;
        /*  278 */ PFN_vkBindVideoSessionMemoryKHR BindVideoSessionMemoryKHR;
        /*  279 */ PFN_vkCreateVideoSessionParametersKHR CreateVideoSessionParametersKHR;
        /*  280 */ PFN_vkUpdateVideoSessionParametersKHR UpdateVideoSessionParametersKHR;
        /*  281 */ PFN_vkDestroyVideoSessionParametersKHR DestroyVideoSessionParametersKHR;
        /*  282 */ PFN_vkCmdBeginVideoCodingKHR CmdBeginVideoCodingKHR;
        /*  283 */ PFN_vkCmdEndVideoCodingKHR CmdEndVideoCodingKHR;
        /*  284 */ PFN_vkCmdControlVideoCodingKHR CmdControlVideoCodingKHR;
        /*  285 */ PFN_vkCmdDecodeVideoKHR CmdDecodeVideoKHR;
        /*  286 */ PFN_vkCmdBindTransformFeedbackBuffersEXT CmdBindTransformFeedbackBuffersEXT;
        /*  287 */ PFN_vkCmdBeginTransformFeedbackEXT CmdBeginTransformFeedbackEXT;
        /*  288 */ PFN_vkCmdEndTransformFeedbackEXT CmdEndTransformFeedbackEXT;
        /*  289 */ PFN_vkCmdBeginQueryIndexedEXT CmdBeginQueryIndexedEXT;
        /*  290 */ PFN_vkCmdEndQueryIndexedEXT CmdEndQueryIndexedEXT;
        /*  291 */ PFN_vkCmdDrawIndirectByteCountEXT CmdDrawIndirectByteCountEXT;
        /*  292 */ PFN_vkCreateCuModuleNVX CreateCuModuleNVX;
        /*  293 */ PFN_vkCreateCuFunctionNVX CreateCuFunctionNVX;
        /*  294 */ PFN_vkDestroyCuModuleNVX DestroyCuModuleNVX;
        /*  295 */ PFN_vkDestroyCuFunctionNVX DestroyCuFunctionNVX;
        /*  296 */ PFN_vkCmdCuLaunchKernelNVX CmdCuLaunchKernelNVX;
        /*  297 */ PFN_vkGetImageViewHandleNVX GetImageViewHandleNVX;
        /*  298 */ PFN_vkGetImageViewHandle64NVX GetImageViewHandle64NVX;
        /*  299 */ PFN_vkGetImageViewAddressNVX GetImageViewAddressNVX;
        /*  300 */ PFN_vkCmdDrawIndirectCountAMD CmdDrawIndirectCountAMD;
        /*  301 */ PFN_vkCmdDrawIndexedIndirectCountAMD CmdDrawIndexedIndirectCountAMD;
        /*  302 */ PFN_vkGetShaderInfoAMD GetShaderInfoAMD;
        /*  303 */ PFN_vkCmdBeginRenderingKHR CmdBeginRenderingKHR;
        /*  304 */ PFN_vkCmdEndRenderingKHR CmdEndRenderingKHR;
#if defined(VK_USE_PLATFORM_GGP)
        /*  305 */ PFN_vkCreateStreamDescriptorSurfaceGGP CreateStreamDescriptorSurfaceGGP;
#else
        /*  305 */ void *paddingPfn305;
#endif
        /*  306 */ PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV GetPhysicalDeviceExternalImageFormatPropertiesNV;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
        /*  307 */ PFN_vkGetMemoryWin32HandleNV GetMemoryWin32HandleNV;
#else
        /*  307 */ void *paddingPfn307;
#endif
        /*  308 */ PFN_vkGetPhysicalDeviceFeatures2KHR GetPhysicalDeviceFeatures2KHR;
        /*  309 */ PFN_vkGetPhysicalDeviceProperties2KHR GetPhysicalDeviceProperties2KHR;
        /*  310 */ PFN_vkGetPhysicalDeviceFormatProperties2KHR GetPhysicalDeviceFormatProperties2KHR;
        /*  311 */ PFN_vkGetPhysicalDeviceImageFormatProperties2KHR GetPhysicalDeviceImageFormatProperties2KHR;
        /*  312 */ PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR GetPhysicalDeviceQueueFamilyProperties2KHR;
        /*  313 */ PFN_vkGetPhysicalDeviceMemoryProperties2KHR GetPhysicalDeviceMemoryProperties2KHR;
        /*  314 */ PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR GetPhysicalDeviceSparseImageFormatProperties2KHR;
        /*  315 */ PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR GetDeviceGroupPeerMemoryFeaturesKHR;
        /*  316 */ PFN_vkCmdSetDeviceMaskKHR CmdSetDeviceMaskKHR;
        /*  317 */ PFN_vkCmdDispatchBaseKHR CmdDispatchBaseKHR;
#if defined(VK_USE_PLATFORM_VI_NN)
        /*  318 */ PFN_vkCreateViSurfaceNN CreateViSurfaceNN;
#else
        /*  318 */ void *paddingPfn318;
#endif
        /*  319 */ PFN_vkTrimCommandPoolKHR TrimCommandPoolKHR;
        /*  320 */ PFN_vkEnumeratePhysicalDeviceGroupsKHR EnumeratePhysicalDeviceGroupsKHR;
        /*  321 */ PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR GetPhysicalDeviceExternalBufferPropertiesKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
        /*  322 */ PFN_vkGetMemoryWin32HandleKHR GetMemoryWin32HandleKHR;
#else
        /*  322 */ void *paddingPfn322;
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
        /*  323 */ PFN_vkGetMemoryWin32HandlePropertiesKHR GetMemoryWin32HandlePropertiesKHR;
#else
        /*  323 */ void *paddingPfn323;
#endif
        /*  324 */ PFN_vkGetMemoryFdKHR GetMemoryFdKHR;
        /*  325 */ PFN_vkGetMemoryFdPropertiesKHR GetMemoryFdPropertiesKHR;
        /*  326 */ PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR GetPhysicalDeviceExternalSemaphorePropertiesKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
        /*  327 */ PFN_vkImportSemaphoreWin32HandleKHR ImportSemaphoreWin32HandleKHR;
#else
        /*  327 */ void *paddingPfn327;
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
        /*  328 */ PFN_vkGetSemaphoreWin32HandleKHR GetSemaphoreWin32HandleKHR;
#else
        /*  328 */ void *paddingPfn328;
#endif
        /*  329 */ PFN_vkImportSemaphoreFdKHR ImportSemaphoreFdKHR;
        /*  330 */ PFN_vkGetSemaphoreFdKHR GetSemaphoreFdKHR;
        /*  331 */ PFN_vkCmdPushDescriptorSetKHR CmdPushDescriptorSetKHR;
        /*  332 */ PFN_vkCmdPushDescriptorSetWithTemplateKHR CmdPushDescriptorSetWithTemplateKHR;
        /*  333 */ PFN_vkCmdBeginConditionalRenderingEXT CmdBeginConditionalRenderingEXT;
        /*  334 */ PFN_vkCmdEndConditionalRenderingEXT CmdEndConditionalRenderingEXT;
        /*  335 */ PFN_vkCreateDescriptorUpdateTemplateKHR CreateDescriptorUpdateTemplateKHR;
        /*  336 */ PFN_vkDestroyDescriptorUpdateTemplateKHR DestroyDescriptorUpdateTemplateKHR;
        /*  337 */ PFN_vkUpdateDescriptorSetWithTemplateKHR UpdateDescriptorSetWithTemplateKHR;
        /*  338 */ PFN_vkCmdSetViewportWScalingNV CmdSetViewportWScalingNV;
        /*  339 */ PFN_vkReleaseDisplayEXT ReleaseDisplayEXT;
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
        /*  340 */ PFN_vkAcquireXlibDisplayEXT AcquireXlibDisplayEXT;
#else
        /*  340 */ void *paddingPfn340;
#endif
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
        /*  341 */ PFN_vkGetRandROutputDisplayEXT GetRandROutputDisplayEXT;
#else
        /*  341 */ void *paddingPfn341;
#endif
        /*  342 */ PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT GetPhysicalDeviceSurfaceCapabilities2EXT;
        /*  343 */ PFN_vkDisplayPowerControlEXT DisplayPowerControlEXT;
        /*  344 */ PFN_vkRegisterDeviceEventEXT RegisterDeviceEventEXT;
        /*  345 */ PFN_vkRegisterDisplayEventEXT RegisterDisplayEventEXT;
        /*  346 */ PFN_vkGetSwapchainCounterEXT GetSwapchainCounterEXT;
        /*  347 */ PFN_vkGetRefreshCycleDurationGOOGLE GetRefreshCycleDurationGOOGLE;
        /*  348 */ PFN_vkGetPastPresentationTimingGOOGLE GetPastPresentationTimingGOOGLE;
        /*  349 */ PFN_vkCmdSetDiscardRectangleEXT CmdSetDiscardRectangleEXT;
        /*  350 */ PFN_vkCmdSetDiscardRectangleEnableEXT CmdSetDiscardRectangleEnableEXT;
        /*  351 */ PFN_vkCmdSetDiscardRectangleModeEXT CmdSetDiscardRectangleModeEXT;
        /*  352 */ PFN_vkSetHdrMetadataEXT SetHdrMetadataEXT;
        /*  353 */ PFN_vkCreateRenderPass2KHR CreateRenderPass2KHR;
        /*  354 */ PFN_vkCmdBeginRenderPass2KHR CmdBeginRenderPass2KHR;
        /*  355 */ PFN_vkCmdNextSubpass2KHR CmdNextSubpass2KHR;
        /*  356 */ PFN_vkCmdEndRenderPass2KHR CmdEndRenderPass2KHR;
        /*  357 */ PFN_vkGetSwapchainStatusKHR GetSwapchainStatusKHR;
        /*  358 */ PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR GetPhysicalDeviceExternalFencePropertiesKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
        /*  359 */ PFN_vkImportFenceWin32HandleKHR ImportFenceWin32HandleKHR;
#else
        /*  359 */ void *paddingPfn359;
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
        /*  360 */ PFN_vkGetFenceWin32HandleKHR GetFenceWin32HandleKHR;
#else
        /*  360 */ void *paddingPfn360;
#endif
        /*  361 */ PFN_vkImportFenceFdKHR ImportFenceFdKHR;
        /*  362 */ PFN_vkGetFenceFdKHR GetFenceFdKHR;
        /*  363 */ PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
        /*  364 */ PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
        /*  365 */ PFN_vkAcquireProfilingLockKHR AcquireProfilingLockKHR;
        /*  366 */ PFN_vkReleaseProfilingLockKHR ReleaseProfilingLockKHR;
        /*  367 */ PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR GetPhysicalDeviceSurfaceCapabilities2KHR;
        /*  368 */ PFN_vkGetPhysicalDeviceSurfaceFormats2KHR GetPhysicalDeviceSurfaceFormats2KHR;
        /*  369 */ PFN_vkGetPhysicalDeviceDisplayProperties2KHR GetPhysicalDeviceDisplayProperties2KHR;
        /*  370 */ PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR GetPhysicalDeviceDisplayPlaneProperties2KHR;
        /*  371 */ PFN_vkGetDisplayModeProperties2KHR GetDisplayModeProperties2KHR;
        /*  372 */ PFN_vkGetDisplayPlaneCapabilities2KHR GetDisplayPlaneCapabilities2KHR;
#if defined(VK_USE_PLATFORM_IOS_MVK)
        /*  373 */ PFN_vkCreateIOSSurfaceMVK CreateIOSSurfaceMVK;
#else
        /*  373 */ void *paddingPfn373;
#endif
#if defined(VK_USE_PLATFORM_MACOS_MVK)
        /*  374 */ PFN_vkCreateMacOSSurfaceMVK CreateMacOSSurfaceMVK;
#else
        /*  374 */ void *paddingPfn374;
#endif
        /*  375 */ PFN_vkSetDebugUtilsObjectNameEXT SetDebugUtilsObjectNameEXT;
        /*  376 */ PFN_vkSetDebugUtilsObjectTagEXT SetDebugUtilsObjectTagEXT;
        /*  377 */ PFN_vkQueueBeginDebugUtilsLabelEXT QueueBeginDebugUtilsLabelEXT;
        /*  378 */ PFN_vkQueueEndDebugUtilsLabelEXT QueueEndDebugUtilsLabelEXT;
        /*  379 */ PFN_vkQueueInsertDebugUtilsLabelEXT QueueInsertDebugUtilsLabelEXT;
        /*  380 */ PFN_vkCmdBeginDebugUtilsLabelEXT CmdBeginDebugUtilsLabelEXT;
        /*  381 */ PFN_vkCmdEndDebugUtilsLabelEXT CmdEndDebugUtilsLabelEXT;
        /*  382 */ PFN_vkCmdInsertDebugUtilsLabelEXT CmdInsertDebugUtilsLabelEXT;
        /*  383 */ PFN_vkCreateDebugUtilsMessengerEXT CreateDebugUtilsMessengerEXT;
        /*  384 */ PFN_vkDestroyDebugUtilsMessengerEXT DestroyDebugUtilsMessengerEXT;
        /*  385 */ PFN_vkSubmitDebugUtilsMessageEXT SubmitDebugUtilsMessageEXT;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
        /*  386 */ PFN_vkGetAndroidHardwareBufferPropertiesANDROID GetAndroidHardwareBufferPropertiesANDROID;
#else
        /*  386 */ void *paddingPfn386;
#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
        /*  387 */ PFN_vkGetMemoryAndroidHardwareBufferANDROID GetMemoryAndroidHardwareBufferANDROID;
#else
        /*  387 */ void *paddingPfn387;
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
        /*  388 */ PFN_vkCreateExecutionGraphPipelinesAMDX CreateExecutionGraphPipelinesAMDX;
#else
        /*  388 */ void *paddingPfn388;
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
        /*  389 */ PFN_vkGetExecutionGraphPipelineScratchSizeAMDX GetExecutionGraphPipelineScratchSizeAMDX;
#else
        /*  389 */ void *paddingPfn389;
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
        /*  390 */ PFN_vkGetExecutionGraphPipelineNodeIndexAMDX GetExecutionGraphPipelineNodeIndexAMDX;
#else
        /*  390 */ void *paddingPfn390;
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
        /*  391 */ PFN_vkCmdInitializeGraphScratchMemoryAMDX CmdInitializeGraphScratchMemoryAMDX;
#else
        /*  391 */ void *paddingPfn391;
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
        /*  392 */ PFN_vkCmdDispatchGraphAMDX CmdDispatchGraphAMDX;
#else
        /*  392 */ void *paddingPfn392;
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
        /*  393 */ PFN_vkCmdDispatchGraphIndirectAMDX CmdDispatchGraphIndirectAMDX;
#else
        /*  393 */ void *paddingPfn393;
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
        /*  394 */ PFN_vkCmdDispatchGraphIndirectCountAMDX CmdDispatchGraphIndirectCountAMDX;
#else
        /*  394 */ void *paddingPfn394;
#endif
        /*  395 */ PFN_vkCmdSetSampleLocationsEXT CmdSetSampleLocationsEXT;
        /*  396 */ PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT GetPhysicalDeviceMultisamplePropertiesEXT;
        /*  397 */ PFN_vkGetImageMemoryRequirements2KHR GetImageMemoryRequirements2KHR;
        /*  398 */ PFN_vkGetBufferMemoryRequirements2KHR GetBufferMemoryRequirements2KHR;
        /*  399 */ PFN_vkGetImageSparseMemoryRequirements2KHR GetImageSparseMemoryRequirements2KHR;
        /*  400 */ PFN_vkCreateAccelerationStructureKHR CreateAccelerationStructureKHR;
        /*  401 */ PFN_vkDestroyAccelerationStructureKHR DestroyAccelerationStructureKHR;
        /*  402 */ PFN_vkCmdBuildAccelerationStructuresKHR CmdBuildAccelerationStructuresKHR;
        /*  403 */ PFN_vkCmdBuildAccelerationStructuresIndirectKHR CmdBuildAccelerationStructuresIndirectKHR;
        /*  404 */ PFN_vkBuildAccelerationStructuresKHR BuildAccelerationStructuresKHR;
        /*  405 */ PFN_vkCopyAccelerationStructureKHR CopyAccelerationStructureKHR;
        /*  406 */ PFN_vkCopyAccelerationStructureToMemoryKHR CopyAccelerationStructureToMemoryKHR;
        /*  407 */ PFN_vkCopyMemoryToAccelerationStructureKHR CopyMemoryToAccelerationStructureKHR;
        /*  408 */ PFN_vkWriteAccelerationStructuresPropertiesKHR WriteAccelerationStructuresPropertiesKHR;
        /*  409 */ PFN_vkCmdCopyAccelerationStructureKHR CmdCopyAccelerationStructureKHR;
        /*  410 */ PFN_vkCmdCopyAccelerationStructureToMemoryKHR CmdCopyAccelerationStructureToMemoryKHR;
        /*  411 */ PFN_vkCmdCopyMemoryToAccelerationStructureKHR CmdCopyMemoryToAccelerationStructureKHR;
        /*  412 */ PFN_vkGetAccelerationStructureDeviceAddressKHR GetAccelerationStructureDeviceAddressKHR;
        /*  413 */ PFN_vkCmdWriteAccelerationStructuresPropertiesKHR CmdWriteAccelerationStructuresPropertiesKHR;
        /*  414 */ PFN_vkGetDeviceAccelerationStructureCompatibilityKHR GetDeviceAccelerationStructureCompatibilityKHR;
        /*  415 */ PFN_vkGetAccelerationStructureBuildSizesKHR GetAccelerationStructureBuildSizesKHR;
        /*  416 */ PFN_vkCmdTraceRaysKHR CmdTraceRaysKHR;
        /*  417 */ PFN_vkCreateRayTracingPipelinesKHR CreateRayTracingPipelinesKHR;
        /*  418 */ PFN_vkGetRayTracingShaderGroupHandlesKHR GetRayTracingShaderGroupHandlesKHR;
        /*  419 */ PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR GetRayTracingCaptureReplayShaderGroupHandlesKHR;
        /*  420 */ PFN_vkCmdTraceRaysIndirectKHR CmdTraceRaysIndirectKHR;
        /*  421 */ PFN_vkGetRayTracingShaderGroupStackSizeKHR GetRayTracingShaderGroupStackSizeKHR;
        /*  422 */ PFN_vkCmdSetRayTracingPipelineStackSizeKHR CmdSetRayTracingPipelineStackSizeKHR;
        /*  423 */ PFN_vkCreateSamplerYcbcrConversionKHR CreateSamplerYcbcrConversionKHR;
        /*  424 */ PFN_vkDestroySamplerYcbcrConversionKHR DestroySamplerYcbcrConversionKHR;
        /*  425 */ PFN_vkBindBufferMemory2KHR BindBufferMemory2KHR;
        /*  426 */ PFN_vkBindImageMemory2KHR BindImageMemory2KHR;
        /*  427 */ PFN_vkGetImageDrmFormatModifierPropertiesEXT GetImageDrmFormatModifierPropertiesEXT;
        /*  428 */ PFN_vkCreateValidationCacheEXT CreateValidationCacheEXT;
        /*  429 */ PFN_vkDestroyValidationCacheEXT DestroyValidationCacheEXT;
        /*  430 */ PFN_vkMergeValidationCachesEXT MergeValidationCachesEXT;
        /*  431 */ PFN_vkGetValidationCacheDataEXT GetValidationCacheDataEXT;
        /*  432 */ PFN_vkCmdBindShadingRateImageNV CmdBindShadingRateImageNV;
        /*  433 */ PFN_vkCmdSetViewportShadingRatePaletteNV CmdSetViewportShadingRatePaletteNV;
        /*  434 */ PFN_vkCmdSetCoarseSampleOrderNV CmdSetCoarseSampleOrderNV;
        /*  435 */ PFN_vkCreateAccelerationStructureNV CreateAccelerationStructureNV;
        /*  436 */ PFN_vkDestroyAccelerationStructureNV DestroyAccelerationStructureNV;
        /*  437 */ PFN_vkGetAccelerationStructureMemoryRequirementsNV GetAccelerationStructureMemoryRequirementsNV;
        /*  438 */ PFN_vkBindAccelerationStructureMemoryNV BindAccelerationStructureMemoryNV;
        /*  439 */ PFN_vkCmdBuildAccelerationStructureNV CmdBuildAccelerationStructureNV;
        /*  440 */ PFN_vkCmdCopyAccelerationStructureNV CmdCopyAccelerationStructureNV;
        /*  441 */ PFN_vkCmdTraceRaysNV CmdTraceRaysNV;
        /*  442 */ PFN_vkCreateRayTracingPipelinesNV CreateRayTracingPipelinesNV;
        /*  443 */ PFN_vkGetRayTracingShaderGroupHandlesNV GetRayTracingShaderGroupHandlesNV;
        /*  444 */ PFN_vkGetAccelerationStructureHandleNV GetAccelerationStructureHandleNV;
        /*  445 */ PFN_vkCmdWriteAccelerationStructuresPropertiesNV CmdWriteAccelerationStructuresPropertiesNV;
        /*  446 */ PFN_vkCompileDeferredNV CompileDeferredNV;
        /*  447 */ PFN_vkGetDescriptorSetLayoutSupportKHR GetDescriptorSetLayoutSupportKHR;
        /*  448 */ PFN_vkCmdDrawIndirectCountKHR CmdDrawIndirectCountKHR;
        /*  449 */ PFN_vkCmdDrawIndexedIndirectCountKHR CmdDrawIndexedIndirectCountKHR;
        /*  450 */ PFN_vkGetMemoryHostPointerPropertiesEXT GetMemoryHostPointerPropertiesEXT;
        /*  451 */ PFN_vkCmdWriteBufferMarkerAMD CmdWriteBufferMarkerAMD;
        /*  452 */ PFN_vkCmdWriteBufferMarker2AMD CmdWriteBufferMarker2AMD;
        /*  453 */ PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT GetPhysicalDeviceCalibrateableTimeDomainsEXT;
        /*  454 */ PFN_vkGetCalibratedTimestampsEXT GetCalibratedTimestampsEXT;
        /*  455 */ PFN_vkCmdDrawMeshTasksNV CmdDrawMeshTasksNV;
        /*  456 */ PFN_vkCmdDrawMeshTasksIndirectNV CmdDrawMeshTasksIndirectNV;
        /*  457 */ PFN_vkCmdDrawMeshTasksIndirectCountNV CmdDrawMeshTasksIndirectCountNV;
        /*  458 */ PFN_vkCmdSetExclusiveScissorEnableNV CmdSetExclusiveScissorEnableNV;
        /*  459 */ PFN_vkCmdSetExclusiveScissorNV CmdSetExclusiveScissorNV;
        /*  460 */ PFN_vkCmdSetCheckpointNV CmdSetCheckpointNV;
        /*  461 */ PFN_vkGetQueueCheckpointDataNV GetQueueCheckpointDataNV;
        /*  462 */ PFN_vkGetQueueCheckpointData2NV GetQueueCheckpointData2NV;
        /*  463 */ PFN_vkGetSemaphoreCounterValueKHR GetSemaphoreCounterValueKHR;
        /*  464 */ PFN_vkWaitSemaphoresKHR WaitSemaphoresKHR;
        /*  465 */ PFN_vkSignalSemaphoreKHR SignalSemaphoreKHR;
        /*  466 */ PFN_vkInitializePerformanceApiINTEL InitializePerformanceApiINTEL;
        /*  467 */ PFN_vkUninitializePerformanceApiINTEL UninitializePerformanceApiINTEL;
        /*  468 */ PFN_vkCmdSetPerformanceMarkerINTEL CmdSetPerformanceMarkerINTEL;
        /*  469 */ PFN_vkCmdSetPerformanceStreamMarkerINTEL CmdSetPerformanceStreamMarkerINTEL;
        /*  470 */ PFN_vkCmdSetPerformanceOverrideINTEL CmdSetPerformanceOverrideINTEL;
        /*  471 */ PFN_vkAcquirePerformanceConfigurationINTEL AcquirePerformanceConfigurationINTEL;
        /*  472 */ PFN_vkReleasePerformanceConfigurationINTEL ReleasePerformanceConfigurationINTEL;
        /*  473 */ PFN_vkQueueSetPerformanceConfigurationINTEL QueueSetPerformanceConfigurationINTEL;
        /*  474 */ PFN_vkGetPerformanceParameterINTEL GetPerformanceParameterINTEL;
        /*  475 */ PFN_vkSetLocalDimmingAMD SetLocalDimmingAMD;
#if defined(VK_USE_PLATFORM_FUCHSIA)
        /*  476 */ PFN_vkCreateImagePipeSurfaceFUCHSIA CreateImagePipeSurfaceFUCHSIA;
#else
        /*  476 */ void *paddingPfn476;
#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
        /*  477 */ PFN_vkCreateMetalSurfaceEXT CreateMetalSurfaceEXT;
#else
        /*  477 */ void *paddingPfn477;
#endif
        /*  478 */ PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR GetPhysicalDeviceFragmentShadingRatesKHR;
        /*  479 */ PFN_vkCmdSetFragmentShadingRateKHR CmdSetFragmentShadingRateKHR;
        /*  480 */ PFN_vkCmdSetRenderingAttachmentLocationsKHR CmdSetRenderingAttachmentLocationsKHR;
        /*  481 */ PFN_vkCmdSetRenderingInputAttachmentIndicesKHR CmdSetRenderingInputAttachmentIndicesKHR;
        /*  482 */ PFN_vkGetBufferDeviceAddressEXT GetBufferDeviceAddressEXT;
        /*  483 */ PFN_vkGetPhysicalDeviceToolPropertiesEXT GetPhysicalDeviceToolPropertiesEXT;
        /*  484 */ PFN_vkWaitForPresentKHR WaitForPresentKHR;
        /*  485 */ PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV GetPhysicalDeviceCooperativeMatrixPropertiesNV;
        /*  486 */ PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
        /*  487 */ PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT GetPhysicalDeviceSurfacePresentModes2EXT;
#else
        /*  487 */ void *paddingPfn487;
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
        /*  488 */ PFN_vkAcquireFullScreenExclusiveModeEXT AcquireFullScreenExclusiveModeEXT;
#else
        /*  488 */ void *paddingPfn488;
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
        /*  489 */ PFN_vkReleaseFullScreenExclusiveModeEXT ReleaseFullScreenExclusiveModeEXT;
#else
        /*  489 */ void *paddingPfn489;
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
        /*  490 */ PFN_vkGetDeviceGroupSurfacePresentModes2EXT GetDeviceGroupSurfacePresentModes2EXT;
#else
        /*  490 */ void *paddingPfn490;
#endif
        /*  491 */ PFN_vkCreateHeadlessSurfaceEXT CreateHeadlessSurfaceEXT;
        /*  492 */ PFN_vkGetBufferDeviceAddressKHR GetBufferDeviceAddressKHR;
        /*  493 */ PFN_vkGetBufferOpaqueCaptureAddressKHR GetBufferOpaqueCaptureAddressKHR;
        /*  494 */ PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR GetDeviceMemoryOpaqueCaptureAddressKHR;
        /*  495 */ PFN_vkCmdSetLineStippleEXT CmdSetLineStippleEXT;
        /*  496 */ PFN_vkResetQueryPoolEXT ResetQueryPoolEXT;
        /*  497 */ PFN_vkCmdSetCullModeEXT CmdSetCullModeEXT;
        /*  498 */ PFN_vkCmdSetFrontFaceEXT CmdSetFrontFaceEXT;
        /*  499 */ PFN_vkCmdSetPrimitiveTopologyEXT CmdSetPrimitiveTopologyEXT;
        /*  500 */ PFN_vkCmdSetViewportWithCountEXT CmdSetViewportWithCountEXT;
        /*  501 */ PFN_vkCmdSetScissorWithCountEXT CmdSetScissorWithCountEXT;
        /*  502 */ PFN_vkCmdBindVertexBuffers2EXT CmdBindVertexBuffers2EXT;
        /*  503 */ PFN_vkCmdSetDepthTestEnableEXT CmdSetDepthTestEnableEXT;
        /*  504 */ PFN_vkCmdSetDepthWriteEnableEXT CmdSetDepthWriteEnableEXT;
        /*  505 */ PFN_vkCmdSetDepthCompareOpEXT CmdSetDepthCompareOpEXT;
        /*  506 */ PFN_vkCmdSetDepthBoundsTestEnableEXT CmdSetDepthBoundsTestEnableEXT;
        /*  507 */ PFN_vkCmdSetStencilTestEnableEXT CmdSetStencilTestEnableEXT;
        /*  508 */ PFN_vkCmdSetStencilOpEXT CmdSetStencilOpEXT;
        /*  509 */ PFN_vkCreateDeferredOperationKHR CreateDeferredOperationKHR;
        /*  510 */ PFN_vkDestroyDeferredOperationKHR DestroyDeferredOperationKHR;
        /*  511 */ PFN_vkGetDeferredOperationMaxConcurrencyKHR GetDeferredOperationMaxConcurrencyKHR;
        /*  512 */ PFN_vkGetDeferredOperationResultKHR GetDeferredOperationResultKHR;
        /*  513 */ PFN_vkDeferredOperationJoinKHR DeferredOperationJoinKHR;
        /*  514 */ PFN_vkGetPipelineExecutablePropertiesKHR GetPipelineExecutablePropertiesKHR;
        /*  515 */ PFN_vkGetPipelineExecutableStatisticsKHR GetPipelineExecutableStatisticsKHR;
        /*  516 */ PFN_vkGetPipelineExecutableInternalRepresentationsKHR GetPipelineExecutableInternalRepresentationsKHR;
        /*  517 */ PFN_vkCopyMemoryToImageEXT CopyMemoryToImageEXT;
        /*  518 */ PFN_vkCopyImageToMemoryEXT CopyImageToMemoryEXT;
        /*  519 */ PFN_vkCopyImageToImageEXT CopyImageToImageEXT;
        /*  520 */ PFN_vkTransitionImageLayoutEXT TransitionImageLayoutEXT;
        /*  521 */ PFN_vkGetImageSubresourceLayout2EXT GetImageSubresourceLayout2EXT;
        /*  522 */ PFN_vkMapMemory2KHR MapMemory2KHR;
        /*  523 */ PFN_vkUnmapMemory2KHR UnmapMemory2KHR;
        /*  524 */ PFN_vkReleaseSwapchainImagesEXT ReleaseSwapchainImagesEXT;
        /*  525 */ PFN_vkGetGeneratedCommandsMemoryRequirementsNV GetGeneratedCommandsMemoryRequirementsNV;
        /*  526 */ PFN_vkCmdPreprocessGeneratedCommandsNV CmdPreprocessGeneratedCommandsNV;
        /*  527 */ PFN_vkCmdExecuteGeneratedCommandsNV CmdExecuteGeneratedCommandsNV;
        /*  528 */ PFN_vkCmdBindPipelineShaderGroupNV CmdBindPipelineShaderGroupNV;
        /*  529 */ PFN_vkCreateIndirectCommandsLayoutNV CreateIndirectCommandsLayoutNV;
        /*  530 */ PFN_vkDestroyIndirectCommandsLayoutNV DestroyIndirectCommandsLayoutNV;
        /*  531 */ PFN_vkCmdSetDepthBias2EXT CmdSetDepthBias2EXT;
        /*  532 */ PFN_vkAcquireDrmDisplayEXT AcquireDrmDisplayEXT;
        /*  533 */ PFN_vkGetDrmDisplayEXT GetDrmDisplayEXT;
        /*  534 */ PFN_vkCreatePrivateDataSlotEXT CreatePrivateDataSlotEXT;
        /*  535 */ PFN_vkDestroyPrivateDataSlotEXT DestroyPrivateDataSlotEXT;
        /*  536 */ PFN_vkSetPrivateDataEXT SetPrivateDataEXT;
        /*  537 */ PFN_vkGetPrivateDataEXT GetPrivateDataEXT;
        /*  538 */ PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR;
        /*  539 */ PFN_vkGetEncodedVideoSessionParametersKHR GetEncodedVideoSessionParametersKHR;
        /*  540 */ PFN_vkCmdEncodeVideoKHR CmdEncodeVideoKHR;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
        /*  541 */ PFN_vkCreateCudaModuleNV CreateCudaModuleNV;
#else
        /*  541 */ void *paddingPfn541;
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
        /*  542 */ PFN_vkGetCudaModuleCacheNV GetCudaModuleCacheNV;
#else
        /*  542 */ void *paddingPfn542;
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
        /*  543 */ PFN_vkCreateCudaFunctionNV CreateCudaFunctionNV;
#else
        /*  543 */ void *paddingPfn543;
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
        /*  544 */ PFN_vkDestroyCudaModuleNV DestroyCudaModuleNV;
#else
        /*  544 */ void *paddingPfn544;
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
        /*  545 */ PFN_vkDestroyCudaFunctionNV DestroyCudaFunctionNV;
#else
        /*  545 */ void *paddingPfn545;
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
        /*  546 */ PFN_vkCmdCudaLaunchKernelNV CmdCudaLaunchKernelNV;
#else
        /*  546 */ void *paddingPfn546;
#endif
        /*  547 */ PFN_vkCmdDispatchTileQCOM CmdDispatchTileQCOM;
        /*  548 */ PFN_vkCmdBeginPerTileExecutionQCOM CmdBeginPerTileExecutionQCOM;
        /*  549 */ PFN_vkCmdEndPerTileExecutionQCOM CmdEndPerTileExecutionQCOM;
#if defined(VK_USE_PLATFORM_METAL_EXT)
        /*  550 */ PFN_vkExportMetalObjectsEXT ExportMetalObjectsEXT;
#else
        /*  550 */ void *paddingPfn550;
#endif
        /*  551 */ PFN_vkCmdSetEvent2KHR CmdSetEvent2KHR;
        /*  552 */ PFN_vkCmdResetEvent2KHR CmdResetEvent2KHR;
        /*  553 */ PFN_vkCmdWaitEvents2KHR CmdWaitEvents2KHR;
        /*  554 */ PFN_vkCmdPipelineBarrier2KHR CmdPipelineBarrier2KHR;
        /*  555 */ PFN_vkCmdWriteTimestamp2KHR CmdWriteTimestamp2KHR;
        /*  556 */ PFN_vkQueueSubmit2KHR QueueSubmit2KHR;
        /*  557 */ PFN_vkGetDescriptorSetLayoutSizeEXT GetDescriptorSetLayoutSizeEXT;
        /*  558 */ PFN_vkGetDescriptorSetLayoutBindingOffsetEXT GetDescriptorSetLayoutBindingOffsetEXT;
        /*  559 */ PFN_vkGetDescriptorEXT GetDescriptorEXT;
        /*  560 */ PFN_vkCmdBindDescriptorBuffersEXT CmdBindDescriptorBuffersEXT;
        /*  561 */ PFN_vkCmdSetDescriptorBufferOffsetsEXT CmdSetDescriptorBufferOffsetsEXT;
        /*  562 */ PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT CmdBindDescriptorBufferEmbeddedSamplersEXT;
        /*  563 */ PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT GetBufferOpaqueCaptureDescriptorDataEXT;
        /*  564 */ PFN_vkGetImageOpaqueCaptureDescriptorDataEXT GetImageOpaqueCaptureDescriptorDataEXT;
        /*  565 */ PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT GetImageViewOpaqueCaptureDescriptorDataEXT;
        /*  566 */ PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT GetSamplerOpaqueCaptureDescriptorDataEXT;
        /*  567 */ PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT GetAccelerationStructureOpaqueCaptureDescriptorDataEXT;
        /*  568 */ PFN_vkCmdSetFragmentShadingRateEnumNV CmdSetFragmentShadingRateEnumNV;
        /*  569 */ PFN_vkCmdDrawMeshTasksEXT CmdDrawMeshTasksEXT;
        /*  570 */ PFN_vkCmdDrawMeshTasksIndirectEXT CmdDrawMeshTasksIndirectEXT;
        /*  571 */ PFN_vkCmdDrawMeshTasksIndirectCountEXT CmdDrawMeshTasksIndirectCountEXT;
        /*  572 */ PFN_vkCmdCopyBuffer2KHR CmdCopyBuffer2KHR;
        /*  573 */ PFN_vkCmdCopyImage2KHR CmdCopyImage2KHR;
        /*  574 */ PFN_vkCmdCopyBufferToImage2KHR CmdCopyBufferToImage2KHR;
        /*  575 */ PFN_vkCmdCopyImageToBuffer2KHR CmdCopyImageToBuffer2KHR;
        /*  576 */ PFN_vkCmdBlitImage2KHR CmdBlitImage2KHR;
        /*  577 */ PFN_vkCmdResolveImage2KHR CmdResolveImage2KHR;
        /*  578 */ PFN_vkGetDeviceFaultInfoEXT GetDeviceFaultInfoEXT;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
        /*  579 */ PFN_vkAcquireWinrtDisplayNV AcquireWinrtDisplayNV;
#else
        /*  579 */ void *paddingPfn579;
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
        /*  580 */ PFN_vkGetWinrtDisplayNV GetWinrtDisplayNV;
#else
        /*  580 */ void *paddingPfn580;
#endif
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
        /*  581 */ PFN_vkCreateDirectFBSurfaceEXT CreateDirectFBSurfaceEXT;
#else
        /*  581 */ void *paddingPfn581;
#endif
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
        /*  582 */ PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT GetPhysicalDeviceDirectFBPresentationSupportEXT;
#else
        /*  582 */ void *paddingPfn582;
#endif
        /*  583 */ PFN_vkCmdSetVertexInputEXT CmdSetVertexInputEXT;
#if defined(VK_USE_PLATFORM_FUCHSIA)
        /*  584 */ PFN_vkGetMemoryZirconHandleFUCHSIA GetMemoryZirconHandleFUCHSIA;
#else
        /*  584 */ void *paddingPfn584;
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
        /*  585 */ PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA GetMemoryZirconHandlePropertiesFUCHSIA;
#else
        /*  585 */ void *paddingPfn585;
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
        /*  586 */ PFN_vkImportSemaphoreZirconHandleFUCHSIA ImportSemaphoreZirconHandleFUCHSIA;
#else
        /*  586 */ void *paddingPfn586;
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
        /*  587 */ PFN_vkGetSemaphoreZirconHandleFUCHSIA GetSemaphoreZirconHandleFUCHSIA;
#else
        /*  587 */ void *paddingPfn587;
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
        /*  588 */ PFN_vkCreateBufferCollectionFUCHSIA CreateBufferCollectionFUCHSIA;
#else
        /*  588 */ void *paddingPfn588;
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
        /*  589 */ PFN_vkSetBufferCollectionImageConstraintsFUCHSIA SetBufferCollectionImageConstraintsFUCHSIA;
#else
        /*  589 */ void *paddingPfn589;
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
        /*  590 */ PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA SetBufferCollectionBufferConstraintsFUCHSIA;
#else
        /*  590 */ void *paddingPfn590;
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
        /*  591 */ PFN_vkDestroyBufferCollectionFUCHSIA DestroyBufferCollectionFUCHSIA;
#else
        /*  591 */ void *paddingPfn591;
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
        /*  592 */ PFN_vkGetBufferCollectionPropertiesFUCHSIA GetBufferCollectionPropertiesFUCHSIA;
#else
        /*  592 */ void *paddingPfn592;
#endif
        /*  593 */ PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI GetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
        /*  594 */ PFN_vkCmdSubpassShadingHUAWEI CmdSubpassShadingHUAWEI;
        /*  595 */ PFN_vkCmdBindInvocationMaskHUAWEI CmdBindInvocationMaskHUAWEI;
        /*  596 */ PFN_vkGetMemoryRemoteAddressNV GetMemoryRemoteAddressNV;
        /*  597 */ PFN_vkGetPipelinePropertiesEXT GetPipelinePropertiesEXT;
        /*  598 */ PFN_vkCmdSetPatchControlPointsEXT CmdSetPatchControlPointsEXT;
        /*  599 */ PFN_vkCmdSetRasterizerDiscardEnableEXT CmdSetRasterizerDiscardEnableEXT;
        /*  600 */ PFN_vkCmdSetDepthBiasEnableEXT CmdSetDepthBiasEnableEXT;
        /*  601 */ PFN_vkCmdSetLogicOpEXT CmdSetLogicOpEXT;
        /*  602 */ PFN_vkCmdSetPrimitiveRestartEnableEXT CmdSetPrimitiveRestartEnableEXT;
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
        /*  603 */ PFN_vkCreateScreenSurfaceQNX CreateScreenSurfaceQNX;
#else
        /*  603 */ void *paddingPfn603;
#endif
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
        /*  604 */ PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX GetPhysicalDeviceScreenPresentationSupportQNX;
#else
        /*  604 */ void *paddingPfn604;
#endif
        /*  605 */ PFN_vkCmdSetColorWriteEnableEXT CmdSetColorWriteEnableEXT;
        /*  606 */ PFN_vkCmdTraceRaysIndirect2KHR CmdTraceRaysIndirect2KHR;
        /*  607 */ PFN_vkCmdDrawMultiEXT CmdDrawMultiEXT;
        /*  608 */ PFN_vkCmdDrawMultiIndexedEXT CmdDrawMultiIndexedEXT;
        /*  609 */ PFN_vkCreateMicromapEXT CreateMicromapEXT;
        /*  610 */ PFN_vkDestroyMicromapEXT DestroyMicromapEXT;
        /*  611 */ PFN_vkCmdBuildMicromapsEXT CmdBuildMicromapsEXT;
        /*  612 */ PFN_vkBuildMicromapsEXT BuildMicromapsEXT;
        /*  613 */ PFN_vkCopyMicromapEXT CopyMicromapEXT;
        /*  614 */ PFN_vkCopyMicromapToMemoryEXT CopyMicromapToMemoryEXT;
        /*  615 */ PFN_vkCopyMemoryToMicromapEXT CopyMemoryToMicromapEXT;
        /*  616 */ PFN_vkWriteMicromapsPropertiesEXT WriteMicromapsPropertiesEXT;
        /*  617 */ PFN_vkCmdCopyMicromapEXT CmdCopyMicromapEXT;
        /*  618 */ PFN_vkCmdCopyMicromapToMemoryEXT CmdCopyMicromapToMemoryEXT;
        /*  619 */ PFN_vkCmdCopyMemoryToMicromapEXT CmdCopyMemoryToMicromapEXT;
        /*  620 */ PFN_vkCmdWriteMicromapsPropertiesEXT CmdWriteMicromapsPropertiesEXT;
        /*  621 */ PFN_vkGetDeviceMicromapCompatibilityEXT GetDeviceMicromapCompatibilityEXT;
        /*  622 */ PFN_vkGetMicromapBuildSizesEXT GetMicromapBuildSizesEXT;
        /*  623 */ PFN_vkCmdDrawClusterHUAWEI CmdDrawClusterHUAWEI;
        /*  624 */ PFN_vkCmdDrawClusterIndirectHUAWEI CmdDrawClusterIndirectHUAWEI;
        /*  625 */ PFN_vkSetDeviceMemoryPriorityEXT SetDeviceMemoryPriorityEXT;
        /*  626 */ PFN_vkGetDeviceBufferMemoryRequirementsKHR GetDeviceBufferMemoryRequirementsKHR;
        /*  627 */ PFN_vkGetDeviceImageMemoryRequirementsKHR GetDeviceImageMemoryRequirementsKHR;
        /*  628 */ PFN_vkGetDeviceImageSparseMemoryRequirementsKHR GetDeviceImageSparseMemoryRequirementsKHR;
        /*  629 */ PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE GetDescriptorSetLayoutHostMappingInfoVALVE;
        /*  630 */ PFN_vkGetDescriptorSetHostMappingVALVE GetDescriptorSetHostMappingVALVE;
        /*  631 */ PFN_vkCmdCopyMemoryIndirectNV CmdCopyMemoryIndirectNV;
        /*  632 */ PFN_vkCmdCopyMemoryToImageIndirectNV CmdCopyMemoryToImageIndirectNV;
        /*  633 */ PFN_vkCmdDecompressMemoryNV CmdDecompressMemoryNV;
        /*  634 */ PFN_vkCmdDecompressMemoryIndirectCountNV CmdDecompressMemoryIndirectCountNV;
        /*  635 */ PFN_vkGetPipelineIndirectMemoryRequirementsNV GetPipelineIndirectMemoryRequirementsNV;
        /*  636 */ PFN_vkCmdUpdatePipelineIndirectBufferNV CmdUpdatePipelineIndirectBufferNV;
        /*  637 */ PFN_vkGetPipelineIndirectDeviceAddressNV GetPipelineIndirectDeviceAddressNV;
        /*  638 */ PFN_vkCmdSetDepthClampEnableEXT CmdSetDepthClampEnableEXT;
        /*  639 */ PFN_vkCmdSetPolygonModeEXT CmdSetPolygonModeEXT;
        /*  640 */ PFN_vkCmdSetRasterizationSamplesEXT CmdSetRasterizationSamplesEXT;
        /*  641 */ PFN_vkCmdSetSampleMaskEXT CmdSetSampleMaskEXT;
        /*  642 */ PFN_vkCmdSetAlphaToCoverageEnableEXT CmdSetAlphaToCoverageEnableEXT;
        /*  643 */ PFN_vkCmdSetAlphaToOneEnableEXT CmdSetAlphaToOneEnableEXT;
        /*  644 */ PFN_vkCmdSetLogicOpEnableEXT CmdSetLogicOpEnableEXT;
        /*  645 */ PFN_vkCmdSetColorBlendEnableEXT CmdSetColorBlendEnableEXT;
        /*  646 */ PFN_vkCmdSetColorBlendEquationEXT CmdSetColorBlendEquationEXT;
        /*  647 */ PFN_vkCmdSetColorWriteMaskEXT CmdSetColorWriteMaskEXT;
        /*  648 */ PFN_vkCmdSetTessellationDomainOriginEXT CmdSetTessellationDomainOriginEXT;
        /*  649 */ PFN_vkCmdSetRasterizationStreamEXT CmdSetRasterizationStreamEXT;
        /*  650 */ PFN_vkCmdSetConservativeRasterizationModeEXT CmdSetConservativeRasterizationModeEXT;
        /*  651 */ PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT CmdSetExtraPrimitiveOverestimationSizeEXT;
        /*  652 */ PFN_vkCmdSetDepthClipEnableEXT CmdSetDepthClipEnableEXT;
        /*  653 */ PFN_vkCmdSetSampleLocationsEnableEXT CmdSetSampleLocationsEnableEXT;
        /*  654 */ PFN_vkCmdSetColorBlendAdvancedEXT CmdSetColorBlendAdvancedEXT;
        /*  655 */ PFN_vkCmdSetProvokingVertexModeEXT CmdSetProvokingVertexModeEXT;
        /*  656 */ PFN_vkCmdSetLineRasterizationModeEXT CmdSetLineRasterizationModeEXT;
        /*  657 */ PFN_vkCmdSetLineStippleEnableEXT CmdSetLineStippleEnableEXT;
        /*  658 */ PFN_vkCmdSetDepthClipNegativeOneToOneEXT CmdSetDepthClipNegativeOneToOneEXT;
        /*  659 */ PFN_vkCmdSetViewportWScalingEnableNV CmdSetViewportWScalingEnableNV;
        /*  660 */ PFN_vkCmdSetViewportSwizzleNV CmdSetViewportSwizzleNV;
        /*  661 */ PFN_vkCmdSetCoverageToColorEnableNV CmdSetCoverageToColorEnableNV;
        /*  662 */ PFN_vkCmdSetCoverageToColorLocationNV CmdSetCoverageToColorLocationNV;
        /*  663 */ PFN_vkCmdSetCoverageModulationModeNV CmdSetCoverageModulationModeNV;
        /*  664 */ PFN_vkCmdSetCoverageModulationTableEnableNV CmdSetCoverageModulationTableEnableNV;
        /*  665 */ PFN_vkCmdSetCoverageModulationTableNV CmdSetCoverageModulationTableNV;
        /*  666 */ PFN_vkCmdSetShadingRateImageEnableNV CmdSetShadingRateImageEnableNV;
        /*  667 */ PFN_vkCmdSetRepresentativeFragmentTestEnableNV CmdSetRepresentativeFragmentTestEnableNV;
        /*  668 */ PFN_vkCmdSetCoverageReductionModeNV CmdSetCoverageReductionModeNV;
        /*  669 */ PFN_vkCreateTensorARM CreateTensorARM;
        /*  670 */ PFN_vkDestroyTensorARM DestroyTensorARM;
        /*  671 */ PFN_vkCreateTensorViewARM CreateTensorViewARM;
        /*  672 */ PFN_vkDestroyTensorViewARM DestroyTensorViewARM;
        /*  673 */ PFN_vkGetTensorMemoryRequirementsARM GetTensorMemoryRequirementsARM;
        /*  674 */ PFN_vkBindTensorMemoryARM BindTensorMemoryARM;
        /*  675 */ PFN_vkGetDeviceTensorMemoryRequirementsARM GetDeviceTensorMemoryRequirementsARM;
        /*  676 */ PFN_vkCmdCopyTensorARM CmdCopyTensorARM;
        /*  677 */ PFN_vkGetPhysicalDeviceExternalTensorPropertiesARM GetPhysicalDeviceExternalTensorPropertiesARM;
        /*  678 */ PFN_vkGetTensorOpaqueCaptureDescriptorDataARM GetTensorOpaqueCaptureDescriptorDataARM;
        /*  679 */ PFN_vkGetTensorViewOpaqueCaptureDescriptorDataARM GetTensorViewOpaqueCaptureDescriptorDataARM;
        /*  680 */ PFN_vkGetShaderModuleIdentifierEXT GetShaderModuleIdentifierEXT;
        /*  681 */ PFN_vkGetShaderModuleCreateInfoIdentifierEXT GetShaderModuleCreateInfoIdentifierEXT;
        /*  682 */ PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV GetPhysicalDeviceOpticalFlowImageFormatsNV;
        /*  683 */ PFN_vkCreateOpticalFlowSessionNV CreateOpticalFlowSessionNV;
        /*  684 */ PFN_vkDestroyOpticalFlowSessionNV DestroyOpticalFlowSessionNV;
        /*  685 */ PFN_vkBindOpticalFlowSessionImageNV BindOpticalFlowSessionImageNV;
        /*  686 */ PFN_vkCmdOpticalFlowExecuteNV CmdOpticalFlowExecuteNV;
        /*  687 */ PFN_vkCmdBindIndexBuffer2KHR CmdBindIndexBuffer2KHR;
        /*  688 */ PFN_vkGetRenderingAreaGranularityKHR GetRenderingAreaGranularityKHR;
        /*  689 */ PFN_vkGetDeviceImageSubresourceLayoutKHR GetDeviceImageSubresourceLayoutKHR;
        /*  690 */ PFN_vkGetImageSubresourceLayout2KHR GetImageSubresourceLayout2KHR;
        /*  691 */ PFN_vkAntiLagUpdateAMD AntiLagUpdateAMD;
        /*  692 */ PFN_vkWaitForPresent2KHR WaitForPresent2KHR;
        /*  693 */ PFN_vkCreateShadersEXT CreateShadersEXT;
        /*  694 */ PFN_vkDestroyShaderEXT DestroyShaderEXT;
        /*  695 */ PFN_vkGetShaderBinaryDataEXT GetShaderBinaryDataEXT;
        /*  696 */ PFN_vkCmdBindShadersEXT CmdBindShadersEXT;
        /*  697 */ PFN_vkCmdSetDepthClampRangeEXT CmdSetDepthClampRangeEXT;
        /*  698 */ PFN_vkCreatePipelineBinariesKHR CreatePipelineBinariesKHR;
        /*  699 */ PFN_vkDestroyPipelineBinaryKHR DestroyPipelineBinaryKHR;
        /*  700 */ PFN_vkGetPipelineKeyKHR GetPipelineKeyKHR;
        /*  701 */ PFN_vkGetPipelineBinaryDataKHR GetPipelineBinaryDataKHR;
        /*  702 */ PFN_vkReleaseCapturedPipelineDataKHR ReleaseCapturedPipelineDataKHR;
        /*  703 */ PFN_vkGetFramebufferTilePropertiesQCOM GetFramebufferTilePropertiesQCOM;
        /*  704 */ PFN_vkGetDynamicRenderingTilePropertiesQCOM GetDynamicRenderingTilePropertiesQCOM;
        /*  705 */ PFN_vkReleaseSwapchainImagesKHR ReleaseSwapchainImagesKHR;
        /*  706 */ PFN_vkGetPhysicalDeviceCooperativeVectorPropertiesNV GetPhysicalDeviceCooperativeVectorPropertiesNV;
        /*  707 */ PFN_vkConvertCooperativeVectorMatrixNV ConvertCooperativeVectorMatrixNV;
        /*  708 */ PFN_vkCmdConvertCooperativeVectorMatrixNV CmdConvertCooperativeVectorMatrixNV;
        /*  709 */ PFN_vkSetLatencySleepModeNV SetLatencySleepModeNV;
        /*  710 */ PFN_vkLatencySleepNV LatencySleepNV;
        /*  711 */ PFN_vkSetLatencyMarkerNV SetLatencyMarkerNV;
        /*  712 */ PFN_vkGetLatencyTimingsNV GetLatencyTimingsNV;
        /*  713 */ PFN_vkQueueNotifyOutOfBandNV QueueNotifyOutOfBandNV;
        /*  714 */ PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR GetPhysicalDeviceCooperativeMatrixPropertiesKHR;
        /*  715 */ PFN_vkCreateDataGraphPipelinesARM CreateDataGraphPipelinesARM;
        /*  716 */ PFN_vkCreateDataGraphPipelineSessionARM CreateDataGraphPipelineSessionARM;
        /*  717 */ PFN_vkGetDataGraphPipelineSessionBindPointRequirementsARM GetDataGraphPipelineSessionBindPointRequirementsARM;
        /*  718 */ PFN_vkGetDataGraphPipelineSessionMemoryRequirementsARM GetDataGraphPipelineSessionMemoryRequirementsARM;
        /*  719 */ PFN_vkBindDataGraphPipelineSessionMemoryARM BindDataGraphPipelineSessionMemoryARM;
        /*  720 */ PFN_vkDestroyDataGraphPipelineSessionARM DestroyDataGraphPipelineSessionARM;
        /*  721 */ PFN_vkCmdDispatchDataGraphARM CmdDispatchDataGraphARM;
        /*  722 */ PFN_vkGetDataGraphPipelineAvailablePropertiesARM GetDataGraphPipelineAvailablePropertiesARM;
        /*  723 */ PFN_vkGetDataGraphPipelinePropertiesARM GetDataGraphPipelinePropertiesARM;
        /*  724 */ PFN_vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM GetPhysicalDeviceQueueFamilyDataGraphPropertiesARM;
        /*  725 */ PFN_vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM GetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM;
        /*  726 */ PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT CmdSetAttachmentFeedbackLoopEnableEXT;
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
        /*  727 */ PFN_vkGetScreenBufferPropertiesQNX GetScreenBufferPropertiesQNX;
#else
        /*  727 */ void *paddingPfn727;
#endif
        /*  728 */ PFN_vkCmdSetLineStippleKHR CmdSetLineStippleKHR;
        /*  729 */ PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR GetPhysicalDeviceCalibrateableTimeDomainsKHR;
        /*  730 */ PFN_vkGetCalibratedTimestampsKHR GetCalibratedTimestampsKHR;
        /*  731 */ PFN_vkCmdBindDescriptorSets2KHR CmdBindDescriptorSets2KHR;
        /*  732 */ PFN_vkCmdPushConstants2KHR CmdPushConstants2KHR;
        /*  733 */ PFN_vkCmdPushDescriptorSet2KHR CmdPushDescriptorSet2KHR;
        /*  734 */ PFN_vkCmdPushDescriptorSetWithTemplate2KHR CmdPushDescriptorSetWithTemplate2KHR;
        /*  735 */ PFN_vkCmdSetDescriptorBufferOffsets2EXT CmdSetDescriptorBufferOffsets2EXT;
        /*  736 */ PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT CmdBindDescriptorBufferEmbeddedSamplers2EXT;
        /*  737 */ PFN_vkCmdBindTileMemoryQCOM CmdBindTileMemoryQCOM;
        /*  738 */ PFN_vkCmdCopyMemoryIndirectKHR CmdCopyMemoryIndirectKHR;
        /*  739 */ PFN_vkCmdCopyMemoryToImageIndirectKHR CmdCopyMemoryToImageIndirectKHR;
        /*  740 */ PFN_vkCreateExternalComputeQueueNV CreateExternalComputeQueueNV;
        /*  741 */ PFN_vkDestroyExternalComputeQueueNV DestroyExternalComputeQueueNV;
        /*  742 */ PFN_vkGetExternalComputeQueueDataNV GetExternalComputeQueueDataNV;
        /*  743 */ PFN_vkGetClusterAccelerationStructureBuildSizesNV GetClusterAccelerationStructureBuildSizesNV;
        /*  744 */ PFN_vkCmdBuildClusterAccelerationStructureIndirectNV CmdBuildClusterAccelerationStructureIndirectNV;
        /*  745 */ PFN_vkGetPartitionedAccelerationStructuresBuildSizesNV GetPartitionedAccelerationStructuresBuildSizesNV;
        /*  746 */ PFN_vkCmdBuildPartitionedAccelerationStructuresNV CmdBuildPartitionedAccelerationStructuresNV;
        /*  747 */ PFN_vkGetGeneratedCommandsMemoryRequirementsEXT GetGeneratedCommandsMemoryRequirementsEXT;
        /*  748 */ PFN_vkCmdPreprocessGeneratedCommandsEXT CmdPreprocessGeneratedCommandsEXT;
        /*  749 */ PFN_vkCmdExecuteGeneratedCommandsEXT CmdExecuteGeneratedCommandsEXT;
        /*  750 */ PFN_vkCreateIndirectCommandsLayoutEXT CreateIndirectCommandsLayoutEXT;
        /*  751 */ PFN_vkDestroyIndirectCommandsLayoutEXT DestroyIndirectCommandsLayoutEXT;
        /*  752 */ PFN_vkCreateIndirectExecutionSetEXT CreateIndirectExecutionSetEXT;
        /*  753 */ PFN_vkDestroyIndirectExecutionSetEXT DestroyIndirectExecutionSetEXT;
        /*  754 */ PFN_vkUpdateIndirectExecutionSetPipelineEXT UpdateIndirectExecutionSetPipelineEXT;
        /*  755 */ PFN_vkUpdateIndirectExecutionSetShaderEXT UpdateIndirectExecutionSetShaderEXT;
#if defined(VK_USE_PLATFORM_OHOS)
        /*  756 */ PFN_vkCreateSurfaceOHOS CreateSurfaceOHOS;
#else
        /*  756 */ void *paddingPfn756;
#endif
        /*  757 */ PFN_vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV;
#if defined(VK_USE_PLATFORM_METAL_EXT)
        /*  758 */ PFN_vkGetMemoryMetalHandleEXT GetMemoryMetalHandleEXT;
#else
        /*  758 */ void *paddingPfn758;
#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
        /*  759 */ PFN_vkGetMemoryMetalHandlePropertiesEXT GetMemoryMetalHandlePropertiesEXT;
#else
        /*  759 */ void *paddingPfn759;
#endif
        /*  760 */ PFN_vkCmdEndRendering2EXT CmdEndRendering2EXT;
        };
    };

    void* glad_loader_handle;
    uint32_t glad_vk_instance_version;
    uint32_t glad_vk_device_version;
    int glad_found_instance_exts;
    int glad_found_device_exts;
} GladVulkanContext;

GLAD_API_CALL GladVulkanContext glad_vulkan_context;

#define GLAD_VK_VERSION_1_0 (glad_vulkan_context.VERSION_1_0)
#define GLAD_VK_VERSION_1_1 (glad_vulkan_context.VERSION_1_1)
#define GLAD_VK_VERSION_1_2 (glad_vulkan_context.VERSION_1_2)
#define GLAD_VK_VERSION_1_3 (glad_vulkan_context.VERSION_1_3)
#define GLAD_VK_VERSION_1_4 (glad_vulkan_context.VERSION_1_4)
#define GLAD_VK_AMDX_dense_geometry_format (glad_vulkan_context.AMDX_dense_geometry_format)
#define GLAD_VK_AMDX_shader_enqueue (glad_vulkan_context.AMDX_shader_enqueue)
#define GLAD_VK_AMD_anti_lag (glad_vulkan_context.AMD_anti_lag)
#define GLAD_VK_AMD_buffer_marker (glad_vulkan_context.AMD_buffer_marker)
#define GLAD_VK_AMD_device_coherent_memory (glad_vulkan_context.AMD_device_coherent_memory)
#define GLAD_VK_AMD_display_native_hdr (glad_vulkan_context.AMD_display_native_hdr)
#define GLAD_VK_AMD_draw_indirect_count (glad_vulkan_context.AMD_draw_indirect_count)
#define GLAD_VK_AMD_gcn_shader (glad_vulkan_context.AMD_gcn_shader)
#define GLAD_VK_AMD_gpu_shader_half_float (glad_vulkan_context.AMD_gpu_shader_half_float)
#define GLAD_VK_AMD_gpu_shader_int16 (glad_vulkan_context.AMD_gpu_shader_int16)
#define GLAD_VK_AMD_memory_overallocation_behavior (glad_vulkan_context.AMD_memory_overallocation_behavior)
#define GLAD_VK_AMD_mixed_attachment_samples (glad_vulkan_context.AMD_mixed_attachment_samples)
#define GLAD_VK_AMD_negative_viewport_height (glad_vulkan_context.AMD_negative_viewport_height)
#define GLAD_VK_AMD_pipeline_compiler_control (glad_vulkan_context.AMD_pipeline_compiler_control)
#define GLAD_VK_AMD_rasterization_order (glad_vulkan_context.AMD_rasterization_order)
#define GLAD_VK_AMD_shader_ballot (glad_vulkan_context.AMD_shader_ballot)
#define GLAD_VK_AMD_shader_core_properties (glad_vulkan_context.AMD_shader_core_properties)
#define GLAD_VK_AMD_shader_core_properties2 (glad_vulkan_context.AMD_shader_core_properties2)
#define GLAD_VK_AMD_shader_early_and_late_fragment_tests (glad_vulkan_context.AMD_shader_early_and_late_fragment_tests)
#define GLAD_VK_AMD_shader_explicit_vertex_parameter (glad_vulkan_context.AMD_shader_explicit_vertex_parameter)
#define GLAD_VK_AMD_shader_fragment_mask (glad_vulkan_context.AMD_shader_fragment_mask)
#define GLAD_VK_AMD_shader_image_load_store_lod (glad_vulkan_context.AMD_shader_image_load_store_lod)
#define GLAD_VK_AMD_shader_info (glad_vulkan_context.AMD_shader_info)
#define GLAD_VK_AMD_shader_trinary_minmax (glad_vulkan_context.AMD_shader_trinary_minmax)
#define GLAD_VK_AMD_texture_gather_bias_lod (glad_vulkan_context.AMD_texture_gather_bias_lod)
#define GLAD_VK_ANDROID_external_format_resolve (glad_vulkan_context.ANDROID_external_format_resolve)
#define GLAD_VK_ANDROID_external_memory_android_hardware_buffer (glad_vulkan_context.ANDROID_external_memory_android_hardware_buffer)
#define GLAD_VK_ARM_data_graph (glad_vulkan_context.ARM_data_graph)
#define GLAD_VK_ARM_format_pack (glad_vulkan_context.ARM_format_pack)
#define GLAD_VK_ARM_pipeline_opacity_micromap (glad_vulkan_context.ARM_pipeline_opacity_micromap)
#define GLAD_VK_ARM_rasterization_order_attachment_access (glad_vulkan_context.ARM_rasterization_order_attachment_access)
#define GLAD_VK_ARM_render_pass_striped (glad_vulkan_context.ARM_render_pass_striped)
#define GLAD_VK_ARM_scheduling_controls (glad_vulkan_context.ARM_scheduling_controls)
#define GLAD_VK_ARM_shader_core_builtins (glad_vulkan_context.ARM_shader_core_builtins)
#define GLAD_VK_ARM_shader_core_properties (glad_vulkan_context.ARM_shader_core_properties)
#define GLAD_VK_ARM_tensors (glad_vulkan_context.ARM_tensors)
#define GLAD_VK_EXT_4444_formats (glad_vulkan_context.EXT_4444_formats)
#define GLAD_VK_EXT_acquire_drm_display (glad_vulkan_context.EXT_acquire_drm_display)
#define GLAD_VK_EXT_acquire_xlib_display (glad_vulkan_context.EXT_acquire_xlib_display)
#define GLAD_VK_EXT_astc_decode_mode (glad_vulkan_context.EXT_astc_decode_mode)
#define GLAD_VK_EXT_attachment_feedback_loop_dynamic_state (glad_vulkan_context.EXT_attachment_feedback_loop_dynamic_state)
#define GLAD_VK_EXT_attachment_feedback_loop_layout (glad_vulkan_context.EXT_attachment_feedback_loop_layout)
#define GLAD_VK_EXT_blend_operation_advanced (glad_vulkan_context.EXT_blend_operation_advanced)
#define GLAD_VK_EXT_border_color_swizzle (glad_vulkan_context.EXT_border_color_swizzle)
#define GLAD_VK_EXT_buffer_device_address (glad_vulkan_context.EXT_buffer_device_address)
#define GLAD_VK_EXT_calibrated_timestamps (glad_vulkan_context.EXT_calibrated_timestamps)
#define GLAD_VK_EXT_color_write_enable (glad_vulkan_context.EXT_color_write_enable)
#define GLAD_VK_EXT_conditional_rendering (glad_vulkan_context.EXT_conditional_rendering)
#define GLAD_VK_EXT_conservative_rasterization (glad_vulkan_context.EXT_conservative_rasterization)
#define GLAD_VK_EXT_custom_border_color (glad_vulkan_context.EXT_custom_border_color)
#define GLAD_VK_EXT_debug_marker (glad_vulkan_context.EXT_debug_marker)
#define GLAD_VK_EXT_debug_report (glad_vulkan_context.EXT_debug_report)
#define GLAD_VK_EXT_debug_utils (glad_vulkan_context.EXT_debug_utils)
#define GLAD_VK_EXT_depth_bias_control (glad_vulkan_context.EXT_depth_bias_control)
#define GLAD_VK_EXT_depth_clamp_control (glad_vulkan_context.EXT_depth_clamp_control)
#define GLAD_VK_EXT_depth_clamp_zero_one (glad_vulkan_context.EXT_depth_clamp_zero_one)
#define GLAD_VK_EXT_depth_clip_control (glad_vulkan_context.EXT_depth_clip_control)
#define GLAD_VK_EXT_depth_clip_enable (glad_vulkan_context.EXT_depth_clip_enable)
#define GLAD_VK_EXT_depth_range_unrestricted (glad_vulkan_context.EXT_depth_range_unrestricted)
#define GLAD_VK_EXT_descriptor_buffer (glad_vulkan_context.EXT_descriptor_buffer)
#define GLAD_VK_EXT_descriptor_indexing (glad_vulkan_context.EXT_descriptor_indexing)
#define GLAD_VK_EXT_device_address_binding_report (glad_vulkan_context.EXT_device_address_binding_report)
#define GLAD_VK_EXT_device_fault (glad_vulkan_context.EXT_device_fault)
#define GLAD_VK_EXT_device_generated_commands (glad_vulkan_context.EXT_device_generated_commands)
#define GLAD_VK_EXT_device_memory_report (glad_vulkan_context.EXT_device_memory_report)
#define GLAD_VK_EXT_direct_mode_display (glad_vulkan_context.EXT_direct_mode_display)
#define GLAD_VK_EXT_directfb_surface (glad_vulkan_context.EXT_directfb_surface)
#define GLAD_VK_EXT_discard_rectangles (glad_vulkan_context.EXT_discard_rectangles)
#define GLAD_VK_EXT_display_control (glad_vulkan_context.EXT_display_control)
#define GLAD_VK_EXT_display_surface_counter (glad_vulkan_context.EXT_display_surface_counter)
#define GLAD_VK_EXT_dynamic_rendering_unused_attachments (glad_vulkan_context.EXT_dynamic_rendering_unused_attachments)
#define GLAD_VK_EXT_extended_dynamic_state (glad_vulkan_context.EXT_extended_dynamic_state)
#define GLAD_VK_EXT_extended_dynamic_state2 (glad_vulkan_context.EXT_extended_dynamic_state2)
#define GLAD_VK_EXT_extended_dynamic_state3 (glad_vulkan_context.EXT_extended_dynamic_state3)
#define GLAD_VK_EXT_external_memory_acquire_unmodified (glad_vulkan_context.EXT_external_memory_acquire_unmodified)
#define GLAD_VK_EXT_external_memory_dma_buf (glad_vulkan_context.EXT_external_memory_dma_buf)
#define GLAD_VK_EXT_external_memory_host (glad_vulkan_context.EXT_external_memory_host)
#define GLAD_VK_EXT_external_memory_metal (glad_vulkan_context.EXT_external_memory_metal)
#define GLAD_VK_EXT_filter_cubic (glad_vulkan_context.EXT_filter_cubic)
#define GLAD_VK_EXT_fragment_density_map (glad_vulkan_context.EXT_fragment_density_map)
#define GLAD_VK_EXT_fragment_density_map2 (glad_vulkan_context.EXT_fragment_density_map2)
#define GLAD_VK_EXT_fragment_density_map_offset (glad_vulkan_context.EXT_fragment_density_map_offset)
#define GLAD_VK_EXT_fragment_shader_interlock (glad_vulkan_context.EXT_fragment_shader_interlock)
#define GLAD_VK_EXT_frame_boundary (glad_vulkan_context.EXT_frame_boundary)
#define GLAD_VK_EXT_full_screen_exclusive (glad_vulkan_context.EXT_full_screen_exclusive)
#define GLAD_VK_EXT_global_priority (glad_vulkan_context.EXT_global_priority)
#define GLAD_VK_EXT_global_priority_query (glad_vulkan_context.EXT_global_priority_query)
#define GLAD_VK_EXT_graphics_pipeline_library (glad_vulkan_context.EXT_graphics_pipeline_library)
#define GLAD_VK_EXT_hdr_metadata (glad_vulkan_context.EXT_hdr_metadata)
#define GLAD_VK_EXT_headless_surface (glad_vulkan_context.EXT_headless_surface)
#define GLAD_VK_EXT_host_image_copy (glad_vulkan_context.EXT_host_image_copy)
#define GLAD_VK_EXT_host_query_reset (glad_vulkan_context.EXT_host_query_reset)
#define GLAD_VK_EXT_image_2d_view_of_3d (glad_vulkan_context.EXT_image_2d_view_of_3d)
#define GLAD_VK_EXT_image_compression_control (glad_vulkan_context.EXT_image_compression_control)
#define GLAD_VK_EXT_image_compression_control_swapchain (glad_vulkan_context.EXT_image_compression_control_swapchain)
#define GLAD_VK_EXT_image_drm_format_modifier (glad_vulkan_context.EXT_image_drm_format_modifier)
#define GLAD_VK_EXT_image_robustness (glad_vulkan_context.EXT_image_robustness)
#define GLAD_VK_EXT_image_sliced_view_of_3d (glad_vulkan_context.EXT_image_sliced_view_of_3d)
#define GLAD_VK_EXT_image_view_min_lod (glad_vulkan_context.EXT_image_view_min_lod)
#define GLAD_VK_EXT_index_type_uint8 (glad_vulkan_context.EXT_index_type_uint8)
#define GLAD_VK_EXT_inline_uniform_block (glad_vulkan_context.EXT_inline_uniform_block)
#define GLAD_VK_EXT_layer_settings (glad_vulkan_context.EXT_layer_settings)
#define GLAD_VK_EXT_legacy_dithering (glad_vulkan_context.EXT_legacy_dithering)
#define GLAD_VK_EXT_legacy_vertex_attributes (glad_vulkan_context.EXT_legacy_vertex_attributes)
#define GLAD_VK_EXT_line_rasterization (glad_vulkan_context.EXT_line_rasterization)
#define GLAD_VK_EXT_load_store_op_none (glad_vulkan_context.EXT_load_store_op_none)
#define GLAD_VK_EXT_map_memory_placed (glad_vulkan_context.EXT_map_memory_placed)
#define GLAD_VK_EXT_memory_budget (glad_vulkan_context.EXT_memory_budget)
#define GLAD_VK_EXT_memory_priority (glad_vulkan_context.EXT_memory_priority)
#define GLAD_VK_EXT_mesh_shader (glad_vulkan_context.EXT_mesh_shader)
#define GLAD_VK_EXT_metal_objects (glad_vulkan_context.EXT_metal_objects)
#define GLAD_VK_EXT_metal_surface (glad_vulkan_context.EXT_metal_surface)
#define GLAD_VK_EXT_multi_draw (glad_vulkan_context.EXT_multi_draw)
#define GLAD_VK_EXT_multisampled_render_to_single_sampled (glad_vulkan_context.EXT_multisampled_render_to_single_sampled)
#define GLAD_VK_EXT_mutable_descriptor_type (glad_vulkan_context.EXT_mutable_descriptor_type)
#define GLAD_VK_EXT_nested_command_buffer (glad_vulkan_context.EXT_nested_command_buffer)
#define GLAD_VK_EXT_non_seamless_cube_map (glad_vulkan_context.EXT_non_seamless_cube_map)
#define GLAD_VK_EXT_opacity_micromap (glad_vulkan_context.EXT_opacity_micromap)
#define GLAD_VK_EXT_pageable_device_local_memory (glad_vulkan_context.EXT_pageable_device_local_memory)
#define GLAD_VK_EXT_pci_bus_info (glad_vulkan_context.EXT_pci_bus_info)
#define GLAD_VK_EXT_physical_device_drm (glad_vulkan_context.EXT_physical_device_drm)
#define GLAD_VK_EXT_pipeline_creation_cache_control (glad_vulkan_context.EXT_pipeline_creation_cache_control)
#define GLAD_VK_EXT_pipeline_creation_feedback (glad_vulkan_context.EXT_pipeline_creation_feedback)
#define GLAD_VK_EXT_pipeline_library_group_handles (glad_vulkan_context.EXT_pipeline_library_group_handles)
#define GLAD_VK_EXT_pipeline_properties (glad_vulkan_context.EXT_pipeline_properties)
#define GLAD_VK_EXT_pipeline_protected_access (glad_vulkan_context.EXT_pipeline_protected_access)
#define GLAD_VK_EXT_pipeline_robustness (glad_vulkan_context.EXT_pipeline_robustness)
#define GLAD_VK_EXT_post_depth_coverage (glad_vulkan_context.EXT_post_depth_coverage)
#define GLAD_VK_EXT_present_mode_fifo_latest_ready (glad_vulkan_context.EXT_present_mode_fifo_latest_ready)
#define GLAD_VK_EXT_primitive_topology_list_restart (glad_vulkan_context.EXT_primitive_topology_list_restart)
#define GLAD_VK_EXT_primitives_generated_query (glad_vulkan_context.EXT_primitives_generated_query)
#define GLAD_VK_EXT_private_data (glad_vulkan_context.EXT_private_data)
#define GLAD_VK_EXT_provoking_vertex (glad_vulkan_context.EXT_provoking_vertex)
#define GLAD_VK_EXT_queue_family_foreign (glad_vulkan_context.EXT_queue_family_foreign)
#define GLAD_VK_EXT_rasterization_order_attachment_access (glad_vulkan_context.EXT_rasterization_order_attachment_access)
#define GLAD_VK_EXT_rgba10x6_formats (glad_vulkan_context.EXT_rgba10x6_formats)
#define GLAD_VK_EXT_robustness2 (glad_vulkan_context.EXT_robustness2)
#define GLAD_VK_EXT_sample_locations (glad_vulkan_context.EXT_sample_locations)
#define GLAD_VK_EXT_sampler_filter_minmax (glad_vulkan_context.EXT_sampler_filter_minmax)
#define GLAD_VK_EXT_scalar_block_layout (glad_vulkan_context.EXT_scalar_block_layout)
#define GLAD_VK_EXT_separate_stencil_usage (glad_vulkan_context.EXT_separate_stencil_usage)
#define GLAD_VK_EXT_shader_atomic_float (glad_vulkan_context.EXT_shader_atomic_float)
#define GLAD_VK_EXT_shader_atomic_float2 (glad_vulkan_context.EXT_shader_atomic_float2)
#define GLAD_VK_EXT_shader_demote_to_helper_invocation (glad_vulkan_context.EXT_shader_demote_to_helper_invocation)
#define GLAD_VK_EXT_shader_float8 (glad_vulkan_context.EXT_shader_float8)
#define GLAD_VK_EXT_shader_image_atomic_int64 (glad_vulkan_context.EXT_shader_image_atomic_int64)
#define GLAD_VK_EXT_shader_module_identifier (glad_vulkan_context.EXT_shader_module_identifier)
#define GLAD_VK_EXT_shader_object (glad_vulkan_context.EXT_shader_object)
#define GLAD_VK_EXT_shader_replicated_composites (glad_vulkan_context.EXT_shader_replicated_composites)
#define GLAD_VK_EXT_shader_stencil_export (glad_vulkan_context.EXT_shader_stencil_export)
#define GLAD_VK_EXT_shader_subgroup_ballot (glad_vulkan_context.EXT_shader_subgroup_ballot)
#define GLAD_VK_EXT_shader_subgroup_vote (glad_vulkan_context.EXT_shader_subgroup_vote)
#define GLAD_VK_EXT_shader_tile_image (glad_vulkan_context.EXT_shader_tile_image)
#define GLAD_VK_EXT_shader_viewport_index_layer (glad_vulkan_context.EXT_shader_viewport_index_layer)
#define GLAD_VK_EXT_subgroup_size_control (glad_vulkan_context.EXT_subgroup_size_control)
#define GLAD_VK_EXT_subpass_merge_feedback (glad_vulkan_context.EXT_subpass_merge_feedback)
#define GLAD_VK_EXT_surface_maintenance1 (glad_vulkan_context.EXT_surface_maintenance1)
#define GLAD_VK_EXT_swapchain_colorspace (glad_vulkan_context.EXT_swapchain_colorspace)
#define GLAD_VK_EXT_swapchain_maintenance1 (glad_vulkan_context.EXT_swapchain_maintenance1)
#define GLAD_VK_EXT_texel_buffer_alignment (glad_vulkan_context.EXT_texel_buffer_alignment)
#define GLAD_VK_EXT_texture_compression_astc_hdr (glad_vulkan_context.EXT_texture_compression_astc_hdr)
#define GLAD_VK_EXT_tooling_info (glad_vulkan_context.EXT_tooling_info)
#define GLAD_VK_EXT_transform_feedback (glad_vulkan_context.EXT_transform_feedback)
#define GLAD_VK_EXT_validation_cache (glad_vulkan_context.EXT_validation_cache)
#define GLAD_VK_EXT_validation_features (glad_vulkan_context.EXT_validation_features)
#define GLAD_VK_EXT_validation_flags (glad_vulkan_context.EXT_validation_flags)
#define GLAD_VK_EXT_vertex_attribute_divisor (glad_vulkan_context.EXT_vertex_attribute_divisor)
#define GLAD_VK_EXT_vertex_attribute_robustness (glad_vulkan_context.EXT_vertex_attribute_robustness)
#define GLAD_VK_EXT_vertex_input_dynamic_state (glad_vulkan_context.EXT_vertex_input_dynamic_state)
#define GLAD_VK_EXT_ycbcr_2plane_444_formats (glad_vulkan_context.EXT_ycbcr_2plane_444_formats)
#define GLAD_VK_EXT_ycbcr_image_arrays (glad_vulkan_context.EXT_ycbcr_image_arrays)
#define GLAD_VK_EXT_zero_initialize_device_memory (glad_vulkan_context.EXT_zero_initialize_device_memory)
#define GLAD_VK_FUCHSIA_buffer_collection (glad_vulkan_context.FUCHSIA_buffer_collection)
#define GLAD_VK_FUCHSIA_external_memory (glad_vulkan_context.FUCHSIA_external_memory)
#define GLAD_VK_FUCHSIA_external_semaphore (glad_vulkan_context.FUCHSIA_external_semaphore)
#define GLAD_VK_FUCHSIA_imagepipe_surface (glad_vulkan_context.FUCHSIA_imagepipe_surface)
#define GLAD_VK_GGP_frame_token (glad_vulkan_context.GGP_frame_token)
#define GLAD_VK_GGP_stream_descriptor_surface (glad_vulkan_context.GGP_stream_descriptor_surface)
#define GLAD_VK_GOOGLE_decorate_string (glad_vulkan_context.GOOGLE_decorate_string)
#define GLAD_VK_GOOGLE_display_timing (glad_vulkan_context.GOOGLE_display_timing)
#define GLAD_VK_GOOGLE_hlsl_functionality1 (glad_vulkan_context.GOOGLE_hlsl_functionality1)
#define GLAD_VK_GOOGLE_surfaceless_query (glad_vulkan_context.GOOGLE_surfaceless_query)
#define GLAD_VK_GOOGLE_user_type (glad_vulkan_context.GOOGLE_user_type)
#define GLAD_VK_HUAWEI_cluster_culling_shader (glad_vulkan_context.HUAWEI_cluster_culling_shader)
#define GLAD_VK_HUAWEI_hdr_vivid (glad_vulkan_context.HUAWEI_hdr_vivid)
#define GLAD_VK_HUAWEI_invocation_mask (glad_vulkan_context.HUAWEI_invocation_mask)
#define GLAD_VK_HUAWEI_subpass_shading (glad_vulkan_context.HUAWEI_subpass_shading)
#define GLAD_VK_IMG_filter_cubic (glad_vulkan_context.IMG_filter_cubic)
#define GLAD_VK_IMG_format_pvrtc (glad_vulkan_context.IMG_format_pvrtc)
#define GLAD_VK_IMG_relaxed_line_rasterization (glad_vulkan_context.IMG_relaxed_line_rasterization)
#define GLAD_VK_INTEL_performance_query (glad_vulkan_context.INTEL_performance_query)
#define GLAD_VK_INTEL_shader_integer_functions2 (glad_vulkan_context.INTEL_shader_integer_functions2)
#define GLAD_VK_KHR_16bit_storage (glad_vulkan_context.KHR_16bit_storage)
#define GLAD_VK_KHR_8bit_storage (glad_vulkan_context.KHR_8bit_storage)
#define GLAD_VK_KHR_acceleration_structure (glad_vulkan_context.KHR_acceleration_structure)
#define GLAD_VK_KHR_android_surface (glad_vulkan_context.KHR_android_surface)
#define GLAD_VK_KHR_bind_memory2 (glad_vulkan_context.KHR_bind_memory2)
#define GLAD_VK_KHR_buffer_device_address (glad_vulkan_context.KHR_buffer_device_address)
#define GLAD_VK_KHR_calibrated_timestamps (glad_vulkan_context.KHR_calibrated_timestamps)
#define GLAD_VK_KHR_compute_shader_derivatives (glad_vulkan_context.KHR_compute_shader_derivatives)
#define GLAD_VK_KHR_cooperative_matrix (glad_vulkan_context.KHR_cooperative_matrix)
#define GLAD_VK_KHR_copy_commands2 (glad_vulkan_context.KHR_copy_commands2)
#define GLAD_VK_KHR_copy_memory_indirect (glad_vulkan_context.KHR_copy_memory_indirect)
#define GLAD_VK_KHR_create_renderpass2 (glad_vulkan_context.KHR_create_renderpass2)
#define GLAD_VK_KHR_dedicated_allocation (glad_vulkan_context.KHR_dedicated_allocation)
#define GLAD_VK_KHR_deferred_host_operations (glad_vulkan_context.KHR_deferred_host_operations)
#define GLAD_VK_KHR_depth_clamp_zero_one (glad_vulkan_context.KHR_depth_clamp_zero_one)
#define GLAD_VK_KHR_depth_stencil_resolve (glad_vulkan_context.KHR_depth_stencil_resolve)
#define GLAD_VK_KHR_descriptor_update_template (glad_vulkan_context.KHR_descriptor_update_template)
#define GLAD_VK_KHR_device_group (glad_vulkan_context.KHR_device_group)
#define GLAD_VK_KHR_device_group_creation (glad_vulkan_context.KHR_device_group_creation)
#define GLAD_VK_KHR_display (glad_vulkan_context.KHR_display)
#define GLAD_VK_KHR_display_swapchain (glad_vulkan_context.KHR_display_swapchain)
#define GLAD_VK_KHR_draw_indirect_count (glad_vulkan_context.KHR_draw_indirect_count)
#define GLAD_VK_KHR_driver_properties (glad_vulkan_context.KHR_driver_properties)
#define GLAD_VK_KHR_dynamic_rendering (glad_vulkan_context.KHR_dynamic_rendering)
#define GLAD_VK_KHR_dynamic_rendering_local_read (glad_vulkan_context.KHR_dynamic_rendering_local_read)
#define GLAD_VK_KHR_external_fence (glad_vulkan_context.KHR_external_fence)
#define GLAD_VK_KHR_external_fence_capabilities (glad_vulkan_context.KHR_external_fence_capabilities)
#define GLAD_VK_KHR_external_fence_fd (glad_vulkan_context.KHR_external_fence_fd)
#define GLAD_VK_KHR_external_fence_win32 (glad_vulkan_context.KHR_external_fence_win32)
#define GLAD_VK_KHR_external_memory (glad_vulkan_context.KHR_external_memory)
#define GLAD_VK_KHR_external_memory_capabilities (glad_vulkan_context.KHR_external_memory_capabilities)
#define GLAD_VK_KHR_external_memory_fd (glad_vulkan_context.KHR_external_memory_fd)
#define GLAD_VK_KHR_external_memory_win32 (glad_vulkan_context.KHR_external_memory_win32)
#define GLAD_VK_KHR_external_semaphore (glad_vulkan_context.KHR_external_semaphore)
#define GLAD_VK_KHR_external_semaphore_capabilities (glad_vulkan_context.KHR_external_semaphore_capabilities)
#define GLAD_VK_KHR_external_semaphore_fd (glad_vulkan_context.KHR_external_semaphore_fd)
#define GLAD_VK_KHR_external_semaphore_win32 (glad_vulkan_context.KHR_external_semaphore_win32)
#define GLAD_VK_KHR_format_feature_flags2 (glad_vulkan_context.KHR_format_feature_flags2)
#define GLAD_VK_KHR_fragment_shader_barycentric (glad_vulkan_context.KHR_fragment_shader_barycentric)
#define GLAD_VK_KHR_fragment_shading_rate (glad_vulkan_context.KHR_fragment_shading_rate)
#define GLAD_VK_KHR_get_display_properties2 (glad_vulkan_context.KHR_get_display_properties2)
#define GLAD_VK_KHR_get_memory_requirements2 (glad_vulkan_context.KHR_get_memory_requirements2)
#define GLAD_VK_KHR_get_physical_device_properties2 (glad_vulkan_context.KHR_get_physical_device_properties2)
#define GLAD_VK_KHR_get_surface_capabilities2 (glad_vulkan_context.KHR_get_surface_capabilities2)
#define GLAD_VK_KHR_global_priority (glad_vulkan_context.KHR_global_priority)
#define GLAD_VK_KHR_image_format_list (glad_vulkan_context.KHR_image_format_list)
#define GLAD_VK_KHR_imageless_framebuffer (glad_vulkan_context.KHR_imageless_framebuffer)
#define GLAD_VK_KHR_incremental_present (glad_vulkan_context.KHR_incremental_present)
#define GLAD_VK_KHR_index_type_uint8 (glad_vulkan_context.KHR_index_type_uint8)
#define GLAD_VK_KHR_line_rasterization (glad_vulkan_context.KHR_line_rasterization)
#define GLAD_VK_KHR_load_store_op_none (glad_vulkan_context.KHR_load_store_op_none)
#define GLAD_VK_KHR_maintenance1 (glad_vulkan_context.KHR_maintenance1)
#define GLAD_VK_KHR_maintenance2 (glad_vulkan_context.KHR_maintenance2)
#define GLAD_VK_KHR_maintenance3 (glad_vulkan_context.KHR_maintenance3)
#define GLAD_VK_KHR_maintenance4 (glad_vulkan_context.KHR_maintenance4)
#define GLAD_VK_KHR_maintenance5 (glad_vulkan_context.KHR_maintenance5)
#define GLAD_VK_KHR_maintenance6 (glad_vulkan_context.KHR_maintenance6)
#define GLAD_VK_KHR_maintenance7 (glad_vulkan_context.KHR_maintenance7)
#define GLAD_VK_KHR_maintenance8 (glad_vulkan_context.KHR_maintenance8)
#define GLAD_VK_KHR_maintenance9 (glad_vulkan_context.KHR_maintenance9)
#define GLAD_VK_KHR_map_memory2 (glad_vulkan_context.KHR_map_memory2)
#define GLAD_VK_KHR_multiview (glad_vulkan_context.KHR_multiview)
#define GLAD_VK_KHR_performance_query (glad_vulkan_context.KHR_performance_query)
#define GLAD_VK_KHR_pipeline_binary (glad_vulkan_context.KHR_pipeline_binary)
#define GLAD_VK_KHR_pipeline_executable_properties (glad_vulkan_context.KHR_pipeline_executable_properties)
#define GLAD_VK_KHR_pipeline_library (glad_vulkan_context.KHR_pipeline_library)
#define GLAD_VK_KHR_portability_enumeration (glad_vulkan_context.KHR_portability_enumeration)
#define GLAD_VK_KHR_portability_subset (glad_vulkan_context.KHR_portability_subset)
#define GLAD_VK_KHR_present_id (glad_vulkan_context.KHR_present_id)
#define GLAD_VK_KHR_present_id2 (glad_vulkan_context.KHR_present_id2)
#define GLAD_VK_KHR_present_mode_fifo_latest_ready (glad_vulkan_context.KHR_present_mode_fifo_latest_ready)
#define GLAD_VK_KHR_present_wait (glad_vulkan_context.KHR_present_wait)
#define GLAD_VK_KHR_present_wait2 (glad_vulkan_context.KHR_present_wait2)
#define GLAD_VK_KHR_push_descriptor (glad_vulkan_context.KHR_push_descriptor)
#define GLAD_VK_KHR_ray_query (glad_vulkan_context.KHR_ray_query)
#define GLAD_VK_KHR_ray_tracing_maintenance1 (glad_vulkan_context.KHR_ray_tracing_maintenance1)
#define GLAD_VK_KHR_ray_tracing_pipeline (glad_vulkan_context.KHR_ray_tracing_pipeline)
#define GLAD_VK_KHR_ray_tracing_position_fetch (glad_vulkan_context.KHR_ray_tracing_position_fetch)
#define GLAD_VK_KHR_relaxed_block_layout (glad_vulkan_context.KHR_relaxed_block_layout)
#define GLAD_VK_KHR_robustness2 (glad_vulkan_context.KHR_robustness2)
#define GLAD_VK_KHR_sampler_mirror_clamp_to_edge (glad_vulkan_context.KHR_sampler_mirror_clamp_to_edge)
#define GLAD_VK_KHR_sampler_ycbcr_conversion (glad_vulkan_context.KHR_sampler_ycbcr_conversion)
#define GLAD_VK_KHR_separate_depth_stencil_layouts (glad_vulkan_context.KHR_separate_depth_stencil_layouts)
#define GLAD_VK_KHR_shader_atomic_int64 (glad_vulkan_context.KHR_shader_atomic_int64)
#define GLAD_VK_KHR_shader_bfloat16 (glad_vulkan_context.KHR_shader_bfloat16)
#define GLAD_VK_KHR_shader_clock (glad_vulkan_context.KHR_shader_clock)
#define GLAD_VK_KHR_shader_draw_parameters (glad_vulkan_context.KHR_shader_draw_parameters)
#define GLAD_VK_KHR_shader_expect_assume (glad_vulkan_context.KHR_shader_expect_assume)
#define GLAD_VK_KHR_shader_float16_int8 (glad_vulkan_context.KHR_shader_float16_int8)
#define GLAD_VK_KHR_shader_float_controls (glad_vulkan_context.KHR_shader_float_controls)
#define GLAD_VK_KHR_shader_float_controls2 (glad_vulkan_context.KHR_shader_float_controls2)
#define GLAD_VK_KHR_shader_integer_dot_product (glad_vulkan_context.KHR_shader_integer_dot_product)
#define GLAD_VK_KHR_shader_maximal_reconvergence (glad_vulkan_context.KHR_shader_maximal_reconvergence)
#define GLAD_VK_KHR_shader_non_semantic_info (glad_vulkan_context.KHR_shader_non_semantic_info)
#define GLAD_VK_KHR_shader_quad_control (glad_vulkan_context.KHR_shader_quad_control)
#define GLAD_VK_KHR_shader_relaxed_extended_instruction (glad_vulkan_context.KHR_shader_relaxed_extended_instruction)
#define GLAD_VK_KHR_shader_subgroup_extended_types (glad_vulkan_context.KHR_shader_subgroup_extended_types)
#define GLAD_VK_KHR_shader_subgroup_rotate (glad_vulkan_context.KHR_shader_subgroup_rotate)
#define GLAD_VK_KHR_shader_subgroup_uniform_control_flow (glad_vulkan_context.KHR_shader_subgroup_uniform_control_flow)
#define GLAD_VK_KHR_shader_terminate_invocation (glad_vulkan_context.KHR_shader_terminate_invocation)
#define GLAD_VK_KHR_shader_untyped_pointers (glad_vulkan_context.KHR_shader_untyped_pointers)
#define GLAD_VK_KHR_shared_presentable_image (glad_vulkan_context.KHR_shared_presentable_image)
#define GLAD_VK_KHR_spirv_1_4 (glad_vulkan_context.KHR_spirv_1_4)
#define GLAD_VK_KHR_storage_buffer_storage_class (glad_vulkan_context.KHR_storage_buffer_storage_class)
#define GLAD_VK_KHR_surface (glad_vulkan_context.KHR_surface)
#define GLAD_VK_KHR_surface_maintenance1 (glad_vulkan_context.KHR_surface_maintenance1)
#define GLAD_VK_KHR_surface_protected_capabilities (glad_vulkan_context.KHR_surface_protected_capabilities)
#define GLAD_VK_KHR_swapchain (glad_vulkan_context.KHR_swapchain)
#define GLAD_VK_KHR_swapchain_maintenance1 (glad_vulkan_context.KHR_swapchain_maintenance1)
#define GLAD_VK_KHR_swapchain_mutable_format (glad_vulkan_context.KHR_swapchain_mutable_format)
#define GLAD_VK_KHR_synchronization2 (glad_vulkan_context.KHR_synchronization2)
#define GLAD_VK_KHR_timeline_semaphore (glad_vulkan_context.KHR_timeline_semaphore)
#define GLAD_VK_KHR_unified_image_layouts (glad_vulkan_context.KHR_unified_image_layouts)
#define GLAD_VK_KHR_uniform_buffer_standard_layout (glad_vulkan_context.KHR_uniform_buffer_standard_layout)
#define GLAD_VK_KHR_variable_pointers (glad_vulkan_context.KHR_variable_pointers)
#define GLAD_VK_KHR_vertex_attribute_divisor (glad_vulkan_context.KHR_vertex_attribute_divisor)
#define GLAD_VK_KHR_video_decode_av1 (glad_vulkan_context.KHR_video_decode_av1)
#define GLAD_VK_KHR_video_decode_h264 (glad_vulkan_context.KHR_video_decode_h264)
#define GLAD_VK_KHR_video_decode_h265 (glad_vulkan_context.KHR_video_decode_h265)
#define GLAD_VK_KHR_video_decode_queue (glad_vulkan_context.KHR_video_decode_queue)
#define GLAD_VK_KHR_video_decode_vp9 (glad_vulkan_context.KHR_video_decode_vp9)
#define GLAD_VK_KHR_video_encode_av1 (glad_vulkan_context.KHR_video_encode_av1)
#define GLAD_VK_KHR_video_encode_h264 (glad_vulkan_context.KHR_video_encode_h264)
#define GLAD_VK_KHR_video_encode_h265 (glad_vulkan_context.KHR_video_encode_h265)
#define GLAD_VK_KHR_video_encode_intra_refresh (glad_vulkan_context.KHR_video_encode_intra_refresh)
#define GLAD_VK_KHR_video_encode_quantization_map (glad_vulkan_context.KHR_video_encode_quantization_map)
#define GLAD_VK_KHR_video_encode_queue (glad_vulkan_context.KHR_video_encode_queue)
#define GLAD_VK_KHR_video_maintenance1 (glad_vulkan_context.KHR_video_maintenance1)
#define GLAD_VK_KHR_video_maintenance2 (glad_vulkan_context.KHR_video_maintenance2)
#define GLAD_VK_KHR_video_queue (glad_vulkan_context.KHR_video_queue)
#define GLAD_VK_KHR_vulkan_memory_model (glad_vulkan_context.KHR_vulkan_memory_model)
#define GLAD_VK_KHR_wayland_surface (glad_vulkan_context.KHR_wayland_surface)
#define GLAD_VK_KHR_win32_keyed_mutex (glad_vulkan_context.KHR_win32_keyed_mutex)
#define GLAD_VK_KHR_win32_surface (glad_vulkan_context.KHR_win32_surface)
#define GLAD_VK_KHR_workgroup_memory_explicit_layout (glad_vulkan_context.KHR_workgroup_memory_explicit_layout)
#define GLAD_VK_KHR_xcb_surface (glad_vulkan_context.KHR_xcb_surface)
#define GLAD_VK_KHR_xlib_surface (glad_vulkan_context.KHR_xlib_surface)
#define GLAD_VK_KHR_zero_initialize_workgroup_memory (glad_vulkan_context.KHR_zero_initialize_workgroup_memory)
#define GLAD_VK_LUNARG_direct_driver_loading (glad_vulkan_context.LUNARG_direct_driver_loading)
#define GLAD_VK_MESA_image_alignment_control (glad_vulkan_context.MESA_image_alignment_control)
#define GLAD_VK_MSFT_layered_driver (glad_vulkan_context.MSFT_layered_driver)
#define GLAD_VK_MVK_ios_surface (glad_vulkan_context.MVK_ios_surface)
#define GLAD_VK_MVK_macos_surface (glad_vulkan_context.MVK_macos_surface)
#define GLAD_VK_NN_vi_surface (glad_vulkan_context.NN_vi_surface)
#define GLAD_VK_NVX_binary_import (glad_vulkan_context.NVX_binary_import)
#define GLAD_VK_NVX_image_view_handle (glad_vulkan_context.NVX_image_view_handle)
#define GLAD_VK_NVX_multiview_per_view_attributes (glad_vulkan_context.NVX_multiview_per_view_attributes)
#define GLAD_VK_NV_acquire_winrt_display (glad_vulkan_context.NV_acquire_winrt_display)
#define GLAD_VK_NV_clip_space_w_scaling (glad_vulkan_context.NV_clip_space_w_scaling)
#define GLAD_VK_NV_cluster_acceleration_structure (glad_vulkan_context.NV_cluster_acceleration_structure)
#define GLAD_VK_NV_command_buffer_inheritance (glad_vulkan_context.NV_command_buffer_inheritance)
#define GLAD_VK_NV_compute_shader_derivatives (glad_vulkan_context.NV_compute_shader_derivatives)
#define GLAD_VK_NV_cooperative_matrix (glad_vulkan_context.NV_cooperative_matrix)
#define GLAD_VK_NV_cooperative_matrix2 (glad_vulkan_context.NV_cooperative_matrix2)
#define GLAD_VK_NV_cooperative_vector (glad_vulkan_context.NV_cooperative_vector)
#define GLAD_VK_NV_copy_memory_indirect (glad_vulkan_context.NV_copy_memory_indirect)
#define GLAD_VK_NV_corner_sampled_image (glad_vulkan_context.NV_corner_sampled_image)
#define GLAD_VK_NV_coverage_reduction_mode (glad_vulkan_context.NV_coverage_reduction_mode)
#define GLAD_VK_NV_cuda_kernel_launch (glad_vulkan_context.NV_cuda_kernel_launch)
#define GLAD_VK_NV_dedicated_allocation (glad_vulkan_context.NV_dedicated_allocation)
#define GLAD_VK_NV_dedicated_allocation_image_aliasing (glad_vulkan_context.NV_dedicated_allocation_image_aliasing)
#define GLAD_VK_NV_descriptor_pool_overallocation (glad_vulkan_context.NV_descriptor_pool_overallocation)
#define GLAD_VK_NV_device_diagnostic_checkpoints (glad_vulkan_context.NV_device_diagnostic_checkpoints)
#define GLAD_VK_NV_device_diagnostics_config (glad_vulkan_context.NV_device_diagnostics_config)
#define GLAD_VK_NV_device_generated_commands (glad_vulkan_context.NV_device_generated_commands)
#define GLAD_VK_NV_device_generated_commands_compute (glad_vulkan_context.NV_device_generated_commands_compute)
#define GLAD_VK_NV_displacement_micromap (glad_vulkan_context.NV_displacement_micromap)
#define GLAD_VK_NV_display_stereo (glad_vulkan_context.NV_display_stereo)
#define GLAD_VK_NV_extended_sparse_address_space (glad_vulkan_context.NV_extended_sparse_address_space)
#define GLAD_VK_NV_external_compute_queue (glad_vulkan_context.NV_external_compute_queue)
#define GLAD_VK_NV_external_memory (glad_vulkan_context.NV_external_memory)
#define GLAD_VK_NV_external_memory_capabilities (glad_vulkan_context.NV_external_memory_capabilities)
#define GLAD_VK_NV_external_memory_rdma (glad_vulkan_context.NV_external_memory_rdma)
#define GLAD_VK_NV_external_memory_win32 (glad_vulkan_context.NV_external_memory_win32)
#define GLAD_VK_NV_fill_rectangle (glad_vulkan_context.NV_fill_rectangle)
#define GLAD_VK_NV_fragment_coverage_to_color (glad_vulkan_context.NV_fragment_coverage_to_color)
#define GLAD_VK_NV_fragment_shader_barycentric (glad_vulkan_context.NV_fragment_shader_barycentric)
#define GLAD_VK_NV_fragment_shading_rate_enums (glad_vulkan_context.NV_fragment_shading_rate_enums)
#define GLAD_VK_NV_framebuffer_mixed_samples (glad_vulkan_context.NV_framebuffer_mixed_samples)
#define GLAD_VK_NV_geometry_shader_passthrough (glad_vulkan_context.NV_geometry_shader_passthrough)
#define GLAD_VK_NV_glsl_shader (glad_vulkan_context.NV_glsl_shader)
#define GLAD_VK_NV_inherited_viewport_scissor (glad_vulkan_context.NV_inherited_viewport_scissor)
#define GLAD_VK_NV_linear_color_attachment (glad_vulkan_context.NV_linear_color_attachment)
#define GLAD_VK_NV_low_latency (glad_vulkan_context.NV_low_latency)
#define GLAD_VK_NV_low_latency2 (glad_vulkan_context.NV_low_latency2)
#define GLAD_VK_NV_memory_decompression (glad_vulkan_context.NV_memory_decompression)
#define GLAD_VK_NV_mesh_shader (glad_vulkan_context.NV_mesh_shader)
#define GLAD_VK_NV_optical_flow (glad_vulkan_context.NV_optical_flow)
#define GLAD_VK_NV_partitioned_acceleration_structure (glad_vulkan_context.NV_partitioned_acceleration_structure)
#define GLAD_VK_NV_per_stage_descriptor_set (glad_vulkan_context.NV_per_stage_descriptor_set)
#define GLAD_VK_NV_present_barrier (glad_vulkan_context.NV_present_barrier)
#define GLAD_VK_NV_present_metering (glad_vulkan_context.NV_present_metering)
#define GLAD_VK_NV_raw_access_chains (glad_vulkan_context.NV_raw_access_chains)
#define GLAD_VK_NV_ray_tracing (glad_vulkan_context.NV_ray_tracing)
#define GLAD_VK_NV_ray_tracing_invocation_reorder (glad_vulkan_context.NV_ray_tracing_invocation_reorder)
#define GLAD_VK_NV_ray_tracing_linear_swept_spheres (glad_vulkan_context.NV_ray_tracing_linear_swept_spheres)
#define GLAD_VK_NV_ray_tracing_motion_blur (glad_vulkan_context.NV_ray_tracing_motion_blur)
#define GLAD_VK_NV_ray_tracing_validation (glad_vulkan_context.NV_ray_tracing_validation)
#define GLAD_VK_NV_representative_fragment_test (glad_vulkan_context.NV_representative_fragment_test)
#define GLAD_VK_NV_sample_mask_override_coverage (glad_vulkan_context.NV_sample_mask_override_coverage)
#define GLAD_VK_NV_scissor_exclusive (glad_vulkan_context.NV_scissor_exclusive)
#define GLAD_VK_NV_shader_atomic_float16_vector (glad_vulkan_context.NV_shader_atomic_float16_vector)
#define GLAD_VK_NV_shader_image_footprint (glad_vulkan_context.NV_shader_image_footprint)
#define GLAD_VK_NV_shader_sm_builtins (glad_vulkan_context.NV_shader_sm_builtins)
#define GLAD_VK_NV_shader_subgroup_partitioned (glad_vulkan_context.NV_shader_subgroup_partitioned)
#define GLAD_VK_NV_shading_rate_image (glad_vulkan_context.NV_shading_rate_image)
#define GLAD_VK_NV_viewport_array2 (glad_vulkan_context.NV_viewport_array2)
#define GLAD_VK_NV_viewport_swizzle (glad_vulkan_context.NV_viewport_swizzle)
#define GLAD_VK_NV_win32_keyed_mutex (glad_vulkan_context.NV_win32_keyed_mutex)
#define GLAD_VK_OHOS_surface (glad_vulkan_context.OHOS_surface)
#define GLAD_VK_QCOM_filter_cubic_clamp (glad_vulkan_context.QCOM_filter_cubic_clamp)
#define GLAD_VK_QCOM_filter_cubic_weights (glad_vulkan_context.QCOM_filter_cubic_weights)
#define GLAD_VK_QCOM_fragment_density_map_offset (glad_vulkan_context.QCOM_fragment_density_map_offset)
#define GLAD_VK_QCOM_image_processing (glad_vulkan_context.QCOM_image_processing)
#define GLAD_VK_QCOM_image_processing2 (glad_vulkan_context.QCOM_image_processing2)
#define GLAD_VK_QCOM_multiview_per_view_render_areas (glad_vulkan_context.QCOM_multiview_per_view_render_areas)
#define GLAD_VK_QCOM_multiview_per_view_viewports (glad_vulkan_context.QCOM_multiview_per_view_viewports)
#define GLAD_VK_QCOM_render_pass_shader_resolve (glad_vulkan_context.QCOM_render_pass_shader_resolve)
#define GLAD_VK_QCOM_render_pass_store_ops (glad_vulkan_context.QCOM_render_pass_store_ops)
#define GLAD_VK_QCOM_render_pass_transform (glad_vulkan_context.QCOM_render_pass_transform)
#define GLAD_VK_QCOM_rotated_copy_commands (glad_vulkan_context.QCOM_rotated_copy_commands)
#define GLAD_VK_QCOM_tile_memory_heap (glad_vulkan_context.QCOM_tile_memory_heap)
#define GLAD_VK_QCOM_tile_properties (glad_vulkan_context.QCOM_tile_properties)
#define GLAD_VK_QCOM_tile_shading (glad_vulkan_context.QCOM_tile_shading)
#define GLAD_VK_QCOM_ycbcr_degamma (glad_vulkan_context.QCOM_ycbcr_degamma)
#define GLAD_VK_QNX_external_memory_screen_buffer (glad_vulkan_context.QNX_external_memory_screen_buffer)
#define GLAD_VK_QNX_screen_surface (glad_vulkan_context.QNX_screen_surface)
#define GLAD_VK_SEC_amigo_profiling (glad_vulkan_context.SEC_amigo_profiling)
#define GLAD_VK_SEC_pipeline_cache_incremental_mode (glad_vulkan_context.SEC_pipeline_cache_incremental_mode)
#define GLAD_VK_VALVE_descriptor_set_host_mapping (glad_vulkan_context.VALVE_descriptor_set_host_mapping)
#define GLAD_VK_VALVE_fragment_density_map_layered (glad_vulkan_context.VALVE_fragment_density_map_layered)
#define GLAD_VK_VALVE_mutable_descriptor_type (glad_vulkan_context.VALVE_mutable_descriptor_type)
#define GLAD_VK_VALVE_video_encode_rgb_conversion (glad_vulkan_context.VALVE_video_encode_rgb_conversion)

#ifdef __INTELLISENSE__
VkResult vkCreateInstance(const VkInstanceCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkInstance * pInstance);
void vkDestroyInstance(VkInstance instance, const VkAllocationCallbacks * pAllocator);
VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint32_t * pPhysicalDeviceCount, VkPhysicalDevice * pPhysicalDevices);
void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures * pFeatures);
void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties * pFormatProperties);
VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties * pImageFormatProperties);
void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties * pProperties);
void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint32_t * pQueueFamilyPropertyCount, VkQueueFamilyProperties * pQueueFamilyProperties);
void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties * pMemoryProperties);
PFN_vkVoidFunction vkGetInstanceProcAddr(VkInstance instance, const char * pName);
PFN_vkVoidFunction vkGetDeviceProcAddr(VkDevice device, const char * pName);
VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDevice * pDevice);
void vkDestroyDevice(VkDevice device, const VkAllocationCallbacks * pAllocator);
VkResult vkEnumerateInstanceExtensionProperties(const char * pLayerName, uint32_t * pPropertyCount, VkExtensionProperties * pProperties);
VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, const char * pLayerName, uint32_t * pPropertyCount, VkExtensionProperties * pProperties);
VkResult vkEnumerateInstanceLayerProperties(uint32_t * pPropertyCount, VkLayerProperties * pProperties);
VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkLayerProperties * pProperties);
void vkGetDeviceQueue(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue * pQueue);
VkResult vkQueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmitInfo * pSubmits, VkFence fence);
VkResult vkQueueWaitIdle(VkQueue queue);
VkResult vkDeviceWaitIdle(VkDevice device);
VkResult vkAllocateMemory(VkDevice device, const VkMemoryAllocateInfo * pAllocateInfo, const VkAllocationCallbacks * pAllocator, VkDeviceMemory * pMemory);
void vkFreeMemory(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks * pAllocator);
VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void ** ppData);
void vkUnmapMemory(VkDevice device, VkDeviceMemory memory);
VkResult vkFlushMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange * pMemoryRanges);
VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange * pMemoryRanges);
void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize * pCommittedMemoryInBytes);
VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset);
VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset);
void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements * pMemoryRequirements);
void vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements * pMemoryRequirements);
void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements * pSparseMemoryRequirements);
void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t * pPropertyCount, VkSparseImageFormatProperties * pProperties);
VkResult vkQueueBindSparse(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo * pBindInfo, VkFence fence);
VkResult vkCreateFence(VkDevice device, const VkFenceCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkFence * pFence);
void vkDestroyFence(VkDevice device, VkFence fence, const VkAllocationCallbacks * pAllocator);
VkResult vkResetFences(VkDevice device, uint32_t fenceCount, const VkFence * pFences);
VkResult vkGetFenceStatus(VkDevice device, VkFence fence);
VkResult vkWaitForFences(VkDevice device, uint32_t fenceCount, const VkFence * pFences, VkBool32 waitAll, uint64_t timeout);
VkResult vkCreateSemaphore(VkDevice device, const VkSemaphoreCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSemaphore * pSemaphore);
void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks * pAllocator);
VkResult vkCreateEvent(VkDevice device, const VkEventCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkEvent * pEvent);
void vkDestroyEvent(VkDevice device, VkEvent event, const VkAllocationCallbacks * pAllocator);
VkResult vkGetEventStatus(VkDevice device, VkEvent event);
VkResult vkSetEvent(VkDevice device, VkEvent event);
VkResult vkResetEvent(VkDevice device, VkEvent event);
VkResult vkCreateQueryPool(VkDevice device, const VkQueryPoolCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkQueryPool * pQueryPool);
void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks * pAllocator);
VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void * pData, VkDeviceSize stride, VkQueryResultFlags flags);
VkResult vkCreateBuffer(VkDevice device, const VkBufferCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkBuffer * pBuffer);
void vkDestroyBuffer(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks * pAllocator);
VkResult vkCreateBufferView(VkDevice device, const VkBufferViewCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkBufferView * pView);
void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks * pAllocator);
VkResult vkCreateImage(VkDevice device, const VkImageCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkImage * pImage);
void vkDestroyImage(VkDevice device, VkImage image, const VkAllocationCallbacks * pAllocator);
void vkGetImageSubresourceLayout(VkDevice device, VkImage image, const VkImageSubresource * pSubresource, VkSubresourceLayout * pLayout);
VkResult vkCreateImageView(VkDevice device, const VkImageViewCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkImageView * pView);
void vkDestroyImageView(VkDevice device, VkImageView imageView, const VkAllocationCallbacks * pAllocator);
VkResult vkCreateShaderModule(VkDevice device, const VkShaderModuleCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkShaderModule * pShaderModule);
void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks * pAllocator);
VkResult vkCreatePipelineCache(VkDevice device, const VkPipelineCacheCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkPipelineCache * pPipelineCache);
void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks * pAllocator);
VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, size_t * pDataSize, void * pData);
VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache * pSrcCaches);
VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkPipeline * pPipelines);
VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkPipeline * pPipelines);
void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks * pAllocator);
VkResult vkCreatePipelineLayout(VkDevice device, const VkPipelineLayoutCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkPipelineLayout * pPipelineLayout);
void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks * pAllocator);
VkResult vkCreateSampler(VkDevice device, const VkSamplerCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSampler * pSampler);
void vkDestroySampler(VkDevice device, VkSampler sampler, const VkAllocationCallbacks * pAllocator);
VkResult vkCreateDescriptorSetLayout(VkDevice device, const VkDescriptorSetLayoutCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDescriptorSetLayout * pSetLayout);
void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks * pAllocator);
VkResult vkCreateDescriptorPool(VkDevice device, const VkDescriptorPoolCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDescriptorPool * pDescriptorPool);
void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks * pAllocator);
VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags);
VkResult vkAllocateDescriptorSets(VkDevice device, const VkDescriptorSetAllocateInfo * pAllocateInfo, VkDescriptorSet * pDescriptorSets);
VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet * pDescriptorSets);
void vkUpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet * pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet * pDescriptorCopies);
VkResult vkCreateFramebuffer(VkDevice device, const VkFramebufferCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkFramebuffer * pFramebuffer);
void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks * pAllocator);
VkResult vkCreateRenderPass(VkDevice device, const VkRenderPassCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkRenderPass * pRenderPass);
void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks * pAllocator);
void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D * pGranularity);
VkResult vkCreateCommandPool(VkDevice device, const VkCommandPoolCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkCommandPool * pCommandPool);
void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks * pAllocator);
VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);
VkResult vkAllocateCommandBuffers(VkDevice device, const VkCommandBufferAllocateInfo * pAllocateInfo, VkCommandBuffer * pCommandBuffers);
void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer * pCommandBuffers);
VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo * pBeginInfo);
VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer);
VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags);
void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport * pViewports);
void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D * pScissors);
void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth);
void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants [4]);
void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);
void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask);
void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask);
void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference);
void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet * pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t * pDynamicOffsets);
void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType);
void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer * pBuffers, const VkDeviceSize * pOffsets);
void vkCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);
void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance);
void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
void vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);
void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy * pRegions);
void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy * pRegions);
void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit * pRegions, VkFilter filter);
void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy * pRegions);
void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy * pRegions);
void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void * pData);
void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data);
void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue * pColor, uint32_t rangeCount, const VkImageSubresourceRange * pRanges);
void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue * pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange * pRanges);
void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment * pAttachments, uint32_t rectCount, const VkClearRect * pRects);
void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve * pRegions);
void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent * pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier * pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier * pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier * pImageMemoryBarriers);
void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier * pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier * pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier * pImageMemoryBarriers);
void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags);
void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query);
void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query);
void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);
void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void * pValues);
void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo * pRenderPassBegin, VkSubpassContents contents);
void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents);
void vkCmdEndRenderPass(VkCommandBuffer commandBuffer);
void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer * pCommandBuffers);
VkResult vkEnumerateInstanceVersion(uint32_t * pApiVersion);
VkResult vkBindBufferMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo * pBindInfos);
VkResult vkBindImageMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo * pBindInfos);
void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags * pPeerMemoryFeatures);
void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask);
void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint32_t * pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties * pPhysicalDeviceGroupProperties);
void vkGetImageMemoryRequirements2(VkDevice device, const VkImageMemoryRequirementsInfo2 * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
void vkGetBufferMemoryRequirements2(VkDevice device, const VkBufferMemoryRequirementsInfo2 * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
void vkGetImageSparseMemoryRequirements2(VkDevice device, const VkImageSparseMemoryRequirementsInfo2 * pInfo, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 * pSparseMemoryRequirements);
void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2 * pFeatures);
void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 * pProperties);
void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2 * pFormatProperties);
VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2 * pImageFormatInfo, VkImageFormatProperties2 * pImageFormatProperties);
void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint32_t * pQueueFamilyPropertyCount, VkQueueFamilyProperties2 * pQueueFamilyProperties);
void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2 * pMemoryProperties);
void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2 * pFormatInfo, uint32_t * pPropertyCount, VkSparseImageFormatProperties2 * pProperties);
void vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);
void vkGetDeviceQueue2(VkDevice device, const VkDeviceQueueInfo2 * pQueueInfo, VkQueue * pQueue);
VkResult vkCreateSamplerYcbcrConversion(VkDevice device, const VkSamplerYcbcrConversionCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSamplerYcbcrConversion * pYcbcrConversion);
void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks * pAllocator);
VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDescriptorUpdateTemplate * pDescriptorUpdateTemplate);
void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks * pAllocator);
void vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void * pData);
void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo * pExternalBufferInfo, VkExternalBufferProperties * pExternalBufferProperties);
void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo * pExternalFenceInfo, VkExternalFenceProperties * pExternalFenceProperties);
void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo * pExternalSemaphoreInfo, VkExternalSemaphoreProperties * pExternalSemaphoreProperties);
void vkGetDescriptorSetLayoutSupport(VkDevice device, const VkDescriptorSetLayoutCreateInfo * pCreateInfo, VkDescriptorSetLayoutSupport * pSupport);
void vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
void vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
VkResult vkCreateRenderPass2(VkDevice device, const VkRenderPassCreateInfo2 * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkRenderPass * pRenderPass);
void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo * pRenderPassBegin, const VkSubpassBeginInfo * pSubpassBeginInfo);
void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo * pSubpassBeginInfo, const VkSubpassEndInfo * pSubpassEndInfo);
void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo * pSubpassEndInfo);
void vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, uint64_t * pValue);
VkResult vkWaitSemaphores(VkDevice device, const VkSemaphoreWaitInfo * pWaitInfo, uint64_t timeout);
VkResult vkSignalSemaphore(VkDevice device, const VkSemaphoreSignalInfo * pSignalInfo);
VkDeviceAddress vkGetBufferDeviceAddress(VkDevice device, const VkBufferDeviceAddressInfo * pInfo);
uint64_t vkGetBufferOpaqueCaptureAddress(VkDevice device, const VkBufferDeviceAddressInfo * pInfo);
uint64_t vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo * pInfo);
VkResult vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint32_t * pToolCount, VkPhysicalDeviceToolProperties * pToolProperties);
VkResult vkCreatePrivateDataSlot(VkDevice device, const VkPrivateDataSlotCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkPrivateDataSlot * pPrivateDataSlot);
void vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks * pAllocator);
VkResult vkSetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data);
void vkGetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t * pData);
void vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo * pDependencyInfo);
void vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask);
void vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent * pEvents, const VkDependencyInfo * pDependencyInfos);
void vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDependencyInfo * pDependencyInfo);
void vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query);
VkResult vkQueueSubmit2(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 * pSubmits, VkFence fence);
void vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 * pCopyBufferInfo);
void vkCmdCopyImage2(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 * pCopyImageInfo);
void vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 * pCopyBufferToImageInfo);
void vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 * pCopyImageToBufferInfo);
void vkCmdBlitImage2(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 * pBlitImageInfo);
void vkCmdResolveImage2(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 * pResolveImageInfo);
void vkCmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfo * pRenderingInfo);
void vkCmdEndRendering(VkCommandBuffer commandBuffer);
void vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode);
void vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace);
void vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology);
void vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport * pViewports);
void vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D * pScissors);
void vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer * pBuffers, const VkDeviceSize * pOffsets, const VkDeviceSize * pSizes, const VkDeviceSize * pStrides);
void vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable);
void vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable);
void vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp);
void vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable);
void vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable);
void vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp);
void vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable);
void vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable);
void vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable);
void vkGetDeviceBufferMemoryRequirements(VkDevice device, const VkDeviceBufferMemoryRequirements * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
void vkGetDeviceImageMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
void vkGetDeviceImageSparseMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements * pInfo, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 * pSparseMemoryRequirements);
void vkCmdSetLineStipple(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern);
VkResult vkMapMemory2(VkDevice device, const VkMemoryMapInfo * pMemoryMapInfo, void ** ppData);
VkResult vkUnmapMemory2(VkDevice device, const VkMemoryUnmapInfo * pMemoryUnmapInfo);
void vkCmdBindIndexBuffer2(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType);
void vkGetRenderingAreaGranularity(VkDevice device, const VkRenderingAreaInfo * pRenderingAreaInfo, VkExtent2D * pGranularity);
void vkGetDeviceImageSubresourceLayout(VkDevice device, const VkDeviceImageSubresourceInfo * pInfo, VkSubresourceLayout2 * pLayout);
void vkGetImageSubresourceLayout2(VkDevice device, VkImage image, const VkImageSubresource2 * pSubresource, VkSubresourceLayout2 * pLayout);
void vkCmdPushDescriptorSet(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet * pDescriptorWrites);
void vkCmdPushDescriptorSetWithTemplate(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void * pData);
void vkCmdSetRenderingAttachmentLocations(VkCommandBuffer commandBuffer, const VkRenderingAttachmentLocationInfo * pLocationInfo);
void vkCmdSetRenderingInputAttachmentIndices(VkCommandBuffer commandBuffer, const VkRenderingInputAttachmentIndexInfo * pInputAttachmentIndexInfo);
void vkCmdBindDescriptorSets2(VkCommandBuffer commandBuffer, const VkBindDescriptorSetsInfo * pBindDescriptorSetsInfo);
void vkCmdPushConstants2(VkCommandBuffer commandBuffer, const VkPushConstantsInfo * pPushConstantsInfo);
void vkCmdPushDescriptorSet2(VkCommandBuffer commandBuffer, const VkPushDescriptorSetInfo * pPushDescriptorSetInfo);
void vkCmdPushDescriptorSetWithTemplate2(VkCommandBuffer commandBuffer, const VkPushDescriptorSetWithTemplateInfo * pPushDescriptorSetWithTemplateInfo);
VkResult vkCopyMemoryToImage(VkDevice device, const VkCopyMemoryToImageInfo * pCopyMemoryToImageInfo);
VkResult vkCopyImageToMemory(VkDevice device, const VkCopyImageToMemoryInfo * pCopyImageToMemoryInfo);
VkResult vkCopyImageToImage(VkDevice device, const VkCopyImageToImageInfo * pCopyImageToImageInfo);
VkResult vkTransitionImageLayout(VkDevice device, uint32_t transitionCount, const VkHostImageLayoutTransitionInfo * pTransitions);
void vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks * pAllocator);
VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32 * pSupported);
VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR * pSurfaceCapabilities);
VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t * pSurfaceFormatCount, VkSurfaceFormatKHR * pSurfaceFormats);
VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t * pPresentModeCount, VkPresentModeKHR * pPresentModes);
VkResult vkCreateSwapchainKHR(VkDevice device, const VkSwapchainCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSwapchainKHR * pSwapchain);
void vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks * pAllocator);
VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint32_t * pSwapchainImageCount, VkImage * pSwapchainImages);
VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t * pImageIndex);
VkResult vkQueuePresentKHR(VkQueue queue, const VkPresentInfoKHR * pPresentInfo);
VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR * pDeviceGroupPresentCapabilities);
VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR * pModes);
VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t * pRectCount, VkRect2D * pRects);
VkResult vkAcquireNextImage2KHR(VkDevice device, const VkAcquireNextImageInfoKHR * pAcquireInfo, uint32_t * pImageIndex);
VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkDisplayPropertiesKHR * pProperties);
VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkDisplayPlanePropertiesKHR * pProperties);
VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t * pDisplayCount, VkDisplayKHR * pDisplays);
VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t * pPropertyCount, VkDisplayModePropertiesKHR * pProperties);
VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDisplayModeKHR * pMode);
VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR * pCapabilities);
VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, const VkDisplaySurfaceCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkSwapchainKHR * pSwapchains);
#if defined(VK_USE_PLATFORM_XLIB_KHR)
VkResult vkCreateXlibSurfaceKHR(VkInstance instance, const VkXlibSurfaceCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
VkBool32 vkGetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, Display * dpy, VisualID visualID);
#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
VkResult vkCreateXcbSurfaceKHR(VkInstance instance, const VkXcbSurfaceCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
VkBool32 vkGetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, xcb_connection_t * connection, xcb_visualid_t visual_id);
#endif
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, const VkWaylandSurfaceCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
VkBool32 vkGetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, struct wl_display * display);
#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, const VkAndroidSurfaceCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
VkResult vkCreateWin32SurfaceKHR(VkInstance instance, const VkWin32SurfaceCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
VkBool32 vkGetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex);
#endif
VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, const VkDebugReportCallbackCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDebugReportCallbackEXT * pCallback);
void vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks * pAllocator);
void vkDebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char * pLayerPrefix, const char * pMessage);
VkResult vkDebugMarkerSetObjectTagEXT(VkDevice device, const VkDebugMarkerObjectTagInfoEXT * pTagInfo);
VkResult vkDebugMarkerSetObjectNameEXT(VkDevice device, const VkDebugMarkerObjectNameInfoEXT * pNameInfo);
void vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT * pMarkerInfo);
void vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer);
void vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT * pMarkerInfo);
VkResult vkGetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice, const VkVideoProfileInfoKHR * pVideoProfile, VkVideoCapabilitiesKHR * pCapabilities);
VkResult vkGetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoFormatInfoKHR * pVideoFormatInfo, uint32_t * pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR * pVideoFormatProperties);
VkResult vkCreateVideoSessionKHR(VkDevice device, const VkVideoSessionCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkVideoSessionKHR * pVideoSession);
void vkDestroyVideoSessionKHR(VkDevice device, VkVideoSessionKHR videoSession, const VkAllocationCallbacks * pAllocator);
VkResult vkGetVideoSessionMemoryRequirementsKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t * pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR * pMemoryRequirements);
VkResult vkBindVideoSessionMemoryKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t bindSessionMemoryInfoCount, const VkBindVideoSessionMemoryInfoKHR * pBindSessionMemoryInfos);
VkResult vkCreateVideoSessionParametersKHR(VkDevice device, const VkVideoSessionParametersCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkVideoSessionParametersKHR * pVideoSessionParameters);
VkResult vkUpdateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkVideoSessionParametersUpdateInfoKHR * pUpdateInfo);
void vkDestroyVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkAllocationCallbacks * pAllocator);
void vkCmdBeginVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoBeginCodingInfoKHR * pBeginInfo);
void vkCmdEndVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoEndCodingInfoKHR * pEndCodingInfo);
void vkCmdControlVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoCodingControlInfoKHR * pCodingControlInfo);
void vkCmdDecodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoDecodeInfoKHR * pDecodeInfo);
void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer * pBuffers, const VkDeviceSize * pOffsets, const VkDeviceSize * pSizes);
void vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer * pCounterBuffers, const VkDeviceSize * pCounterBufferOffsets);
void vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer * pCounterBuffers, const VkDeviceSize * pCounterBufferOffsets);
void vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index);
void vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index);
void vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride);
VkResult vkCreateCuModuleNVX(VkDevice device, const VkCuModuleCreateInfoNVX * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkCuModuleNVX * pModule);
VkResult vkCreateCuFunctionNVX(VkDevice device, const VkCuFunctionCreateInfoNVX * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkCuFunctionNVX * pFunction);
void vkDestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module, const VkAllocationCallbacks * pAllocator);
void vkDestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX function, const VkAllocationCallbacks * pAllocator);
void vkCmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer, const VkCuLaunchInfoNVX * pLaunchInfo);
uint32_t vkGetImageViewHandleNVX(VkDevice device, const VkImageViewHandleInfoNVX * pInfo);
uint64_t vkGetImageViewHandle64NVX(VkDevice device, const VkImageViewHandleInfoNVX * pInfo);
VkResult vkGetImageViewAddressNVX(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX * pProperties);
void vkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
void vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
VkResult vkGetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t * pInfoSize, void * pInfo);
void vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRenderingInfo * pRenderingInfo);
void vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer);
#if defined(VK_USE_PLATFORM_GGP)
VkResult vkCreateStreamDescriptorSurfaceGGP(VkInstance instance, const VkStreamDescriptorSurfaceCreateInfoGGP * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV * pExternalImageFormatProperties);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
VkResult vkGetMemoryWin32HandleNV(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagsNV handleType, HANDLE * pHandle);
#endif
void vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2 * pFeatures);
void vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 * pProperties);
void vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2 * pFormatProperties);
VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2 * pImageFormatInfo, VkImageFormatProperties2 * pImageFormatProperties);
void vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t * pQueueFamilyPropertyCount, VkQueueFamilyProperties2 * pQueueFamilyProperties);
void vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2 * pMemoryProperties);
void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2 * pFormatInfo, uint32_t * pPropertyCount, VkSparseImageFormatProperties2 * pProperties);
void vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags * pPeerMemoryFeatures);
void vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask);
void vkCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
#if defined(VK_USE_PLATFORM_VI_NN)
VkResult vkCreateViSurfaceNN(VkInstance instance, const VkViSurfaceCreateInfoNN * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
void vkTrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);
VkResult vkEnumeratePhysicalDeviceGroupsKHR(VkInstance instance, uint32_t * pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties * pPhysicalDeviceGroupProperties);
void vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo * pExternalBufferInfo, VkExternalBufferProperties * pExternalBufferProperties);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
VkResult vkGetMemoryWin32HandleKHR(VkDevice device, const VkMemoryGetWin32HandleInfoKHR * pGetWin32HandleInfo, HANDLE * pHandle);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
VkResult vkGetMemoryWin32HandlePropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, HANDLE handle, VkMemoryWin32HandlePropertiesKHR * pMemoryWin32HandleProperties);
#endif
VkResult vkGetMemoryFdKHR(VkDevice device, const VkMemoryGetFdInfoKHR * pGetFdInfo, int * pFd);
VkResult vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR * pMemoryFdProperties);
void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo * pExternalSemaphoreInfo, VkExternalSemaphoreProperties * pExternalSemaphoreProperties);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
VkResult vkImportSemaphoreWin32HandleKHR(VkDevice device, const VkImportSemaphoreWin32HandleInfoKHR * pImportSemaphoreWin32HandleInfo);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
VkResult vkGetSemaphoreWin32HandleKHR(VkDevice device, const VkSemaphoreGetWin32HandleInfoKHR * pGetWin32HandleInfo, HANDLE * pHandle);
#endif
VkResult vkImportSemaphoreFdKHR(VkDevice device, const VkImportSemaphoreFdInfoKHR * pImportSemaphoreFdInfo);
VkResult vkGetSemaphoreFdKHR(VkDevice device, const VkSemaphoreGetFdInfoKHR * pGetFdInfo, int * pFd);
void vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet * pDescriptorWrites);
void vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void * pData);
void vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT * pConditionalRenderingBegin);
void vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer);
VkResult vkCreateDescriptorUpdateTemplateKHR(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDescriptorUpdateTemplate * pDescriptorUpdateTemplate);
void vkDestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks * pAllocator);
void vkUpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void * pData);
void vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV * pViewportWScalings);
VkResult vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display);
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
VkResult vkAcquireXlibDisplayEXT(VkPhysicalDevice physicalDevice, Display * dpy, VkDisplayKHR display);
#endif
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
VkResult vkGetRandROutputDisplayEXT(VkPhysicalDevice physicalDevice, Display * dpy, RROutput rrOutput, VkDisplayKHR * pDisplay);
#endif
VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT * pSurfaceCapabilities);
VkResult vkDisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, const VkDisplayPowerInfoEXT * pDisplayPowerInfo);
VkResult vkRegisterDeviceEventEXT(VkDevice device, const VkDeviceEventInfoEXT * pDeviceEventInfo, const VkAllocationCallbacks * pAllocator, VkFence * pFence);
VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, const VkDisplayEventInfoEXT * pDisplayEventInfo, const VkAllocationCallbacks * pAllocator, VkFence * pFence);
VkResult vkGetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t * pCounterValue);
VkResult vkGetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE * pDisplayTimingProperties);
VkResult vkGetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, uint32_t * pPresentationTimingCount, VkPastPresentationTimingGOOGLE * pPresentationTimings);
void vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D * pDiscardRectangles);
void vkCmdSetDiscardRectangleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable);
void vkCmdSetDiscardRectangleModeEXT(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode);
void vkSetHdrMetadataEXT(VkDevice device, uint32_t swapchainCount, const VkSwapchainKHR * pSwapchains, const VkHdrMetadataEXT * pMetadata);
VkResult vkCreateRenderPass2KHR(VkDevice device, const VkRenderPassCreateInfo2 * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkRenderPass * pRenderPass);
void vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo * pRenderPassBegin, const VkSubpassBeginInfo * pSubpassBeginInfo);
void vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo * pSubpassBeginInfo, const VkSubpassEndInfo * pSubpassEndInfo);
void vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfo * pSubpassEndInfo);
VkResult vkGetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain);
void vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo * pExternalFenceInfo, VkExternalFenceProperties * pExternalFenceProperties);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
VkResult vkImportFenceWin32HandleKHR(VkDevice device, const VkImportFenceWin32HandleInfoKHR * pImportFenceWin32HandleInfo);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
VkResult vkGetFenceWin32HandleKHR(VkDevice device, const VkFenceGetWin32HandleInfoKHR * pGetWin32HandleInfo, HANDLE * pHandle);
#endif
VkResult vkImportFenceFdKHR(VkDevice device, const VkImportFenceFdInfoKHR * pImportFenceFdInfo);
VkResult vkGetFenceFdKHR(VkDevice device, const VkFenceGetFdInfoKHR * pGetFdInfo, int * pFd);
VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t * pCounterCount, VkPerformanceCounterKHR * pCounters, VkPerformanceCounterDescriptionKHR * pCounterDescriptions);
void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, const VkQueryPoolPerformanceCreateInfoKHR * pPerformanceQueryCreateInfo, uint32_t * pNumPasses);
VkResult vkAcquireProfilingLockKHR(VkDevice device, const VkAcquireProfilingLockInfoKHR * pInfo);
void vkReleaseProfilingLockKHR(VkDevice device);
VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR * pSurfaceInfo, VkSurfaceCapabilities2KHR * pSurfaceCapabilities);
VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR * pSurfaceInfo, uint32_t * pSurfaceFormatCount, VkSurfaceFormat2KHR * pSurfaceFormats);
VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkDisplayProperties2KHR * pProperties);
VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkDisplayPlaneProperties2KHR * pProperties);
VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t * pPropertyCount, VkDisplayModeProperties2KHR * pProperties);
VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkDisplayPlaneInfo2KHR * pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR * pCapabilities);
#if defined(VK_USE_PLATFORM_IOS_MVK)
VkResult vkCreateIOSSurfaceMVK(VkInstance instance, const VkIOSSurfaceCreateInfoMVK * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_MACOS_MVK)
VkResult vkCreateMacOSSurfaceMVK(VkInstance instance, const VkMacOSSurfaceCreateInfoMVK * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
VkResult vkSetDebugUtilsObjectNameEXT(VkDevice device, const VkDebugUtilsObjectNameInfoEXT * pNameInfo);
VkResult vkSetDebugUtilsObjectTagEXT(VkDevice device, const VkDebugUtilsObjectTagInfoEXT * pTagInfo);
void vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT * pLabelInfo);
void vkQueueEndDebugUtilsLabelEXT(VkQueue queue);
void vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT * pLabelInfo);
void vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT * pLabelInfo);
void vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer);
void vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT * pLabelInfo);
VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDebugUtilsMessengerEXT * pMessenger);
void vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, const VkAllocationCallbacks * pAllocator);
void vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT * pCallbackData);
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
VkResult vkGetAndroidHardwareBufferPropertiesANDROID(VkDevice device, const struct AHardwareBuffer * buffer, VkAndroidHardwareBufferPropertiesANDROID * pProperties);
#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
VkResult vkGetMemoryAndroidHardwareBufferANDROID(VkDevice device, const VkMemoryGetAndroidHardwareBufferInfoANDROID * pInfo, struct AHardwareBuffer ** pBuffer);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
VkResult vkCreateExecutionGraphPipelinesAMDX(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkExecutionGraphPipelineCreateInfoAMDX * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkPipeline * pPipelines);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
VkResult vkGetExecutionGraphPipelineScratchSizeAMDX(VkDevice device, VkPipeline executionGraph, VkExecutionGraphPipelineScratchSizeAMDX * pSizeInfo);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
VkResult vkGetExecutionGraphPipelineNodeIndexAMDX(VkDevice device, VkPipeline executionGraph, const VkPipelineShaderStageNodeCreateInfoAMDX * pNodeInfo, uint32_t * pNodeIndex);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
void vkCmdInitializeGraphScratchMemoryAMDX(VkCommandBuffer commandBuffer, VkPipeline executionGraph, VkDeviceAddress scratch, VkDeviceSize scratchSize);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
void vkCmdDispatchGraphAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, VkDeviceSize scratchSize, const VkDispatchGraphCountInfoAMDX * pCountInfo);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
void vkCmdDispatchGraphIndirectAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, VkDeviceSize scratchSize, const VkDispatchGraphCountInfoAMDX * pCountInfo);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
void vkCmdDispatchGraphIndirectCountAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, VkDeviceSize scratchSize, VkDeviceAddress countInfo);
#endif
void vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT * pSampleLocationsInfo);
void vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT * pMultisampleProperties);
void vkGetImageMemoryRequirements2KHR(VkDevice device, const VkImageMemoryRequirementsInfo2 * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
void vkGetBufferMemoryRequirements2KHR(VkDevice device, const VkBufferMemoryRequirementsInfo2 * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
void vkGetImageSparseMemoryRequirements2KHR(VkDevice device, const VkImageSparseMemoryRequirementsInfo2 * pInfo, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 * pSparseMemoryRequirements);
VkResult vkCreateAccelerationStructureKHR(VkDevice device, const VkAccelerationStructureCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkAccelerationStructureKHR * pAccelerationStructure);
void vkDestroyAccelerationStructureKHR(VkDevice device, VkAccelerationStructureKHR accelerationStructure, const VkAllocationCallbacks * pAllocator);
void vkCmdBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR * pInfos, const VkAccelerationStructureBuildRangeInfoKHR * const* ppBuildRangeInfos);
void vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR * pInfos, const VkDeviceAddress * pIndirectDeviceAddresses, const uint32_t * pIndirectStrides, const uint32_t * const* ppMaxPrimitiveCounts);
VkResult vkBuildAccelerationStructuresKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR * pInfos, const VkAccelerationStructureBuildRangeInfoKHR * const* ppBuildRangeInfos);
VkResult vkCopyAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureInfoKHR * pInfo);
VkResult vkCopyAccelerationStructureToMemoryKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureToMemoryInfoKHR * pInfo);
VkResult vkCopyMemoryToAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToAccelerationStructureInfoKHR * pInfo);
VkResult vkWriteAccelerationStructuresPropertiesKHR(VkDevice device, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR * pAccelerationStructures, VkQueryType queryType, size_t dataSize, void * pData, size_t stride);
void vkCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureInfoKHR * pInfo);
void vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR * pInfo);
void vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR * pInfo);
VkDeviceAddress vkGetAccelerationStructureDeviceAddressKHR(VkDevice device, const VkAccelerationStructureDeviceAddressInfoKHR * pInfo);
void vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR * pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery);
void vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice device, const VkAccelerationStructureVersionInfoKHR * pVersionInfo, VkAccelerationStructureCompatibilityKHR * pCompatibility);
void vkGetAccelerationStructureBuildSizesKHR(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkAccelerationStructureBuildGeometryInfoKHR * pBuildInfo, const uint32_t * pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR * pSizeInfo);
void vkCmdTraceRaysKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR * pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth);
VkResult vkCreateRayTracingPipelinesKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoKHR * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkPipeline * pPipelines);
VkResult vkGetRayTracingShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void * pData);
VkResult vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void * pData);
void vkCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR * pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR * pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress);
VkDeviceSize vkGetRayTracingShaderGroupStackSizeKHR(VkDevice device, VkPipeline pipeline, uint32_t group, VkShaderGroupShaderKHR groupShader);
void vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize);
VkResult vkCreateSamplerYcbcrConversionKHR(VkDevice device, const VkSamplerYcbcrConversionCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSamplerYcbcrConversion * pYcbcrConversion);
void vkDestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks * pAllocator);
VkResult vkBindBufferMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo * pBindInfos);
VkResult vkBindImageMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo * pBindInfos);
VkResult vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT * pProperties);
VkResult vkCreateValidationCacheEXT(VkDevice device, const VkValidationCacheCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkValidationCacheEXT * pValidationCache);
void vkDestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, const VkAllocationCallbacks * pAllocator);
VkResult vkMergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, const VkValidationCacheEXT * pSrcCaches);
VkResult vkGetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, size_t * pDataSize, void * pData);
void vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout);
void vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkShadingRatePaletteNV * pShadingRatePalettes);
void vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const VkCoarseSampleOrderCustomNV * pCustomSampleOrders);
VkResult vkCreateAccelerationStructureNV(VkDevice device, const VkAccelerationStructureCreateInfoNV * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkAccelerationStructureNV * pAccelerationStructure);
void vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, const VkAllocationCallbacks * pAllocator);
void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoNV * pInfo, VkMemoryRequirements2KHR * pMemoryRequirements);
VkResult vkBindAccelerationStructureMemoryNV(VkDevice device, uint32_t bindInfoCount, const VkBindAccelerationStructureMemoryInfoNV * pBindInfos);
void vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, const VkAccelerationStructureInfoNV * pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset);
void vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode);
void vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth);
VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoNV * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkPipeline * pPipelines);
VkResult vkGetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void * pData);
VkResult vkGetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void * pData);
void vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureNV * pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery);
VkResult vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint32_t shader);
void vkGetDescriptorSetLayoutSupportKHR(VkDevice device, const VkDescriptorSetLayoutCreateInfo * pCreateInfo, VkDescriptorSetLayoutSupport * pSupport);
void vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
void vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
VkResult vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const void * pHostPointer, VkMemoryHostPointerPropertiesEXT * pMemoryHostPointerProperties);
void vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker);
void vkCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker);
VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint32_t * pTimeDomainCount, VkTimeDomainKHR * pTimeDomains);
VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoKHR * pTimestampInfos, uint64_t * pTimestamps, uint64_t * pMaxDeviation);
void vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask);
void vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
void vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
void vkCmdSetExclusiveScissorEnableNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkBool32 * pExclusiveScissorEnables);
void vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkRect2D * pExclusiveScissors);
void vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, const void * pCheckpointMarker);
void vkGetQueueCheckpointDataNV(VkQueue queue, uint32_t * pCheckpointDataCount, VkCheckpointDataNV * pCheckpointData);
void vkGetQueueCheckpointData2NV(VkQueue queue, uint32_t * pCheckpointDataCount, VkCheckpointData2NV * pCheckpointData);
VkResult vkGetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, uint64_t * pValue);
VkResult vkWaitSemaphoresKHR(VkDevice device, const VkSemaphoreWaitInfo * pWaitInfo, uint64_t timeout);
VkResult vkSignalSemaphoreKHR(VkDevice device, const VkSemaphoreSignalInfo * pSignalInfo);
VkResult vkInitializePerformanceApiINTEL(VkDevice device, const VkInitializePerformanceApiInfoINTEL * pInitializeInfo);
void vkUninitializePerformanceApiINTEL(VkDevice device);
VkResult vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL * pMarkerInfo);
VkResult vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceStreamMarkerInfoINTEL * pMarkerInfo);
VkResult vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, const VkPerformanceOverrideInfoINTEL * pOverrideInfo);
VkResult vkAcquirePerformanceConfigurationINTEL(VkDevice device, const VkPerformanceConfigurationAcquireInfoINTEL * pAcquireInfo, VkPerformanceConfigurationINTEL * pConfiguration);
VkResult vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration);
VkResult vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration);
VkResult vkGetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL * pValue);
void vkSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable);
#if defined(VK_USE_PLATFORM_FUCHSIA)
VkResult vkCreateImagePipeSurfaceFUCHSIA(VkInstance instance, const VkImagePipeSurfaceCreateInfoFUCHSIA * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
VkResult vkCreateMetalSurfaceEXT(VkInstance instance, const VkMetalSurfaceCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice physicalDevice, uint32_t * pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR * pFragmentShadingRates);
void vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const VkExtent2D * pFragmentSize, const VkFragmentShadingRateCombinerOpKHR combinerOps [2]);
void vkCmdSetRenderingAttachmentLocationsKHR(VkCommandBuffer commandBuffer, const VkRenderingAttachmentLocationInfo * pLocationInfo);
void vkCmdSetRenderingInputAttachmentIndicesKHR(VkCommandBuffer commandBuffer, const VkRenderingInputAttachmentIndexInfo * pInputAttachmentIndexInfo);
VkDeviceAddress vkGetBufferDeviceAddressEXT(VkDevice device, const VkBufferDeviceAddressInfo * pInfo);
VkResult vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint32_t * pToolCount, VkPhysicalDeviceToolProperties * pToolProperties);
VkResult vkWaitForPresentKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t presentId, uint64_t timeout);
VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkCooperativeMatrixPropertiesNV * pProperties);
VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint32_t * pCombinationCount, VkFramebufferMixedSamplesCombinationNV * pCombinations);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
VkResult vkGetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR * pSurfaceInfo, uint32_t * pPresentModeCount, VkPresentModeKHR * pPresentModes);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
VkResult vkAcquireFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
VkResult vkReleaseFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
VkResult vkGetDeviceGroupSurfacePresentModes2EXT(VkDevice device, const VkPhysicalDeviceSurfaceInfo2KHR * pSurfaceInfo, VkDeviceGroupPresentModeFlagsKHR * pModes);
#endif
VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, const VkHeadlessSurfaceCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
VkDeviceAddress vkGetBufferDeviceAddressKHR(VkDevice device, const VkBufferDeviceAddressInfo * pInfo);
uint64_t vkGetBufferOpaqueCaptureAddressKHR(VkDevice device, const VkBufferDeviceAddressInfo * pInfo);
uint64_t vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo * pInfo);
void vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern);
void vkResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
void vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode);
void vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace);
void vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology);
void vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport * pViewports);
void vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D * pScissors);
void vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer * pBuffers, const VkDeviceSize * pOffsets, const VkDeviceSize * pSizes, const VkDeviceSize * pStrides);
void vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable);
void vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable);
void vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp);
void vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable);
void vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable);
void vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp);
VkResult vkCreateDeferredOperationKHR(VkDevice device, const VkAllocationCallbacks * pAllocator, VkDeferredOperationKHR * pDeferredOperation);
void vkDestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation, const VkAllocationCallbacks * pAllocator);
uint32_t vkGetDeferredOperationMaxConcurrencyKHR(VkDevice device, VkDeferredOperationKHR operation);
VkResult vkGetDeferredOperationResultKHR(VkDevice device, VkDeferredOperationKHR operation);
VkResult vkDeferredOperationJoinKHR(VkDevice device, VkDeferredOperationKHR operation);
VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, const VkPipelineInfoKHR * pPipelineInfo, uint32_t * pExecutableCount, VkPipelineExecutablePropertiesKHR * pProperties);
VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, const VkPipelineExecutableInfoKHR * pExecutableInfo, uint32_t * pStatisticCount, VkPipelineExecutableStatisticKHR * pStatistics);
VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, const VkPipelineExecutableInfoKHR * pExecutableInfo, uint32_t * pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR * pInternalRepresentations);
VkResult vkCopyMemoryToImageEXT(VkDevice device, const VkCopyMemoryToImageInfo * pCopyMemoryToImageInfo);
VkResult vkCopyImageToMemoryEXT(VkDevice device, const VkCopyImageToMemoryInfo * pCopyImageToMemoryInfo);
VkResult vkCopyImageToImageEXT(VkDevice device, const VkCopyImageToImageInfo * pCopyImageToImageInfo);
VkResult vkTransitionImageLayoutEXT(VkDevice device, uint32_t transitionCount, const VkHostImageLayoutTransitionInfo * pTransitions);
void vkGetImageSubresourceLayout2EXT(VkDevice device, VkImage image, const VkImageSubresource2 * pSubresource, VkSubresourceLayout2 * pLayout);
VkResult vkMapMemory2KHR(VkDevice device, const VkMemoryMapInfo * pMemoryMapInfo, void ** ppData);
VkResult vkUnmapMemory2KHR(VkDevice device, const VkMemoryUnmapInfo * pMemoryUnmapInfo);
VkResult vkReleaseSwapchainImagesEXT(VkDevice device, const VkReleaseSwapchainImagesInfoKHR * pReleaseInfo);
void vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice device, const VkGeneratedCommandsMemoryRequirementsInfoNV * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
void vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoNV * pGeneratedCommandsInfo);
void vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const VkGeneratedCommandsInfoNV * pGeneratedCommandsInfo);
void vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32_t groupIndex);
VkResult vkCreateIndirectCommandsLayoutNV(VkDevice device, const VkIndirectCommandsLayoutCreateInfoNV * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkIndirectCommandsLayoutNV * pIndirectCommandsLayout);
void vkDestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, const VkAllocationCallbacks * pAllocator);
void vkCmdSetDepthBias2EXT(VkCommandBuffer commandBuffer, const VkDepthBiasInfoEXT * pDepthBiasInfo);
VkResult vkAcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, VkDisplayKHR display);
VkResult vkGetDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId, VkDisplayKHR * display);
VkResult vkCreatePrivateDataSlotEXT(VkDevice device, const VkPrivateDataSlotCreateInfo * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkPrivateDataSlot * pPrivateDataSlot);
void vkDestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks * pAllocator);
VkResult vkSetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data);
void vkGetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t * pData);
VkResult vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR * pQualityLevelInfo, VkVideoEncodeQualityLevelPropertiesKHR * pQualityLevelProperties);
VkResult vkGetEncodedVideoSessionParametersKHR(VkDevice device, const VkVideoEncodeSessionParametersGetInfoKHR * pVideoSessionParametersInfo, VkVideoEncodeSessionParametersFeedbackInfoKHR * pFeedbackInfo, size_t * pDataSize, void * pData);
void vkCmdEncodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoEncodeInfoKHR * pEncodeInfo);
#if defined(VK_ENABLE_BETA_EXTENSIONS)
VkResult vkCreateCudaModuleNV(VkDevice device, const VkCudaModuleCreateInfoNV * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkCudaModuleNV * pModule);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
VkResult vkGetCudaModuleCacheNV(VkDevice device, VkCudaModuleNV module, size_t * pCacheSize, void * pCacheData);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
VkResult vkCreateCudaFunctionNV(VkDevice device, const VkCudaFunctionCreateInfoNV * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkCudaFunctionNV * pFunction);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
void vkDestroyCudaModuleNV(VkDevice device, VkCudaModuleNV module, const VkAllocationCallbacks * pAllocator);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
void vkDestroyCudaFunctionNV(VkDevice device, VkCudaFunctionNV function, const VkAllocationCallbacks * pAllocator);
#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
void vkCmdCudaLaunchKernelNV(VkCommandBuffer commandBuffer, const VkCudaLaunchInfoNV * pLaunchInfo);
#endif
void vkCmdDispatchTileQCOM(VkCommandBuffer commandBuffer, const VkDispatchTileInfoQCOM * pDispatchTileInfo);
void vkCmdBeginPerTileExecutionQCOM(VkCommandBuffer commandBuffer, const VkPerTileBeginInfoQCOM * pPerTileBeginInfo);
void vkCmdEndPerTileExecutionQCOM(VkCommandBuffer commandBuffer, const VkPerTileEndInfoQCOM * pPerTileEndInfo);
#if defined(VK_USE_PLATFORM_METAL_EXT)
void vkExportMetalObjectsEXT(VkDevice device, VkExportMetalObjectsInfoEXT * pMetalObjectsInfo);
#endif
void vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo * pDependencyInfo);
void vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask);
void vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent * pEvents, const VkDependencyInfo * pDependencyInfos);
void vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfo * pDependencyInfo);
void vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query);
VkResult vkQueueSubmit2KHR(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 * pSubmits, VkFence fence);
void vkGetDescriptorSetLayoutSizeEXT(VkDevice device, VkDescriptorSetLayout layout, VkDeviceSize * pLayoutSizeInBytes);
void vkGetDescriptorSetLayoutBindingOffsetEXT(VkDevice device, VkDescriptorSetLayout layout, uint32_t binding, VkDeviceSize * pOffset);
void vkGetDescriptorEXT(VkDevice device, const VkDescriptorGetInfoEXT * pDescriptorInfo, size_t dataSize, void * pDescriptor);
void vkCmdBindDescriptorBuffersEXT(VkCommandBuffer commandBuffer, uint32_t bufferCount, const VkDescriptorBufferBindingInfoEXT * pBindingInfos);
void vkCmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t setCount, const uint32_t * pBufferIndices, const VkDeviceSize * pOffsets);
void vkCmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set);
VkResult vkGetBufferOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkBufferCaptureDescriptorDataInfoEXT * pInfo, void * pData);
VkResult vkGetImageOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageCaptureDescriptorDataInfoEXT * pInfo, void * pData);
VkResult vkGetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageViewCaptureDescriptorDataInfoEXT * pInfo, void * pData);
VkResult vkGetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkSamplerCaptureDescriptorDataInfoEXT * pInfo, void * pData);
VkResult vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkAccelerationStructureCaptureDescriptorDataInfoEXT * pInfo, void * pData);
void vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, const VkFragmentShadingRateCombinerOpKHR combinerOps [2]);
void vkCmdDrawMeshTasksEXT(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
void vkCmdDrawMeshTasksIndirectEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
void vkCmdDrawMeshTasksIndirectCountEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
void vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 * pCopyBufferInfo);
void vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 * pCopyImageInfo);
void vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 * pCopyBufferToImageInfo);
void vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 * pCopyImageToBufferInfo);
void vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 * pBlitImageInfo);
void vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 * pResolveImageInfo);
VkResult vkGetDeviceFaultInfoEXT(VkDevice device, VkDeviceFaultCountsEXT * pFaultCounts, VkDeviceFaultInfoEXT * pFaultInfo);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
VkResult vkAcquireWinrtDisplayNV(VkPhysicalDevice physicalDevice, VkDisplayKHR display);
#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
VkResult vkGetWinrtDisplayNV(VkPhysicalDevice physicalDevice, uint32_t deviceRelativeId, VkDisplayKHR * pDisplay);
#endif
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
VkResult vkCreateDirectFBSurfaceEXT(VkInstance instance, const VkDirectFBSurfaceCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
VkBool32 vkGetPhysicalDeviceDirectFBPresentationSupportEXT(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, IDirectFB * dfb);
#endif
void vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT * pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT * pVertexAttributeDescriptions);
#if defined(VK_USE_PLATFORM_FUCHSIA)
VkResult vkGetMemoryZirconHandleFUCHSIA(VkDevice device, const VkMemoryGetZirconHandleInfoFUCHSIA * pGetZirconHandleInfo, zx_handle_t * pZirconHandle);
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
VkResult vkGetMemoryZirconHandlePropertiesFUCHSIA(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, zx_handle_t zirconHandle, VkMemoryZirconHandlePropertiesFUCHSIA * pMemoryZirconHandleProperties);
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
VkResult vkImportSemaphoreZirconHandleFUCHSIA(VkDevice device, const VkImportSemaphoreZirconHandleInfoFUCHSIA * pImportSemaphoreZirconHandleInfo);
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
VkResult vkGetSemaphoreZirconHandleFUCHSIA(VkDevice device, const VkSemaphoreGetZirconHandleInfoFUCHSIA * pGetZirconHandleInfo, zx_handle_t * pZirconHandle);
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
VkResult vkCreateBufferCollectionFUCHSIA(VkDevice device, const VkBufferCollectionCreateInfoFUCHSIA * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkBufferCollectionFUCHSIA * pCollection);
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
VkResult vkSetBufferCollectionImageConstraintsFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkImageConstraintsInfoFUCHSIA * pImageConstraintsInfo);
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
VkResult vkSetBufferCollectionBufferConstraintsFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkBufferConstraintsInfoFUCHSIA * pBufferConstraintsInfo);
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
void vkDestroyBufferCollectionFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkAllocationCallbacks * pAllocator);
#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
VkResult vkGetBufferCollectionPropertiesFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, VkBufferCollectionPropertiesFUCHSIA * pProperties);
#endif
VkResult vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice device, VkRenderPass renderpass, VkExtent2D * pMaxWorkgroupSize);
void vkCmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer);
void vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout);
VkResult vkGetMemoryRemoteAddressNV(VkDevice device, const VkMemoryGetRemoteAddressInfoNV * pMemoryGetRemoteAddressInfo, VkRemoteAddressNV * pAddress);
VkResult vkGetPipelinePropertiesEXT(VkDevice device, const VkPipelineInfoEXT * pPipelineInfo, VkBaseOutStructure * pPipelineProperties);
void vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_t patchControlPoints);
void vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable);
void vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable);
void vkCmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp);
void vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable);
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
VkResult vkCreateScreenSurfaceQNX(VkInstance instance, const VkScreenSurfaceCreateInfoQNX * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
VkBool32 vkGetPhysicalDeviceScreenPresentationSupportQNX(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, struct _screen_window * window);
#endif
void vkCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkBool32 * pColorWriteEnables);
void vkCmdTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress);
void vkCmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawInfoEXT * pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride);
void vkCmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawIndexedInfoEXT * pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, const int32_t * pVertexOffset);
VkResult vkCreateMicromapEXT(VkDevice device, const VkMicromapCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkMicromapEXT * pMicromap);
void vkDestroyMicromapEXT(VkDevice device, VkMicromapEXT micromap, const VkAllocationCallbacks * pAllocator);
void vkCmdBuildMicromapsEXT(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkMicromapBuildInfoEXT * pInfos);
VkResult vkBuildMicromapsEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkMicromapBuildInfoEXT * pInfos);
VkResult vkCopyMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapInfoEXT * pInfo);
VkResult vkCopyMicromapToMemoryEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapToMemoryInfoEXT * pInfo);
VkResult vkCopyMemoryToMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToMicromapInfoEXT * pInfo);
VkResult vkWriteMicromapsPropertiesEXT(VkDevice device, uint32_t micromapCount, const VkMicromapEXT * pMicromaps, VkQueryType queryType, size_t dataSize, void * pData, size_t stride);
void vkCmdCopyMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapInfoEXT * pInfo);
void vkCmdCopyMicromapToMemoryEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapToMemoryInfoEXT * pInfo);
void vkCmdCopyMemoryToMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMemoryToMicromapInfoEXT * pInfo);
void vkCmdWriteMicromapsPropertiesEXT(VkCommandBuffer commandBuffer, uint32_t micromapCount, const VkMicromapEXT * pMicromaps, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery);
void vkGetDeviceMicromapCompatibilityEXT(VkDevice device, const VkMicromapVersionInfoEXT * pVersionInfo, VkAccelerationStructureCompatibilityKHR * pCompatibility);
void vkGetMicromapBuildSizesEXT(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkMicromapBuildInfoEXT * pBuildInfo, VkMicromapBuildSizesInfoEXT * pSizeInfo);
void vkCmdDrawClusterHUAWEI(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
void vkCmdDrawClusterIndirectHUAWEI(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);
void vkSetDeviceMemoryPriorityEXT(VkDevice device, VkDeviceMemory memory, float priority);
void vkGetDeviceBufferMemoryRequirementsKHR(VkDevice device, const VkDeviceBufferMemoryRequirements * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
void vkGetDeviceImageMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
void vkGetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements * pInfo, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 * pSparseMemoryRequirements);
void vkGetDescriptorSetLayoutHostMappingInfoVALVE(VkDevice device, const VkDescriptorSetBindingReferenceVALVE * pBindingReference, VkDescriptorSetLayoutHostMappingInfoVALVE * pHostMapping);
void vkGetDescriptorSetHostMappingVALVE(VkDevice device, VkDescriptorSet descriptorSet, void ** ppData);
void vkCmdCopyMemoryIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride);
void vkCmdCopyMemoryToImageIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride, VkImage dstImage, VkImageLayout dstImageLayout, const VkImageSubresourceLayers * pImageSubresources);
void vkCmdDecompressMemoryNV(VkCommandBuffer commandBuffer, uint32_t decompressRegionCount, const VkDecompressMemoryRegionNV * pDecompressMemoryRegions);
void vkCmdDecompressMemoryIndirectCountNV(VkCommandBuffer commandBuffer, VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint32_t stride);
void vkGetPipelineIndirectMemoryRequirementsNV(VkDevice device, const VkComputePipelineCreateInfo * pCreateInfo, VkMemoryRequirements2 * pMemoryRequirements);
void vkCmdUpdatePipelineIndirectBufferNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
VkDeviceAddress vkGetPipelineIndirectDeviceAddressNV(VkDevice device, const VkPipelineIndirectDeviceAddressInfoNV * pInfo);
void vkCmdSetDepthClampEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable);
void vkCmdSetPolygonModeEXT(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode);
void vkCmdSetRasterizationSamplesEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits rasterizationSamples);
void vkCmdSetSampleMaskEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits samples, const VkSampleMask * pSampleMask);
void vkCmdSetAlphaToCoverageEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable);
void vkCmdSetAlphaToOneEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable);
void vkCmdSetLogicOpEnableEXT(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable);
void vkCmdSetColorBlendEnableEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkBool32 * pColorBlendEnables);
void vkCmdSetColorBlendEquationEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendEquationEXT * pColorBlendEquations);
void vkCmdSetColorWriteMaskEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorComponentFlags * pColorWriteMasks);
void vkCmdSetTessellationDomainOriginEXT(VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin);
void vkCmdSetRasterizationStreamEXT(VkCommandBuffer commandBuffer, uint32_t rasterizationStream);
void vkCmdSetConservativeRasterizationModeEXT(VkCommandBuffer commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode);
void vkCmdSetExtraPrimitiveOverestimationSizeEXT(VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize);
void vkCmdSetDepthClipEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable);
void vkCmdSetSampleLocationsEnableEXT(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable);
void vkCmdSetColorBlendAdvancedEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendAdvancedEXT * pColorBlendAdvanced);
void vkCmdSetProvokingVertexModeEXT(VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode);
void vkCmdSetLineRasterizationModeEXT(VkCommandBuffer commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode);
void vkCmdSetLineStippleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable);
void vkCmdSetDepthClipNegativeOneToOneEXT(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne);
void vkCmdSetViewportWScalingEnableNV(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable);
void vkCmdSetViewportSwizzleNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportSwizzleNV * pViewportSwizzles);
void vkCmdSetCoverageToColorEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable);
void vkCmdSetCoverageToColorLocationNV(VkCommandBuffer commandBuffer, uint32_t coverageToColorLocation);
void vkCmdSetCoverageModulationModeNV(VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode);
void vkCmdSetCoverageModulationTableEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable);
void vkCmdSetCoverageModulationTableNV(VkCommandBuffer commandBuffer, uint32_t coverageModulationTableCount, const float * pCoverageModulationTable);
void vkCmdSetShadingRateImageEnableNV(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable);
void vkCmdSetRepresentativeFragmentTestEnableNV(VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable);
void vkCmdSetCoverageReductionModeNV(VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode);
VkResult vkCreateTensorARM(VkDevice device, const VkTensorCreateInfoARM * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkTensorARM * pTensor);
void vkDestroyTensorARM(VkDevice device, VkTensorARM tensor, const VkAllocationCallbacks * pAllocator);
VkResult vkCreateTensorViewARM(VkDevice device, const VkTensorViewCreateInfoARM * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkTensorViewARM * pView);
void vkDestroyTensorViewARM(VkDevice device, VkTensorViewARM tensorView, const VkAllocationCallbacks * pAllocator);
void vkGetTensorMemoryRequirementsARM(VkDevice device, const VkTensorMemoryRequirementsInfoARM * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
VkResult vkBindTensorMemoryARM(VkDevice device, uint32_t bindInfoCount, const VkBindTensorMemoryInfoARM * pBindInfos);
void vkGetDeviceTensorMemoryRequirementsARM(VkDevice device, const VkDeviceTensorMemoryRequirementsARM * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
void vkCmdCopyTensorARM(VkCommandBuffer commandBuffer, const VkCopyTensorInfoARM * pCopyTensorInfo);
void vkGetPhysicalDeviceExternalTensorPropertiesARM(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalTensorInfoARM * pExternalTensorInfo, VkExternalTensorPropertiesARM * pExternalTensorProperties);
VkResult vkGetTensorOpaqueCaptureDescriptorDataARM(VkDevice device, const VkTensorCaptureDescriptorDataInfoARM * pInfo, void * pData);
VkResult vkGetTensorViewOpaqueCaptureDescriptorDataARM(VkDevice device, const VkTensorViewCaptureDescriptorDataInfoARM * pInfo, void * pData);
void vkGetShaderModuleIdentifierEXT(VkDevice device, VkShaderModule shaderModule, VkShaderModuleIdentifierEXT * pIdentifier);
void vkGetShaderModuleCreateInfoIdentifierEXT(VkDevice device, const VkShaderModuleCreateInfo * pCreateInfo, VkShaderModuleIdentifierEXT * pIdentifier);
VkResult vkGetPhysicalDeviceOpticalFlowImageFormatsNV(VkPhysicalDevice physicalDevice, const VkOpticalFlowImageFormatInfoNV * pOpticalFlowImageFormatInfo, uint32_t * pFormatCount, VkOpticalFlowImageFormatPropertiesNV * pImageFormatProperties);
VkResult vkCreateOpticalFlowSessionNV(VkDevice device, const VkOpticalFlowSessionCreateInfoNV * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkOpticalFlowSessionNV * pSession);
void vkDestroyOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionNV session, const VkAllocationCallbacks * pAllocator);
VkResult vkBindOpticalFlowSessionImageNV(VkDevice device, VkOpticalFlowSessionNV session, VkOpticalFlowSessionBindingPointNV bindingPoint, VkImageView view, VkImageLayout layout);
void vkCmdOpticalFlowExecuteNV(VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session, const VkOpticalFlowExecuteInfoNV * pExecuteInfo);
void vkCmdBindIndexBuffer2KHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType);
void vkGetRenderingAreaGranularityKHR(VkDevice device, const VkRenderingAreaInfo * pRenderingAreaInfo, VkExtent2D * pGranularity);
void vkGetDeviceImageSubresourceLayoutKHR(VkDevice device, const VkDeviceImageSubresourceInfo * pInfo, VkSubresourceLayout2 * pLayout);
void vkGetImageSubresourceLayout2KHR(VkDevice device, VkImage image, const VkImageSubresource2 * pSubresource, VkSubresourceLayout2 * pLayout);
void vkAntiLagUpdateAMD(VkDevice device, const VkAntiLagDataAMD * pData);
VkResult vkWaitForPresent2KHR(VkDevice device, VkSwapchainKHR swapchain, const VkPresentWait2InfoKHR * pPresentWait2Info);
VkResult vkCreateShadersEXT(VkDevice device, uint32_t createInfoCount, const VkShaderCreateInfoEXT * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkShaderEXT * pShaders);
void vkDestroyShaderEXT(VkDevice device, VkShaderEXT shader, const VkAllocationCallbacks * pAllocator);
VkResult vkGetShaderBinaryDataEXT(VkDevice device, VkShaderEXT shader, size_t * pDataSize, void * pData);
void vkCmdBindShadersEXT(VkCommandBuffer commandBuffer, uint32_t stageCount, const VkShaderStageFlagBits * pStages, const VkShaderEXT * pShaders);
void vkCmdSetDepthClampRangeEXT(VkCommandBuffer commandBuffer, VkDepthClampModeEXT depthClampMode, const VkDepthClampRangeEXT * pDepthClampRange);
VkResult vkCreatePipelineBinariesKHR(VkDevice device, const VkPipelineBinaryCreateInfoKHR * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkPipelineBinaryHandlesInfoKHR * pBinaries);
void vkDestroyPipelineBinaryKHR(VkDevice device, VkPipelineBinaryKHR pipelineBinary, const VkAllocationCallbacks * pAllocator);
VkResult vkGetPipelineKeyKHR(VkDevice device, const VkPipelineCreateInfoKHR * pPipelineCreateInfo, VkPipelineBinaryKeyKHR * pPipelineKey);
VkResult vkGetPipelineBinaryDataKHR(VkDevice device, const VkPipelineBinaryDataInfoKHR * pInfo, VkPipelineBinaryKeyKHR * pPipelineBinaryKey, size_t * pPipelineBinaryDataSize, void * pPipelineBinaryData);
VkResult vkReleaseCapturedPipelineDataKHR(VkDevice device, const VkReleaseCapturedPipelineDataInfoKHR * pInfo, const VkAllocationCallbacks * pAllocator);
VkResult vkGetFramebufferTilePropertiesQCOM(VkDevice device, VkFramebuffer framebuffer, uint32_t * pPropertiesCount, VkTilePropertiesQCOM * pProperties);
VkResult vkGetDynamicRenderingTilePropertiesQCOM(VkDevice device, const VkRenderingInfo * pRenderingInfo, VkTilePropertiesQCOM * pProperties);
VkResult vkReleaseSwapchainImagesKHR(VkDevice device, const VkReleaseSwapchainImagesInfoKHR * pReleaseInfo);
VkResult vkGetPhysicalDeviceCooperativeVectorPropertiesNV(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkCooperativeVectorPropertiesNV * pProperties);
VkResult vkConvertCooperativeVectorMatrixNV(VkDevice device, const VkConvertCooperativeVectorMatrixInfoNV * pInfo);
void vkCmdConvertCooperativeVectorMatrixNV(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkConvertCooperativeVectorMatrixInfoNV * pInfos);
VkResult vkSetLatencySleepModeNV(VkDevice device, VkSwapchainKHR swapchain, const VkLatencySleepModeInfoNV * pSleepModeInfo);
VkResult vkLatencySleepNV(VkDevice device, VkSwapchainKHR swapchain, const VkLatencySleepInfoNV * pSleepInfo);
void vkSetLatencyMarkerNV(VkDevice device, VkSwapchainKHR swapchain, const VkSetLatencyMarkerInfoNV * pLatencyMarkerInfo);
void vkGetLatencyTimingsNV(VkDevice device, VkSwapchainKHR swapchain, VkGetLatencyMarkerInfoNV * pLatencyMarkerInfo);
void vkQueueNotifyOutOfBandNV(VkQueue queue, const VkOutOfBandQueueTypeInfoNV * pQueueTypeInfo);
VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkCooperativeMatrixPropertiesKHR * pProperties);
VkResult vkCreateDataGraphPipelinesARM(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkDataGraphPipelineCreateInfoARM * pCreateInfos, const VkAllocationCallbacks * pAllocator, VkPipeline * pPipelines);
VkResult vkCreateDataGraphPipelineSessionARM(VkDevice device, const VkDataGraphPipelineSessionCreateInfoARM * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkDataGraphPipelineSessionARM * pSession);
VkResult vkGetDataGraphPipelineSessionBindPointRequirementsARM(VkDevice device, const VkDataGraphPipelineSessionBindPointRequirementsInfoARM * pInfo, uint32_t * pBindPointRequirementCount, VkDataGraphPipelineSessionBindPointRequirementARM * pBindPointRequirements);
void vkGetDataGraphPipelineSessionMemoryRequirementsARM(VkDevice device, const VkDataGraphPipelineSessionMemoryRequirementsInfoARM * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
VkResult vkBindDataGraphPipelineSessionMemoryARM(VkDevice device, uint32_t bindInfoCount, const VkBindDataGraphPipelineSessionMemoryInfoARM * pBindInfos);
void vkDestroyDataGraphPipelineSessionARM(VkDevice device, VkDataGraphPipelineSessionARM session, const VkAllocationCallbacks * pAllocator);
void vkCmdDispatchDataGraphARM(VkCommandBuffer commandBuffer, VkDataGraphPipelineSessionARM session, const VkDataGraphPipelineDispatchInfoARM * pInfo);
VkResult vkGetDataGraphPipelineAvailablePropertiesARM(VkDevice device, const VkDataGraphPipelineInfoARM * pPipelineInfo, uint32_t * pPropertiesCount, VkDataGraphPipelinePropertyARM * pProperties);
VkResult vkGetDataGraphPipelinePropertiesARM(VkDevice device, const VkDataGraphPipelineInfoARM * pPipelineInfo, uint32_t propertiesCount, VkDataGraphPipelinePropertyQueryResultARM * pProperties);
VkResult vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t * pQueueFamilyDataGraphPropertyCount, VkQueueFamilyDataGraphPropertiesARM * pQueueFamilyDataGraphProperties);
void vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM * pQueueFamilyDataGraphProcessingEngineInfo, VkQueueFamilyDataGraphProcessingEnginePropertiesARM * pQueueFamilyDataGraphProcessingEngineProperties);
void vkCmdSetAttachmentFeedbackLoopEnableEXT(VkCommandBuffer commandBuffer, VkImageAspectFlags aspectMask);
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
VkResult vkGetScreenBufferPropertiesQNX(VkDevice device, const struct _screen_buffer * buffer, VkScreenBufferPropertiesQNX * pProperties);
#endif
void vkCmdSetLineStippleKHR(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern);
VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(VkPhysicalDevice physicalDevice, uint32_t * pTimeDomainCount, VkTimeDomainKHR * pTimeDomains);
VkResult vkGetCalibratedTimestampsKHR(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoKHR * pTimestampInfos, uint64_t * pTimestamps, uint64_t * pMaxDeviation);
void vkCmdBindDescriptorSets2KHR(VkCommandBuffer commandBuffer, const VkBindDescriptorSetsInfo * pBindDescriptorSetsInfo);
void vkCmdPushConstants2KHR(VkCommandBuffer commandBuffer, const VkPushConstantsInfo * pPushConstantsInfo);
void vkCmdPushDescriptorSet2KHR(VkCommandBuffer commandBuffer, const VkPushDescriptorSetInfo * pPushDescriptorSetInfo);
void vkCmdPushDescriptorSetWithTemplate2KHR(VkCommandBuffer commandBuffer, const VkPushDescriptorSetWithTemplateInfo * pPushDescriptorSetWithTemplateInfo);
void vkCmdSetDescriptorBufferOffsets2EXT(VkCommandBuffer commandBuffer, const VkSetDescriptorBufferOffsetsInfoEXT * pSetDescriptorBufferOffsetsInfo);
void vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(VkCommandBuffer commandBuffer, const VkBindDescriptorBufferEmbeddedSamplersInfoEXT * pBindDescriptorBufferEmbeddedSamplersInfo);
void vkCmdBindTileMemoryQCOM(VkCommandBuffer commandBuffer, const VkTileMemoryBindInfoQCOM * pTileMemoryBindInfo);
void vkCmdCopyMemoryIndirectKHR(VkCommandBuffer commandBuffer, const VkCopyMemoryIndirectInfoKHR * pCopyMemoryIndirectInfo);
void vkCmdCopyMemoryToImageIndirectKHR(VkCommandBuffer commandBuffer, const VkCopyMemoryToImageIndirectInfoKHR * pCopyMemoryToImageIndirectInfo);
VkResult vkCreateExternalComputeQueueNV(VkDevice device, const VkExternalComputeQueueCreateInfoNV * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkExternalComputeQueueNV * pExternalQueue);
void vkDestroyExternalComputeQueueNV(VkDevice device, VkExternalComputeQueueNV externalQueue, const VkAllocationCallbacks * pAllocator);
void vkGetExternalComputeQueueDataNV(VkExternalComputeQueueNV externalQueue, VkExternalComputeQueueDataParamsNV * params, void * pData);
void vkGetClusterAccelerationStructureBuildSizesNV(VkDevice device, const VkClusterAccelerationStructureInputInfoNV * pInfo, VkAccelerationStructureBuildSizesInfoKHR * pSizeInfo);
void vkCmdBuildClusterAccelerationStructureIndirectNV(VkCommandBuffer commandBuffer, const VkClusterAccelerationStructureCommandsInfoNV * pCommandInfos);
void vkGetPartitionedAccelerationStructuresBuildSizesNV(VkDevice device, const VkPartitionedAccelerationStructureInstancesInputNV * pInfo, VkAccelerationStructureBuildSizesInfoKHR * pSizeInfo);
void vkCmdBuildPartitionedAccelerationStructuresNV(VkCommandBuffer commandBuffer, const VkBuildPartitionedAccelerationStructureInfoNV * pBuildInfo);
void vkGetGeneratedCommandsMemoryRequirementsEXT(VkDevice device, const VkGeneratedCommandsMemoryRequirementsInfoEXT * pInfo, VkMemoryRequirements2 * pMemoryRequirements);
void vkCmdPreprocessGeneratedCommandsEXT(VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoEXT * pGeneratedCommandsInfo, VkCommandBuffer stateCommandBuffer);
void vkCmdExecuteGeneratedCommandsEXT(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const VkGeneratedCommandsInfoEXT * pGeneratedCommandsInfo);
VkResult vkCreateIndirectCommandsLayoutEXT(VkDevice device, const VkIndirectCommandsLayoutCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkIndirectCommandsLayoutEXT * pIndirectCommandsLayout);
void vkDestroyIndirectCommandsLayoutEXT(VkDevice device, VkIndirectCommandsLayoutEXT indirectCommandsLayout, const VkAllocationCallbacks * pAllocator);
VkResult vkCreateIndirectExecutionSetEXT(VkDevice device, const VkIndirectExecutionSetCreateInfoEXT * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkIndirectExecutionSetEXT * pIndirectExecutionSet);
void vkDestroyIndirectExecutionSetEXT(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, const VkAllocationCallbacks * pAllocator);
void vkUpdateIndirectExecutionSetPipelineEXT(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, uint32_t executionSetWriteCount, const VkWriteIndirectExecutionSetPipelineEXT * pExecutionSetWrites);
void vkUpdateIndirectExecutionSetShaderEXT(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, uint32_t executionSetWriteCount, const VkWriteIndirectExecutionSetShaderEXT * pExecutionSetWrites);
#if defined(VK_USE_PLATFORM_OHOS)
VkResult vkCreateSurfaceOHOS(VkInstance instance, const VkSurfaceCreateInfoOHOS * pCreateInfo, const VkAllocationCallbacks * pAllocator, VkSurfaceKHR * pSurface);
#endif
VkResult vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(VkPhysicalDevice physicalDevice, uint32_t * pPropertyCount, VkCooperativeMatrixFlexibleDimensionsPropertiesNV * pProperties);
#if defined(VK_USE_PLATFORM_METAL_EXT)
VkResult vkGetMemoryMetalHandleEXT(VkDevice device, const VkMemoryGetMetalHandleInfoEXT * pGetMetalHandleInfo, void ** pHandle);
#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
VkResult vkGetMemoryMetalHandlePropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const void * pHandle, VkMemoryMetalHandlePropertiesEXT * pMemoryMetalHandleProperties);
#endif
void vkCmdEndRendering2EXT(VkCommandBuffer commandBuffer, const VkRenderingEndInfoEXT * pRenderingEndInfo);

#else
#define vkCreateInstance (glad_vulkan_context.CreateInstance)
#define vkDestroyInstance (glad_vulkan_context.DestroyInstance)
#define vkEnumeratePhysicalDevices (glad_vulkan_context.EnumeratePhysicalDevices)
#define vkGetPhysicalDeviceFeatures (glad_vulkan_context.GetPhysicalDeviceFeatures)
#define vkGetPhysicalDeviceFormatProperties (glad_vulkan_context.GetPhysicalDeviceFormatProperties)
#define vkGetPhysicalDeviceImageFormatProperties (glad_vulkan_context.GetPhysicalDeviceImageFormatProperties)
#define vkGetPhysicalDeviceProperties (glad_vulkan_context.GetPhysicalDeviceProperties)
#define vkGetPhysicalDeviceQueueFamilyProperties (glad_vulkan_context.GetPhysicalDeviceQueueFamilyProperties)
#define vkGetPhysicalDeviceMemoryProperties (glad_vulkan_context.GetPhysicalDeviceMemoryProperties)
#define vkGetInstanceProcAddr (glad_vulkan_context.GetInstanceProcAddr)
#define vkGetDeviceProcAddr (glad_vulkan_context.GetDeviceProcAddr)
#define vkCreateDevice (glad_vulkan_context.CreateDevice)
#define vkDestroyDevice (glad_vulkan_context.DestroyDevice)
#define vkEnumerateInstanceExtensionProperties (glad_vulkan_context.EnumerateInstanceExtensionProperties)
#define vkEnumerateDeviceExtensionProperties (glad_vulkan_context.EnumerateDeviceExtensionProperties)
#define vkEnumerateInstanceLayerProperties (glad_vulkan_context.EnumerateInstanceLayerProperties)
#define vkEnumerateDeviceLayerProperties (glad_vulkan_context.EnumerateDeviceLayerProperties)
#define vkGetDeviceQueue (glad_vulkan_context.GetDeviceQueue)
#define vkQueueSubmit (glad_vulkan_context.QueueSubmit)
#define vkQueueWaitIdle (glad_vulkan_context.QueueWaitIdle)
#define vkDeviceWaitIdle (glad_vulkan_context.DeviceWaitIdle)
#define vkAllocateMemory (glad_vulkan_context.AllocateMemory)
#define vkFreeMemory (glad_vulkan_context.FreeMemory)
#define vkMapMemory (glad_vulkan_context.MapMemory)
#define vkUnmapMemory (glad_vulkan_context.UnmapMemory)
#define vkFlushMappedMemoryRanges (glad_vulkan_context.FlushMappedMemoryRanges)
#define vkInvalidateMappedMemoryRanges (glad_vulkan_context.InvalidateMappedMemoryRanges)
#define vkGetDeviceMemoryCommitment (glad_vulkan_context.GetDeviceMemoryCommitment)
#define vkBindBufferMemory (glad_vulkan_context.BindBufferMemory)
#define vkBindImageMemory (glad_vulkan_context.BindImageMemory)
#define vkGetBufferMemoryRequirements (glad_vulkan_context.GetBufferMemoryRequirements)
#define vkGetImageMemoryRequirements (glad_vulkan_context.GetImageMemoryRequirements)
#define vkGetImageSparseMemoryRequirements (glad_vulkan_context.GetImageSparseMemoryRequirements)
#define vkGetPhysicalDeviceSparseImageFormatProperties (glad_vulkan_context.GetPhysicalDeviceSparseImageFormatProperties)
#define vkQueueBindSparse (glad_vulkan_context.QueueBindSparse)
#define vkCreateFence (glad_vulkan_context.CreateFence)
#define vkDestroyFence (glad_vulkan_context.DestroyFence)
#define vkResetFences (glad_vulkan_context.ResetFences)
#define vkGetFenceStatus (glad_vulkan_context.GetFenceStatus)
#define vkWaitForFences (glad_vulkan_context.WaitForFences)
#define vkCreateSemaphore (glad_vulkan_context.CreateSemaphore)
#define vkDestroySemaphore (glad_vulkan_context.DestroySemaphore)
#define vkCreateEvent (glad_vulkan_context.CreateEvent)
#define vkDestroyEvent (glad_vulkan_context.DestroyEvent)
#define vkGetEventStatus (glad_vulkan_context.GetEventStatus)
#define vkSetEvent (glad_vulkan_context.SetEvent)
#define vkResetEvent (glad_vulkan_context.ResetEvent)
#define vkCreateQueryPool (glad_vulkan_context.CreateQueryPool)
#define vkDestroyQueryPool (glad_vulkan_context.DestroyQueryPool)
#define vkGetQueryPoolResults (glad_vulkan_context.GetQueryPoolResults)
#define vkCreateBuffer (glad_vulkan_context.CreateBuffer)
#define vkDestroyBuffer (glad_vulkan_context.DestroyBuffer)
#define vkCreateBufferView (glad_vulkan_context.CreateBufferView)
#define vkDestroyBufferView (glad_vulkan_context.DestroyBufferView)
#define vkCreateImage (glad_vulkan_context.CreateImage)
#define vkDestroyImage (glad_vulkan_context.DestroyImage)
#define vkGetImageSubresourceLayout (glad_vulkan_context.GetImageSubresourceLayout)
#define vkCreateImageView (glad_vulkan_context.CreateImageView)
#define vkDestroyImageView (glad_vulkan_context.DestroyImageView)
#define vkCreateShaderModule (glad_vulkan_context.CreateShaderModule)
#define vkDestroyShaderModule (glad_vulkan_context.DestroyShaderModule)
#define vkCreatePipelineCache (glad_vulkan_context.CreatePipelineCache)
#define vkDestroyPipelineCache (glad_vulkan_context.DestroyPipelineCache)
#define vkGetPipelineCacheData (glad_vulkan_context.GetPipelineCacheData)
#define vkMergePipelineCaches (glad_vulkan_context.MergePipelineCaches)
#define vkCreateGraphicsPipelines (glad_vulkan_context.CreateGraphicsPipelines)
#define vkCreateComputePipelines (glad_vulkan_context.CreateComputePipelines)
#define vkDestroyPipeline (glad_vulkan_context.DestroyPipeline)
#define vkCreatePipelineLayout (glad_vulkan_context.CreatePipelineLayout)
#define vkDestroyPipelineLayout (glad_vulkan_context.DestroyPipelineLayout)
#define vkCreateSampler (glad_vulkan_context.CreateSampler)
#define vkDestroySampler (glad_vulkan_context.DestroySampler)
#define vkCreateDescriptorSetLayout (glad_vulkan_context.CreateDescriptorSetLayout)
#define vkDestroyDescriptorSetLayout (glad_vulkan_context.DestroyDescriptorSetLayout)
#define vkCreateDescriptorPool (glad_vulkan_context.CreateDescriptorPool)
#define vkDestroyDescriptorPool (glad_vulkan_context.DestroyDescriptorPool)
#define vkResetDescriptorPool (glad_vulkan_context.ResetDescriptorPool)
#define vkAllocateDescriptorSets (glad_vulkan_context.AllocateDescriptorSets)
#define vkFreeDescriptorSets (glad_vulkan_context.FreeDescriptorSets)
#define vkUpdateDescriptorSets (glad_vulkan_context.UpdateDescriptorSets)
#define vkCreateFramebuffer (glad_vulkan_context.CreateFramebuffer)
#define vkDestroyFramebuffer (glad_vulkan_context.DestroyFramebuffer)
#define vkCreateRenderPass (glad_vulkan_context.CreateRenderPass)
#define vkDestroyRenderPass (glad_vulkan_context.DestroyRenderPass)
#define vkGetRenderAreaGranularity (glad_vulkan_context.GetRenderAreaGranularity)
#define vkCreateCommandPool (glad_vulkan_context.CreateCommandPool)
#define vkDestroyCommandPool (glad_vulkan_context.DestroyCommandPool)
#define vkResetCommandPool (glad_vulkan_context.ResetCommandPool)
#define vkAllocateCommandBuffers (glad_vulkan_context.AllocateCommandBuffers)
#define vkFreeCommandBuffers (glad_vulkan_context.FreeCommandBuffers)
#define vkBeginCommandBuffer (glad_vulkan_context.BeginCommandBuffer)
#define vkEndCommandBuffer (glad_vulkan_context.EndCommandBuffer)
#define vkResetCommandBuffer (glad_vulkan_context.ResetCommandBuffer)
#define vkCmdBindPipeline (glad_vulkan_context.CmdBindPipeline)
#define vkCmdSetViewport (glad_vulkan_context.CmdSetViewport)
#define vkCmdSetScissor (glad_vulkan_context.CmdSetScissor)
#define vkCmdSetLineWidth (glad_vulkan_context.CmdSetLineWidth)
#define vkCmdSetDepthBias (glad_vulkan_context.CmdSetDepthBias)
#define vkCmdSetBlendConstants (glad_vulkan_context.CmdSetBlendConstants)
#define vkCmdSetDepthBounds (glad_vulkan_context.CmdSetDepthBounds)
#define vkCmdSetStencilCompareMask (glad_vulkan_context.CmdSetStencilCompareMask)
#define vkCmdSetStencilWriteMask (glad_vulkan_context.CmdSetStencilWriteMask)
#define vkCmdSetStencilReference (glad_vulkan_context.CmdSetStencilReference)
#define vkCmdBindDescriptorSets (glad_vulkan_context.CmdBindDescriptorSets)
#define vkCmdBindIndexBuffer (glad_vulkan_context.CmdBindIndexBuffer)
#define vkCmdBindVertexBuffers (glad_vulkan_context.CmdBindVertexBuffers)
#define vkCmdDraw (glad_vulkan_context.CmdDraw)
#define vkCmdDrawIndexed (glad_vulkan_context.CmdDrawIndexed)
#define vkCmdDrawIndirect (glad_vulkan_context.CmdDrawIndirect)
#define vkCmdDrawIndexedIndirect (glad_vulkan_context.CmdDrawIndexedIndirect)
#define vkCmdDispatch (glad_vulkan_context.CmdDispatch)
#define vkCmdDispatchIndirect (glad_vulkan_context.CmdDispatchIndirect)
#define vkCmdCopyBuffer (glad_vulkan_context.CmdCopyBuffer)
#define vkCmdCopyImage (glad_vulkan_context.CmdCopyImage)
#define vkCmdBlitImage (glad_vulkan_context.CmdBlitImage)
#define vkCmdCopyBufferToImage (glad_vulkan_context.CmdCopyBufferToImage)
#define vkCmdCopyImageToBuffer (glad_vulkan_context.CmdCopyImageToBuffer)
#define vkCmdUpdateBuffer (glad_vulkan_context.CmdUpdateBuffer)
#define vkCmdFillBuffer (glad_vulkan_context.CmdFillBuffer)
#define vkCmdClearColorImage (glad_vulkan_context.CmdClearColorImage)
#define vkCmdClearDepthStencilImage (glad_vulkan_context.CmdClearDepthStencilImage)
#define vkCmdClearAttachments (glad_vulkan_context.CmdClearAttachments)
#define vkCmdResolveImage (glad_vulkan_context.CmdResolveImage)
#define vkCmdSetEvent (glad_vulkan_context.CmdSetEvent)
#define vkCmdResetEvent (glad_vulkan_context.CmdResetEvent)
#define vkCmdWaitEvents (glad_vulkan_context.CmdWaitEvents)
#define vkCmdPipelineBarrier (glad_vulkan_context.CmdPipelineBarrier)
#define vkCmdBeginQuery (glad_vulkan_context.CmdBeginQuery)
#define vkCmdEndQuery (glad_vulkan_context.CmdEndQuery)
#define vkCmdResetQueryPool (glad_vulkan_context.CmdResetQueryPool)
#define vkCmdWriteTimestamp (glad_vulkan_context.CmdWriteTimestamp)
#define vkCmdCopyQueryPoolResults (glad_vulkan_context.CmdCopyQueryPoolResults)
#define vkCmdPushConstants (glad_vulkan_context.CmdPushConstants)
#define vkCmdBeginRenderPass (glad_vulkan_context.CmdBeginRenderPass)
#define vkCmdNextSubpass (glad_vulkan_context.CmdNextSubpass)
#define vkCmdEndRenderPass (glad_vulkan_context.CmdEndRenderPass)
#define vkCmdExecuteCommands (glad_vulkan_context.CmdExecuteCommands)
#define vkEnumerateInstanceVersion (glad_vulkan_context.EnumerateInstanceVersion)
#define vkBindBufferMemory2 (glad_vulkan_context.BindBufferMemory2)
#define vkBindImageMemory2 (glad_vulkan_context.BindImageMemory2)
#define vkGetDeviceGroupPeerMemoryFeatures (glad_vulkan_context.GetDeviceGroupPeerMemoryFeatures)
#define vkCmdSetDeviceMask (glad_vulkan_context.CmdSetDeviceMask)
#define vkCmdDispatchBase (glad_vulkan_context.CmdDispatchBase)
#define vkEnumeratePhysicalDeviceGroups (glad_vulkan_context.EnumeratePhysicalDeviceGroups)
#define vkGetImageMemoryRequirements2 (glad_vulkan_context.GetImageMemoryRequirements2)
#define vkGetBufferMemoryRequirements2 (glad_vulkan_context.GetBufferMemoryRequirements2)
#define vkGetImageSparseMemoryRequirements2 (glad_vulkan_context.GetImageSparseMemoryRequirements2)
#define vkGetPhysicalDeviceFeatures2 (glad_vulkan_context.GetPhysicalDeviceFeatures2)
#define vkGetPhysicalDeviceProperties2 (glad_vulkan_context.GetPhysicalDeviceProperties2)
#define vkGetPhysicalDeviceFormatProperties2 (glad_vulkan_context.GetPhysicalDeviceFormatProperties2)
#define vkGetPhysicalDeviceImageFormatProperties2 (glad_vulkan_context.GetPhysicalDeviceImageFormatProperties2)
#define vkGetPhysicalDeviceQueueFamilyProperties2 (glad_vulkan_context.GetPhysicalDeviceQueueFamilyProperties2)
#define vkGetPhysicalDeviceMemoryProperties2 (glad_vulkan_context.GetPhysicalDeviceMemoryProperties2)
#define vkGetPhysicalDeviceSparseImageFormatProperties2 (glad_vulkan_context.GetPhysicalDeviceSparseImageFormatProperties2)
#define vkTrimCommandPool (glad_vulkan_context.TrimCommandPool)
#define vkGetDeviceQueue2 (glad_vulkan_context.GetDeviceQueue2)
#define vkCreateSamplerYcbcrConversion (glad_vulkan_context.CreateSamplerYcbcrConversion)
#define vkDestroySamplerYcbcrConversion (glad_vulkan_context.DestroySamplerYcbcrConversion)
#define vkCreateDescriptorUpdateTemplate (glad_vulkan_context.CreateDescriptorUpdateTemplate)
#define vkDestroyDescriptorUpdateTemplate (glad_vulkan_context.DestroyDescriptorUpdateTemplate)
#define vkUpdateDescriptorSetWithTemplate (glad_vulkan_context.UpdateDescriptorSetWithTemplate)
#define vkGetPhysicalDeviceExternalBufferProperties (glad_vulkan_context.GetPhysicalDeviceExternalBufferProperties)
#define vkGetPhysicalDeviceExternalFenceProperties (glad_vulkan_context.GetPhysicalDeviceExternalFenceProperties)
#define vkGetPhysicalDeviceExternalSemaphoreProperties (glad_vulkan_context.GetPhysicalDeviceExternalSemaphoreProperties)
#define vkGetDescriptorSetLayoutSupport (glad_vulkan_context.GetDescriptorSetLayoutSupport)
#define vkCmdDrawIndirectCount (glad_vulkan_context.CmdDrawIndirectCount)
#define vkCmdDrawIndexedIndirectCount (glad_vulkan_context.CmdDrawIndexedIndirectCount)
#define vkCreateRenderPass2 (glad_vulkan_context.CreateRenderPass2)
#define vkCmdBeginRenderPass2 (glad_vulkan_context.CmdBeginRenderPass2)
#define vkCmdNextSubpass2 (glad_vulkan_context.CmdNextSubpass2)
#define vkCmdEndRenderPass2 (glad_vulkan_context.CmdEndRenderPass2)
#define vkResetQueryPool (glad_vulkan_context.ResetQueryPool)
#define vkGetSemaphoreCounterValue (glad_vulkan_context.GetSemaphoreCounterValue)
#define vkWaitSemaphores (glad_vulkan_context.WaitSemaphores)
#define vkSignalSemaphore (glad_vulkan_context.SignalSemaphore)
#define vkGetBufferDeviceAddress (glad_vulkan_context.GetBufferDeviceAddress)
#define vkGetBufferOpaqueCaptureAddress (glad_vulkan_context.GetBufferOpaqueCaptureAddress)
#define vkGetDeviceMemoryOpaqueCaptureAddress (glad_vulkan_context.GetDeviceMemoryOpaqueCaptureAddress)
#define vkGetPhysicalDeviceToolProperties (glad_vulkan_context.GetPhysicalDeviceToolProperties)
#define vkCreatePrivateDataSlot (glad_vulkan_context.CreatePrivateDataSlot)
#define vkDestroyPrivateDataSlot (glad_vulkan_context.DestroyPrivateDataSlot)
#define vkSetPrivateData (glad_vulkan_context.SetPrivateData)
#define vkGetPrivateData (glad_vulkan_context.GetPrivateData)
#define vkCmdSetEvent2 (glad_vulkan_context.CmdSetEvent2)
#define vkCmdResetEvent2 (glad_vulkan_context.CmdResetEvent2)
#define vkCmdWaitEvents2 (glad_vulkan_context.CmdWaitEvents2)
#define vkCmdPipelineBarrier2 (glad_vulkan_context.CmdPipelineBarrier2)
#define vkCmdWriteTimestamp2 (glad_vulkan_context.CmdWriteTimestamp2)
#define vkQueueSubmit2 (glad_vulkan_context.QueueSubmit2)
#define vkCmdCopyBuffer2 (glad_vulkan_context.CmdCopyBuffer2)
#define vkCmdCopyImage2 (glad_vulkan_context.CmdCopyImage2)
#define vkCmdCopyBufferToImage2 (glad_vulkan_context.CmdCopyBufferToImage2)
#define vkCmdCopyImageToBuffer2 (glad_vulkan_context.CmdCopyImageToBuffer2)
#define vkCmdBlitImage2 (glad_vulkan_context.CmdBlitImage2)
#define vkCmdResolveImage2 (glad_vulkan_context.CmdResolveImage2)
#define vkCmdBeginRendering (glad_vulkan_context.CmdBeginRendering)
#define vkCmdEndRendering (glad_vulkan_context.CmdEndRendering)
#define vkCmdSetCullMode (glad_vulkan_context.CmdSetCullMode)
#define vkCmdSetFrontFace (glad_vulkan_context.CmdSetFrontFace)
#define vkCmdSetPrimitiveTopology (glad_vulkan_context.CmdSetPrimitiveTopology)
#define vkCmdSetViewportWithCount (glad_vulkan_context.CmdSetViewportWithCount)
#define vkCmdSetScissorWithCount (glad_vulkan_context.CmdSetScissorWithCount)
#define vkCmdBindVertexBuffers2 (glad_vulkan_context.CmdBindVertexBuffers2)
#define vkCmdSetDepthTestEnable (glad_vulkan_context.CmdSetDepthTestEnable)
#define vkCmdSetDepthWriteEnable (glad_vulkan_context.CmdSetDepthWriteEnable)
#define vkCmdSetDepthCompareOp (glad_vulkan_context.CmdSetDepthCompareOp)
#define vkCmdSetDepthBoundsTestEnable (glad_vulkan_context.CmdSetDepthBoundsTestEnable)
#define vkCmdSetStencilTestEnable (glad_vulkan_context.CmdSetStencilTestEnable)
#define vkCmdSetStencilOp (glad_vulkan_context.CmdSetStencilOp)
#define vkCmdSetRasterizerDiscardEnable (glad_vulkan_context.CmdSetRasterizerDiscardEnable)
#define vkCmdSetDepthBiasEnable (glad_vulkan_context.CmdSetDepthBiasEnable)
#define vkCmdSetPrimitiveRestartEnable (glad_vulkan_context.CmdSetPrimitiveRestartEnable)
#define vkGetDeviceBufferMemoryRequirements (glad_vulkan_context.GetDeviceBufferMemoryRequirements)
#define vkGetDeviceImageMemoryRequirements (glad_vulkan_context.GetDeviceImageMemoryRequirements)
#define vkGetDeviceImageSparseMemoryRequirements (glad_vulkan_context.GetDeviceImageSparseMemoryRequirements)
#define vkCmdSetLineStipple (glad_vulkan_context.CmdSetLineStipple)
#define vkMapMemory2 (glad_vulkan_context.MapMemory2)
#define vkUnmapMemory2 (glad_vulkan_context.UnmapMemory2)
#define vkCmdBindIndexBuffer2 (glad_vulkan_context.CmdBindIndexBuffer2)
#define vkGetRenderingAreaGranularity (glad_vulkan_context.GetRenderingAreaGranularity)
#define vkGetDeviceImageSubresourceLayout (glad_vulkan_context.GetDeviceImageSubresourceLayout)
#define vkGetImageSubresourceLayout2 (glad_vulkan_context.GetImageSubresourceLayout2)
#define vkCmdPushDescriptorSet (glad_vulkan_context.CmdPushDescriptorSet)
#define vkCmdPushDescriptorSetWithTemplate (glad_vulkan_context.CmdPushDescriptorSetWithTemplate)
#define vkCmdSetRenderingAttachmentLocations (glad_vulkan_context.CmdSetRenderingAttachmentLocations)
#define vkCmdSetRenderingInputAttachmentIndices (glad_vulkan_context.CmdSetRenderingInputAttachmentIndices)
#define vkCmdBindDescriptorSets2 (glad_vulkan_context.CmdBindDescriptorSets2)
#define vkCmdPushConstants2 (glad_vulkan_context.CmdPushConstants2)
#define vkCmdPushDescriptorSet2 (glad_vulkan_context.CmdPushDescriptorSet2)
#define vkCmdPushDescriptorSetWithTemplate2 (glad_vulkan_context.CmdPushDescriptorSetWithTemplate2)
#define vkCopyMemoryToImage (glad_vulkan_context.CopyMemoryToImage)
#define vkCopyImageToMemory (glad_vulkan_context.CopyImageToMemory)
#define vkCopyImageToImage (glad_vulkan_context.CopyImageToImage)
#define vkTransitionImageLayout (glad_vulkan_context.TransitionImageLayout)
#define vkDestroySurfaceKHR (glad_vulkan_context.DestroySurfaceKHR)
#define vkGetPhysicalDeviceSurfaceSupportKHR (glad_vulkan_context.GetPhysicalDeviceSurfaceSupportKHR)
#define vkGetPhysicalDeviceSurfaceCapabilitiesKHR (glad_vulkan_context.GetPhysicalDeviceSurfaceCapabilitiesKHR)
#define vkGetPhysicalDeviceSurfaceFormatsKHR (glad_vulkan_context.GetPhysicalDeviceSurfaceFormatsKHR)
#define vkGetPhysicalDeviceSurfacePresentModesKHR (glad_vulkan_context.GetPhysicalDeviceSurfacePresentModesKHR)
#define vkCreateSwapchainKHR (glad_vulkan_context.CreateSwapchainKHR)
#define vkDestroySwapchainKHR (glad_vulkan_context.DestroySwapchainKHR)
#define vkGetSwapchainImagesKHR (glad_vulkan_context.GetSwapchainImagesKHR)
#define vkAcquireNextImageKHR (glad_vulkan_context.AcquireNextImageKHR)
#define vkQueuePresentKHR (glad_vulkan_context.QueuePresentKHR)
#define vkGetDeviceGroupPresentCapabilitiesKHR (glad_vulkan_context.GetDeviceGroupPresentCapabilitiesKHR)
#define vkGetDeviceGroupSurfacePresentModesKHR (glad_vulkan_context.GetDeviceGroupSurfacePresentModesKHR)
#define vkGetPhysicalDevicePresentRectanglesKHR (glad_vulkan_context.GetPhysicalDevicePresentRectanglesKHR)
#define vkAcquireNextImage2KHR (glad_vulkan_context.AcquireNextImage2KHR)
#define vkGetPhysicalDeviceDisplayPropertiesKHR (glad_vulkan_context.GetPhysicalDeviceDisplayPropertiesKHR)
#define vkGetPhysicalDeviceDisplayPlanePropertiesKHR (glad_vulkan_context.GetPhysicalDeviceDisplayPlanePropertiesKHR)
#define vkGetDisplayPlaneSupportedDisplaysKHR (glad_vulkan_context.GetDisplayPlaneSupportedDisplaysKHR)
#define vkGetDisplayModePropertiesKHR (glad_vulkan_context.GetDisplayModePropertiesKHR)
#define vkCreateDisplayModeKHR (glad_vulkan_context.CreateDisplayModeKHR)
#define vkGetDisplayPlaneCapabilitiesKHR (glad_vulkan_context.GetDisplayPlaneCapabilitiesKHR)
#define vkCreateDisplayPlaneSurfaceKHR (glad_vulkan_context.CreateDisplayPlaneSurfaceKHR)
#define vkCreateSharedSwapchainsKHR (glad_vulkan_context.CreateSharedSwapchainsKHR)
#define vkCreateXlibSurfaceKHR (glad_vulkan_context.CreateXlibSurfaceKHR)
#define vkGetPhysicalDeviceXlibPresentationSupportKHR (glad_vulkan_context.GetPhysicalDeviceXlibPresentationSupportKHR)
#define vkCreateXcbSurfaceKHR (glad_vulkan_context.CreateXcbSurfaceKHR)
#define vkGetPhysicalDeviceXcbPresentationSupportKHR (glad_vulkan_context.GetPhysicalDeviceXcbPresentationSupportKHR)
#define vkCreateWaylandSurfaceKHR (glad_vulkan_context.CreateWaylandSurfaceKHR)
#define vkGetPhysicalDeviceWaylandPresentationSupportKHR (glad_vulkan_context.GetPhysicalDeviceWaylandPresentationSupportKHR)
#define vkCreateAndroidSurfaceKHR (glad_vulkan_context.CreateAndroidSurfaceKHR)
#define vkCreateWin32SurfaceKHR (glad_vulkan_context.CreateWin32SurfaceKHR)
#define vkGetPhysicalDeviceWin32PresentationSupportKHR (glad_vulkan_context.GetPhysicalDeviceWin32PresentationSupportKHR)
#define vkCreateDebugReportCallbackEXT (glad_vulkan_context.CreateDebugReportCallbackEXT)
#define vkDestroyDebugReportCallbackEXT (glad_vulkan_context.DestroyDebugReportCallbackEXT)
#define vkDebugReportMessageEXT (glad_vulkan_context.DebugReportMessageEXT)
#define vkDebugMarkerSetObjectTagEXT (glad_vulkan_context.DebugMarkerSetObjectTagEXT)
#define vkDebugMarkerSetObjectNameEXT (glad_vulkan_context.DebugMarkerSetObjectNameEXT)
#define vkCmdDebugMarkerBeginEXT (glad_vulkan_context.CmdDebugMarkerBeginEXT)
#define vkCmdDebugMarkerEndEXT (glad_vulkan_context.CmdDebugMarkerEndEXT)
#define vkCmdDebugMarkerInsertEXT (glad_vulkan_context.CmdDebugMarkerInsertEXT)
#define vkGetPhysicalDeviceVideoCapabilitiesKHR (glad_vulkan_context.GetPhysicalDeviceVideoCapabilitiesKHR)
#define vkGetPhysicalDeviceVideoFormatPropertiesKHR (glad_vulkan_context.GetPhysicalDeviceVideoFormatPropertiesKHR)
#define vkCreateVideoSessionKHR (glad_vulkan_context.CreateVideoSessionKHR)
#define vkDestroyVideoSessionKHR (glad_vulkan_context.DestroyVideoSessionKHR)
#define vkGetVideoSessionMemoryRequirementsKHR (glad_vulkan_context.GetVideoSessionMemoryRequirementsKHR)
#define vkBindVideoSessionMemoryKHR (glad_vulkan_context.BindVideoSessionMemoryKHR)
#define vkCreateVideoSessionParametersKHR (glad_vulkan_context.CreateVideoSessionParametersKHR)
#define vkUpdateVideoSessionParametersKHR (glad_vulkan_context.UpdateVideoSessionParametersKHR)
#define vkDestroyVideoSessionParametersKHR (glad_vulkan_context.DestroyVideoSessionParametersKHR)
#define vkCmdBeginVideoCodingKHR (glad_vulkan_context.CmdBeginVideoCodingKHR)
#define vkCmdEndVideoCodingKHR (glad_vulkan_context.CmdEndVideoCodingKHR)
#define vkCmdControlVideoCodingKHR (glad_vulkan_context.CmdControlVideoCodingKHR)
#define vkCmdDecodeVideoKHR (glad_vulkan_context.CmdDecodeVideoKHR)
#define vkCmdBindTransformFeedbackBuffersEXT (glad_vulkan_context.CmdBindTransformFeedbackBuffersEXT)
#define vkCmdBeginTransformFeedbackEXT (glad_vulkan_context.CmdBeginTransformFeedbackEXT)
#define vkCmdEndTransformFeedbackEXT (glad_vulkan_context.CmdEndTransformFeedbackEXT)
#define vkCmdBeginQueryIndexedEXT (glad_vulkan_context.CmdBeginQueryIndexedEXT)
#define vkCmdEndQueryIndexedEXT (glad_vulkan_context.CmdEndQueryIndexedEXT)
#define vkCmdDrawIndirectByteCountEXT (glad_vulkan_context.CmdDrawIndirectByteCountEXT)
#define vkCreateCuModuleNVX (glad_vulkan_context.CreateCuModuleNVX)
#define vkCreateCuFunctionNVX (glad_vulkan_context.CreateCuFunctionNVX)
#define vkDestroyCuModuleNVX (glad_vulkan_context.DestroyCuModuleNVX)
#define vkDestroyCuFunctionNVX (glad_vulkan_context.DestroyCuFunctionNVX)
#define vkCmdCuLaunchKernelNVX (glad_vulkan_context.CmdCuLaunchKernelNVX)
#define vkGetImageViewHandleNVX (glad_vulkan_context.GetImageViewHandleNVX)
#define vkGetImageViewHandle64NVX (glad_vulkan_context.GetImageViewHandle64NVX)
#define vkGetImageViewAddressNVX (glad_vulkan_context.GetImageViewAddressNVX)
#define vkCmdDrawIndirectCountAMD (glad_vulkan_context.CmdDrawIndirectCountAMD)
#define vkCmdDrawIndexedIndirectCountAMD (glad_vulkan_context.CmdDrawIndexedIndirectCountAMD)
#define vkGetShaderInfoAMD (glad_vulkan_context.GetShaderInfoAMD)
#define vkCmdBeginRenderingKHR (glad_vulkan_context.CmdBeginRenderingKHR)
#define vkCmdEndRenderingKHR (glad_vulkan_context.CmdEndRenderingKHR)
#define vkCreateStreamDescriptorSurfaceGGP (glad_vulkan_context.CreateStreamDescriptorSurfaceGGP)
#define vkGetPhysicalDeviceExternalImageFormatPropertiesNV (glad_vulkan_context.GetPhysicalDeviceExternalImageFormatPropertiesNV)
#define vkGetMemoryWin32HandleNV (glad_vulkan_context.GetMemoryWin32HandleNV)
#define vkGetPhysicalDeviceFeatures2KHR (glad_vulkan_context.GetPhysicalDeviceFeatures2KHR)
#define vkGetPhysicalDeviceProperties2KHR (glad_vulkan_context.GetPhysicalDeviceProperties2KHR)
#define vkGetPhysicalDeviceFormatProperties2KHR (glad_vulkan_context.GetPhysicalDeviceFormatProperties2KHR)
#define vkGetPhysicalDeviceImageFormatProperties2KHR (glad_vulkan_context.GetPhysicalDeviceImageFormatProperties2KHR)
#define vkGetPhysicalDeviceQueueFamilyProperties2KHR (glad_vulkan_context.GetPhysicalDeviceQueueFamilyProperties2KHR)
#define vkGetPhysicalDeviceMemoryProperties2KHR (glad_vulkan_context.GetPhysicalDeviceMemoryProperties2KHR)
#define vkGetPhysicalDeviceSparseImageFormatProperties2KHR (glad_vulkan_context.GetPhysicalDeviceSparseImageFormatProperties2KHR)
#define vkGetDeviceGroupPeerMemoryFeaturesKHR (glad_vulkan_context.GetDeviceGroupPeerMemoryFeaturesKHR)
#define vkCmdSetDeviceMaskKHR (glad_vulkan_context.CmdSetDeviceMaskKHR)
#define vkCmdDispatchBaseKHR (glad_vulkan_context.CmdDispatchBaseKHR)
#define vkCreateViSurfaceNN (glad_vulkan_context.CreateViSurfaceNN)
#define vkTrimCommandPoolKHR (glad_vulkan_context.TrimCommandPoolKHR)
#define vkEnumeratePhysicalDeviceGroupsKHR (glad_vulkan_context.EnumeratePhysicalDeviceGroupsKHR)
#define vkGetPhysicalDeviceExternalBufferPropertiesKHR (glad_vulkan_context.GetPhysicalDeviceExternalBufferPropertiesKHR)
#define vkGetMemoryWin32HandleKHR (glad_vulkan_context.GetMemoryWin32HandleKHR)
#define vkGetMemoryWin32HandlePropertiesKHR (glad_vulkan_context.GetMemoryWin32HandlePropertiesKHR)
#define vkGetMemoryFdKHR (glad_vulkan_context.GetMemoryFdKHR)
#define vkGetMemoryFdPropertiesKHR (glad_vulkan_context.GetMemoryFdPropertiesKHR)
#define vkGetPhysicalDeviceExternalSemaphorePropertiesKHR (glad_vulkan_context.GetPhysicalDeviceExternalSemaphorePropertiesKHR)
#define vkImportSemaphoreWin32HandleKHR (glad_vulkan_context.ImportSemaphoreWin32HandleKHR)
#define vkGetSemaphoreWin32HandleKHR (glad_vulkan_context.GetSemaphoreWin32HandleKHR)
#define vkImportSemaphoreFdKHR (glad_vulkan_context.ImportSemaphoreFdKHR)
#define vkGetSemaphoreFdKHR (glad_vulkan_context.GetSemaphoreFdKHR)
#define vkCmdPushDescriptorSetKHR (glad_vulkan_context.CmdPushDescriptorSetKHR)
#define vkCmdPushDescriptorSetWithTemplateKHR (glad_vulkan_context.CmdPushDescriptorSetWithTemplateKHR)
#define vkCmdBeginConditionalRenderingEXT (glad_vulkan_context.CmdBeginConditionalRenderingEXT)
#define vkCmdEndConditionalRenderingEXT (glad_vulkan_context.CmdEndConditionalRenderingEXT)
#define vkCreateDescriptorUpdateTemplateKHR (glad_vulkan_context.CreateDescriptorUpdateTemplateKHR)
#define vkDestroyDescriptorUpdateTemplateKHR (glad_vulkan_context.DestroyDescriptorUpdateTemplateKHR)
#define vkUpdateDescriptorSetWithTemplateKHR (glad_vulkan_context.UpdateDescriptorSetWithTemplateKHR)
#define vkCmdSetViewportWScalingNV (glad_vulkan_context.CmdSetViewportWScalingNV)
#define vkReleaseDisplayEXT (glad_vulkan_context.ReleaseDisplayEXT)
#define vkAcquireXlibDisplayEXT (glad_vulkan_context.AcquireXlibDisplayEXT)
#define vkGetRandROutputDisplayEXT (glad_vulkan_context.GetRandROutputDisplayEXT)
#define vkGetPhysicalDeviceSurfaceCapabilities2EXT (glad_vulkan_context.GetPhysicalDeviceSurfaceCapabilities2EXT)
#define vkDisplayPowerControlEXT (glad_vulkan_context.DisplayPowerControlEXT)
#define vkRegisterDeviceEventEXT (glad_vulkan_context.RegisterDeviceEventEXT)
#define vkRegisterDisplayEventEXT (glad_vulkan_context.RegisterDisplayEventEXT)
#define vkGetSwapchainCounterEXT (glad_vulkan_context.GetSwapchainCounterEXT)
#define vkGetRefreshCycleDurationGOOGLE (glad_vulkan_context.GetRefreshCycleDurationGOOGLE)
#define vkGetPastPresentationTimingGOOGLE (glad_vulkan_context.GetPastPresentationTimingGOOGLE)
#define vkCmdSetDiscardRectangleEXT (glad_vulkan_context.CmdSetDiscardRectangleEXT)
#define vkCmdSetDiscardRectangleEnableEXT (glad_vulkan_context.CmdSetDiscardRectangleEnableEXT)
#define vkCmdSetDiscardRectangleModeEXT (glad_vulkan_context.CmdSetDiscardRectangleModeEXT)
#define vkSetHdrMetadataEXT (glad_vulkan_context.SetHdrMetadataEXT)
#define vkCreateRenderPass2KHR (glad_vulkan_context.CreateRenderPass2KHR)
#define vkCmdBeginRenderPass2KHR (glad_vulkan_context.CmdBeginRenderPass2KHR)
#define vkCmdNextSubpass2KHR (glad_vulkan_context.CmdNextSubpass2KHR)
#define vkCmdEndRenderPass2KHR (glad_vulkan_context.CmdEndRenderPass2KHR)
#define vkGetSwapchainStatusKHR (glad_vulkan_context.GetSwapchainStatusKHR)
#define vkGetPhysicalDeviceExternalFencePropertiesKHR (glad_vulkan_context.GetPhysicalDeviceExternalFencePropertiesKHR)
#define vkImportFenceWin32HandleKHR (glad_vulkan_context.ImportFenceWin32HandleKHR)
#define vkGetFenceWin32HandleKHR (glad_vulkan_context.GetFenceWin32HandleKHR)
#define vkImportFenceFdKHR (glad_vulkan_context.ImportFenceFdKHR)
#define vkGetFenceFdKHR (glad_vulkan_context.GetFenceFdKHR)
#define vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR (glad_vulkan_context.EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR)
#define vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR (glad_vulkan_context.GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR)
#define vkAcquireProfilingLockKHR (glad_vulkan_context.AcquireProfilingLockKHR)
#define vkReleaseProfilingLockKHR (glad_vulkan_context.ReleaseProfilingLockKHR)
#define vkGetPhysicalDeviceSurfaceCapabilities2KHR (glad_vulkan_context.GetPhysicalDeviceSurfaceCapabilities2KHR)
#define vkGetPhysicalDeviceSurfaceFormats2KHR (glad_vulkan_context.GetPhysicalDeviceSurfaceFormats2KHR)
#define vkGetPhysicalDeviceDisplayProperties2KHR (glad_vulkan_context.GetPhysicalDeviceDisplayProperties2KHR)
#define vkGetPhysicalDeviceDisplayPlaneProperties2KHR (glad_vulkan_context.GetPhysicalDeviceDisplayPlaneProperties2KHR)
#define vkGetDisplayModeProperties2KHR (glad_vulkan_context.GetDisplayModeProperties2KHR)
#define vkGetDisplayPlaneCapabilities2KHR (glad_vulkan_context.GetDisplayPlaneCapabilities2KHR)
#define vkCreateIOSSurfaceMVK (glad_vulkan_context.CreateIOSSurfaceMVK)
#define vkCreateMacOSSurfaceMVK (glad_vulkan_context.CreateMacOSSurfaceMVK)
#define vkSetDebugUtilsObjectNameEXT (glad_vulkan_context.SetDebugUtilsObjectNameEXT)
#define vkSetDebugUtilsObjectTagEXT (glad_vulkan_context.SetDebugUtilsObjectTagEXT)
#define vkQueueBeginDebugUtilsLabelEXT (glad_vulkan_context.QueueBeginDebugUtilsLabelEXT)
#define vkQueueEndDebugUtilsLabelEXT (glad_vulkan_context.QueueEndDebugUtilsLabelEXT)
#define vkQueueInsertDebugUtilsLabelEXT (glad_vulkan_context.QueueInsertDebugUtilsLabelEXT)
#define vkCmdBeginDebugUtilsLabelEXT (glad_vulkan_context.CmdBeginDebugUtilsLabelEXT)
#define vkCmdEndDebugUtilsLabelEXT (glad_vulkan_context.CmdEndDebugUtilsLabelEXT)
#define vkCmdInsertDebugUtilsLabelEXT (glad_vulkan_context.CmdInsertDebugUtilsLabelEXT)
#define vkCreateDebugUtilsMessengerEXT (glad_vulkan_context.CreateDebugUtilsMessengerEXT)
#define vkDestroyDebugUtilsMessengerEXT (glad_vulkan_context.DestroyDebugUtilsMessengerEXT)
#define vkSubmitDebugUtilsMessageEXT (glad_vulkan_context.SubmitDebugUtilsMessageEXT)
#define vkGetAndroidHardwareBufferPropertiesANDROID (glad_vulkan_context.GetAndroidHardwareBufferPropertiesANDROID)
#define vkGetMemoryAndroidHardwareBufferANDROID (glad_vulkan_context.GetMemoryAndroidHardwareBufferANDROID)
#define vkCreateExecutionGraphPipelinesAMDX (glad_vulkan_context.CreateExecutionGraphPipelinesAMDX)
#define vkGetExecutionGraphPipelineScratchSizeAMDX (glad_vulkan_context.GetExecutionGraphPipelineScratchSizeAMDX)
#define vkGetExecutionGraphPipelineNodeIndexAMDX (glad_vulkan_context.GetExecutionGraphPipelineNodeIndexAMDX)
#define vkCmdInitializeGraphScratchMemoryAMDX (glad_vulkan_context.CmdInitializeGraphScratchMemoryAMDX)
#define vkCmdDispatchGraphAMDX (glad_vulkan_context.CmdDispatchGraphAMDX)
#define vkCmdDispatchGraphIndirectAMDX (glad_vulkan_context.CmdDispatchGraphIndirectAMDX)
#define vkCmdDispatchGraphIndirectCountAMDX (glad_vulkan_context.CmdDispatchGraphIndirectCountAMDX)
#define vkCmdSetSampleLocationsEXT (glad_vulkan_context.CmdSetSampleLocationsEXT)
#define vkGetPhysicalDeviceMultisamplePropertiesEXT (glad_vulkan_context.GetPhysicalDeviceMultisamplePropertiesEXT)
#define vkGetImageMemoryRequirements2KHR (glad_vulkan_context.GetImageMemoryRequirements2KHR)
#define vkGetBufferMemoryRequirements2KHR (glad_vulkan_context.GetBufferMemoryRequirements2KHR)
#define vkGetImageSparseMemoryRequirements2KHR (glad_vulkan_context.GetImageSparseMemoryRequirements2KHR)
#define vkCreateAccelerationStructureKHR (glad_vulkan_context.CreateAccelerationStructureKHR)
#define vkDestroyAccelerationStructureKHR (glad_vulkan_context.DestroyAccelerationStructureKHR)
#define vkCmdBuildAccelerationStructuresKHR (glad_vulkan_context.CmdBuildAccelerationStructuresKHR)
#define vkCmdBuildAccelerationStructuresIndirectKHR (glad_vulkan_context.CmdBuildAccelerationStructuresIndirectKHR)
#define vkBuildAccelerationStructuresKHR (glad_vulkan_context.BuildAccelerationStructuresKHR)
#define vkCopyAccelerationStructureKHR (glad_vulkan_context.CopyAccelerationStructureKHR)
#define vkCopyAccelerationStructureToMemoryKHR (glad_vulkan_context.CopyAccelerationStructureToMemoryKHR)
#define vkCopyMemoryToAccelerationStructureKHR (glad_vulkan_context.CopyMemoryToAccelerationStructureKHR)
#define vkWriteAccelerationStructuresPropertiesKHR (glad_vulkan_context.WriteAccelerationStructuresPropertiesKHR)
#define vkCmdCopyAccelerationStructureKHR (glad_vulkan_context.CmdCopyAccelerationStructureKHR)
#define vkCmdCopyAccelerationStructureToMemoryKHR (glad_vulkan_context.CmdCopyAccelerationStructureToMemoryKHR)
#define vkCmdCopyMemoryToAccelerationStructureKHR (glad_vulkan_context.CmdCopyMemoryToAccelerationStructureKHR)
#define vkGetAccelerationStructureDeviceAddressKHR (glad_vulkan_context.GetAccelerationStructureDeviceAddressKHR)
#define vkCmdWriteAccelerationStructuresPropertiesKHR (glad_vulkan_context.CmdWriteAccelerationStructuresPropertiesKHR)
#define vkGetDeviceAccelerationStructureCompatibilityKHR (glad_vulkan_context.GetDeviceAccelerationStructureCompatibilityKHR)
#define vkGetAccelerationStructureBuildSizesKHR (glad_vulkan_context.GetAccelerationStructureBuildSizesKHR)
#define vkCmdTraceRaysKHR (glad_vulkan_context.CmdTraceRaysKHR)
#define vkCreateRayTracingPipelinesKHR (glad_vulkan_context.CreateRayTracingPipelinesKHR)
#define vkGetRayTracingShaderGroupHandlesKHR (glad_vulkan_context.GetRayTracingShaderGroupHandlesKHR)
#define vkGetRayTracingCaptureReplayShaderGroupHandlesKHR (glad_vulkan_context.GetRayTracingCaptureReplayShaderGroupHandlesKHR)
#define vkCmdTraceRaysIndirectKHR (glad_vulkan_context.CmdTraceRaysIndirectKHR)
#define vkGetRayTracingShaderGroupStackSizeKHR (glad_vulkan_context.GetRayTracingShaderGroupStackSizeKHR)
#define vkCmdSetRayTracingPipelineStackSizeKHR (glad_vulkan_context.CmdSetRayTracingPipelineStackSizeKHR)
#define vkCreateSamplerYcbcrConversionKHR (glad_vulkan_context.CreateSamplerYcbcrConversionKHR)
#define vkDestroySamplerYcbcrConversionKHR (glad_vulkan_context.DestroySamplerYcbcrConversionKHR)
#define vkBindBufferMemory2KHR (glad_vulkan_context.BindBufferMemory2KHR)
#define vkBindImageMemory2KHR (glad_vulkan_context.BindImageMemory2KHR)
#define vkGetImageDrmFormatModifierPropertiesEXT (glad_vulkan_context.GetImageDrmFormatModifierPropertiesEXT)
#define vkCreateValidationCacheEXT (glad_vulkan_context.CreateValidationCacheEXT)
#define vkDestroyValidationCacheEXT (glad_vulkan_context.DestroyValidationCacheEXT)
#define vkMergeValidationCachesEXT (glad_vulkan_context.MergeValidationCachesEXT)
#define vkGetValidationCacheDataEXT (glad_vulkan_context.GetValidationCacheDataEXT)
#define vkCmdBindShadingRateImageNV (glad_vulkan_context.CmdBindShadingRateImageNV)
#define vkCmdSetViewportShadingRatePaletteNV (glad_vulkan_context.CmdSetViewportShadingRatePaletteNV)
#define vkCmdSetCoarseSampleOrderNV (glad_vulkan_context.CmdSetCoarseSampleOrderNV)
#define vkCreateAccelerationStructureNV (glad_vulkan_context.CreateAccelerationStructureNV)
#define vkDestroyAccelerationStructureNV (glad_vulkan_context.DestroyAccelerationStructureNV)
#define vkGetAccelerationStructureMemoryRequirementsNV (glad_vulkan_context.GetAccelerationStructureMemoryRequirementsNV)
#define vkBindAccelerationStructureMemoryNV (glad_vulkan_context.BindAccelerationStructureMemoryNV)
#define vkCmdBuildAccelerationStructureNV (glad_vulkan_context.CmdBuildAccelerationStructureNV)
#define vkCmdCopyAccelerationStructureNV (glad_vulkan_context.CmdCopyAccelerationStructureNV)
#define vkCmdTraceRaysNV (glad_vulkan_context.CmdTraceRaysNV)
#define vkCreateRayTracingPipelinesNV (glad_vulkan_context.CreateRayTracingPipelinesNV)
#define vkGetRayTracingShaderGroupHandlesNV (glad_vulkan_context.GetRayTracingShaderGroupHandlesNV)
#define vkGetAccelerationStructureHandleNV (glad_vulkan_context.GetAccelerationStructureHandleNV)
#define vkCmdWriteAccelerationStructuresPropertiesNV (glad_vulkan_context.CmdWriteAccelerationStructuresPropertiesNV)
#define vkCompileDeferredNV (glad_vulkan_context.CompileDeferredNV)
#define vkGetDescriptorSetLayoutSupportKHR (glad_vulkan_context.GetDescriptorSetLayoutSupportKHR)
#define vkCmdDrawIndirectCountKHR (glad_vulkan_context.CmdDrawIndirectCountKHR)
#define vkCmdDrawIndexedIndirectCountKHR (glad_vulkan_context.CmdDrawIndexedIndirectCountKHR)
#define vkGetMemoryHostPointerPropertiesEXT (glad_vulkan_context.GetMemoryHostPointerPropertiesEXT)
#define vkCmdWriteBufferMarkerAMD (glad_vulkan_context.CmdWriteBufferMarkerAMD)
#define vkCmdWriteBufferMarker2AMD (glad_vulkan_context.CmdWriteBufferMarker2AMD)
#define vkGetPhysicalDeviceCalibrateableTimeDomainsEXT (glad_vulkan_context.GetPhysicalDeviceCalibrateableTimeDomainsEXT)
#define vkGetCalibratedTimestampsEXT (glad_vulkan_context.GetCalibratedTimestampsEXT)
#define vkCmdDrawMeshTasksNV (glad_vulkan_context.CmdDrawMeshTasksNV)
#define vkCmdDrawMeshTasksIndirectNV (glad_vulkan_context.CmdDrawMeshTasksIndirectNV)
#define vkCmdDrawMeshTasksIndirectCountNV (glad_vulkan_context.CmdDrawMeshTasksIndirectCountNV)
#define vkCmdSetExclusiveScissorEnableNV (glad_vulkan_context.CmdSetExclusiveScissorEnableNV)
#define vkCmdSetExclusiveScissorNV (glad_vulkan_context.CmdSetExclusiveScissorNV)
#define vkCmdSetCheckpointNV (glad_vulkan_context.CmdSetCheckpointNV)
#define vkGetQueueCheckpointDataNV (glad_vulkan_context.GetQueueCheckpointDataNV)
#define vkGetQueueCheckpointData2NV (glad_vulkan_context.GetQueueCheckpointData2NV)
#define vkGetSemaphoreCounterValueKHR (glad_vulkan_context.GetSemaphoreCounterValueKHR)
#define vkWaitSemaphoresKHR (glad_vulkan_context.WaitSemaphoresKHR)
#define vkSignalSemaphoreKHR (glad_vulkan_context.SignalSemaphoreKHR)
#define vkInitializePerformanceApiINTEL (glad_vulkan_context.InitializePerformanceApiINTEL)
#define vkUninitializePerformanceApiINTEL (glad_vulkan_context.UninitializePerformanceApiINTEL)
#define vkCmdSetPerformanceMarkerINTEL (glad_vulkan_context.CmdSetPerformanceMarkerINTEL)
#define vkCmdSetPerformanceStreamMarkerINTEL (glad_vulkan_context.CmdSetPerformanceStreamMarkerINTEL)
#define vkCmdSetPerformanceOverrideINTEL (glad_vulkan_context.CmdSetPerformanceOverrideINTEL)
#define vkAcquirePerformanceConfigurationINTEL (glad_vulkan_context.AcquirePerformanceConfigurationINTEL)
#define vkReleasePerformanceConfigurationINTEL (glad_vulkan_context.ReleasePerformanceConfigurationINTEL)
#define vkQueueSetPerformanceConfigurationINTEL (glad_vulkan_context.QueueSetPerformanceConfigurationINTEL)
#define vkGetPerformanceParameterINTEL (glad_vulkan_context.GetPerformanceParameterINTEL)
#define vkSetLocalDimmingAMD (glad_vulkan_context.SetLocalDimmingAMD)
#define vkCreateImagePipeSurfaceFUCHSIA (glad_vulkan_context.CreateImagePipeSurfaceFUCHSIA)
#define vkCreateMetalSurfaceEXT (glad_vulkan_context.CreateMetalSurfaceEXT)
#define vkGetPhysicalDeviceFragmentShadingRatesKHR (glad_vulkan_context.GetPhysicalDeviceFragmentShadingRatesKHR)
#define vkCmdSetFragmentShadingRateKHR (glad_vulkan_context.CmdSetFragmentShadingRateKHR)
#define vkCmdSetRenderingAttachmentLocationsKHR (glad_vulkan_context.CmdSetRenderingAttachmentLocationsKHR)
#define vkCmdSetRenderingInputAttachmentIndicesKHR (glad_vulkan_context.CmdSetRenderingInputAttachmentIndicesKHR)
#define vkGetBufferDeviceAddressEXT (glad_vulkan_context.GetBufferDeviceAddressEXT)
#define vkGetPhysicalDeviceToolPropertiesEXT (glad_vulkan_context.GetPhysicalDeviceToolPropertiesEXT)
#define vkWaitForPresentKHR (glad_vulkan_context.WaitForPresentKHR)
#define vkGetPhysicalDeviceCooperativeMatrixPropertiesNV (glad_vulkan_context.GetPhysicalDeviceCooperativeMatrixPropertiesNV)
#define vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV (glad_vulkan_context.GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV)
#define vkGetPhysicalDeviceSurfacePresentModes2EXT (glad_vulkan_context.GetPhysicalDeviceSurfacePresentModes2EXT)
#define vkAcquireFullScreenExclusiveModeEXT (glad_vulkan_context.AcquireFullScreenExclusiveModeEXT)
#define vkReleaseFullScreenExclusiveModeEXT (glad_vulkan_context.ReleaseFullScreenExclusiveModeEXT)
#define vkGetDeviceGroupSurfacePresentModes2EXT (glad_vulkan_context.GetDeviceGroupSurfacePresentModes2EXT)
#define vkCreateHeadlessSurfaceEXT (glad_vulkan_context.CreateHeadlessSurfaceEXT)
#define vkGetBufferDeviceAddressKHR (glad_vulkan_context.GetBufferDeviceAddressKHR)
#define vkGetBufferOpaqueCaptureAddressKHR (glad_vulkan_context.GetBufferOpaqueCaptureAddressKHR)
#define vkGetDeviceMemoryOpaqueCaptureAddressKHR (glad_vulkan_context.GetDeviceMemoryOpaqueCaptureAddressKHR)
#define vkCmdSetLineStippleEXT (glad_vulkan_context.CmdSetLineStippleEXT)
#define vkResetQueryPoolEXT (glad_vulkan_context.ResetQueryPoolEXT)
#define vkCmdSetCullModeEXT (glad_vulkan_context.CmdSetCullModeEXT)
#define vkCmdSetFrontFaceEXT (glad_vulkan_context.CmdSetFrontFaceEXT)
#define vkCmdSetPrimitiveTopologyEXT (glad_vulkan_context.CmdSetPrimitiveTopologyEXT)
#define vkCmdSetViewportWithCountEXT (glad_vulkan_context.CmdSetViewportWithCountEXT)
#define vkCmdSetScissorWithCountEXT (glad_vulkan_context.CmdSetScissorWithCountEXT)
#define vkCmdBindVertexBuffers2EXT (glad_vulkan_context.CmdBindVertexBuffers2EXT)
#define vkCmdSetDepthTestEnableEXT (glad_vulkan_context.CmdSetDepthTestEnableEXT)
#define vkCmdSetDepthWriteEnableEXT (glad_vulkan_context.CmdSetDepthWriteEnableEXT)
#define vkCmdSetDepthCompareOpEXT (glad_vulkan_context.CmdSetDepthCompareOpEXT)
#define vkCmdSetDepthBoundsTestEnableEXT (glad_vulkan_context.CmdSetDepthBoundsTestEnableEXT)
#define vkCmdSetStencilTestEnableEXT (glad_vulkan_context.CmdSetStencilTestEnableEXT)
#define vkCmdSetStencilOpEXT (glad_vulkan_context.CmdSetStencilOpEXT)
#define vkCreateDeferredOperationKHR (glad_vulkan_context.CreateDeferredOperationKHR)
#define vkDestroyDeferredOperationKHR (glad_vulkan_context.DestroyDeferredOperationKHR)
#define vkGetDeferredOperationMaxConcurrencyKHR (glad_vulkan_context.GetDeferredOperationMaxConcurrencyKHR)
#define vkGetDeferredOperationResultKHR (glad_vulkan_context.GetDeferredOperationResultKHR)
#define vkDeferredOperationJoinKHR (glad_vulkan_context.DeferredOperationJoinKHR)
#define vkGetPipelineExecutablePropertiesKHR (glad_vulkan_context.GetPipelineExecutablePropertiesKHR)
#define vkGetPipelineExecutableStatisticsKHR (glad_vulkan_context.GetPipelineExecutableStatisticsKHR)
#define vkGetPipelineExecutableInternalRepresentationsKHR (glad_vulkan_context.GetPipelineExecutableInternalRepresentationsKHR)
#define vkCopyMemoryToImageEXT (glad_vulkan_context.CopyMemoryToImageEXT)
#define vkCopyImageToMemoryEXT (glad_vulkan_context.CopyImageToMemoryEXT)
#define vkCopyImageToImageEXT (glad_vulkan_context.CopyImageToImageEXT)
#define vkTransitionImageLayoutEXT (glad_vulkan_context.TransitionImageLayoutEXT)
#define vkGetImageSubresourceLayout2EXT (glad_vulkan_context.GetImageSubresourceLayout2EXT)
#define vkMapMemory2KHR (glad_vulkan_context.MapMemory2KHR)
#define vkUnmapMemory2KHR (glad_vulkan_context.UnmapMemory2KHR)
#define vkReleaseSwapchainImagesEXT (glad_vulkan_context.ReleaseSwapchainImagesEXT)
#define vkGetGeneratedCommandsMemoryRequirementsNV (glad_vulkan_context.GetGeneratedCommandsMemoryRequirementsNV)
#define vkCmdPreprocessGeneratedCommandsNV (glad_vulkan_context.CmdPreprocessGeneratedCommandsNV)
#define vkCmdExecuteGeneratedCommandsNV (glad_vulkan_context.CmdExecuteGeneratedCommandsNV)
#define vkCmdBindPipelineShaderGroupNV (glad_vulkan_context.CmdBindPipelineShaderGroupNV)
#define vkCreateIndirectCommandsLayoutNV (glad_vulkan_context.CreateIndirectCommandsLayoutNV)
#define vkDestroyIndirectCommandsLayoutNV (glad_vulkan_context.DestroyIndirectCommandsLayoutNV)
#define vkCmdSetDepthBias2EXT (glad_vulkan_context.CmdSetDepthBias2EXT)
#define vkAcquireDrmDisplayEXT (glad_vulkan_context.AcquireDrmDisplayEXT)
#define vkGetDrmDisplayEXT (glad_vulkan_context.GetDrmDisplayEXT)
#define vkCreatePrivateDataSlotEXT (glad_vulkan_context.CreatePrivateDataSlotEXT)
#define vkDestroyPrivateDataSlotEXT (glad_vulkan_context.DestroyPrivateDataSlotEXT)
#define vkSetPrivateDataEXT (glad_vulkan_context.SetPrivateDataEXT)
#define vkGetPrivateDataEXT (glad_vulkan_context.GetPrivateDataEXT)
#define vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR (glad_vulkan_context.GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR)
#define vkGetEncodedVideoSessionParametersKHR (glad_vulkan_context.GetEncodedVideoSessionParametersKHR)
#define vkCmdEncodeVideoKHR (glad_vulkan_context.CmdEncodeVideoKHR)
#define vkCreateCudaModuleNV (glad_vulkan_context.CreateCudaModuleNV)
#define vkGetCudaModuleCacheNV (glad_vulkan_context.GetCudaModuleCacheNV)
#define vkCreateCudaFunctionNV (glad_vulkan_context.CreateCudaFunctionNV)
#define vkDestroyCudaModuleNV (glad_vulkan_context.DestroyCudaModuleNV)
#define vkDestroyCudaFunctionNV (glad_vulkan_context.DestroyCudaFunctionNV)
#define vkCmdCudaLaunchKernelNV (glad_vulkan_context.CmdCudaLaunchKernelNV)
#define vkCmdDispatchTileQCOM (glad_vulkan_context.CmdDispatchTileQCOM)
#define vkCmdBeginPerTileExecutionQCOM (glad_vulkan_context.CmdBeginPerTileExecutionQCOM)
#define vkCmdEndPerTileExecutionQCOM (glad_vulkan_context.CmdEndPerTileExecutionQCOM)
#define vkExportMetalObjectsEXT (glad_vulkan_context.ExportMetalObjectsEXT)
#define vkCmdSetEvent2KHR (glad_vulkan_context.CmdSetEvent2KHR)
#define vkCmdResetEvent2KHR (glad_vulkan_context.CmdResetEvent2KHR)
#define vkCmdWaitEvents2KHR (glad_vulkan_context.CmdWaitEvents2KHR)
#define vkCmdPipelineBarrier2KHR (glad_vulkan_context.CmdPipelineBarrier2KHR)
#define vkCmdWriteTimestamp2KHR (glad_vulkan_context.CmdWriteTimestamp2KHR)
#define vkQueueSubmit2KHR (glad_vulkan_context.QueueSubmit2KHR)
#define vkGetDescriptorSetLayoutSizeEXT (glad_vulkan_context.GetDescriptorSetLayoutSizeEXT)
#define vkGetDescriptorSetLayoutBindingOffsetEXT (glad_vulkan_context.GetDescriptorSetLayoutBindingOffsetEXT)
#define vkGetDescriptorEXT (glad_vulkan_context.GetDescriptorEXT)
#define vkCmdBindDescriptorBuffersEXT (glad_vulkan_context.CmdBindDescriptorBuffersEXT)
#define vkCmdSetDescriptorBufferOffsetsEXT (glad_vulkan_context.CmdSetDescriptorBufferOffsetsEXT)
#define vkCmdBindDescriptorBufferEmbeddedSamplersEXT (glad_vulkan_context.CmdBindDescriptorBufferEmbeddedSamplersEXT)
#define vkGetBufferOpaqueCaptureDescriptorDataEXT (glad_vulkan_context.GetBufferOpaqueCaptureDescriptorDataEXT)
#define vkGetImageOpaqueCaptureDescriptorDataEXT (glad_vulkan_context.GetImageOpaqueCaptureDescriptorDataEXT)
#define vkGetImageViewOpaqueCaptureDescriptorDataEXT (glad_vulkan_context.GetImageViewOpaqueCaptureDescriptorDataEXT)
#define vkGetSamplerOpaqueCaptureDescriptorDataEXT (glad_vulkan_context.GetSamplerOpaqueCaptureDescriptorDataEXT)
#define vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT (glad_vulkan_context.GetAccelerationStructureOpaqueCaptureDescriptorDataEXT)
#define vkCmdSetFragmentShadingRateEnumNV (glad_vulkan_context.CmdSetFragmentShadingRateEnumNV)
#define vkCmdDrawMeshTasksEXT (glad_vulkan_context.CmdDrawMeshTasksEXT)
#define vkCmdDrawMeshTasksIndirectEXT (glad_vulkan_context.CmdDrawMeshTasksIndirectEXT)
#define vkCmdDrawMeshTasksIndirectCountEXT (glad_vulkan_context.CmdDrawMeshTasksIndirectCountEXT)
#define vkCmdCopyBuffer2KHR (glad_vulkan_context.CmdCopyBuffer2KHR)
#define vkCmdCopyImage2KHR (glad_vulkan_context.CmdCopyImage2KHR)
#define vkCmdCopyBufferToImage2KHR (glad_vulkan_context.CmdCopyBufferToImage2KHR)
#define vkCmdCopyImageToBuffer2KHR (glad_vulkan_context.CmdCopyImageToBuffer2KHR)
#define vkCmdBlitImage2KHR (glad_vulkan_context.CmdBlitImage2KHR)
#define vkCmdResolveImage2KHR (glad_vulkan_context.CmdResolveImage2KHR)
#define vkGetDeviceFaultInfoEXT (glad_vulkan_context.GetDeviceFaultInfoEXT)
#define vkAcquireWinrtDisplayNV (glad_vulkan_context.AcquireWinrtDisplayNV)
#define vkGetWinrtDisplayNV (glad_vulkan_context.GetWinrtDisplayNV)
#define vkCreateDirectFBSurfaceEXT (glad_vulkan_context.CreateDirectFBSurfaceEXT)
#define vkGetPhysicalDeviceDirectFBPresentationSupportEXT (glad_vulkan_context.GetPhysicalDeviceDirectFBPresentationSupportEXT)
#define vkCmdSetVertexInputEXT (glad_vulkan_context.CmdSetVertexInputEXT)
#define vkGetMemoryZirconHandleFUCHSIA (glad_vulkan_context.GetMemoryZirconHandleFUCHSIA)
#define vkGetMemoryZirconHandlePropertiesFUCHSIA (glad_vulkan_context.GetMemoryZirconHandlePropertiesFUCHSIA)
#define vkImportSemaphoreZirconHandleFUCHSIA (glad_vulkan_context.ImportSemaphoreZirconHandleFUCHSIA)
#define vkGetSemaphoreZirconHandleFUCHSIA (glad_vulkan_context.GetSemaphoreZirconHandleFUCHSIA)
#define vkCreateBufferCollectionFUCHSIA (glad_vulkan_context.CreateBufferCollectionFUCHSIA)
#define vkSetBufferCollectionImageConstraintsFUCHSIA (glad_vulkan_context.SetBufferCollectionImageConstraintsFUCHSIA)
#define vkSetBufferCollectionBufferConstraintsFUCHSIA (glad_vulkan_context.SetBufferCollectionBufferConstraintsFUCHSIA)
#define vkDestroyBufferCollectionFUCHSIA (glad_vulkan_context.DestroyBufferCollectionFUCHSIA)
#define vkGetBufferCollectionPropertiesFUCHSIA (glad_vulkan_context.GetBufferCollectionPropertiesFUCHSIA)
#define vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI (glad_vulkan_context.GetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI)
#define vkCmdSubpassShadingHUAWEI (glad_vulkan_context.CmdSubpassShadingHUAWEI)
#define vkCmdBindInvocationMaskHUAWEI (glad_vulkan_context.CmdBindInvocationMaskHUAWEI)
#define vkGetMemoryRemoteAddressNV (glad_vulkan_context.GetMemoryRemoteAddressNV)
#define vkGetPipelinePropertiesEXT (glad_vulkan_context.GetPipelinePropertiesEXT)
#define vkCmdSetPatchControlPointsEXT (glad_vulkan_context.CmdSetPatchControlPointsEXT)
#define vkCmdSetRasterizerDiscardEnableEXT (glad_vulkan_context.CmdSetRasterizerDiscardEnableEXT)
#define vkCmdSetDepthBiasEnableEXT (glad_vulkan_context.CmdSetDepthBiasEnableEXT)
#define vkCmdSetLogicOpEXT (glad_vulkan_context.CmdSetLogicOpEXT)
#define vkCmdSetPrimitiveRestartEnableEXT (glad_vulkan_context.CmdSetPrimitiveRestartEnableEXT)
#define vkCreateScreenSurfaceQNX (glad_vulkan_context.CreateScreenSurfaceQNX)
#define vkGetPhysicalDeviceScreenPresentationSupportQNX (glad_vulkan_context.GetPhysicalDeviceScreenPresentationSupportQNX)
#define vkCmdSetColorWriteEnableEXT (glad_vulkan_context.CmdSetColorWriteEnableEXT)
#define vkCmdTraceRaysIndirect2KHR (glad_vulkan_context.CmdTraceRaysIndirect2KHR)
#define vkCmdDrawMultiEXT (glad_vulkan_context.CmdDrawMultiEXT)
#define vkCmdDrawMultiIndexedEXT (glad_vulkan_context.CmdDrawMultiIndexedEXT)
#define vkCreateMicromapEXT (glad_vulkan_context.CreateMicromapEXT)
#define vkDestroyMicromapEXT (glad_vulkan_context.DestroyMicromapEXT)
#define vkCmdBuildMicromapsEXT (glad_vulkan_context.CmdBuildMicromapsEXT)
#define vkBuildMicromapsEXT (glad_vulkan_context.BuildMicromapsEXT)
#define vkCopyMicromapEXT (glad_vulkan_context.CopyMicromapEXT)
#define vkCopyMicromapToMemoryEXT (glad_vulkan_context.CopyMicromapToMemoryEXT)
#define vkCopyMemoryToMicromapEXT (glad_vulkan_context.CopyMemoryToMicromapEXT)
#define vkWriteMicromapsPropertiesEXT (glad_vulkan_context.WriteMicromapsPropertiesEXT)
#define vkCmdCopyMicromapEXT (glad_vulkan_context.CmdCopyMicromapEXT)
#define vkCmdCopyMicromapToMemoryEXT (glad_vulkan_context.CmdCopyMicromapToMemoryEXT)
#define vkCmdCopyMemoryToMicromapEXT (glad_vulkan_context.CmdCopyMemoryToMicromapEXT)
#define vkCmdWriteMicromapsPropertiesEXT (glad_vulkan_context.CmdWriteMicromapsPropertiesEXT)
#define vkGetDeviceMicromapCompatibilityEXT (glad_vulkan_context.GetDeviceMicromapCompatibilityEXT)
#define vkGetMicromapBuildSizesEXT (glad_vulkan_context.GetMicromapBuildSizesEXT)
#define vkCmdDrawClusterHUAWEI (glad_vulkan_context.CmdDrawClusterHUAWEI)
#define vkCmdDrawClusterIndirectHUAWEI (glad_vulkan_context.CmdDrawClusterIndirectHUAWEI)
#define vkSetDeviceMemoryPriorityEXT (glad_vulkan_context.SetDeviceMemoryPriorityEXT)
#define vkGetDeviceBufferMemoryRequirementsKHR (glad_vulkan_context.GetDeviceBufferMemoryRequirementsKHR)
#define vkGetDeviceImageMemoryRequirementsKHR (glad_vulkan_context.GetDeviceImageMemoryRequirementsKHR)
#define vkGetDeviceImageSparseMemoryRequirementsKHR (glad_vulkan_context.GetDeviceImageSparseMemoryRequirementsKHR)
#define vkGetDescriptorSetLayoutHostMappingInfoVALVE (glad_vulkan_context.GetDescriptorSetLayoutHostMappingInfoVALVE)
#define vkGetDescriptorSetHostMappingVALVE (glad_vulkan_context.GetDescriptorSetHostMappingVALVE)
#define vkCmdCopyMemoryIndirectNV (glad_vulkan_context.CmdCopyMemoryIndirectNV)
#define vkCmdCopyMemoryToImageIndirectNV (glad_vulkan_context.CmdCopyMemoryToImageIndirectNV)
#define vkCmdDecompressMemoryNV (glad_vulkan_context.CmdDecompressMemoryNV)
#define vkCmdDecompressMemoryIndirectCountNV (glad_vulkan_context.CmdDecompressMemoryIndirectCountNV)
#define vkGetPipelineIndirectMemoryRequirementsNV (glad_vulkan_context.GetPipelineIndirectMemoryRequirementsNV)
#define vkCmdUpdatePipelineIndirectBufferNV (glad_vulkan_context.CmdUpdatePipelineIndirectBufferNV)
#define vkGetPipelineIndirectDeviceAddressNV (glad_vulkan_context.GetPipelineIndirectDeviceAddressNV)
#define vkCmdSetDepthClampEnableEXT (glad_vulkan_context.CmdSetDepthClampEnableEXT)
#define vkCmdSetPolygonModeEXT (glad_vulkan_context.CmdSetPolygonModeEXT)
#define vkCmdSetRasterizationSamplesEXT (glad_vulkan_context.CmdSetRasterizationSamplesEXT)
#define vkCmdSetSampleMaskEXT (glad_vulkan_context.CmdSetSampleMaskEXT)
#define vkCmdSetAlphaToCoverageEnableEXT (glad_vulkan_context.CmdSetAlphaToCoverageEnableEXT)
#define vkCmdSetAlphaToOneEnableEXT (glad_vulkan_context.CmdSetAlphaToOneEnableEXT)
#define vkCmdSetLogicOpEnableEXT (glad_vulkan_context.CmdSetLogicOpEnableEXT)
#define vkCmdSetColorBlendEnableEXT (glad_vulkan_context.CmdSetColorBlendEnableEXT)
#define vkCmdSetColorBlendEquationEXT (glad_vulkan_context.CmdSetColorBlendEquationEXT)
#define vkCmdSetColorWriteMaskEXT (glad_vulkan_context.CmdSetColorWriteMaskEXT)
#define vkCmdSetTessellationDomainOriginEXT (glad_vulkan_context.CmdSetTessellationDomainOriginEXT)
#define vkCmdSetRasterizationStreamEXT (glad_vulkan_context.CmdSetRasterizationStreamEXT)
#define vkCmdSetConservativeRasterizationModeEXT (glad_vulkan_context.CmdSetConservativeRasterizationModeEXT)
#define vkCmdSetExtraPrimitiveOverestimationSizeEXT (glad_vulkan_context.CmdSetExtraPrimitiveOverestimationSizeEXT)
#define vkCmdSetDepthClipEnableEXT (glad_vulkan_context.CmdSetDepthClipEnableEXT)
#define vkCmdSetSampleLocationsEnableEXT (glad_vulkan_context.CmdSetSampleLocationsEnableEXT)
#define vkCmdSetColorBlendAdvancedEXT (glad_vulkan_context.CmdSetColorBlendAdvancedEXT)
#define vkCmdSetProvokingVertexModeEXT (glad_vulkan_context.CmdSetProvokingVertexModeEXT)
#define vkCmdSetLineRasterizationModeEXT (glad_vulkan_context.CmdSetLineRasterizationModeEXT)
#define vkCmdSetLineStippleEnableEXT (glad_vulkan_context.CmdSetLineStippleEnableEXT)
#define vkCmdSetDepthClipNegativeOneToOneEXT (glad_vulkan_context.CmdSetDepthClipNegativeOneToOneEXT)
#define vkCmdSetViewportWScalingEnableNV (glad_vulkan_context.CmdSetViewportWScalingEnableNV)
#define vkCmdSetViewportSwizzleNV (glad_vulkan_context.CmdSetViewportSwizzleNV)
#define vkCmdSetCoverageToColorEnableNV (glad_vulkan_context.CmdSetCoverageToColorEnableNV)
#define vkCmdSetCoverageToColorLocationNV (glad_vulkan_context.CmdSetCoverageToColorLocationNV)
#define vkCmdSetCoverageModulationModeNV (glad_vulkan_context.CmdSetCoverageModulationModeNV)
#define vkCmdSetCoverageModulationTableEnableNV (glad_vulkan_context.CmdSetCoverageModulationTableEnableNV)
#define vkCmdSetCoverageModulationTableNV (glad_vulkan_context.CmdSetCoverageModulationTableNV)
#define vkCmdSetShadingRateImageEnableNV (glad_vulkan_context.CmdSetShadingRateImageEnableNV)
#define vkCmdSetRepresentativeFragmentTestEnableNV (glad_vulkan_context.CmdSetRepresentativeFragmentTestEnableNV)
#define vkCmdSetCoverageReductionModeNV (glad_vulkan_context.CmdSetCoverageReductionModeNV)
#define vkCreateTensorARM (glad_vulkan_context.CreateTensorARM)
#define vkDestroyTensorARM (glad_vulkan_context.DestroyTensorARM)
#define vkCreateTensorViewARM (glad_vulkan_context.CreateTensorViewARM)
#define vkDestroyTensorViewARM (glad_vulkan_context.DestroyTensorViewARM)
#define vkGetTensorMemoryRequirementsARM (glad_vulkan_context.GetTensorMemoryRequirementsARM)
#define vkBindTensorMemoryARM (glad_vulkan_context.BindTensorMemoryARM)
#define vkGetDeviceTensorMemoryRequirementsARM (glad_vulkan_context.GetDeviceTensorMemoryRequirementsARM)
#define vkCmdCopyTensorARM (glad_vulkan_context.CmdCopyTensorARM)
#define vkGetPhysicalDeviceExternalTensorPropertiesARM (glad_vulkan_context.GetPhysicalDeviceExternalTensorPropertiesARM)
#define vkGetTensorOpaqueCaptureDescriptorDataARM (glad_vulkan_context.GetTensorOpaqueCaptureDescriptorDataARM)
#define vkGetTensorViewOpaqueCaptureDescriptorDataARM (glad_vulkan_context.GetTensorViewOpaqueCaptureDescriptorDataARM)
#define vkGetShaderModuleIdentifierEXT (glad_vulkan_context.GetShaderModuleIdentifierEXT)
#define vkGetShaderModuleCreateInfoIdentifierEXT (glad_vulkan_context.GetShaderModuleCreateInfoIdentifierEXT)
#define vkGetPhysicalDeviceOpticalFlowImageFormatsNV (glad_vulkan_context.GetPhysicalDeviceOpticalFlowImageFormatsNV)
#define vkCreateOpticalFlowSessionNV (glad_vulkan_context.CreateOpticalFlowSessionNV)
#define vkDestroyOpticalFlowSessionNV (glad_vulkan_context.DestroyOpticalFlowSessionNV)
#define vkBindOpticalFlowSessionImageNV (glad_vulkan_context.BindOpticalFlowSessionImageNV)
#define vkCmdOpticalFlowExecuteNV (glad_vulkan_context.CmdOpticalFlowExecuteNV)
#define vkCmdBindIndexBuffer2KHR (glad_vulkan_context.CmdBindIndexBuffer2KHR)
#define vkGetRenderingAreaGranularityKHR (glad_vulkan_context.GetRenderingAreaGranularityKHR)
#define vkGetDeviceImageSubresourceLayoutKHR (glad_vulkan_context.GetDeviceImageSubresourceLayoutKHR)
#define vkGetImageSubresourceLayout2KHR (glad_vulkan_context.GetImageSubresourceLayout2KHR)
#define vkAntiLagUpdateAMD (glad_vulkan_context.AntiLagUpdateAMD)
#define vkWaitForPresent2KHR (glad_vulkan_context.WaitForPresent2KHR)
#define vkCreateShadersEXT (glad_vulkan_context.CreateShadersEXT)
#define vkDestroyShaderEXT (glad_vulkan_context.DestroyShaderEXT)
#define vkGetShaderBinaryDataEXT (glad_vulkan_context.GetShaderBinaryDataEXT)
#define vkCmdBindShadersEXT (glad_vulkan_context.CmdBindShadersEXT)
#define vkCmdSetDepthClampRangeEXT (glad_vulkan_context.CmdSetDepthClampRangeEXT)
#define vkCreatePipelineBinariesKHR (glad_vulkan_context.CreatePipelineBinariesKHR)
#define vkDestroyPipelineBinaryKHR (glad_vulkan_context.DestroyPipelineBinaryKHR)
#define vkGetPipelineKeyKHR (glad_vulkan_context.GetPipelineKeyKHR)
#define vkGetPipelineBinaryDataKHR (glad_vulkan_context.GetPipelineBinaryDataKHR)
#define vkReleaseCapturedPipelineDataKHR (glad_vulkan_context.ReleaseCapturedPipelineDataKHR)
#define vkGetFramebufferTilePropertiesQCOM (glad_vulkan_context.GetFramebufferTilePropertiesQCOM)
#define vkGetDynamicRenderingTilePropertiesQCOM (glad_vulkan_context.GetDynamicRenderingTilePropertiesQCOM)
#define vkReleaseSwapchainImagesKHR (glad_vulkan_context.ReleaseSwapchainImagesKHR)
#define vkGetPhysicalDeviceCooperativeVectorPropertiesNV (glad_vulkan_context.GetPhysicalDeviceCooperativeVectorPropertiesNV)
#define vkConvertCooperativeVectorMatrixNV (glad_vulkan_context.ConvertCooperativeVectorMatrixNV)
#define vkCmdConvertCooperativeVectorMatrixNV (glad_vulkan_context.CmdConvertCooperativeVectorMatrixNV)
#define vkSetLatencySleepModeNV (glad_vulkan_context.SetLatencySleepModeNV)
#define vkLatencySleepNV (glad_vulkan_context.LatencySleepNV)
#define vkSetLatencyMarkerNV (glad_vulkan_context.SetLatencyMarkerNV)
#define vkGetLatencyTimingsNV (glad_vulkan_context.GetLatencyTimingsNV)
#define vkQueueNotifyOutOfBandNV (glad_vulkan_context.QueueNotifyOutOfBandNV)
#define vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR (glad_vulkan_context.GetPhysicalDeviceCooperativeMatrixPropertiesKHR)
#define vkCreateDataGraphPipelinesARM (glad_vulkan_context.CreateDataGraphPipelinesARM)
#define vkCreateDataGraphPipelineSessionARM (glad_vulkan_context.CreateDataGraphPipelineSessionARM)
#define vkGetDataGraphPipelineSessionBindPointRequirementsARM (glad_vulkan_context.GetDataGraphPipelineSessionBindPointRequirementsARM)
#define vkGetDataGraphPipelineSessionMemoryRequirementsARM (glad_vulkan_context.GetDataGraphPipelineSessionMemoryRequirementsARM)
#define vkBindDataGraphPipelineSessionMemoryARM (glad_vulkan_context.BindDataGraphPipelineSessionMemoryARM)
#define vkDestroyDataGraphPipelineSessionARM (glad_vulkan_context.DestroyDataGraphPipelineSessionARM)
#define vkCmdDispatchDataGraphARM (glad_vulkan_context.CmdDispatchDataGraphARM)
#define vkGetDataGraphPipelineAvailablePropertiesARM (glad_vulkan_context.GetDataGraphPipelineAvailablePropertiesARM)
#define vkGetDataGraphPipelinePropertiesARM (glad_vulkan_context.GetDataGraphPipelinePropertiesARM)
#define vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM (glad_vulkan_context.GetPhysicalDeviceQueueFamilyDataGraphPropertiesARM)
#define vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM (glad_vulkan_context.GetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM)
#define vkCmdSetAttachmentFeedbackLoopEnableEXT (glad_vulkan_context.CmdSetAttachmentFeedbackLoopEnableEXT)
#define vkGetScreenBufferPropertiesQNX (glad_vulkan_context.GetScreenBufferPropertiesQNX)
#define vkCmdSetLineStippleKHR (glad_vulkan_context.CmdSetLineStippleKHR)
#define vkGetPhysicalDeviceCalibrateableTimeDomainsKHR (glad_vulkan_context.GetPhysicalDeviceCalibrateableTimeDomainsKHR)
#define vkGetCalibratedTimestampsKHR (glad_vulkan_context.GetCalibratedTimestampsKHR)
#define vkCmdBindDescriptorSets2KHR (glad_vulkan_context.CmdBindDescriptorSets2KHR)
#define vkCmdPushConstants2KHR (glad_vulkan_context.CmdPushConstants2KHR)
#define vkCmdPushDescriptorSet2KHR (glad_vulkan_context.CmdPushDescriptorSet2KHR)
#define vkCmdPushDescriptorSetWithTemplate2KHR (glad_vulkan_context.CmdPushDescriptorSetWithTemplate2KHR)
#define vkCmdSetDescriptorBufferOffsets2EXT (glad_vulkan_context.CmdSetDescriptorBufferOffsets2EXT)
#define vkCmdBindDescriptorBufferEmbeddedSamplers2EXT (glad_vulkan_context.CmdBindDescriptorBufferEmbeddedSamplers2EXT)
#define vkCmdBindTileMemoryQCOM (glad_vulkan_context.CmdBindTileMemoryQCOM)
#define vkCmdCopyMemoryIndirectKHR (glad_vulkan_context.CmdCopyMemoryIndirectKHR)
#define vkCmdCopyMemoryToImageIndirectKHR (glad_vulkan_context.CmdCopyMemoryToImageIndirectKHR)
#define vkCreateExternalComputeQueueNV (glad_vulkan_context.CreateExternalComputeQueueNV)
#define vkDestroyExternalComputeQueueNV (glad_vulkan_context.DestroyExternalComputeQueueNV)
#define vkGetExternalComputeQueueDataNV (glad_vulkan_context.GetExternalComputeQueueDataNV)
#define vkGetClusterAccelerationStructureBuildSizesNV (glad_vulkan_context.GetClusterAccelerationStructureBuildSizesNV)
#define vkCmdBuildClusterAccelerationStructureIndirectNV (glad_vulkan_context.CmdBuildClusterAccelerationStructureIndirectNV)
#define vkGetPartitionedAccelerationStructuresBuildSizesNV (glad_vulkan_context.GetPartitionedAccelerationStructuresBuildSizesNV)
#define vkCmdBuildPartitionedAccelerationStructuresNV (glad_vulkan_context.CmdBuildPartitionedAccelerationStructuresNV)
#define vkGetGeneratedCommandsMemoryRequirementsEXT (glad_vulkan_context.GetGeneratedCommandsMemoryRequirementsEXT)
#define vkCmdPreprocessGeneratedCommandsEXT (glad_vulkan_context.CmdPreprocessGeneratedCommandsEXT)
#define vkCmdExecuteGeneratedCommandsEXT (glad_vulkan_context.CmdExecuteGeneratedCommandsEXT)
#define vkCreateIndirectCommandsLayoutEXT (glad_vulkan_context.CreateIndirectCommandsLayoutEXT)
#define vkDestroyIndirectCommandsLayoutEXT (glad_vulkan_context.DestroyIndirectCommandsLayoutEXT)
#define vkCreateIndirectExecutionSetEXT (glad_vulkan_context.CreateIndirectExecutionSetEXT)
#define vkDestroyIndirectExecutionSetEXT (glad_vulkan_context.DestroyIndirectExecutionSetEXT)
#define vkUpdateIndirectExecutionSetPipelineEXT (glad_vulkan_context.UpdateIndirectExecutionSetPipelineEXT)
#define vkUpdateIndirectExecutionSetShaderEXT (glad_vulkan_context.UpdateIndirectExecutionSetShaderEXT)
#define vkCreateSurfaceOHOS (glad_vulkan_context.CreateSurfaceOHOS)
#define vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV (glad_vulkan_context.GetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV)
#define vkGetMemoryMetalHandleEXT (glad_vulkan_context.GetMemoryMetalHandleEXT)
#define vkGetMemoryMetalHandlePropertiesEXT (glad_vulkan_context.GetMemoryMetalHandlePropertiesEXT)
#define vkCmdEndRendering2EXT (glad_vulkan_context.CmdEndRendering2EXT)
#endif


GLAD_API_CALL GladVulkanContext* gladGetVulkanContext(void);
GLAD_API_CALL void gladSetVulkanContext(GladVulkanContext *context);


/* The scope of this command, i.e. whether it's a global, device or instance
 * function.
 */
enum GLADcommandscope {
    CommandScopeUnknown = 0,
    CommandScopeGlobal,
    CommandScopeDevice,
    CommandScopeInstance,
};

typedef GLADapiproc (*GLADvkuserptrloadfunc)(void *userptr, const char *name, enum GLADcommandscope type);
typedef GLADapiproc (*GLADvkloadfunc)(const char *name, enum GLADcommandscope type);

GLAD_API_CALL int gladLoadVulkanContextUserPtr(GladVulkanContext *context, VkInstance instance, VkPhysicalDevice physical_device, VkDevice device, GLADvkuserptrloadfunc load, void *userptr);
GLAD_API_CALL int gladLoadVulkanContext(GladVulkanContext *context, VkInstance instance, VkPhysicalDevice physical_device, VkDevice device, GLADvkloadfunc load);

GLAD_API_CALL int gladLoadVulkanUserPtr(VkInstance instance, VkPhysicalDevice physical_device, VkDevice device, GLADvkuserptrloadfunc load, void *userptr);
GLAD_API_CALL int gladLoadVulkan(VkInstance instance, VkPhysicalDevice physical_device, VkDevice device, GLADvkloadfunc load);

#ifdef GLAD_VULKAN

GLAD_API_CALL int gladLoaderLoadVulkanContext(GladVulkanContext *context, VkInstance instance, VkPhysicalDevice physical_device, VkDevice device);
GLAD_API_CALL void gladLoaderUnloadVulkanContext(GladVulkanContext *context);
GLAD_API_CALL void gladLoaderResetVulkanContext(GladVulkanContext *context);
GLAD_API_CALL int gladLoaderLoadVulkan(VkInstance instance, VkPhysicalDevice physical_device, VkDevice device);
GLAD_API_CALL void gladLoaderUnloadVulkan(void);
GLAD_API_CALL void gladLoaderResetVulkan(void);

#endif

#ifdef __cplusplus
}
#endif
#endif
