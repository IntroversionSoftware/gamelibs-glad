/**
 * Loader generated by glad 2.0.8 on -
 *
 * SPDX-License-Identifier: (WTFPL OR CC0-1.0) AND Apache-2.0
 *
 * Generator: C/C++
 * Specification: egl
 * Extensions: 224
 *
 * APIs:
 *  - egl=1.5
 *
 * Options:
 *  - ALIAS = True
 *  - HEADER_ONLY = False
 *  - LOADER = True
 *  - MX = True
 *  - MX_GLOBAL = True
 *
 * Commandline:
 *    --merge --api='egl=1.5' --extensions='EGL_ANDROID_GLES_layers,EGL_ANDROID_blob_cache,EGL_ANDROID_create_native_client_buffer,EGL_ANDROID_framebuffer_target,EGL_ANDROID_front_buffer_auto_refresh,EGL_ANDROID_get_frame_timestamps,EGL_ANDROID_get_native_client_buffer,EGL_ANDROID_image_native_buffer,EGL_ANDROID_native_fence_sync,EGL_ANDROID_presentation_time,EGL_ANDROID_recordable,EGL_ANDROID_telemetry_hint,EGL_ANGLE_colorspace_attribute_passthrough,EGL_ANGLE_context_virtualization,EGL_ANGLE_create_context_backwards_compatible,EGL_ANGLE_create_context_client_arrays,EGL_ANGLE_create_context_extensions_enabled,EGL_ANGLE_create_context_webgl_compatibility,EGL_ANGLE_create_surface_swap_interval,EGL_ANGLE_d3d_share_handle_client_buffer,EGL_ANGLE_d3d_texture_client_buffer,EGL_ANGLE_device_cgl,EGL_ANGLE_device_creation,EGL_ANGLE_device_d3d,EGL_ANGLE_device_d3d11,EGL_ANGLE_device_d3d9,EGL_ANGLE_device_eagl,EGL_ANGLE_device_metal,EGL_ANGLE_device_vulkan,EGL_ANGLE_direct_composition,EGL_ANGLE_display_power_preference,EGL_ANGLE_display_semaphore_share_group,EGL_ANGLE_display_texture_share_group,EGL_ANGLE_experimental_present_path,EGL_ANGLE_external_context_and_surface,EGL_ANGLE_feature_control,EGL_ANGLE_ggp_stream_descriptor,EGL_ANGLE_global_fence_sync,EGL_ANGLE_iosurface_client_buffer,EGL_ANGLE_keyed_mutex,EGL_ANGLE_memory_usage_report,EGL_ANGLE_metal_create_context_ownership_identity,EGL_ANGLE_metal_shared_event_sync,EGL_ANGLE_metal_texture_client_buffer,EGL_ANGLE_no_error,EGL_ANGLE_platform_angle,EGL_ANGLE_platform_angle_d3d,EGL_ANGLE_platform_angle_d3d11on12,EGL_ANGLE_platform_angle_d3d_luid,EGL_ANGLE_platform_angle_device_context_volatile_cgl,EGL_ANGLE_platform_angle_device_context_volatile_eagl,EGL_ANGLE_platform_angle_device_id,EGL_ANGLE_platform_angle_device_type_egl,EGL_ANGLE_platform_angle_device_type_swiftshader,EGL_ANGLE_platform_angle_metal,EGL_ANGLE_platform_angle_null,EGL_ANGLE_platform_angle_opengl,EGL_ANGLE_platform_angle_vulkan,EGL_ANGLE_platform_angle_vulkan_device_uuid,EGL_ANGLE_platform_angle_webgpu,EGL_ANGLE_power_preference,EGL_ANGLE_prepare_swap_buffers,EGL_ANGLE_program_cache_control,EGL_ANGLE_query_surface_pointer,EGL_ANGLE_robust_resource_initialization,EGL_ANGLE_stream_producer_d3d_texture,EGL_ANGLE_surface_d3d_texture_2d_share_handle,EGL_ANGLE_surface_orientation,EGL_ANGLE_swap_with_frame_token,EGL_ANGLE_sync_control_rate,EGL_ANGLE_vulkan_display,EGL_ANGLE_vulkan_image,EGL_ANGLE_wait_until_work_scheduled,EGL_ANGLE_window_fixed_size,EGL_ANGLE_x11_visual,EGL_ARM_image_format,EGL_ARM_implicit_external_sync,EGL_ARM_pixmap_multisample_discard,EGL_CHROMIUM_sync_control,EGL_EXT_bind_to_front,EGL_EXT_buffer_age,EGL_EXT_client_extensions,EGL_EXT_client_sync,EGL_EXT_compositor,EGL_EXT_config_select_group,EGL_EXT_create_context_robustness,EGL_EXT_device_base,EGL_EXT_device_drm,EGL_EXT_device_drm_render_node,EGL_EXT_device_enumeration,EGL_EXT_device_openwf,EGL_EXT_device_persistent_id,EGL_EXT_device_query,EGL_EXT_device_query_name,EGL_EXT_display_alloc,EGL_EXT_explicit_device,EGL_EXT_gl_colorspace_bt2020_hlg,EGL_EXT_gl_colorspace_bt2020_linear,EGL_EXT_gl_colorspace_bt2020_pq,EGL_EXT_gl_colorspace_display_p3,EGL_EXT_gl_colorspace_display_p3_linear,EGL_EXT_gl_colorspace_display_p3_passthrough,EGL_EXT_gl_colorspace_scrgb,EGL_EXT_gl_colorspace_scrgb_linear,EGL_EXT_image_dma_buf_import,EGL_EXT_image_dma_buf_import_modifiers,EGL_EXT_image_gl_colorspace,EGL_EXT_image_implicit_sync_control,EGL_EXT_multiview_window,EGL_EXT_output_base,EGL_EXT_output_drm,EGL_EXT_output_openwf,EGL_EXT_pixel_format_float,EGL_EXT_platform_base,EGL_EXT_platform_device,EGL_EXT_platform_wayland,EGL_EXT_platform_x11,EGL_EXT_platform_xcb,EGL_EXT_present_opaque,EGL_EXT_protected_content,EGL_EXT_protected_surface,EGL_EXT_query_reset_notification_strategy,EGL_EXT_stream_consumer_egloutput,EGL_EXT_surface_CTA861_3_metadata,EGL_EXT_surface_SMPTE2086_metadata,EGL_EXT_surface_compression,EGL_EXT_swap_buffers_with_damage,EGL_EXT_sync_reuse,EGL_EXT_yuv_surface,EGL_HI_clientpixmap,EGL_HI_colorformats,EGL_IMG_context_priority,EGL_IMG_image_plane_attribs,EGL_KHR_cl_event,EGL_KHR_cl_event2,EGL_KHR_client_get_all_proc_addresses,EGL_KHR_config_attribs,EGL_KHR_context_flush_control,EGL_KHR_create_context,EGL_KHR_create_context_no_error,EGL_KHR_debug,EGL_KHR_display_reference,EGL_KHR_fence_sync,EGL_KHR_get_all_proc_addresses,EGL_KHR_gl_colorspace,EGL_KHR_gl_renderbuffer_image,EGL_KHR_gl_texture_2D_image,EGL_KHR_gl_texture_3D_image,EGL_KHR_gl_texture_cubemap_image,EGL_KHR_image,EGL_KHR_image_base,EGL_KHR_image_pixmap,EGL_KHR_lock_surface,EGL_KHR_lock_surface2,EGL_KHR_lock_surface3,EGL_KHR_mutable_render_buffer,EGL_KHR_no_config_context,EGL_KHR_partial_update,EGL_KHR_platform_android,EGL_KHR_platform_gbm,EGL_KHR_platform_wayland,EGL_KHR_platform_x11,EGL_KHR_reusable_sync,EGL_KHR_stream,EGL_KHR_stream_attrib,EGL_KHR_stream_consumer_gltexture,EGL_KHR_stream_cross_process_fd,EGL_KHR_stream_fifo,EGL_KHR_stream_producer_aldatalocator,EGL_KHR_stream_producer_eglsurface,EGL_KHR_surfaceless_context,EGL_KHR_swap_buffers_with_damage,EGL_KHR_vg_parent_image,EGL_KHR_wait_sync,EGL_MESA_drm_image,EGL_MESA_image_dma_buf_export,EGL_MESA_platform_gbm,EGL_MESA_platform_surfaceless,EGL_MESA_query_driver,EGL_NOK_swap_region,EGL_NOK_swap_region2,EGL_NOK_texture_from_pixmap,EGL_NV_3dvision_surface,EGL_NV_context_priority_realtime,EGL_NV_coverage_sample,EGL_NV_coverage_sample_resolve,EGL_NV_cuda_event,EGL_NV_depth_nonlinear,EGL_NV_device_cuda,EGL_NV_native_query,EGL_NV_post_convert_rounding,EGL_NV_post_sub_buffer,EGL_NV_quadruple_buffer,EGL_NV_robustness_video_memory_purge,EGL_NV_stream_consumer_eglimage,EGL_NV_stream_consumer_eglimage_use_scanout_attrib,EGL_NV_stream_consumer_gltexture_yuv,EGL_NV_stream_cross_display,EGL_NV_stream_cross_object,EGL_NV_stream_cross_partition,EGL_NV_stream_cross_process,EGL_NV_stream_cross_system,EGL_NV_stream_dma,EGL_NV_stream_fifo_next,EGL_NV_stream_fifo_synchronous,EGL_NV_stream_flush,EGL_NV_stream_frame_limits,EGL_NV_stream_metadata,EGL_NV_stream_origin,EGL_NV_stream_remote,EGL_NV_stream_reset,EGL_NV_stream_socket,EGL_NV_stream_socket_inet,EGL_NV_stream_socket_unix,EGL_NV_stream_sync,EGL_NV_sync,EGL_NV_system_time,EGL_NV_triple_buffer,EGL_QNX_image_native_buffer,EGL_QNX_platform_screen,EGL_TIZEN_image_native_buffer,EGL_TIZEN_image_native_surface,EGL_WL_bind_wayland_display,EGL_WL_create_wayland_buffer_from_image' c --alias --loader --mx --mx-global
 *
 * Online:
 *    http://glad.sh/#api=egl%3D1.5&generator=c&options=MERGE%2CALIAS%2CLOADER%2CMX%2CMX_GLOBAL
 *
 */

#ifndef GLAD_EGL_H_
#define GLAD_EGL_H_



#define GLAD_EGL
#define GLAD_OPTION_EGL_ALIAS
#define GLAD_OPTION_EGL_LOADER
#define GLAD_OPTION_EGL_MX
#define GLAD_OPTION_EGL_MX_GLOBAL

#ifdef __cplusplus
extern "C" {
#endif

#ifndef GLAD_PLATFORM_H_
#define GLAD_PLATFORM_H_

#ifndef GLAD_PLATFORM_WIN32
  #if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__MINGW32__)
    #define GLAD_PLATFORM_WIN32 1
  #else
    #define GLAD_PLATFORM_WIN32 0
  #endif
#endif

#ifndef GLAD_PLATFORM_APPLE
  #ifdef __APPLE__
    #define GLAD_PLATFORM_APPLE 1
  #else
    #define GLAD_PLATFORM_APPLE 0
  #endif
#endif

#ifndef GLAD_PLATFORM_EMSCRIPTEN
  #ifdef __EMSCRIPTEN__
    #define GLAD_PLATFORM_EMSCRIPTEN 1
  #else
    #define GLAD_PLATFORM_EMSCRIPTEN 0
  #endif
#endif

#ifndef GLAD_PLATFORM_UWP
  #if defined(_MSC_VER) && !defined(GLAD_INTERNAL_HAVE_WINAPIFAMILY)
    #ifdef __has_include
      #if __has_include(<winapifamily.h>)
        #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
      #endif
    #elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
      #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
    #endif
  #endif

  #ifdef GLAD_INTERNAL_HAVE_WINAPIFAMILY
    #include <winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
      #define GLAD_PLATFORM_UWP 1
    #endif
  #endif

  #ifndef GLAD_PLATFORM_UWP
    #define GLAD_PLATFORM_UWP 0
  #endif
#endif

#ifdef __GNUC__
  #define GLAD_GNUC_EXTENSION __extension__
#else
  #define GLAD_GNUC_EXTENSION
#endif

#define GLAD_UNUSED(x) (void)(x)

#ifndef GLAD_API_CALL
  #if defined(GLAD_API_CALL_EXPORT)
    #if GLAD_PLATFORM_WIN32 || defined(__CYGWIN__)
      #if defined(GLAD_API_CALL_EXPORT_BUILD)
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllexport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllexport) extern
        #endif
      #else
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllimport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllimport) extern
        #endif
      #endif
    #elif defined(__GNUC__) && defined(GLAD_API_CALL_EXPORT_BUILD)
      #define GLAD_API_CALL __attribute__ ((visibility ("default"))) extern
    #else
      #define GLAD_API_CALL extern
    #endif
  #else
    #define GLAD_API_CALL extern
  #endif
#endif

#ifdef APIENTRY
  #define GLAD_API_PTR APIENTRY
#elif GLAD_PLATFORM_WIN32
  #define GLAD_API_PTR __stdcall
#else
  #define GLAD_API_PTR
#endif

#ifndef GLAPI
#define GLAPI GLAD_API_CALL
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY GLAD_API_PTR
#endif

#define GLAD_MAKE_VERSION(major, minor) (major * 10000 + minor)
#define GLAD_VERSION_MAJOR(version) (version / 10000)
#define GLAD_VERSION_MINOR(version) (version % 10000)

#define GLAD_GENERATOR_VERSION "2.0.8"

typedef void (*GLADapiproc)(void);

typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(void *userptr, const char *name);

typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc, int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...);

#endif /* GLAD_PLATFORM_H_ */

#define EGL_ALLOC_NEW_DISPLAY_EXT 0x3379
#define EGL_ALPHA_FORMAT 0x3088
#define EGL_ALPHA_FORMAT_NONPRE 0x308B
#define EGL_ALPHA_FORMAT_PRE 0x308C
#define EGL_ALPHA_MASK_SIZE 0x303E
#define EGL_ALPHA_SIZE 0x3021
#define EGL_ALREADY_SIGNALED_NV 0x30EA
#define EGL_AUTO_STEREO_NV 0x3136
#define EGL_BACK_BUFFER 0x3084
#define EGL_BAD_ACCESS 0x3002
#define EGL_BAD_ALLOC 0x3003
#define EGL_BAD_ATTRIBUTE 0x3004
#define EGL_BAD_CONFIG 0x3005
#define EGL_BAD_CONTEXT 0x3006
#define EGL_BAD_CURRENT_SURFACE 0x3007
#define EGL_BAD_DEVICE_EXT 0x322B
#define EGL_BAD_DISPLAY 0x3008
#define EGL_BAD_MATCH 0x3009
#define EGL_BAD_NATIVE_PIXMAP 0x300A
#define EGL_BAD_NATIVE_WINDOW 0x300B
#define EGL_BAD_OUTPUT_LAYER_EXT 0x322D
#define EGL_BAD_OUTPUT_PORT_EXT 0x322E
#define EGL_BAD_PARAMETER 0x300C
#define EGL_BAD_STATE_KHR 0x321C
#define EGL_BAD_STREAM_KHR 0x321B
#define EGL_BAD_SURFACE 0x300D
#define EGL_BIND_TO_TEXTURE_RGB 0x3039
#define EGL_BIND_TO_TEXTURE_RGBA 0x303A
#define EGL_BIND_TO_TEXTURE_TARGET_ANGLE 0x348D
#define EGL_BITMAP_ORIGIN_KHR 0x30C8
#define EGL_BITMAP_PITCH_KHR 0x30C7
#define EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR 0x30CC
#define EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR 0x30CB
#define EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR 0x30CA
#define EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR 0x30CD
#define EGL_BITMAP_PIXEL_RED_OFFSET_KHR 0x30C9
#define EGL_BITMAP_PIXEL_SIZE_KHR 0x3110
#define EGL_BITMAP_POINTER_KHR 0x30C6
#define EGL_BLUE_SIZE 0x3022
#define EGL_BOTTOM_NV 0x336E
#define EGL_BUFFER_AGE_EXT 0x313D
#define EGL_BUFFER_AGE_KHR 0x313D
#define EGL_BUFFER_DESTROYED 0x3095
#define EGL_BUFFER_PRESERVED 0x3094
#define EGL_BUFFER_SIZE 0x3020
#define EGL_CGL_CONTEXT_ANGLE 0x3485
#define EGL_CGL_PIXEL_FORMAT_ANGLE 0x3486
#define EGL_CLIENT_APIS 0x308D
#define EGL_CLIENT_PIXMAP_POINTER_HI 0x8F74
#define EGL_CL_EVENT_HANDLE 0x309C
#define EGL_CL_EVENT_HANDLE_KHR 0x309C
#define EGL_COLORSPACE 0x3087
#define EGL_COLORSPACE_LINEAR 0x308A
#define EGL_COLORSPACE_sRGB 0x3089
#define EGL_COLOR_ARGB_HI 0x8F73
#define EGL_COLOR_BUFFER_TYPE 0x303F
#define EGL_COLOR_COMPONENT_TYPE_EXT 0x3339
#define EGL_COLOR_COMPONENT_TYPE_FIXED_EXT 0x333A
#define EGL_COLOR_COMPONENT_TYPE_FLOAT_EXT 0x333B
#define EGL_COLOR_COMPONENT_TYPE_INTEGER_ARM 0x3288
#define EGL_COLOR_COMPONENT_TYPE_UNSIGNED_INTEGER_ARM 0x3287
#define EGL_COLOR_FORMAT_HI 0x8F70
#define EGL_COLOR_RGBA_HI 0x8F72
#define EGL_COLOR_RGB_HI 0x8F71
#define EGL_COMPOSITE_DEADLINE_ANDROID 0x3431
#define EGL_COMPOSITE_INTERVAL_ANDROID 0x3432
#define EGL_COMPOSITE_TO_PRESENT_LATENCY_ANDROID 0x3433
#define EGL_COMPOSITION_LATCH_TIME_ANDROID 0x3436
#define EGL_COMPOSITOR_DROP_NEWEST_FRAME_EXT 0x3462
#define EGL_COMPOSITOR_KEEP_NEWEST_FRAME_EXT 0x3463
#define EGL_CONDITION_SATISFIED 0x30F6
#define EGL_CONDITION_SATISFIED_KHR 0x30F6
#define EGL_CONDITION_SATISFIED_NV 0x30EC
#define EGL_CONFIG_CAVEAT 0x3027
#define EGL_CONFIG_ID 0x3028
#define EGL_CONFIG_SELECT_GROUP_EXT 0x34C0
#define EGL_CONFORMANT 0x3042
#define EGL_CONFORMANT_KHR 0x3042
#define EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR 0x321E
#define EGL_CONSUMER_AUTO_ORIENTATION_NV 0x3369
#define EGL_CONSUMER_FRAME_KHR 0x3213
#define EGL_CONSUMER_LATENCY_USEC_KHR 0x3210
#define EGL_CONSUMER_MAX_FRAME_HINT_NV 0x3338
#define EGL_CONSUMER_METADATA_NV 0x3254
#define EGL_CONTEXT_CLIENT_ARRAYS_ENABLED_ANGLE 0x3452
#define EGL_CONTEXT_CLIENT_TYPE 0x3097
#define EGL_CONTEXT_CLIENT_VERSION 0x3098
#define EGL_CONTEXT_FLAGS_KHR 0x30FC
#define EGL_CONTEXT_LOST 0x300E
#define EGL_CONTEXT_MAJOR_VERSION 0x3098
#define EGL_CONTEXT_MAJOR_VERSION_KHR 0x3098
#define EGL_CONTEXT_MEMORY_USAGE_ANGLE None
#define EGL_CONTEXT_METAL_OWNERSHIP_IDENTITY_ANGLE 0x34D2
#define EGL_CONTEXT_MINOR_VERSION 0x30FB
#define EGL_CONTEXT_MINOR_VERSION_KHR 0x30FB
#define EGL_CONTEXT_OPENGL_BACKWARDS_COMPATIBLE_ANGLE 0x3483
#define EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT 0x00000002
#define EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR 0x00000002
#define EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT 0x00000001
#define EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR 0x00000001
#define EGL_CONTEXT_OPENGL_DEBUG 0x31B0
#define EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR 0x00000001
#define EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE 0x31B1
#define EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR 0x00000002
#define EGL_CONTEXT_OPENGL_NO_ERROR_KHR 0x31B3
#define EGL_CONTEXT_OPENGL_PROFILE_MASK 0x30FD
#define EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR 0x30FD
#define EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY 0x31BD
#define EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT 0x3138
#define EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR 0x31BD
#define EGL_CONTEXT_OPENGL_ROBUST_ACCESS 0x31B2
#define EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR 0x00000004
#define EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT 0x30BF
#define EGL_CONTEXT_PRIORITY_HIGH_IMG 0x3101
#define EGL_CONTEXT_PRIORITY_LEVEL_IMG 0x3100
#define EGL_CONTEXT_PRIORITY_LOW_IMG 0x3103
#define EGL_CONTEXT_PRIORITY_MEDIUM_IMG 0x3102
#define EGL_CONTEXT_PRIORITY_REALTIME_NV 0x3357
#define EGL_CONTEXT_PROGRAM_BINARY_CACHE_ENABLED_ANGLE 0x3459
#define EGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR 0x2098
#define EGL_CONTEXT_RELEASE_BEHAVIOR_KHR 0x2097
#define EGL_CONTEXT_RELEASE_BEHAVIOR_NONE_KHR 0
#define EGL_CONTEXT_VIRTUALIZATION_GROUP_ANGLE 0x3481
#define EGL_CONTEXT_WEBGL_COMPATIBILITY_ANGLE 0x33AC
#define EGL_CORE_NATIVE_ENGINE 0x305B
#define EGL_COVERAGE_BUFFERS_NV 0x30E0
#define EGL_COVERAGE_SAMPLES_NV 0x30E1
#define EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV 0x3132
#define EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV 0x3133
#define EGL_COVERAGE_SAMPLE_RESOLVE_NV 0x3131
#define EGL_CTA861_3_MAX_CONTENT_LIGHT_LEVEL_EXT 0x3360
#define EGL_CTA861_3_MAX_FRAME_AVERAGE_LEVEL_EXT 0x3361
#define EGL_CUDA_DEVICE_NV 0x323A
#define EGL_CUDA_EVENT_HANDLE_NV 0x323B
#define EGL_D3D11_DEVICE_ANGLE 0x33A1
#define EGL_D3D9_DEVICE_ANGLE 0x33A0
#define EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE 0x3200
#define EGL_D3D_TEXTURE_ANGLE 0x33A3
#define EGL_D3D_TEXTURE_SUBRESOURCE_ID_ANGLE 0x33AB
#define EGL_DEBUG_CALLBACK_KHR 0x33B8
#define EGL_DEBUG_MSG_CRITICAL_KHR 0x33B9
#define EGL_DEBUG_MSG_ERROR_KHR 0x33BA
#define EGL_DEBUG_MSG_INFO_KHR 0x33BC
#define EGL_DEBUG_MSG_WARN_KHR 0x33BB
#define EGL_DEFAULT_DISPLAY EGL_CAST(EGLNativeDisplayType,0)
#define EGL_DEPTH_ENCODING_NONE_NV 0
#define EGL_DEPTH_ENCODING_NONLINEAR_NV 0x30E3
#define EGL_DEPTH_ENCODING_NV 0x30E2
#define EGL_DEPTH_SIZE 0x3025
#define EGL_DEQUEUE_READY_TIME_ANDROID 0x343B
#define EGL_DEVICE_EXT 0x322C
#define EGL_DEVICE_UUID_EXT 0x335C
#define EGL_DIRECT_COMPOSITION_ANGLE 0x33A5
#define EGL_DISCARD_SAMPLES_ARM 0x3286
#define EGL_DISPLAY_PRESENT_TIME_ANDROID 0x343A
#define EGL_DISPLAY_SCALING 10000
#define EGL_DISPLAY_SEMAPHORE_SHARE_GROUP_ANGLE 0x348D
#define EGL_DISPLAY_TEXTURE_SHARE_GROUP_ANGLE 0x33AF
#define EGL_DMA_BUF_PLANE0_FD_EXT 0x3272
#define EGL_DMA_BUF_PLANE0_MODIFIER_HI_EXT 0x3444
#define EGL_DMA_BUF_PLANE0_MODIFIER_LO_EXT 0x3443
#define EGL_DMA_BUF_PLANE0_OFFSET_EXT 0x3273
#define EGL_DMA_BUF_PLANE0_PITCH_EXT 0x3274
#define EGL_DMA_BUF_PLANE1_FD_EXT 0x3275
#define EGL_DMA_BUF_PLANE1_MODIFIER_HI_EXT 0x3446
#define EGL_DMA_BUF_PLANE1_MODIFIER_LO_EXT 0x3445
#define EGL_DMA_BUF_PLANE1_OFFSET_EXT 0x3276
#define EGL_DMA_BUF_PLANE1_PITCH_EXT 0x3277
#define EGL_DMA_BUF_PLANE2_FD_EXT 0x3278
#define EGL_DMA_BUF_PLANE2_MODIFIER_HI_EXT 0x3448
#define EGL_DMA_BUF_PLANE2_MODIFIER_LO_EXT 0x3447
#define EGL_DMA_BUF_PLANE2_OFFSET_EXT 0x3279
#define EGL_DMA_BUF_PLANE2_PITCH_EXT 0x327A
#define EGL_DMA_BUF_PLANE3_FD_EXT 0x3440
#define EGL_DMA_BUF_PLANE3_MODIFIER_HI_EXT 0x344A
#define EGL_DMA_BUF_PLANE3_MODIFIER_LO_EXT 0x3449
#define EGL_DMA_BUF_PLANE3_OFFSET_EXT 0x3441
#define EGL_DMA_BUF_PLANE3_PITCH_EXT 0x3442
#define EGL_DONT_CARE EGL_CAST(EGLint,-1)
#define EGL_DRAW 0x3059
#define EGL_DRIVER_NAME_EXT 0x335E
#define EGL_DRIVER_UUID_EXT 0x335D
#define EGL_DRM_BUFFER_FORMAT_ARGB32_MESA 0x31D2
#define EGL_DRM_BUFFER_FORMAT_MESA 0x31D0
#define EGL_DRM_BUFFER_MESA 0x31D3
#define EGL_DRM_BUFFER_STRIDE_MESA 0x31D4
#define EGL_DRM_BUFFER_USE_CURSOR_MESA 0x00000004
#define EGL_DRM_BUFFER_USE_MESA 0x31D1
#define EGL_DRM_BUFFER_USE_SCANOUT_MESA 0x00000001
#define EGL_DRM_BUFFER_USE_SHARE_MESA 0x00000002
#define EGL_DRM_CONNECTOR_EXT 0x3236
#define EGL_DRM_CRTC_EXT 0x3234
#define EGL_DRM_DEVICE_FILE_EXT 0x3233
#define EGL_DRM_MASTER_FD_EXT 0x333C
#define EGL_DRM_PLANE_EXT 0x3235
#define EGL_DRM_RENDER_NODE_FILE_EXT 0x3377
#define EGL_DXGI_KEYED_MUTEX_ANGLE 0x33A2
#define EGL_EAGL_CONTEXT_ANGLE 0x348C
#define EGL_EXPERIMENTAL_PRESENT_PATH_ANGLE 0x33A4
#define EGL_EXPERIMENTAL_PRESENT_PATH_COPY_ANGLE 0x33AA
#define EGL_EXPERIMENTAL_PRESENT_PATH_FAST_ANGLE 0x33A9
#define EGL_EXTENSIONS 0x3055
#define EGL_EXTENSIONS_ENABLED_ANGLE 0x345F
#define EGL_EXTERNAL_CONTEXT_ANGLE 0x348E
#define EGL_EXTERNAL_REF_ID_EXT 0x3461
#define EGL_EXTERNAL_SURFACE_ANGLE 0x348F
#define EGL_FALSE 0
#define EGL_FEATURE_ALL_DISABLED_ANGLE 0x3469
#define EGL_FEATURE_CATEGORY_ANGLE 0x3461
#define EGL_FEATURE_COUNT_ANGLE 0x3465
#define EGL_FEATURE_NAME_ANGLE 0x3460
#define EGL_FEATURE_OVERRIDES_DISABLED_ANGLE 0x3467
#define EGL_FEATURE_OVERRIDES_ENABLED_ANGLE 0x3466
#define EGL_FEATURE_STATUS_ANGLE 0x3464
#define EGL_FIRST_COMPOSITION_GPU_FINISHED_TIME_ANDROID 0x3439
#define EGL_FIRST_COMPOSITION_START_TIME_ANDROID 0x3437
#define EGL_FIXED_SIZE_ANGLE 0x3201
#define EGL_FOREVER 0xFFFFFFFFFFFFFFFF
#define EGL_FOREVER_KHR 0xFFFFFFFFFFFFFFFF
#define EGL_FOREVER_NV 0xFFFFFFFFFFFFFFFF
#define EGL_FORMAT_RGBA_8888_EXACT_KHR 0x30C2
#define EGL_FORMAT_RGBA_8888_KHR 0x30C3
#define EGL_FORMAT_RGB_565_EXACT_KHR 0x30C0
#define EGL_FORMAT_RGB_565_KHR 0x30C1
#define EGL_FRAMEBUFFER_TARGET_ANDROID 0x3147
#define EGL_FRONT_BUFFER_AUTO_REFRESH_ANDROID 0x314C
#define EGL_FRONT_BUFFER_EXT 0x3464
#define EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV 0x334C
#define EGL_GGP_STREAM_DESCRIPTOR_ANGLE 0x348B
#define EGL_GL_COLORSPACE 0x309D
#define EGL_GL_COLORSPACE_BT2020_HLG_EXT 0x3540
#define EGL_GL_COLORSPACE_BT2020_LINEAR_EXT 0x333F
#define EGL_GL_COLORSPACE_BT2020_PQ_EXT 0x3340
#define EGL_GL_COLORSPACE_DEFAULT_EXT 0x314D
#define EGL_GL_COLORSPACE_DISPLAY_P3_EXT 0x3363
#define EGL_GL_COLORSPACE_DISPLAY_P3_LINEAR_EXT 0x3362
#define EGL_GL_COLORSPACE_DISPLAY_P3_PASSTHROUGH_EXT 0x3490
#define EGL_GL_COLORSPACE_KHR 0x309D
#define EGL_GL_COLORSPACE_LINEAR 0x308A
#define EGL_GL_COLORSPACE_LINEAR_KHR 0x308A
#define EGL_GL_COLORSPACE_SCRGB_EXT 0x3351
#define EGL_GL_COLORSPACE_SCRGB_LINEAR_EXT 0x3350
#define EGL_GL_COLORSPACE_SRGB 0x3089
#define EGL_GL_COLORSPACE_SRGB_KHR 0x3089
#define EGL_GL_RENDERBUFFER 0x30B9
#define EGL_GL_RENDERBUFFER_KHR 0x30B9
#define EGL_GL_TEXTURE_2D 0x30B1
#define EGL_GL_TEXTURE_2D_KHR 0x30B1
#define EGL_GL_TEXTURE_3D 0x30B2
#define EGL_GL_TEXTURE_3D_KHR 0x30B2
#define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x30B4
#define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR 0x30B4
#define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x30B6
#define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR 0x30B6
#define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x30B8
#define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR 0x30B8
#define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x30B3
#define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR 0x30B3
#define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x30B5
#define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR 0x30B5
#define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x30B7
#define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR 0x30B7
#define EGL_GL_TEXTURE_LEVEL 0x30BC
#define EGL_GL_TEXTURE_LEVEL_KHR 0x30BC
#define EGL_GL_TEXTURE_ZOFFSET 0x30BD
#define EGL_GL_TEXTURE_ZOFFSET_KHR 0x30BD
#define EGL_GREEN_SIZE 0x3023
#define EGL_HEIGHT 0x3056
#define EGL_HIGH_POWER_ANGLE 0x0002
#define EGL_HORIZONTAL_RESOLUTION 0x3090
#define EGL_IMAGE_PRESERVED 0x30D2
#define EGL_IMAGE_PRESERVED_KHR 0x30D2
#define EGL_IMPORT_EXPLICIT_SYNC_EXT 0x3472
#define EGL_IMPORT_IMPLICIT_SYNC_EXT 0x3471
#define EGL_IMPORT_SYNC_TYPE_EXT 0x3470
#define EGL_IOSURFACE_ANGLE 0x3454
#define EGL_IOSURFACE_PLANE_ANGLE 0x345A
#define EGL_IOSURFACE_USAGE_HINT_ANGLE 0x348A
#define EGL_ITU_REC2020_EXT 0x3281
#define EGL_ITU_REC601_EXT 0x327F
#define EGL_ITU_REC709_EXT 0x3280
#define EGL_LARGEST_PBUFFER 0x3058
#define EGL_LAST_COMPOSITION_START_TIME_ANDROID 0x3438
#define EGL_LEFT_NV 0x336B
#define EGL_LEVEL 0x3029
#define EGL_LINUX_DMA_BUF_EXT 0x3270
#define EGL_LINUX_DRM_FOURCC_EXT 0x3271
#define EGL_LOCK_SURFACE_BIT_KHR 0x0080
#define EGL_LOCK_USAGE_HINT_KHR 0x30C5
#define EGL_LOSE_CONTEXT_ON_RESET 0x31BF
#define EGL_LOSE_CONTEXT_ON_RESET_EXT 0x31BF
#define EGL_LOSE_CONTEXT_ON_RESET_KHR 0x31BF
#define EGL_LOWER_LEFT_KHR 0x30CE
#define EGL_LOW_POWER_ANGLE 0x0001
#define EGL_LUMINANCE_BUFFER 0x308F
#define EGL_LUMINANCE_SIZE 0x303D
#define EGL_MAP_PRESERVE_PIXELS_KHR 0x30C4
#define EGL_MATCH_FORMAT_KHR 0x3043
#define EGL_MATCH_NATIVE_PIXMAP 0x3041
#define EGL_MAX_PBUFFER_HEIGHT 0x302A
#define EGL_MAX_PBUFFER_PIXELS 0x302B
#define EGL_MAX_PBUFFER_WIDTH 0x302C
#define EGL_MAX_STREAM_METADATA_BLOCKS_NV 0x3250
#define EGL_MAX_STREAM_METADATA_BLOCK_SIZE_NV 0x3251
#define EGL_MAX_STREAM_METADATA_TOTAL_SIZE_NV 0x3252
#define EGL_MAX_SWAP_INTERVAL 0x303C
#define EGL_METADATA0_SIZE_NV 0x3255
#define EGL_METADATA0_TYPE_NV 0x3259
#define EGL_METADATA1_SIZE_NV 0x3256
#define EGL_METADATA1_TYPE_NV 0x325A
#define EGL_METADATA2_SIZE_NV 0x3257
#define EGL_METADATA2_TYPE_NV 0x325B
#define EGL_METADATA3_SIZE_NV 0x3258
#define EGL_METADATA3_TYPE_NV 0x325C
#define EGL_METADATA_SCALING_EXT 50000
#define EGL_METAL_DEVICE_ANGLE 0x34A6
#define EGL_METAL_TEXTURE_ANGLE 0x34A7
#define EGL_METAL_TEXTURE_ARRAY_SLICE_ANGLE 0x34DD
#define EGL_MIN_SWAP_INTERVAL 0x303B
#define EGL_MIPMAP_LEVEL 0x3083
#define EGL_MIPMAP_TEXTURE 0x3082
#define EGL_MULTISAMPLE_RESOLVE 0x3099
#define EGL_MULTISAMPLE_RESOLVE_BOX 0x309B
#define EGL_MULTISAMPLE_RESOLVE_BOX_BIT 0x0200
#define EGL_MULTISAMPLE_RESOLVE_DEFAULT 0x309A
#define EGL_MULTIVIEW_VIEW_COUNT_EXT 0x3134
#define EGL_MUTABLE_RENDER_BUFFER_BIT_KHR 0x1000
#define EGL_NATIVE_BUFFER_ANDROID 0x3140
#define EGL_NATIVE_BUFFER_MULTIPLANE_SEPARATE_IMG 0x3105
#define EGL_NATIVE_BUFFER_PLANE_OFFSET_IMG 0x3106
#define EGL_NATIVE_BUFFER_QNX 0x3551
#define EGL_NATIVE_BUFFER_TIZEN 0x32A0
#define EGL_NATIVE_BUFFER_USAGE_ANDROID 0x3143
#define EGL_NATIVE_BUFFER_USAGE_PROTECTED_BIT_ANDROID 0x00000001
#define EGL_NATIVE_BUFFER_USAGE_RENDERBUFFER_BIT_ANDROID 0x00000002
#define EGL_NATIVE_BUFFER_USAGE_TEXTURE_BIT_ANDROID 0x00000004
#define EGL_NATIVE_PIXMAP_KHR 0x30B0
#define EGL_NATIVE_RENDERABLE 0x302D
#define EGL_NATIVE_SURFACE_TIZEN 0x32A1
#define EGL_NATIVE_VISUAL_ID 0x302E
#define EGL_NATIVE_VISUAL_TYPE 0x302F
#define EGL_NONE 0x3038
#define EGL_NON_CONFORMANT_CONFIG 0x3051
#define EGL_NOT_INITIALIZED 0x3001
#define EGL_NO_CONFIG_KHR EGL_CAST(EGLConfig,0)
#define EGL_NO_CONTEXT EGL_CAST(EGLContext,0)
#define EGL_NO_DEVICE_EXT EGL_CAST(EGLDeviceEXT,0)
#define EGL_NO_DISPLAY EGL_CAST(EGLDisplay,0)
#define EGL_NO_FILE_DESCRIPTOR_KHR EGL_CAST(EGLNativeFileDescriptorKHR,-1)
#define EGL_NO_IMAGE EGL_CAST(EGLImage,0)
#define EGL_NO_IMAGE_KHR EGL_CAST(EGLImageKHR,0)
#define EGL_NO_NATIVE_FENCE_FD_ANDROID -1
#define EGL_NO_OUTPUT_LAYER_EXT EGL_CAST(EGLOutputLayerEXT,0)
#define EGL_NO_OUTPUT_PORT_EXT EGL_CAST(EGLOutputPortEXT,0)
#define EGL_NO_RESET_NOTIFICATION 0x31BE
#define EGL_NO_RESET_NOTIFICATION_EXT 0x31BE
#define EGL_NO_RESET_NOTIFICATION_KHR 0x31BE
#define EGL_NO_STREAM_KHR EGL_CAST(EGLStreamKHR,0)
#define EGL_NO_SURFACE EGL_CAST(EGLSurface,0)
#define EGL_NO_SYNC EGL_CAST(EGLSync,0)
#define EGL_NO_SYNC_KHR EGL_CAST(EGLSync,0)
#define EGL_NO_SYNC_NV EGL_CAST(EGLSync,0)
#define EGL_NO_TEXTURE 0x305C
#define EGL_OBJECT_CONTEXT_KHR 0x33B2
#define EGL_OBJECT_DISPLAY_KHR 0x33B1
#define EGL_OBJECT_IMAGE_KHR 0x33B4
#define EGL_OBJECT_STREAM_KHR 0x33B6
#define EGL_OBJECT_SURFACE_KHR 0x33B3
#define EGL_OBJECT_SYNC_KHR 0x33B5
#define EGL_OBJECT_THREAD_KHR 0x33B0
#define EGL_OPENGL_API 0x30A2
#define EGL_OPENGL_BIT 0x0008
#define EGL_OPENGL_ES2_BIT 0x0004
#define EGL_OPENGL_ES3_BIT 0x00000040
#define EGL_OPENGL_ES3_BIT_KHR 0x00000040
#define EGL_OPENGL_ES_API 0x30A0
#define EGL_OPENGL_ES_BIT 0x0001
#define EGL_OPENVG_API 0x30A1
#define EGL_OPENVG_BIT 0x0002
#define EGL_OPENVG_IMAGE 0x3096
#define EGL_OPENWF_DEVICE_EXT 0x333D
#define EGL_OPENWF_DEVICE_ID_EXT 0x3237
#define EGL_OPENWF_PIPELINE_ID_EXT 0x3238
#define EGL_OPENWF_PORT_ID_EXT 0x3239
#define EGL_OPTIMAL_FORMAT_BIT_KHR 0x0100
#define EGL_OPTIMAL_SURFACE_ORIENTATION_ANGLE 0x33A7
#define EGL_PBUFFER_BIT 0x0001
#define EGL_PENDING_FRAME_NV 0x3329
#define EGL_PENDING_METADATA_NV 0x3328
#define EGL_PIXEL_ASPECT_RATIO 0x3092
#define EGL_PIXMAP_BIT 0x0002
#define EGL_PLATFORM_ANDROID_KHR 0x3141
#define EGL_PLATFORM_ANGLE_ANGLE 0x3202
#define EGL_PLATFORM_ANGLE_D3D11ON12_ANGLE 0x3488
#define EGL_PLATFORM_ANGLE_D3D_LUID_HIGH_ANGLE 0x34A0
#define EGL_PLATFORM_ANGLE_D3D_LUID_LOW_ANGLE 0x34A1
#define EGL_PLATFORM_ANGLE_DEBUG_LAYERS_ENABLED 0x3451
#define EGL_PLATFORM_ANGLE_DEVICE_CONTEXT_VOLATILE_CGL_ANGLE 0x34A3
#define EGL_PLATFORM_ANGLE_DEVICE_CONTEXT_VOLATILE_EAGL_ANGLE 0x34A2
#define EGL_PLATFORM_ANGLE_DEVICE_ID_HIGH_ANGLE 0x34D6
#define EGL_PLATFORM_ANGLE_DEVICE_ID_LOW_ANGLE 0x34D7
#define EGL_PLATFORM_ANGLE_DEVICE_TYPE_ANGLE 0x3209
#define EGL_PLATFORM_ANGLE_DEVICE_TYPE_D3D_REFERENCE_ANGLE 0x320C
#define EGL_PLATFORM_ANGLE_DEVICE_TYPE_D3D_WARP_ANGLE 0x320B
#define EGL_PLATFORM_ANGLE_DEVICE_TYPE_EGL_ANGLE 0x348E
#define EGL_PLATFORM_ANGLE_DEVICE_TYPE_HARDWARE_ANGLE 0x320A
#define EGL_PLATFORM_ANGLE_DEVICE_TYPE_NULL_ANGLE 0x345E
#define EGL_PLATFORM_ANGLE_DEVICE_TYPE_SWIFTSHADER_ANGLE 0x3487
#define EGL_PLATFORM_ANGLE_DISPLAY_KEY_ANGLE 0x34DC
#define EGL_PLATFORM_ANGLE_EGL_HANDLE_ANGLE 0x3480
#define EGL_PLATFORM_ANGLE_ENABLE_AUTOMATIC_TRIM_ANGLE 0x320F
#define EGL_PLATFORM_ANGLE_MAX_VERSION_MAJOR_ANGLE 0x3204
#define EGL_PLATFORM_ANGLE_MAX_VERSION_MINOR_ANGLE 0x3205
#define EGL_PLATFORM_ANGLE_NATIVE_PLATFORM_TYPE_ANGLE 0x348F
#define EGL_PLATFORM_ANGLE_TYPE_ANGLE 0x3203
#define EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE 0x3208
#define EGL_PLATFORM_ANGLE_TYPE_D3D9_ANGLE 0x3207
#define EGL_PLATFORM_ANGLE_TYPE_DEFAULT_ANGLE 0x3206
#define EGL_PLATFORM_ANGLE_TYPE_METAL_ANGLE 0x3489
#define EGL_PLATFORM_ANGLE_TYPE_NULL_ANGLE 0x33AE
#define EGL_PLATFORM_ANGLE_TYPE_OPENGLES_ANGLE 0x320E
#define EGL_PLATFORM_ANGLE_TYPE_OPENGL_ANGLE 0x320D
#define EGL_PLATFORM_ANGLE_TYPE_VULKAN_ANGLE 0x3450
#define EGL_PLATFORM_ANGLE_TYPE_WEBGPU_ANGLE 0x34DF
#define EGL_PLATFORM_ANGLE_VULKAN_DEVICE_UUID_ANGLE 0x34F0
#define EGL_PLATFORM_ANGLE_VULKAN_DRIVER_ID_ANGLE 0x34F2
#define EGL_PLATFORM_ANGLE_VULKAN_DRIVER_UUID_ANGLE 0x34F1
#define EGL_PLATFORM_DEVICE_EXT 0x313F
#define EGL_PLATFORM_GBM_KHR 0x31D7
#define EGL_PLATFORM_GBM_MESA 0x31D7
#define EGL_PLATFORM_SCREEN_QNX 0x3550
#define EGL_PLATFORM_SURFACELESS_MESA 0x31DD
#define EGL_PLATFORM_VULKAN_DISPLAY_MODE_HEADLESS_ANGLE 0x34A5
#define EGL_PLATFORM_VULKAN_DISPLAY_MODE_SIMPLE_ANGLE 0x34A4
#define EGL_PLATFORM_WAYLAND_EXT 0x31D8
#define EGL_PLATFORM_WAYLAND_KHR 0x31D8
#define EGL_PLATFORM_X11_EXT 0x31D5
#define EGL_PLATFORM_X11_KHR 0x31D5
#define EGL_PLATFORM_X11_SCREEN_EXT 0x31D6
#define EGL_PLATFORM_X11_SCREEN_KHR 0x31D6
#define EGL_PLATFORM_XCB_EXT 0x31DC
#define EGL_PLATFORM_XCB_SCREEN_EXT 0x31DE
#define EGL_POST_SUB_BUFFER_SUPPORTED_NV 0x30BE
#define EGL_POWER_PREFERENCE_ANGLE 0x3482
#define EGL_PRESENT_OPAQUE_EXT 0x31DF
#define EGL_PRIMARY_COMPOSITOR_CONTEXT_EXT 0x3460
#define EGL_PRODUCER_AUTO_ORIENTATION_NV 0x336A
#define EGL_PRODUCER_FRAME_KHR 0x3212
#define EGL_PRODUCER_MAX_FRAME_HINT_NV 0x3337
#define EGL_PRODUCER_METADATA_NV 0x3253
#define EGL_PROGRAM_CACHE_KEY_LENGTH_ANGLE 0x3456
#define EGL_PROGRAM_CACHE_RESIZE_ANGLE 0x3457
#define EGL_PROGRAM_CACHE_SIZE_ANGLE 0x3455
#define EGL_PROGRAM_CACHE_TRIM_ANGLE 0x3458
#define EGL_PROTECTED_CONTENT_EXT 0x32C0
#define EGL_QUADRUPLE_BUFFER_NV 0x3231
#define EGL_READ 0x305A
#define EGL_READS_DONE_TIME_ANDROID 0x343C
#define EGL_READ_SURFACE_BIT_KHR 0x0001
#define EGL_RECORDABLE_ANDROID 0x3142
#define EGL_RED_SIZE 0x3024
#define EGL_RENDERABLE_TYPE 0x3040
#define EGL_RENDERER_EXT 0x335F
#define EGL_RENDERING_COMPLETE_TIME_ANDROID 0x3435
#define EGL_RENDER_BUFFER 0x3086
#define EGL_REQUESTED_PRESENT_TIME_ANDROID 0x3434
#define EGL_RGB_BUFFER 0x308E
#define EGL_RIGHT_NV 0x336C
#define EGL_ROBUST_RESOURCE_INITIALIZATION_ANGLE 0x3453
#define EGL_SAMPLES 0x3031
#define EGL_SAMPLE_BUFFERS 0x3032
#define EGL_SAMPLE_RANGE_HINT_EXT 0x327C
#define EGL_SIGNALED 0x30F2
#define EGL_SIGNALED_KHR 0x30F2
#define EGL_SIGNALED_NV 0x30E8
#define EGL_SINGLE_BUFFER 0x3085
#define EGL_SLOW_CONFIG 0x3050
#define EGL_SMPTE2086_DISPLAY_PRIMARY_BX_EXT 0x3345
#define EGL_SMPTE2086_DISPLAY_PRIMARY_BY_EXT 0x3346
#define EGL_SMPTE2086_DISPLAY_PRIMARY_GX_EXT 0x3343
#define EGL_SMPTE2086_DISPLAY_PRIMARY_GY_EXT 0x3344
#define EGL_SMPTE2086_DISPLAY_PRIMARY_RX_EXT 0x3341
#define EGL_SMPTE2086_DISPLAY_PRIMARY_RY_EXT 0x3342
#define EGL_SMPTE2086_MAX_LUMINANCE_EXT 0x3349
#define EGL_SMPTE2086_MIN_LUMINANCE_EXT 0x334A
#define EGL_SMPTE2086_WHITE_POINT_X_EXT 0x3347
#define EGL_SMPTE2086_WHITE_POINT_Y_EXT 0x3348
#define EGL_SOCKET_HANDLE_NV 0x324C
#define EGL_SOCKET_TYPE_INET_NV 0x324F
#define EGL_SOCKET_TYPE_NV 0x324D
#define EGL_SOCKET_TYPE_UNIX_NV 0x324E
#define EGL_STENCIL_SIZE 0x3026
#define EGL_STREAM_BIT_KHR 0x0800
#define EGL_STREAM_CONSUMER_IMAGE_NV 0x3373
#define EGL_STREAM_CONSUMER_IMAGE_USE_SCANOUT_NV 0x3378
#define EGL_STREAM_CONSUMER_NV 0x3248
#define EGL_STREAM_CROSS_DISPLAY_NV 0x334E
#define EGL_STREAM_CROSS_OBJECT_NV 0x334D
#define EGL_STREAM_CROSS_PARTITION_NV 0x323F
#define EGL_STREAM_CROSS_PROCESS_NV 0x3245
#define EGL_STREAM_CROSS_SYSTEM_NV 0x334F
#define EGL_STREAM_DMA_NV 0x3371
#define EGL_STREAM_DMA_SERVER_NV 0x3372
#define EGL_STREAM_ENDPOINT_NV 0x3243
#define EGL_STREAM_FIFO_LENGTH_KHR 0x31FC
#define EGL_STREAM_FIFO_SYNCHRONOUS_NV 0x3336
#define EGL_STREAM_FRAME_MAJOR_AXIS_NV 0x3368
#define EGL_STREAM_FRAME_ORIGIN_X_NV 0x3366
#define EGL_STREAM_FRAME_ORIGIN_Y_NV 0x3367
#define EGL_STREAM_IMAGE_ADD_NV 0x3374
#define EGL_STREAM_IMAGE_AVAILABLE_NV 0x3376
#define EGL_STREAM_IMAGE_REMOVE_NV 0x3375
#define EGL_STREAM_LOCAL_NV 0x3244
#define EGL_STREAM_PRODUCER_NV 0x3247
#define EGL_STREAM_PROTOCOL_FD_NV 0x3246
#define EGL_STREAM_PROTOCOL_NV 0x3242
#define EGL_STREAM_PROTOCOL_SOCKET_NV 0x324B
#define EGL_STREAM_STATE_CONNECTING_KHR 0x3216
#define EGL_STREAM_STATE_CREATED_KHR 0x3215
#define EGL_STREAM_STATE_DISCONNECTED_KHR 0x321A
#define EGL_STREAM_STATE_EMPTY_KHR 0x3217
#define EGL_STREAM_STATE_INITIALIZING_NV 0x3240
#define EGL_STREAM_STATE_KHR 0x3214
#define EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR 0x3218
#define EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR 0x3219
#define EGL_STREAM_TIME_CONSUMER_KHR 0x31FE
#define EGL_STREAM_TIME_NOW_KHR 0x31FD
#define EGL_STREAM_TIME_PENDING_NV 0x332A
#define EGL_STREAM_TIME_PRODUCER_KHR 0x31FF
#define EGL_STREAM_TYPE_NV 0x3241
#define EGL_SUCCESS 0x3000
#define EGL_SUPPORT_RESET_NV 0x3334
#define EGL_SUPPORT_REUSE_NV 0x3335
#define EGL_SURFACE_COMPRESSION_EXT 0x34B0
#define EGL_SURFACE_COMPRESSION_FIXED_RATE_10BPC_EXT 0x34BD
#define EGL_SURFACE_COMPRESSION_FIXED_RATE_11BPC_EXT 0x34BE
#define EGL_SURFACE_COMPRESSION_FIXED_RATE_12BPC_EXT 0x34BF
#define EGL_SURFACE_COMPRESSION_FIXED_RATE_1BPC_EXT 0x34B4
#define EGL_SURFACE_COMPRESSION_FIXED_RATE_2BPC_EXT 0x34B5
#define EGL_SURFACE_COMPRESSION_FIXED_RATE_3BPC_EXT 0x34B6
#define EGL_SURFACE_COMPRESSION_FIXED_RATE_4BPC_EXT 0x34B7
#define EGL_SURFACE_COMPRESSION_FIXED_RATE_5BPC_EXT 0x34B8
#define EGL_SURFACE_COMPRESSION_FIXED_RATE_6BPC_EXT 0x34B9
#define EGL_SURFACE_COMPRESSION_FIXED_RATE_7BPC_EXT 0x34BA
#define EGL_SURFACE_COMPRESSION_FIXED_RATE_8BPC_EXT 0x34BB
#define EGL_SURFACE_COMPRESSION_FIXED_RATE_9BPC_EXT 0x34BC
#define EGL_SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT 0x34B2
#define EGL_SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT 0x34B1
#define EGL_SURFACE_COMPRESSION_PLANE1_EXT 0x328E
#define EGL_SURFACE_COMPRESSION_PLANE2_EXT 0x328F
#define EGL_SURFACE_ORIENTATION_ANGLE 0x33A8
#define EGL_SURFACE_ORIENTATION_INVERT_X_ANGLE 0x0001
#define EGL_SURFACE_ORIENTATION_INVERT_Y_ANGLE 0x0002
#define EGL_SURFACE_TYPE 0x3033
#define EGL_SWAP_BEHAVIOR 0x3093
#define EGL_SWAP_BEHAVIOR_PRESERVED_BIT 0x0400
#define EGL_SWAP_INTERVAL_ANGLE 0x322F
#define EGL_SWAP_INTERVAL_EXT 0x322F
#define EGL_SYNC_CLIENT_EXT 0x3364
#define EGL_SYNC_CLIENT_SIGNAL_EXT 0x3365
#define EGL_SYNC_CL_EVENT 0x30FE
#define EGL_SYNC_CL_EVENT_COMPLETE 0x30FF
#define EGL_SYNC_CL_EVENT_COMPLETE_KHR 0x30FF
#define EGL_SYNC_CL_EVENT_KHR 0x30FE
#define EGL_SYNC_CONDITION 0x30F8
#define EGL_SYNC_CONDITION_KHR 0x30F8
#define EGL_SYNC_CONDITION_NV 0x30EE
#define EGL_SYNC_CUDA_EVENT_COMPLETE_NV 0x323D
#define EGL_SYNC_CUDA_EVENT_NV 0x323C
#define EGL_SYNC_FENCE 0x30F9
#define EGL_SYNC_FENCE_KHR 0x30F9
#define EGL_SYNC_FENCE_NV 0x30EF
#define EGL_SYNC_FLUSH_COMMANDS_BIT 0x0001
#define EGL_SYNC_FLUSH_COMMANDS_BIT_KHR 0x0001
#define EGL_SYNC_FLUSH_COMMANDS_BIT_NV 0x0001
#define EGL_SYNC_GLOBAL_FENCE_ANGLE 0x34DE
#define EGL_SYNC_METAL_SHARED_EVENT_ANGLE 0x34D8
#define EGL_SYNC_METAL_SHARED_EVENT_OBJECT_ANGLE 0x34D9
#define EGL_SYNC_METAL_SHARED_EVENT_SIGNALED_ANGLE 0x34DC
#define EGL_SYNC_METAL_SHARED_EVENT_SIGNAL_VALUE_HI_ANGLE 0x34DB
#define EGL_SYNC_METAL_SHARED_EVENT_SIGNAL_VALUE_LO_ANGLE 0x34DA
#define EGL_SYNC_NATIVE_FENCE_ANDROID 0x3144
#define EGL_SYNC_NATIVE_FENCE_FD_ANDROID 0x3145
#define EGL_SYNC_NATIVE_FENCE_SIGNALED_ANDROID 0x3146
#define EGL_SYNC_NEW_FRAME_NV 0x321F
#define EGL_SYNC_PRIOR_COMMANDS_COMPLETE 0x30F0
#define EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR 0x30F0
#define EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV 0x30E6
#define EGL_SYNC_PRIOR_COMMANDS_IMPLICIT_EXTERNAL_ARM 0x328A
#define EGL_SYNC_REUSABLE_KHR 0x30FA
#define EGL_SYNC_STATUS 0x30F1
#define EGL_SYNC_STATUS_KHR 0x30F1
#define EGL_SYNC_STATUS_NV 0x30E7
#define EGL_SYNC_TYPE 0x30F7
#define EGL_SYNC_TYPE_KHR 0x30F7
#define EGL_SYNC_TYPE_NV 0x30ED
#define EGL_TELEMETRY_HINT_ANDROID 0x3570
#define EGL_TEXTURE_2D 0x305F
#define EGL_TEXTURE_EXTERNAL_WL 0x31DA
#define EGL_TEXTURE_FORMAT 0x3080
#define EGL_TEXTURE_INTERNAL_FORMAT_ANGLE 0x345D
#define EGL_TEXTURE_RECTANGLE_ANGLE 0x345B
#define EGL_TEXTURE_RGB 0x305D
#define EGL_TEXTURE_RGBA 0x305E
#define EGL_TEXTURE_TARGET 0x3081
#define EGL_TEXTURE_TYPE_ANGLE 0x345C
#define EGL_TEXTURE_Y_UV_WL 0x31D8
#define EGL_TEXTURE_Y_U_V_WL 0x31D7
#define EGL_TEXTURE_Y_XUXV_WL 0x31D9
#define EGL_TIMEOUT_EXPIRED 0x30F5
#define EGL_TIMEOUT_EXPIRED_KHR 0x30F5
#define EGL_TIMEOUT_EXPIRED_NV 0x30EB
#define EGL_TIMESTAMPS_ANDROID 0x3430
#define EGL_TIMESTAMP_INVALID_ANDROID EGL_CAST(EGLnsecsANDROID,-1)
#define EGL_TIMESTAMP_PENDING_ANDROID EGL_CAST(EGLnsecsANDROID,-2)
#define EGL_TOP_NV 0x336D
#define EGL_TRACK_REFERENCES_KHR 0x3352
#define EGL_TRANSPARENT_BLUE_VALUE 0x3035
#define EGL_TRANSPARENT_GREEN_VALUE 0x3036
#define EGL_TRANSPARENT_RED_VALUE 0x3037
#define EGL_TRANSPARENT_RGB 0x3052
#define EGL_TRANSPARENT_TYPE 0x3034
#define EGL_TRIPLE_BUFFER_NV 0x3230
#define EGL_TRUE 1
#define EGL_UNKNOWN EGL_CAST(EGLint,-1)
#define EGL_UNSIGNALED 0x30F3
#define EGL_UNSIGNALED_KHR 0x30F3
#define EGL_UNSIGNALED_NV 0x30E9
#define EGL_UPPER_LEFT_KHR 0x30CF
#define EGL_VENDOR 0x3053
#define EGL_VERSION 0x3054
#define EGL_VERTICAL_RESOLUTION 0x3091
#define EGL_VG_ALPHA_FORMAT 0x3088
#define EGL_VG_ALPHA_FORMAT_NONPRE 0x308B
#define EGL_VG_ALPHA_FORMAT_PRE 0x308C
#define EGL_VG_ALPHA_FORMAT_PRE_BIT 0x0040
#define EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR 0x0040
#define EGL_VG_COLORSPACE 0x3087
#define EGL_VG_COLORSPACE_LINEAR 0x308A
#define EGL_VG_COLORSPACE_LINEAR_BIT 0x0020
#define EGL_VG_COLORSPACE_LINEAR_BIT_KHR 0x0020
#define EGL_VG_COLORSPACE_sRGB 0x3089
#define EGL_VG_PARENT_IMAGE_KHR 0x30BA
#define EGL_VULKAN_DEVICE_ANGLE 0x34AC
#define EGL_VULKAN_DEVICE_EXTENSIONS_ANGLE 0x34AD
#define EGL_VULKAN_FEATURES_ANGLE 0x34AE
#define EGL_VULKAN_GET_INSTANCE_PROC_ADDR 0x34D1
#define EGL_VULKAN_IMAGE_ANGLE 0x34D3
#define EGL_VULKAN_IMAGE_CREATE_INFO_HI_ANGLE 0x34D4
#define EGL_VULKAN_IMAGE_CREATE_INFO_LO_ANGLE 0x34D5
#define EGL_VULKAN_INSTANCE_ANGLE 0x34A9
#define EGL_VULKAN_INSTANCE_EXTENSIONS_ANGLE 0x34AA
#define EGL_VULKAN_PHYSICAL_DEVICE_ANGLE 0x34AB
#define EGL_VULKAN_QUEUE_ANGLE 0x34AF
#define EGL_VULKAN_QUEUE_FAMILIY_INDEX_ANGLE 0x34D0
#define EGL_VULKAN_VERSION_ANGLE 0x34A8
#define EGL_WAYLAND_BUFFER_WL 0x31D5
#define EGL_WAYLAND_PLANE_WL 0x31D6
#define EGL_WAYLAND_Y_INVERTED_WL 0x31DB
#define EGL_WIDTH 0x3057
#define EGL_WINDOW_BIT 0x0004
#define EGL_WRITE_SURFACE_BIT_KHR 0x0002
#define EGL_X11_VISUAL_ID_ANGLE 0x33A3
#define EGL_X_AXIS_NV 0x336F
#define EGL_YUV_BUFFER_EXT 0x3300
#define EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT 0x327D
#define EGL_YUV_CHROMA_SITING_0_5_EXT 0x3285
#define EGL_YUV_CHROMA_SITING_0_EXT 0x3284
#define EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT 0x327E
#define EGL_YUV_COLOR_SPACE_HINT_EXT 0x327B
#define EGL_YUV_CSC_STANDARD_2020_EXT 0x330D
#define EGL_YUV_CSC_STANDARD_601_EXT 0x330B
#define EGL_YUV_CSC_STANDARD_709_EXT 0x330C
#define EGL_YUV_CSC_STANDARD_EXT 0x330A
#define EGL_YUV_DEPTH_RANGE_EXT 0x3317
#define EGL_YUV_DEPTH_RANGE_FULL_EXT 0x3319
#define EGL_YUV_DEPTH_RANGE_LIMITED_EXT 0x3318
#define EGL_YUV_FULL_RANGE_EXT 0x3282
#define EGL_YUV_NARROW_RANGE_EXT 0x3283
#define EGL_YUV_NUMBER_OF_PLANES_EXT 0x3311
#define EGL_YUV_ORDER_AYUV_EXT 0x3308
#define EGL_YUV_ORDER_EXT 0x3301
#define EGL_YUV_ORDER_UYVY_EXT 0x3305
#define EGL_YUV_ORDER_VYUY_EXT 0x3307
#define EGL_YUV_ORDER_YUV_EXT 0x3302
#define EGL_YUV_ORDER_YUYV_EXT 0x3304
#define EGL_YUV_ORDER_YVU_EXT 0x3303
#define EGL_YUV_ORDER_YVYU_EXT 0x3306
#define EGL_YUV_PLANE0_TEXTURE_UNIT_NV 0x332C
#define EGL_YUV_PLANE1_TEXTURE_UNIT_NV 0x332D
#define EGL_YUV_PLANE2_TEXTURE_UNIT_NV 0x332E
#define EGL_YUV_PLANE_BPP_0_EXT 0x331B
#define EGL_YUV_PLANE_BPP_10_EXT 0x331D
#define EGL_YUV_PLANE_BPP_8_EXT 0x331C
#define EGL_YUV_PLANE_BPP_EXT 0x331A
#define EGL_YUV_SUBSAMPLE_4_2_0_EXT 0x3313
#define EGL_YUV_SUBSAMPLE_4_2_2_EXT 0x3314
#define EGL_YUV_SUBSAMPLE_4_4_4_EXT 0x3315
#define EGL_YUV_SUBSAMPLE_EXT 0x3312
#define EGL_Y_AXIS_NV 0x3370
#define EGL_Y_INVERTED_NOK 0x307F


#include <KHR/khrplatform.h>
#include <EGL/eglplatform.h>











struct AHardwareBuffer;
struct wl_buffer;
struct wl_display;
struct wl_resource;

typedef unsigned int EGLBoolean;
typedef unsigned int EGLenum;
typedef intptr_t EGLAttribKHR;
typedef intptr_t EGLAttrib;
typedef void *EGLClientBuffer;
typedef void *EGLConfig;
typedef void *EGLContext;
typedef void *EGLDeviceEXT;
typedef void *EGLDisplay;
typedef void *EGLImage;
typedef void *EGLImageKHR;
typedef void *EGLLabelKHR;
typedef void *EGLObjectKHR;
typedef void *EGLOutputLayerEXT;
typedef void *EGLOutputPortEXT;
typedef void *EGLStreamKHR;
typedef void *EGLSurface;
typedef void *EGLSync;
typedef void *EGLSyncKHR;
typedef void *EGLSyncNV;
typedef void (*__eglMustCastToProperFunctionPointerType)(void);
typedef khronos_utime_nanoseconds_t EGLTimeKHR;
typedef khronos_utime_nanoseconds_t EGLTime;
typedef khronos_utime_nanoseconds_t EGLTimeNV;
typedef khronos_utime_nanoseconds_t EGLuint64NV;
typedef khronos_uint64_t EGLuint64KHR;
typedef khronos_stime_nanoseconds_t EGLnsecsANDROID;
typedef int EGLNativeFileDescriptorKHR;
typedef khronos_ssize_t EGLsizeiANDROID;
typedef void (*EGLSetBlobFuncANDROID) (const void *key, EGLsizeiANDROID keySize, const void *value, EGLsizeiANDROID valueSize);
typedef EGLsizeiANDROID (*EGLGetBlobFuncANDROID) (const void *key, EGLsizeiANDROID keySize, void *value, EGLsizeiANDROID valueSize);
struct EGLClientPixmapHI {
    void  *pData;
    EGLint iWidth;
    EGLint iHeight;
    EGLint iStride;
};
typedef void (GLAD_API_PTR *EGLDEBUGPROCKHR)(EGLenum error,const char *command,EGLint messageType,EGLLabelKHR threadLabel,EGLLabelKHR objectLabel,const char* message);
#define PFNEGLBINDWAYLANDDISPLAYWL PFNEGLBINDWAYLANDDISPLAYWLPROC
#define PFNEGLUNBINDWAYLANDDISPLAYWL PFNEGLUNBINDWAYLANDDISPLAYWLPROC
#define PFNEGLQUERYWAYLANDBUFFERWL PFNEGLQUERYWAYLANDBUFFERWLPROC
#define PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWL PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWLPROC
typedef khronos_uint64_t EGLFrameTokenANGLE;


#define EGL_VERSION_1_0 1
#define EGL_VERSION_1_1 1
#define EGL_VERSION_1_2 1
#define EGL_VERSION_1_3 1
#define EGL_VERSION_1_4 1
#define EGL_VERSION_1_5 1
#define EGL_ANDROID_GLES_layers 1
#define EGL_ANDROID_blob_cache 1
#define EGL_ANDROID_create_native_client_buffer 1
#define EGL_ANDROID_framebuffer_target 1
#define EGL_ANDROID_front_buffer_auto_refresh 1
#define EGL_ANDROID_get_frame_timestamps 1
#define EGL_ANDROID_get_native_client_buffer 1
#define EGL_ANDROID_image_native_buffer 1
#define EGL_ANDROID_native_fence_sync 1
#define EGL_ANDROID_presentation_time 1
#define EGL_ANDROID_recordable 1
#define EGL_ANDROID_telemetry_hint 1
#define EGL_ANGLE_colorspace_attribute_passthrough 1
#define EGL_ANGLE_context_virtualization 1
#define EGL_ANGLE_create_context_backwards_compatible 1
#define EGL_ANGLE_create_context_client_arrays 1
#define EGL_ANGLE_create_context_extensions_enabled 1
#define EGL_ANGLE_create_context_webgl_compatibility 1
#define EGL_ANGLE_create_surface_swap_interval 1
#define EGL_ANGLE_d3d_share_handle_client_buffer 1
#define EGL_ANGLE_d3d_texture_client_buffer 1
#define EGL_ANGLE_device_cgl 1
#define EGL_ANGLE_device_creation 1
#define EGL_ANGLE_device_d3d 1
#define EGL_ANGLE_device_d3d11 1
#define EGL_ANGLE_device_d3d9 1
#define EGL_ANGLE_device_eagl 1
#define EGL_ANGLE_device_metal 1
#define EGL_ANGLE_device_vulkan 1
#define EGL_ANGLE_direct_composition 1
#define EGL_ANGLE_display_power_preference 1
#define EGL_ANGLE_display_semaphore_share_group 1
#define EGL_ANGLE_display_texture_share_group 1
#define EGL_ANGLE_experimental_present_path 1
#define EGL_ANGLE_external_context_and_surface 1
#define EGL_ANGLE_feature_control 1
#define EGL_ANGLE_ggp_stream_descriptor 1
#define EGL_ANGLE_global_fence_sync 1
#define EGL_ANGLE_iosurface_client_buffer 1
#define EGL_ANGLE_keyed_mutex 1
#define EGL_ANGLE_memory_usage_report 1
#define EGL_ANGLE_metal_create_context_ownership_identity 1
#define EGL_ANGLE_metal_shared_event_sync 1
#define EGL_ANGLE_metal_texture_client_buffer 1
#define EGL_ANGLE_no_error 1
#define EGL_ANGLE_platform_angle 1
#define EGL_ANGLE_platform_angle_d3d 1
#define EGL_ANGLE_platform_angle_d3d11on12 1
#define EGL_ANGLE_platform_angle_d3d_luid 1
#define EGL_ANGLE_platform_angle_device_context_volatile_cgl 1
#define EGL_ANGLE_platform_angle_device_context_volatile_eagl 1
#define EGL_ANGLE_platform_angle_device_id 1
#define EGL_ANGLE_platform_angle_device_type_egl 1
#define EGL_ANGLE_platform_angle_device_type_swiftshader 1
#define EGL_ANGLE_platform_angle_metal 1
#define EGL_ANGLE_platform_angle_null 1
#define EGL_ANGLE_platform_angle_opengl 1
#define EGL_ANGLE_platform_angle_vulkan 1
#define EGL_ANGLE_platform_angle_vulkan_device_uuid 1
#define EGL_ANGLE_platform_angle_webgpu 1
#define EGL_ANGLE_power_preference 1
#define EGL_ANGLE_prepare_swap_buffers 1
#define EGL_ANGLE_program_cache_control 1
#define EGL_ANGLE_query_surface_pointer 1
#define EGL_ANGLE_robust_resource_initialization 1
#define EGL_ANGLE_stream_producer_d3d_texture 1
#define EGL_ANGLE_surface_d3d_texture_2d_share_handle 1
#define EGL_ANGLE_surface_orientation 1
#define EGL_ANGLE_swap_with_frame_token 1
#define EGL_ANGLE_sync_control_rate 1
#define EGL_ANGLE_vulkan_display 1
#define EGL_ANGLE_vulkan_image 1
#define EGL_ANGLE_wait_until_work_scheduled 1
#define EGL_ANGLE_window_fixed_size 1
#define EGL_ANGLE_x11_visual 1
#define EGL_ARM_image_format 1
#define EGL_ARM_implicit_external_sync 1
#define EGL_ARM_pixmap_multisample_discard 1
#define EGL_CHROMIUM_sync_control 1
#define EGL_EXT_bind_to_front 1
#define EGL_EXT_buffer_age 1
#define EGL_EXT_client_extensions 1
#define EGL_EXT_client_sync 1
#define EGL_EXT_compositor 1
#define EGL_EXT_config_select_group 1
#define EGL_EXT_create_context_robustness 1
#define EGL_EXT_device_base 1
#define EGL_EXT_device_drm 1
#define EGL_EXT_device_drm_render_node 1
#define EGL_EXT_device_enumeration 1
#define EGL_EXT_device_openwf 1
#define EGL_EXT_device_persistent_id 1
#define EGL_EXT_device_query 1
#define EGL_EXT_device_query_name 1
#define EGL_EXT_display_alloc 1
#define EGL_EXT_explicit_device 1
#define EGL_EXT_gl_colorspace_bt2020_hlg 1
#define EGL_EXT_gl_colorspace_bt2020_linear 1
#define EGL_EXT_gl_colorspace_bt2020_pq 1
#define EGL_EXT_gl_colorspace_display_p3 1
#define EGL_EXT_gl_colorspace_display_p3_linear 1
#define EGL_EXT_gl_colorspace_display_p3_passthrough 1
#define EGL_EXT_gl_colorspace_scrgb 1
#define EGL_EXT_gl_colorspace_scrgb_linear 1
#define EGL_EXT_image_dma_buf_import 1
#define EGL_EXT_image_dma_buf_import_modifiers 1
#define EGL_EXT_image_gl_colorspace 1
#define EGL_EXT_image_implicit_sync_control 1
#define EGL_EXT_multiview_window 1
#define EGL_EXT_output_base 1
#define EGL_EXT_output_drm 1
#define EGL_EXT_output_openwf 1
#define EGL_EXT_pixel_format_float 1
#define EGL_EXT_platform_base 1
#define EGL_EXT_platform_device 1
#define EGL_EXT_platform_wayland 1
#define EGL_EXT_platform_x11 1
#define EGL_EXT_platform_xcb 1
#define EGL_EXT_present_opaque 1
#define EGL_EXT_protected_content 1
#define EGL_EXT_protected_surface 1
#define EGL_EXT_query_reset_notification_strategy 1
#define EGL_EXT_stream_consumer_egloutput 1
#define EGL_EXT_surface_CTA861_3_metadata 1
#define EGL_EXT_surface_SMPTE2086_metadata 1
#define EGL_EXT_surface_compression 1
#define EGL_EXT_swap_buffers_with_damage 1
#define EGL_EXT_sync_reuse 1
#define EGL_EXT_yuv_surface 1
#define EGL_HI_clientpixmap 1
#define EGL_HI_colorformats 1
#define EGL_IMG_context_priority 1
#define EGL_IMG_image_plane_attribs 1
#define EGL_KHR_cl_event 1
#define EGL_KHR_cl_event2 1
#define EGL_KHR_client_get_all_proc_addresses 1
#define EGL_KHR_config_attribs 1
#define EGL_KHR_context_flush_control 1
#define EGL_KHR_create_context 1
#define EGL_KHR_create_context_no_error 1
#define EGL_KHR_debug 1
#define EGL_KHR_display_reference 1
#define EGL_KHR_fence_sync 1
#define EGL_KHR_get_all_proc_addresses 1
#define EGL_KHR_gl_colorspace 1
#define EGL_KHR_gl_renderbuffer_image 1
#define EGL_KHR_gl_texture_2D_image 1
#define EGL_KHR_gl_texture_3D_image 1
#define EGL_KHR_gl_texture_cubemap_image 1
#define EGL_KHR_image 1
#define EGL_KHR_image_base 1
#define EGL_KHR_image_pixmap 1
#define EGL_KHR_lock_surface 1
#define EGL_KHR_lock_surface2 1
#define EGL_KHR_lock_surface3 1
#define EGL_KHR_mutable_render_buffer 1
#define EGL_KHR_no_config_context 1
#define EGL_KHR_partial_update 1
#define EGL_KHR_platform_android 1
#define EGL_KHR_platform_gbm 1
#define EGL_KHR_platform_wayland 1
#define EGL_KHR_platform_x11 1
#define EGL_KHR_reusable_sync 1
#define EGL_KHR_stream 1
#define EGL_KHR_stream_attrib 1
#define EGL_KHR_stream_consumer_gltexture 1
#define EGL_KHR_stream_cross_process_fd 1
#define EGL_KHR_stream_fifo 1
#define EGL_KHR_stream_producer_aldatalocator 1
#define EGL_KHR_stream_producer_eglsurface 1
#define EGL_KHR_surfaceless_context 1
#define EGL_KHR_swap_buffers_with_damage 1
#define EGL_KHR_vg_parent_image 1
#define EGL_KHR_wait_sync 1
#define EGL_MESA_drm_image 1
#define EGL_MESA_image_dma_buf_export 1
#define EGL_MESA_platform_gbm 1
#define EGL_MESA_platform_surfaceless 1
#define EGL_MESA_query_driver 1
#define EGL_NOK_swap_region 1
#define EGL_NOK_swap_region2 1
#define EGL_NOK_texture_from_pixmap 1
#define EGL_NV_3dvision_surface 1
#define EGL_NV_context_priority_realtime 1
#define EGL_NV_coverage_sample 1
#define EGL_NV_coverage_sample_resolve 1
#define EGL_NV_cuda_event 1
#define EGL_NV_depth_nonlinear 1
#define EGL_NV_device_cuda 1
#define EGL_NV_native_query 1
#define EGL_NV_post_convert_rounding 1
#define EGL_NV_post_sub_buffer 1
#define EGL_NV_quadruple_buffer 1
#define EGL_NV_robustness_video_memory_purge 1
#define EGL_NV_stream_consumer_eglimage 1
#define EGL_NV_stream_consumer_eglimage_use_scanout_attrib 1
#define EGL_NV_stream_consumer_gltexture_yuv 1
#define EGL_NV_stream_cross_display 1
#define EGL_NV_stream_cross_object 1
#define EGL_NV_stream_cross_partition 1
#define EGL_NV_stream_cross_process 1
#define EGL_NV_stream_cross_system 1
#define EGL_NV_stream_dma 1
#define EGL_NV_stream_fifo_next 1
#define EGL_NV_stream_fifo_synchronous 1
#define EGL_NV_stream_flush 1
#define EGL_NV_stream_frame_limits 1
#define EGL_NV_stream_metadata 1
#define EGL_NV_stream_origin 1
#define EGL_NV_stream_remote 1
#define EGL_NV_stream_reset 1
#define EGL_NV_stream_socket 1
#define EGL_NV_stream_socket_inet 1
#define EGL_NV_stream_socket_unix 1
#define EGL_NV_stream_sync 1
#define EGL_NV_sync 1
#define EGL_NV_system_time 1
#define EGL_NV_triple_buffer 1
#define EGL_QNX_image_native_buffer 1
#define EGL_QNX_platform_screen 1
#define EGL_TIZEN_image_native_buffer 1
#define EGL_TIZEN_image_native_surface 1
#define EGL_WL_bind_wayland_display 1
#define EGL_WL_create_wayland_buffer_from_image 1



typedef void (GLAD_API_PTR *PFNEGLACQUIREEXTERNALCONTEXTANGLEPROC)(EGLDisplay dpy, EGLSurface drawAndRead);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLBINDAPIPROC)(EGLenum api);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLBINDTEXIMAGEPROC)(EGLDisplay dpy, EGLSurface surface, EGLint buffer);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLBINDWAYLANDDISPLAYWLPROC)(EGLDisplay dpy, struct wl_display * display);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLCHOOSECONFIGPROC)(EGLDisplay dpy, const EGLint * attrib_list, EGLConfig * configs, EGLint config_size, EGLint * num_config);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLCLIENTSIGNALSYNCEXTPROC)(EGLDisplay dpy, EGLSync sync, const EGLAttrib * attrib_list);
typedef EGLint (GLAD_API_PTR *PFNEGLCLIENTWAITSYNCPROC)(EGLDisplay dpy, EGLSync sync, EGLint flags, EGLTime timeout);
typedef EGLint (GLAD_API_PTR *PFNEGLCLIENTWAITSYNCKHRPROC)(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout);
typedef EGLint (GLAD_API_PTR *PFNEGLCLIENTWAITSYNCNVPROC)(EGLSyncNV sync, EGLint flags, EGLTimeNV timeout);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLCOMPOSITORBINDTEXWINDOWEXTPROC)(EGLint external_win_id);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLCOMPOSITORSETCONTEXTATTRIBUTESEXTPROC)(EGLint external_ref_id, const EGLint * context_attributes, EGLint num_entries);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLCOMPOSITORSETCONTEXTLISTEXTPROC)(const EGLint * external_ref_ids, EGLint num_entries);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLCOMPOSITORSETSIZEEXTPROC)(EGLint external_win_id, EGLint width, EGLint height);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLCOMPOSITORSETWINDOWATTRIBUTESEXTPROC)(EGLint external_win_id, const EGLint * window_attributes, EGLint num_entries);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLCOMPOSITORSETWINDOWLISTEXTPROC)(EGLint external_ref_id, const EGLint * external_win_ids, EGLint num_entries);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLCOMPOSITORSWAPPOLICYEXTPROC)(EGLint external_win_id, EGLint policy);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLCOPYBUFFERSPROC)(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target);
typedef void * (GLAD_API_PTR *PFNEGLCOPYMETALSHAREDEVENTANGLEPROC)(EGLDisplay dpy, EGLSyncKHR sync);
typedef EGLContext (GLAD_API_PTR *PFNEGLCREATECONTEXTPROC)(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint * attrib_list);
typedef EGLImageKHR (GLAD_API_PTR *PFNEGLCREATEDRMIMAGEMESAPROC)(EGLDisplay dpy, const EGLint * attrib_list);
typedef EGLDeviceEXT (GLAD_API_PTR *PFNEGLCREATEDEVICEANGLEPROC)(EGLint device_type, void * native_device, const EGLAttrib * attrib_list);
typedef EGLSyncNV (GLAD_API_PTR *PFNEGLCREATEFENCESYNCNVPROC)(EGLDisplay dpy, EGLenum condition, const EGLint * attrib_list);
typedef EGLImage (GLAD_API_PTR *PFNEGLCREATEIMAGEPROC)(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLAttrib * attrib_list);
typedef EGLImageKHR (GLAD_API_PTR *PFNEGLCREATEIMAGEKHRPROC)(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint * attrib_list);
typedef EGLClientBuffer (GLAD_API_PTR *PFNEGLCREATENATIVECLIENTBUFFERANDROIDPROC)(const EGLint * attrib_list);
typedef EGLSurface (GLAD_API_PTR *PFNEGLCREATEPBUFFERFROMCLIENTBUFFERPROC)(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint * attrib_list);
typedef EGLSurface (GLAD_API_PTR *PFNEGLCREATEPBUFFERSURFACEPROC)(EGLDisplay dpy, EGLConfig config, const EGLint * attrib_list);
typedef EGLSurface (GLAD_API_PTR *PFNEGLCREATEPIXMAPSURFACEPROC)(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint * attrib_list);
typedef EGLSurface (GLAD_API_PTR *PFNEGLCREATEPIXMAPSURFACEHIPROC)(EGLDisplay dpy, EGLConfig config, struct EGLClientPixmapHI * pixmap);
typedef EGLSurface (GLAD_API_PTR *PFNEGLCREATEPLATFORMPIXMAPSURFACEPROC)(EGLDisplay dpy, EGLConfig config, void * native_pixmap, const EGLAttrib * attrib_list);
typedef EGLSurface (GLAD_API_PTR *PFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC)(EGLDisplay dpy, EGLConfig config, void * native_pixmap, const EGLint * attrib_list);
typedef EGLSurface (GLAD_API_PTR *PFNEGLCREATEPLATFORMWINDOWSURFACEPROC)(EGLDisplay dpy, EGLConfig config, void * native_window, const EGLAttrib * attrib_list);
typedef EGLSurface (GLAD_API_PTR *PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC)(EGLDisplay dpy, EGLConfig config, void * native_window, const EGLint * attrib_list);
typedef EGLStreamKHR (GLAD_API_PTR *PFNEGLCREATESTREAMATTRIBKHRPROC)(EGLDisplay dpy, const EGLAttrib * attrib_list);
typedef EGLStreamKHR (GLAD_API_PTR *PFNEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC)(EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor);
typedef EGLStreamKHR (GLAD_API_PTR *PFNEGLCREATESTREAMKHRPROC)(EGLDisplay dpy, const EGLint * attrib_list);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLCREATESTREAMPRODUCERD3DTEXTUREANGLEPROC)(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib * attrib_list);
typedef EGLSurface (GLAD_API_PTR *PFNEGLCREATESTREAMPRODUCERSURFACEKHRPROC)(EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint * attrib_list);
typedef EGLSyncKHR (GLAD_API_PTR *PFNEGLCREATESTREAMSYNCNVPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLenum type, const EGLint * attrib_list);
typedef EGLSync (GLAD_API_PTR *PFNEGLCREATESYNCPROC)(EGLDisplay dpy, EGLenum type, const EGLAttrib * attrib_list);
typedef EGLSyncKHR (GLAD_API_PTR *PFNEGLCREATESYNC64KHRPROC)(EGLDisplay dpy, EGLenum type, const EGLAttribKHR * attrib_list);
typedef EGLSyncKHR (GLAD_API_PTR *PFNEGLCREATESYNCKHRPROC)(EGLDisplay dpy, EGLenum type, const EGLint * attrib_list);
typedef struct wl_buffer * (GLAD_API_PTR *PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWLPROC)(EGLDisplay dpy, EGLImageKHR image);
typedef EGLSurface (GLAD_API_PTR *PFNEGLCREATEWINDOWSURFACEPROC)(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint * attrib_list);
typedef EGLint (GLAD_API_PTR *PFNEGLDEBUGMESSAGECONTROLKHRPROC)(EGLDEBUGPROCKHR callback, const EGLAttrib * attrib_list);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLDESTROYCONTEXTPROC)(EGLDisplay dpy, EGLContext ctx);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLDESTROYDISPLAYEXTPROC)(EGLDisplay dpy);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLDESTROYIMAGEPROC)(EGLDisplay dpy, EGLImage image);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLDESTROYIMAGEKHRPROC)(EGLDisplay dpy, EGLImageKHR image);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLDESTROYSTREAMKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLDESTROYSURFACEPROC)(EGLDisplay dpy, EGLSurface surface);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLDESTROYSYNCPROC)(EGLDisplay dpy, EGLSync sync);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLDESTROYSYNCKHRPROC)(EGLDisplay dpy, EGLSyncKHR sync);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLDESTROYSYNCNVPROC)(EGLSyncNV sync);
typedef EGLint (GLAD_API_PTR *PFNEGLDUPNATIVEFENCEFDANDROIDPROC)(EGLDisplay dpy, EGLSyncKHR sync);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLEXPORTDMABUFIMAGEMESAPROC)(EGLDisplay dpy, EGLImageKHR image, int * fds, EGLint * strides, EGLint * offsets);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLEXPORTDMABUFIMAGEQUERYMESAPROC)(EGLDisplay dpy, EGLImageKHR image, int * fourcc, int * num_planes, EGLuint64KHR * modifiers);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLEXPORTDRMIMAGEMESAPROC)(EGLDisplay dpy, EGLImageKHR image, EGLint * name, EGLint * handle, EGLint * stride);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLEXPORTVKIMAGEANGLEPROC)(EGLDisplay dpy, EGLImage image, void * vk_image, void * vk_image_create_info);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLFENCENVPROC)(EGLSyncNV sync);
typedef void (GLAD_API_PTR *PFNEGLFORCEGPUSWITCHANGLEPROC)(EGLDisplay dpy, EGLint gpuIDHigh, EGLint gpuIDLow);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLGETCOMPOSITORTIMINGANDROIDPROC)(EGLDisplay dpy, EGLSurface surface, EGLint numTimestamps, const EGLint * names, EGLnsecsANDROID * values);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLGETCOMPOSITORTIMINGSUPPORTEDANDROIDPROC)(EGLDisplay dpy, EGLSurface surface, EGLint name);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLGETCONFIGATTRIBPROC)(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint * value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLGETCONFIGSPROC)(EGLDisplay dpy, EGLConfig * configs, EGLint config_size, EGLint * num_config);
typedef EGLContext (GLAD_API_PTR *PFNEGLGETCURRENTCONTEXTPROC)(void);
typedef EGLDisplay (GLAD_API_PTR *PFNEGLGETCURRENTDISPLAYPROC)(void);
typedef EGLSurface (GLAD_API_PTR *PFNEGLGETCURRENTSURFACEPROC)(EGLint readdraw);
typedef EGLDisplay (GLAD_API_PTR *PFNEGLGETDISPLAYPROC)(EGLNativeDisplayType display_id);
typedef char * (GLAD_API_PTR *PFNEGLGETDISPLAYDRIVERCONFIGPROC)(EGLDisplay dpy);
typedef const char * (GLAD_API_PTR *PFNEGLGETDISPLAYDRIVERNAMEPROC)(EGLDisplay dpy);
typedef EGLint (GLAD_API_PTR *PFNEGLGETERRORPROC)(void);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLGETFRAMETIMESTAMPSUPPORTEDANDROIDPROC)(EGLDisplay dpy, EGLSurface surface, EGLint timestamp);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLGETFRAMETIMESTAMPSANDROIDPROC)(EGLDisplay dpy, EGLSurface surface, EGLuint64KHR frameId, EGLint numTimestamps, const EGLint * timestamps, EGLnsecsANDROID * values);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLGETMSCRATEANGLEPROC)(EGLDisplay dpy, EGLSurface surface, EGLint * numerator, EGLint * denominator);
typedef EGLClientBuffer (GLAD_API_PTR *PFNEGLGETNATIVECLIENTBUFFERANDROIDPROC)(const struct AHardwareBuffer * buffer);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLGETNEXTFRAMEIDANDROIDPROC)(EGLDisplay dpy, EGLSurface surface, EGLuint64KHR * frameId);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLGETOUTPUTLAYERSEXTPROC)(EGLDisplay dpy, const EGLAttrib * attrib_list, EGLOutputLayerEXT * layers, EGLint max_layers, EGLint * num_layers);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLGETOUTPUTPORTSEXTPROC)(EGLDisplay dpy, const EGLAttrib * attrib_list, EGLOutputPortEXT * ports, EGLint max_ports, EGLint * num_ports);
typedef EGLDisplay (GLAD_API_PTR *PFNEGLGETPLATFORMDISPLAYPROC)(EGLenum platform, void * native_display, const EGLAttrib * attrib_list);
typedef EGLDisplay (GLAD_API_PTR *PFNEGLGETPLATFORMDISPLAYEXTPROC)(EGLenum platform, void * native_display, const EGLint * attrib_list);
typedef __eglMustCastToProperFunctionPointerType (GLAD_API_PTR *PFNEGLGETPROCADDRESSPROC)(const char * procname);
typedef EGLNativeFileDescriptorKHR (GLAD_API_PTR *PFNEGLGETSTREAMFILEDESCRIPTORKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLGETSYNCATTRIBPROC)(EGLDisplay dpy, EGLSync sync, EGLint attribute, EGLAttrib * value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLGETSYNCATTRIBKHRPROC)(EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint * value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLGETSYNCATTRIBNVPROC)(EGLSyncNV sync, EGLint attribute, EGLint * value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLGETSYNCVALUESCHROMIUMPROC)(EGLDisplay dpy, EGLSurface surface, EGLuint64KHR * ust, EGLuint64KHR * msc, EGLuint64KHR * sbc);
typedef EGLuint64NV (GLAD_API_PTR *PFNEGLGETSYSTEMTIMEFREQUENCYNVPROC)(void);
typedef EGLuint64NV (GLAD_API_PTR *PFNEGLGETSYSTEMTIMENVPROC)(void);
typedef void (GLAD_API_PTR *PFNEGLHANDLEGPUSWITCHANGLEPROC)(EGLDisplay dpy);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLINITIALIZEPROC)(EGLDisplay dpy, EGLint * major, EGLint * minor);
typedef EGLint (GLAD_API_PTR *PFNEGLLABELOBJECTKHRPROC)(EGLDisplay display, EGLenum objectType, EGLObjectKHR object, EGLLabelKHR label);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLLOCKSURFACEKHRPROC)(EGLDisplay dpy, EGLSurface surface, const EGLint * attrib_list);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLMAKECURRENTPROC)(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLOUTPUTLAYERATTRIBEXTPROC)(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLOUTPUTPORTATTRIBEXTPROC)(EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLPOSTSUBBUFFERNVPROC)(EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLPREPARESWAPBUFFERSANGLEPROC)(EGLDisplay dpy, EGLSurface surface);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLPRESENTATIONTIMEANDROIDPROC)(EGLDisplay dpy, EGLSurface surface, EGLnsecsANDROID time);
typedef EGLint (GLAD_API_PTR *PFNEGLPROGRAMCACHEGETATTRIBANGLEPROC)(EGLDisplay dpy, EGLenum attrib);
typedef void (GLAD_API_PTR *PFNEGLPROGRAMCACHEPOPULATEANGLEPROC)(EGLDisplay dpy, const void * key, EGLint keysize, const void * binary, EGLint binarysize);
typedef void (GLAD_API_PTR *PFNEGLPROGRAMCACHEQUERYANGLEPROC)(EGLDisplay dpy, EGLint index, void * key, EGLint * keysize, void * binary, EGLint * binarysize);
typedef EGLint (GLAD_API_PTR *PFNEGLPROGRAMCACHERESIZEANGLEPROC)(EGLDisplay dpy, EGLint limit, EGLint mode);
typedef EGLenum (GLAD_API_PTR *PFNEGLQUERYAPIPROC)(void);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYCONTEXTPROC)(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint * value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYDEBUGKHRPROC)(EGLint attribute, EGLAttrib * value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYDEVICEATTRIBEXTPROC)(EGLDeviceEXT device, EGLint attribute, EGLAttrib * value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYDEVICEBINARYEXTPROC)(EGLDeviceEXT device, EGLint name, EGLint max_size, void * value, EGLint * size);
typedef const char * (GLAD_API_PTR *PFNEGLQUERYDEVICESTRINGEXTPROC)(EGLDeviceEXT device, EGLint name);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYDEVICESEXTPROC)(EGLint max_devices, EGLDeviceEXT * devices, EGLint * num_devices);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYDISPLAYATTRIBANGLEPROC)(EGLDisplay dpy, EGLint attribute, EGLAttrib * value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYDISPLAYATTRIBEXTPROC)(EGLDisplay dpy, EGLint attribute, EGLAttrib * value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYDISPLAYATTRIBKHRPROC)(EGLDisplay dpy, EGLint name, EGLAttrib * value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYDISPLAYATTRIBNVPROC)(EGLDisplay dpy, EGLint attribute, EGLAttrib * value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYDMABUFFORMATSEXTPROC)(EGLDisplay dpy, EGLint max_formats, EGLint * formats, EGLint * num_formats);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYDMABUFMODIFIERSEXTPROC)(EGLDisplay dpy, EGLint format, EGLint max_modifiers, EGLuint64KHR * modifiers, EGLBoolean * external_only, EGLint * num_modifiers);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYNATIVEDISPLAYNVPROC)(EGLDisplay dpy, EGLNativeDisplayType * display_id);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYNATIVEPIXMAPNVPROC)(EGLDisplay dpy, EGLSurface surf, EGLNativePixmapType * pixmap);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYNATIVEWINDOWNVPROC)(EGLDisplay dpy, EGLSurface surf, EGLNativeWindowType * window);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYOUTPUTLAYERATTRIBEXTPROC)(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib * value);
typedef const char * (GLAD_API_PTR *PFNEGLQUERYOUTPUTLAYERSTRINGEXTPROC)(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint name);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYOUTPUTPORTATTRIBEXTPROC)(EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib * value);
typedef const char * (GLAD_API_PTR *PFNEGLQUERYOUTPUTPORTSTRINGEXTPROC)(EGLDisplay dpy, EGLOutputPortEXT port, EGLint name);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYSTREAMATTRIBKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLAttrib * value);
typedef EGLint (GLAD_API_PTR *PFNEGLQUERYSTREAMCONSUMEREVENTNVPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLTime timeout, EGLenum * event, EGLAttrib * aux);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYSTREAMKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint * value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYSTREAMMETADATANVPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLenum name, EGLint n, EGLint offset, EGLint size, void * data);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYSTREAMTIMEKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLTimeKHR * value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYSTREAMU64KHRPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLuint64KHR * value);
typedef const char * (GLAD_API_PTR *PFNEGLQUERYSTRINGPROC)(EGLDisplay dpy, EGLint name);
typedef const char * (GLAD_API_PTR *PFNEGLQUERYSTRINGIANGLEPROC)(EGLDisplay dpy, EGLint name, EGLint index);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYSUPPORTEDCOMPRESSIONRATESEXTPROC)(EGLDisplay dpy, EGLConfig config, const EGLAttrib * attrib_list, EGLint * rates, EGLint rate_size, EGLint * num_rates);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYSURFACEPROC)(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint * value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYSURFACE64KHRPROC)(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLAttribKHR * value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYSURFACEPOINTERANGLEPROC)(EGLDisplay dpy, EGLSurface surface, EGLint attribute, void ** value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLQUERYWAYLANDBUFFERWLPROC)(EGLDisplay dpy, struct wl_resource * buffer, EGLint attribute, EGLint * value);
typedef void (GLAD_API_PTR *PFNEGLREACQUIREHIGHPOWERGPUANGLEPROC)(EGLDisplay dpy, EGLContext ctx);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLRELEASEDEVICEANGLEPROC)(EGLDeviceEXT device);
typedef void (GLAD_API_PTR *PFNEGLRELEASEEXTERNALCONTEXTANGLEPROC)(EGLDisplay dpy);
typedef void (GLAD_API_PTR *PFNEGLRELEASEHIGHPOWERGPUANGLEPROC)(EGLDisplay dpy, EGLContext ctx);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLRELEASETEXIMAGEPROC)(EGLDisplay dpy, EGLSurface surface, EGLint buffer);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLRELEASETHREADPROC)(void);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLRESETSTREAMNVPROC)(EGLDisplay dpy, EGLStreamKHR stream);
typedef void (GLAD_API_PTR *PFNEGLSETBLOBCACHEFUNCSANDROIDPROC)(EGLDisplay dpy, EGLSetBlobFuncANDROID set, EGLGetBlobFuncANDROID get);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSETDAMAGEREGIONKHRPROC)(EGLDisplay dpy, EGLSurface surface, EGLint * rects, EGLint n_rects);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSETSTREAMATTRIBKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLAttrib value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSETSTREAMMETADATANVPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLint n, EGLint offset, EGLint size, const void * data);
typedef void (GLAD_API_PTR *PFNEGLSETVALIDATIONENABLEDANGLEPROC)(EGLBoolean validationState);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSIGNALSYNCKHRPROC)(EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSIGNALSYNCNVPROC)(EGLSyncNV sync, EGLenum mode);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSTREAMACQUIREIMAGENVPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLImage * pImage, EGLSync sync);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSTREAMATTRIBKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSTREAMCONSUMERACQUIREATTRIBKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib * attrib_list);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSTREAMCONSUMERACQUIREKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALATTRIBSNVPROC)(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib * attrib_list);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSTREAMCONSUMEROUTPUTEXTPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLOutputLayerEXT layer);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSTREAMCONSUMERRELEASEATTRIBKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib * attrib_list);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSTREAMCONSUMERRELEASEKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSTREAMFLUSHNVPROC)(EGLDisplay dpy, EGLStreamKHR stream);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSTREAMIMAGECONSUMERCONNECTNVPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLint num_modifiers, const EGLuint64KHR * modifiers, const EGLAttrib * attrib_list);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSTREAMPOSTD3DTEXTUREANGLEPROC)(EGLDisplay dpy, EGLStreamKHR stream, void * texture, const EGLAttrib * attrib_list);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSTREAMRELEASEIMAGENVPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLImage image, EGLSync sync);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSURFACEATTRIBPROC)(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSWAPBUFFERSPROC)(EGLDisplay dpy, EGLSurface surface);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSWAPBUFFERSREGION2NOKPROC)(EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint * rects);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSWAPBUFFERSREGIONNOKPROC)(EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint * rects);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSWAPBUFFERSWITHDAMAGEEXTPROC)(EGLDisplay dpy, EGLSurface surface, const EGLint * rects, EGLint n_rects);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSWAPBUFFERSWITHDAMAGEKHRPROC)(EGLDisplay dpy, EGLSurface surface, const EGLint * rects, EGLint n_rects);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSWAPBUFFERSWITHFRAMETOKENANGLEPROC)(EGLDisplay dpy, EGLSurface surface, EGLFrameTokenANGLE frametoken);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLSWAPINTERVALPROC)(EGLDisplay dpy, EGLint interval);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLTERMINATEPROC)(EGLDisplay dpy);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLUNBINDWAYLANDDISPLAYWLPROC)(EGLDisplay dpy, struct wl_display * display);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLUNLOCKSURFACEKHRPROC)(EGLDisplay dpy, EGLSurface surface);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLUNSIGNALSYNCEXTPROC)(EGLDisplay dpy, EGLSync sync, const EGLAttrib * attrib_list);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLWAITCLIENTPROC)(void);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLWAITGLPROC)(void);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLWAITNATIVEPROC)(EGLint engine);
typedef EGLBoolean (GLAD_API_PTR *PFNEGLWAITSYNCPROC)(EGLDisplay dpy, EGLSync sync, EGLint flags);
typedef EGLint (GLAD_API_PTR *PFNEGLWAITSYNCKHRPROC)(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags);
typedef void (GLAD_API_PTR *PFNEGLWAITUNTILWORKSCHEDULEDANGLEPROC)(EGLDisplay dpy);

typedef struct GladEGLContext {
    void* userptr;

    unsigned char VERSION_1_0;
    unsigned char VERSION_1_1;
    unsigned char VERSION_1_2;
    unsigned char VERSION_1_3;
    unsigned char VERSION_1_4;
    unsigned char VERSION_1_5;

    union {
        unsigned char extArray[224];
        struct {
        /*    0 */ unsigned char ANDROID_GLES_layers;
        /*    1 */ unsigned char ANDROID_blob_cache;
        /*    2 */ unsigned char ANDROID_create_native_client_buffer;
        /*    3 */ unsigned char ANDROID_framebuffer_target;
        /*    4 */ unsigned char ANDROID_front_buffer_auto_refresh;
        /*    5 */ unsigned char ANDROID_get_frame_timestamps;
        /*    6 */ unsigned char ANDROID_get_native_client_buffer;
        /*    7 */ unsigned char ANDROID_image_native_buffer;
        /*    8 */ unsigned char ANDROID_native_fence_sync;
        /*    9 */ unsigned char ANDROID_presentation_time;
        /*   10 */ unsigned char ANDROID_recordable;
        /*   11 */ unsigned char ANDROID_telemetry_hint;
        /*   12 */ unsigned char ANGLE_colorspace_attribute_passthrough;
        /*   13 */ unsigned char ANGLE_context_virtualization;
        /*   14 */ unsigned char ANGLE_create_context_backwards_compatible;
        /*   15 */ unsigned char ANGLE_create_context_client_arrays;
        /*   16 */ unsigned char ANGLE_create_context_extensions_enabled;
        /*   17 */ unsigned char ANGLE_create_context_webgl_compatibility;
        /*   18 */ unsigned char ANGLE_create_surface_swap_interval;
        /*   19 */ unsigned char ANGLE_d3d_share_handle_client_buffer;
        /*   20 */ unsigned char ANGLE_d3d_texture_client_buffer;
        /*   21 */ unsigned char ANGLE_device_cgl;
        /*   22 */ unsigned char ANGLE_device_creation;
        /*   23 */ unsigned char ANGLE_device_d3d;
        /*   24 */ unsigned char ANGLE_device_d3d11;
        /*   25 */ unsigned char ANGLE_device_d3d9;
        /*   26 */ unsigned char ANGLE_device_eagl;
        /*   27 */ unsigned char ANGLE_device_metal;
        /*   28 */ unsigned char ANGLE_device_vulkan;
        /*   29 */ unsigned char ANGLE_direct_composition;
        /*   30 */ unsigned char ANGLE_display_power_preference;
        /*   31 */ unsigned char ANGLE_display_semaphore_share_group;
        /*   32 */ unsigned char ANGLE_display_texture_share_group;
        /*   33 */ unsigned char ANGLE_experimental_present_path;
        /*   34 */ unsigned char ANGLE_external_context_and_surface;
        /*   35 */ unsigned char ANGLE_feature_control;
        /*   36 */ unsigned char ANGLE_ggp_stream_descriptor;
        /*   37 */ unsigned char ANGLE_global_fence_sync;
        /*   38 */ unsigned char ANGLE_iosurface_client_buffer;
        /*   39 */ unsigned char ANGLE_keyed_mutex;
        /*   40 */ unsigned char ANGLE_memory_usage_report;
        /*   41 */ unsigned char ANGLE_metal_create_context_ownership_identity;
        /*   42 */ unsigned char ANGLE_metal_shared_event_sync;
        /*   43 */ unsigned char ANGLE_metal_texture_client_buffer;
        /*   44 */ unsigned char ANGLE_no_error;
        /*   45 */ unsigned char ANGLE_platform_angle;
        /*   46 */ unsigned char ANGLE_platform_angle_d3d;
        /*   47 */ unsigned char ANGLE_platform_angle_d3d11on12;
        /*   48 */ unsigned char ANGLE_platform_angle_d3d_luid;
        /*   49 */ unsigned char ANGLE_platform_angle_device_context_volatile_cgl;
        /*   50 */ unsigned char ANGLE_platform_angle_device_context_volatile_eagl;
        /*   51 */ unsigned char ANGLE_platform_angle_device_id;
        /*   52 */ unsigned char ANGLE_platform_angle_device_type_egl;
        /*   53 */ unsigned char ANGLE_platform_angle_device_type_swiftshader;
        /*   54 */ unsigned char ANGLE_platform_angle_metal;
        /*   55 */ unsigned char ANGLE_platform_angle_null;
        /*   56 */ unsigned char ANGLE_platform_angle_opengl;
        /*   57 */ unsigned char ANGLE_platform_angle_vulkan;
        /*   58 */ unsigned char ANGLE_platform_angle_vulkan_device_uuid;
        /*   59 */ unsigned char ANGLE_platform_angle_webgpu;
        /*   60 */ unsigned char ANGLE_power_preference;
        /*   61 */ unsigned char ANGLE_prepare_swap_buffers;
        /*   62 */ unsigned char ANGLE_program_cache_control;
        /*   63 */ unsigned char ANGLE_query_surface_pointer;
        /*   64 */ unsigned char ANGLE_robust_resource_initialization;
        /*   65 */ unsigned char ANGLE_stream_producer_d3d_texture;
        /*   66 */ unsigned char ANGLE_surface_d3d_texture_2d_share_handle;
        /*   67 */ unsigned char ANGLE_surface_orientation;
        /*   68 */ unsigned char ANGLE_swap_with_frame_token;
        /*   69 */ unsigned char ANGLE_sync_control_rate;
        /*   70 */ unsigned char ANGLE_vulkan_display;
        /*   71 */ unsigned char ANGLE_vulkan_image;
        /*   72 */ unsigned char ANGLE_wait_until_work_scheduled;
        /*   73 */ unsigned char ANGLE_window_fixed_size;
        /*   74 */ unsigned char ANGLE_x11_visual;
        /*   75 */ unsigned char ARM_image_format;
        /*   76 */ unsigned char ARM_implicit_external_sync;
        /*   77 */ unsigned char ARM_pixmap_multisample_discard;
        /*   78 */ unsigned char CHROMIUM_sync_control;
        /*   79 */ unsigned char EXT_bind_to_front;
        /*   80 */ unsigned char EXT_buffer_age;
        /*   81 */ unsigned char EXT_client_extensions;
        /*   82 */ unsigned char EXT_client_sync;
        /*   83 */ unsigned char EXT_compositor;
        /*   84 */ unsigned char EXT_config_select_group;
        /*   85 */ unsigned char EXT_create_context_robustness;
        /*   86 */ unsigned char EXT_device_base;
        /*   87 */ unsigned char EXT_device_drm;
        /*   88 */ unsigned char EXT_device_drm_render_node;
        /*   89 */ unsigned char EXT_device_enumeration;
        /*   90 */ unsigned char EXT_device_openwf;
        /*   91 */ unsigned char EXT_device_persistent_id;
        /*   92 */ unsigned char EXT_device_query;
        /*   93 */ unsigned char EXT_device_query_name;
        /*   94 */ unsigned char EXT_display_alloc;
        /*   95 */ unsigned char EXT_explicit_device;
        /*   96 */ unsigned char EXT_gl_colorspace_bt2020_hlg;
        /*   97 */ unsigned char EXT_gl_colorspace_bt2020_linear;
        /*   98 */ unsigned char EXT_gl_colorspace_bt2020_pq;
        /*   99 */ unsigned char EXT_gl_colorspace_display_p3;
        /*  100 */ unsigned char EXT_gl_colorspace_display_p3_linear;
        /*  101 */ unsigned char EXT_gl_colorspace_display_p3_passthrough;
        /*  102 */ unsigned char EXT_gl_colorspace_scrgb;
        /*  103 */ unsigned char EXT_gl_colorspace_scrgb_linear;
        /*  104 */ unsigned char EXT_image_dma_buf_import;
        /*  105 */ unsigned char EXT_image_dma_buf_import_modifiers;
        /*  106 */ unsigned char EXT_image_gl_colorspace;
        /*  107 */ unsigned char EXT_image_implicit_sync_control;
        /*  108 */ unsigned char EXT_multiview_window;
        /*  109 */ unsigned char EXT_output_base;
        /*  110 */ unsigned char EXT_output_drm;
        /*  111 */ unsigned char EXT_output_openwf;
        /*  112 */ unsigned char EXT_pixel_format_float;
        /*  113 */ unsigned char EXT_platform_base;
        /*  114 */ unsigned char EXT_platform_device;
        /*  115 */ unsigned char EXT_platform_wayland;
        /*  116 */ unsigned char EXT_platform_x11;
        /*  117 */ unsigned char EXT_platform_xcb;
        /*  118 */ unsigned char EXT_present_opaque;
        /*  119 */ unsigned char EXT_protected_content;
        /*  120 */ unsigned char EXT_protected_surface;
        /*  121 */ unsigned char EXT_query_reset_notification_strategy;
        /*  122 */ unsigned char EXT_stream_consumer_egloutput;
        /*  123 */ unsigned char EXT_surface_CTA861_3_metadata;
        /*  124 */ unsigned char EXT_surface_SMPTE2086_metadata;
        /*  125 */ unsigned char EXT_surface_compression;
        /*  126 */ unsigned char EXT_swap_buffers_with_damage;
        /*  127 */ unsigned char EXT_sync_reuse;
        /*  128 */ unsigned char EXT_yuv_surface;
        /*  129 */ unsigned char HI_clientpixmap;
        /*  130 */ unsigned char HI_colorformats;
        /*  131 */ unsigned char IMG_context_priority;
        /*  132 */ unsigned char IMG_image_plane_attribs;
        /*  133 */ unsigned char KHR_cl_event;
        /*  134 */ unsigned char KHR_cl_event2;
        /*  135 */ unsigned char KHR_client_get_all_proc_addresses;
        /*  136 */ unsigned char KHR_config_attribs;
        /*  137 */ unsigned char KHR_context_flush_control;
        /*  138 */ unsigned char KHR_create_context;
        /*  139 */ unsigned char KHR_create_context_no_error;
        /*  140 */ unsigned char KHR_debug;
        /*  141 */ unsigned char KHR_display_reference;
        /*  142 */ unsigned char KHR_fence_sync;
        /*  143 */ unsigned char KHR_get_all_proc_addresses;
        /*  144 */ unsigned char KHR_gl_colorspace;
        /*  145 */ unsigned char KHR_gl_renderbuffer_image;
        /*  146 */ unsigned char KHR_gl_texture_2D_image;
        /*  147 */ unsigned char KHR_gl_texture_3D_image;
        /*  148 */ unsigned char KHR_gl_texture_cubemap_image;
        /*  149 */ unsigned char KHR_image;
        /*  150 */ unsigned char KHR_image_base;
        /*  151 */ unsigned char KHR_image_pixmap;
        /*  152 */ unsigned char KHR_lock_surface;
        /*  153 */ unsigned char KHR_lock_surface2;
        /*  154 */ unsigned char KHR_lock_surface3;
        /*  155 */ unsigned char KHR_mutable_render_buffer;
        /*  156 */ unsigned char KHR_no_config_context;
        /*  157 */ unsigned char KHR_partial_update;
        /*  158 */ unsigned char KHR_platform_android;
        /*  159 */ unsigned char KHR_platform_gbm;
        /*  160 */ unsigned char KHR_platform_wayland;
        /*  161 */ unsigned char KHR_platform_x11;
        /*  162 */ unsigned char KHR_reusable_sync;
        /*  163 */ unsigned char KHR_stream;
        /*  164 */ unsigned char KHR_stream_attrib;
        /*  165 */ unsigned char KHR_stream_consumer_gltexture;
        /*  166 */ unsigned char KHR_stream_cross_process_fd;
        /*  167 */ unsigned char KHR_stream_fifo;
        /*  168 */ unsigned char KHR_stream_producer_aldatalocator;
        /*  169 */ unsigned char KHR_stream_producer_eglsurface;
        /*  170 */ unsigned char KHR_surfaceless_context;
        /*  171 */ unsigned char KHR_swap_buffers_with_damage;
        /*  172 */ unsigned char KHR_vg_parent_image;
        /*  173 */ unsigned char KHR_wait_sync;
        /*  174 */ unsigned char MESA_drm_image;
        /*  175 */ unsigned char MESA_image_dma_buf_export;
        /*  176 */ unsigned char MESA_platform_gbm;
        /*  177 */ unsigned char MESA_platform_surfaceless;
        /*  178 */ unsigned char MESA_query_driver;
        /*  179 */ unsigned char NOK_swap_region;
        /*  180 */ unsigned char NOK_swap_region2;
        /*  181 */ unsigned char NOK_texture_from_pixmap;
        /*  182 */ unsigned char NV_3dvision_surface;
        /*  183 */ unsigned char NV_context_priority_realtime;
        /*  184 */ unsigned char NV_coverage_sample;
        /*  185 */ unsigned char NV_coverage_sample_resolve;
        /*  186 */ unsigned char NV_cuda_event;
        /*  187 */ unsigned char NV_depth_nonlinear;
        /*  188 */ unsigned char NV_device_cuda;
        /*  189 */ unsigned char NV_native_query;
        /*  190 */ unsigned char NV_post_convert_rounding;
        /*  191 */ unsigned char NV_post_sub_buffer;
        /*  192 */ unsigned char NV_quadruple_buffer;
        /*  193 */ unsigned char NV_robustness_video_memory_purge;
        /*  194 */ unsigned char NV_stream_consumer_eglimage;
        /*  195 */ unsigned char NV_stream_consumer_eglimage_use_scanout_attrib;
        /*  196 */ unsigned char NV_stream_consumer_gltexture_yuv;
        /*  197 */ unsigned char NV_stream_cross_display;
        /*  198 */ unsigned char NV_stream_cross_object;
        /*  199 */ unsigned char NV_stream_cross_partition;
        /*  200 */ unsigned char NV_stream_cross_process;
        /*  201 */ unsigned char NV_stream_cross_system;
        /*  202 */ unsigned char NV_stream_dma;
        /*  203 */ unsigned char NV_stream_fifo_next;
        /*  204 */ unsigned char NV_stream_fifo_synchronous;
        /*  205 */ unsigned char NV_stream_flush;
        /*  206 */ unsigned char NV_stream_frame_limits;
        /*  207 */ unsigned char NV_stream_metadata;
        /*  208 */ unsigned char NV_stream_origin;
        /*  209 */ unsigned char NV_stream_remote;
        /*  210 */ unsigned char NV_stream_reset;
        /*  211 */ unsigned char NV_stream_socket;
        /*  212 */ unsigned char NV_stream_socket_inet;
        /*  213 */ unsigned char NV_stream_socket_unix;
        /*  214 */ unsigned char NV_stream_sync;
        /*  215 */ unsigned char NV_sync;
        /*  216 */ unsigned char NV_system_time;
        /*  217 */ unsigned char NV_triple_buffer;
        /*  218 */ unsigned char QNX_image_native_buffer;
        /*  219 */ unsigned char QNX_platform_screen;
        /*  220 */ unsigned char TIZEN_image_native_buffer;
        /*  221 */ unsigned char TIZEN_image_native_surface;
        /*  222 */ unsigned char WL_bind_wayland_display;
        /*  223 */ unsigned char WL_create_wayland_buffer_from_image;
        };
    };

    union {
        void *pfnArray[181];
        struct {
        /*    0 */ PFNEGLACQUIREEXTERNALCONTEXTANGLEPROC AcquireExternalContextANGLE;
        /*    1 */ PFNEGLBINDAPIPROC BindAPI;
        /*    2 */ PFNEGLBINDTEXIMAGEPROC BindTexImage;
        /*    3 */ PFNEGLBINDWAYLANDDISPLAYWLPROC BindWaylandDisplayWL;
        /*    4 */ PFNEGLCHOOSECONFIGPROC ChooseConfig;
        /*    5 */ PFNEGLCLIENTSIGNALSYNCEXTPROC ClientSignalSyncEXT;
        /*    6 */ PFNEGLCLIENTWAITSYNCPROC ClientWaitSync;
        /*    7 */ PFNEGLCLIENTWAITSYNCKHRPROC ClientWaitSyncKHR;
        /*    8 */ PFNEGLCLIENTWAITSYNCNVPROC ClientWaitSyncNV;
        /*    9 */ PFNEGLCOMPOSITORBINDTEXWINDOWEXTPROC CompositorBindTexWindowEXT;
        /*   10 */ PFNEGLCOMPOSITORSETCONTEXTATTRIBUTESEXTPROC CompositorSetContextAttributesEXT;
        /*   11 */ PFNEGLCOMPOSITORSETCONTEXTLISTEXTPROC CompositorSetContextListEXT;
        /*   12 */ PFNEGLCOMPOSITORSETSIZEEXTPROC CompositorSetSizeEXT;
        /*   13 */ PFNEGLCOMPOSITORSETWINDOWATTRIBUTESEXTPROC CompositorSetWindowAttributesEXT;
        /*   14 */ PFNEGLCOMPOSITORSETWINDOWLISTEXTPROC CompositorSetWindowListEXT;
        /*   15 */ PFNEGLCOMPOSITORSWAPPOLICYEXTPROC CompositorSwapPolicyEXT;
        /*   16 */ PFNEGLCOPYBUFFERSPROC CopyBuffers;
        /*   17 */ PFNEGLCOPYMETALSHAREDEVENTANGLEPROC CopyMetalSharedEventANGLE;
        /*   18 */ PFNEGLCREATECONTEXTPROC CreateContext;
        /*   19 */ PFNEGLCREATEDRMIMAGEMESAPROC CreateDRMImageMESA;
        /*   20 */ PFNEGLCREATEDEVICEANGLEPROC CreateDeviceANGLE;
        /*   21 */ PFNEGLCREATEFENCESYNCNVPROC CreateFenceSyncNV;
        /*   22 */ PFNEGLCREATEIMAGEPROC CreateImage;
        /*   23 */ PFNEGLCREATEIMAGEKHRPROC CreateImageKHR;
        /*   24 */ PFNEGLCREATENATIVECLIENTBUFFERANDROIDPROC CreateNativeClientBufferANDROID;
        /*   25 */ PFNEGLCREATEPBUFFERFROMCLIENTBUFFERPROC CreatePbufferFromClientBuffer;
        /*   26 */ PFNEGLCREATEPBUFFERSURFACEPROC CreatePbufferSurface;
        /*   27 */ PFNEGLCREATEPIXMAPSURFACEPROC CreatePixmapSurface;
        /*   28 */ PFNEGLCREATEPIXMAPSURFACEHIPROC CreatePixmapSurfaceHI;
        /*   29 */ PFNEGLCREATEPLATFORMPIXMAPSURFACEPROC CreatePlatformPixmapSurface;
        /*   30 */ PFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC CreatePlatformPixmapSurfaceEXT;
        /*   31 */ PFNEGLCREATEPLATFORMWINDOWSURFACEPROC CreatePlatformWindowSurface;
        /*   32 */ PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC CreatePlatformWindowSurfaceEXT;
        /*   33 */ PFNEGLCREATESTREAMATTRIBKHRPROC CreateStreamAttribKHR;
        /*   34 */ PFNEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC CreateStreamFromFileDescriptorKHR;
        /*   35 */ PFNEGLCREATESTREAMKHRPROC CreateStreamKHR;
        /*   36 */ PFNEGLCREATESTREAMPRODUCERD3DTEXTUREANGLEPROC CreateStreamProducerD3DTextureANGLE;
        /*   37 */ PFNEGLCREATESTREAMPRODUCERSURFACEKHRPROC CreateStreamProducerSurfaceKHR;
        /*   38 */ PFNEGLCREATESTREAMSYNCNVPROC CreateStreamSyncNV;
        /*   39 */ PFNEGLCREATESYNCPROC CreateSync;
        /*   40 */ PFNEGLCREATESYNC64KHRPROC CreateSync64KHR;
        /*   41 */ PFNEGLCREATESYNCKHRPROC CreateSyncKHR;
        /*   42 */ PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWLPROC CreateWaylandBufferFromImageWL;
        /*   43 */ PFNEGLCREATEWINDOWSURFACEPROC CreateWindowSurface;
        /*   44 */ PFNEGLDEBUGMESSAGECONTROLKHRPROC DebugMessageControlKHR;
        /*   45 */ PFNEGLDESTROYCONTEXTPROC DestroyContext;
        /*   46 */ PFNEGLDESTROYDISPLAYEXTPROC DestroyDisplayEXT;
        /*   47 */ PFNEGLDESTROYIMAGEPROC DestroyImage;
        /*   48 */ PFNEGLDESTROYIMAGEKHRPROC DestroyImageKHR;
        /*   49 */ PFNEGLDESTROYSTREAMKHRPROC DestroyStreamKHR;
        /*   50 */ PFNEGLDESTROYSURFACEPROC DestroySurface;
        /*   51 */ PFNEGLDESTROYSYNCPROC DestroySync;
        /*   52 */ PFNEGLDESTROYSYNCKHRPROC DestroySyncKHR;
        /*   53 */ PFNEGLDESTROYSYNCNVPROC DestroySyncNV;
        /*   54 */ PFNEGLDUPNATIVEFENCEFDANDROIDPROC DupNativeFenceFDANDROID;
        /*   55 */ PFNEGLEXPORTDMABUFIMAGEMESAPROC ExportDMABUFImageMESA;
        /*   56 */ PFNEGLEXPORTDMABUFIMAGEQUERYMESAPROC ExportDMABUFImageQueryMESA;
        /*   57 */ PFNEGLEXPORTDRMIMAGEMESAPROC ExportDRMImageMESA;
        /*   58 */ PFNEGLEXPORTVKIMAGEANGLEPROC ExportVkImageANGLE;
        /*   59 */ PFNEGLFENCENVPROC FenceNV;
        /*   60 */ PFNEGLFORCEGPUSWITCHANGLEPROC ForceGPUSwitchANGLE;
        /*   61 */ PFNEGLGETCOMPOSITORTIMINGANDROIDPROC GetCompositorTimingANDROID;
        /*   62 */ PFNEGLGETCOMPOSITORTIMINGSUPPORTEDANDROIDPROC GetCompositorTimingSupportedANDROID;
        /*   63 */ PFNEGLGETCONFIGATTRIBPROC GetConfigAttrib;
        /*   64 */ PFNEGLGETCONFIGSPROC GetConfigs;
        /*   65 */ PFNEGLGETCURRENTCONTEXTPROC GetCurrentContext;
        /*   66 */ PFNEGLGETCURRENTDISPLAYPROC GetCurrentDisplay;
        /*   67 */ PFNEGLGETCURRENTSURFACEPROC GetCurrentSurface;
        /*   68 */ PFNEGLGETDISPLAYPROC GetDisplay;
        /*   69 */ PFNEGLGETDISPLAYDRIVERCONFIGPROC GetDisplayDriverConfig;
        /*   70 */ PFNEGLGETDISPLAYDRIVERNAMEPROC GetDisplayDriverName;
        /*   71 */ PFNEGLGETERRORPROC GetError;
        /*   72 */ PFNEGLGETFRAMETIMESTAMPSUPPORTEDANDROIDPROC GetFrameTimestampSupportedANDROID;
        /*   73 */ PFNEGLGETFRAMETIMESTAMPSANDROIDPROC GetFrameTimestampsANDROID;
        /*   74 */ PFNEGLGETMSCRATEANGLEPROC GetMscRateANGLE;
        /*   75 */ PFNEGLGETNATIVECLIENTBUFFERANDROIDPROC GetNativeClientBufferANDROID;
        /*   76 */ PFNEGLGETNEXTFRAMEIDANDROIDPROC GetNextFrameIdANDROID;
        /*   77 */ PFNEGLGETOUTPUTLAYERSEXTPROC GetOutputLayersEXT;
        /*   78 */ PFNEGLGETOUTPUTPORTSEXTPROC GetOutputPortsEXT;
        /*   79 */ PFNEGLGETPLATFORMDISPLAYPROC GetPlatformDisplay;
        /*   80 */ PFNEGLGETPLATFORMDISPLAYEXTPROC GetPlatformDisplayEXT;
        /*   81 */ PFNEGLGETPROCADDRESSPROC GetProcAddress;
        /*   82 */ PFNEGLGETSTREAMFILEDESCRIPTORKHRPROC GetStreamFileDescriptorKHR;
        /*   83 */ PFNEGLGETSYNCATTRIBPROC GetSyncAttrib;
        /*   84 */ PFNEGLGETSYNCATTRIBKHRPROC GetSyncAttribKHR;
        /*   85 */ PFNEGLGETSYNCATTRIBNVPROC GetSyncAttribNV;
        /*   86 */ PFNEGLGETSYNCVALUESCHROMIUMPROC GetSyncValuesCHROMIUM;
        /*   87 */ PFNEGLGETSYSTEMTIMEFREQUENCYNVPROC GetSystemTimeFrequencyNV;
        /*   88 */ PFNEGLGETSYSTEMTIMENVPROC GetSystemTimeNV;
        /*   89 */ PFNEGLHANDLEGPUSWITCHANGLEPROC HandleGPUSwitchANGLE;
        /*   90 */ PFNEGLINITIALIZEPROC Initialize;
        /*   91 */ PFNEGLLABELOBJECTKHRPROC LabelObjectKHR;
        /*   92 */ PFNEGLLOCKSURFACEKHRPROC LockSurfaceKHR;
        /*   93 */ PFNEGLMAKECURRENTPROC MakeCurrent;
        /*   94 */ PFNEGLOUTPUTLAYERATTRIBEXTPROC OutputLayerAttribEXT;
        /*   95 */ PFNEGLOUTPUTPORTATTRIBEXTPROC OutputPortAttribEXT;
        /*   96 */ PFNEGLPOSTSUBBUFFERNVPROC PostSubBufferNV;
        /*   97 */ PFNEGLPREPARESWAPBUFFERSANGLEPROC PrepareSwapBuffersANGLE;
        /*   98 */ PFNEGLPRESENTATIONTIMEANDROIDPROC PresentationTimeANDROID;
        /*   99 */ PFNEGLPROGRAMCACHEGETATTRIBANGLEPROC ProgramCacheGetAttribANGLE;
        /*  100 */ PFNEGLPROGRAMCACHEPOPULATEANGLEPROC ProgramCachePopulateANGLE;
        /*  101 */ PFNEGLPROGRAMCACHEQUERYANGLEPROC ProgramCacheQueryANGLE;
        /*  102 */ PFNEGLPROGRAMCACHERESIZEANGLEPROC ProgramCacheResizeANGLE;
        /*  103 */ PFNEGLQUERYAPIPROC QueryAPI;
        /*  104 */ PFNEGLQUERYCONTEXTPROC QueryContext;
        /*  105 */ PFNEGLQUERYDEBUGKHRPROC QueryDebugKHR;
        /*  106 */ PFNEGLQUERYDEVICEATTRIBEXTPROC QueryDeviceAttribEXT;
        /*  107 */ PFNEGLQUERYDEVICEBINARYEXTPROC QueryDeviceBinaryEXT;
        /*  108 */ PFNEGLQUERYDEVICESTRINGEXTPROC QueryDeviceStringEXT;
        /*  109 */ PFNEGLQUERYDEVICESEXTPROC QueryDevicesEXT;
        /*  110 */ PFNEGLQUERYDISPLAYATTRIBANGLEPROC QueryDisplayAttribANGLE;
        /*  111 */ PFNEGLQUERYDISPLAYATTRIBEXTPROC QueryDisplayAttribEXT;
        /*  112 */ PFNEGLQUERYDISPLAYATTRIBKHRPROC QueryDisplayAttribKHR;
        /*  113 */ PFNEGLQUERYDISPLAYATTRIBNVPROC QueryDisplayAttribNV;
        /*  114 */ PFNEGLQUERYDMABUFFORMATSEXTPROC QueryDmaBufFormatsEXT;
        /*  115 */ PFNEGLQUERYDMABUFMODIFIERSEXTPROC QueryDmaBufModifiersEXT;
        /*  116 */ PFNEGLQUERYNATIVEDISPLAYNVPROC QueryNativeDisplayNV;
        /*  117 */ PFNEGLQUERYNATIVEPIXMAPNVPROC QueryNativePixmapNV;
        /*  118 */ PFNEGLQUERYNATIVEWINDOWNVPROC QueryNativeWindowNV;
        /*  119 */ PFNEGLQUERYOUTPUTLAYERATTRIBEXTPROC QueryOutputLayerAttribEXT;
        /*  120 */ PFNEGLQUERYOUTPUTLAYERSTRINGEXTPROC QueryOutputLayerStringEXT;
        /*  121 */ PFNEGLQUERYOUTPUTPORTATTRIBEXTPROC QueryOutputPortAttribEXT;
        /*  122 */ PFNEGLQUERYOUTPUTPORTSTRINGEXTPROC QueryOutputPortStringEXT;
        /*  123 */ PFNEGLQUERYSTREAMATTRIBKHRPROC QueryStreamAttribKHR;
        /*  124 */ PFNEGLQUERYSTREAMCONSUMEREVENTNVPROC QueryStreamConsumerEventNV;
        /*  125 */ PFNEGLQUERYSTREAMKHRPROC QueryStreamKHR;
        /*  126 */ PFNEGLQUERYSTREAMMETADATANVPROC QueryStreamMetadataNV;
        /*  127 */ PFNEGLQUERYSTREAMTIMEKHRPROC QueryStreamTimeKHR;
        /*  128 */ PFNEGLQUERYSTREAMU64KHRPROC QueryStreamu64KHR;
        /*  129 */ PFNEGLQUERYSTRINGPROC QueryString;
        /*  130 */ PFNEGLQUERYSTRINGIANGLEPROC QueryStringiANGLE;
        /*  131 */ PFNEGLQUERYSUPPORTEDCOMPRESSIONRATESEXTPROC QuerySupportedCompressionRatesEXT;
        /*  132 */ PFNEGLQUERYSURFACEPROC QuerySurface;
        /*  133 */ PFNEGLQUERYSURFACE64KHRPROC QuerySurface64KHR;
        /*  134 */ PFNEGLQUERYSURFACEPOINTERANGLEPROC QuerySurfacePointerANGLE;
        /*  135 */ PFNEGLQUERYWAYLANDBUFFERWLPROC QueryWaylandBufferWL;
        /*  136 */ PFNEGLREACQUIREHIGHPOWERGPUANGLEPROC ReacquireHighPowerGPUANGLE;
        /*  137 */ PFNEGLRELEASEDEVICEANGLEPROC ReleaseDeviceANGLE;
        /*  138 */ PFNEGLRELEASEEXTERNALCONTEXTANGLEPROC ReleaseExternalContextANGLE;
        /*  139 */ PFNEGLRELEASEHIGHPOWERGPUANGLEPROC ReleaseHighPowerGPUANGLE;
        /*  140 */ PFNEGLRELEASETEXIMAGEPROC ReleaseTexImage;
        /*  141 */ PFNEGLRELEASETHREADPROC ReleaseThread;
        /*  142 */ PFNEGLRESETSTREAMNVPROC ResetStreamNV;
        /*  143 */ PFNEGLSETBLOBCACHEFUNCSANDROIDPROC SetBlobCacheFuncsANDROID;
        /*  144 */ PFNEGLSETDAMAGEREGIONKHRPROC SetDamageRegionKHR;
        /*  145 */ PFNEGLSETSTREAMATTRIBKHRPROC SetStreamAttribKHR;
        /*  146 */ PFNEGLSETSTREAMMETADATANVPROC SetStreamMetadataNV;
        /*  147 */ PFNEGLSETVALIDATIONENABLEDANGLEPROC SetValidationEnabledANGLE;
        /*  148 */ PFNEGLSIGNALSYNCKHRPROC SignalSyncKHR;
        /*  149 */ PFNEGLSIGNALSYNCNVPROC SignalSyncNV;
        /*  150 */ PFNEGLSTREAMACQUIREIMAGENVPROC StreamAcquireImageNV;
        /*  151 */ PFNEGLSTREAMATTRIBKHRPROC StreamAttribKHR;
        /*  152 */ PFNEGLSTREAMCONSUMERACQUIREATTRIBKHRPROC StreamConsumerAcquireAttribKHR;
        /*  153 */ PFNEGLSTREAMCONSUMERACQUIREKHRPROC StreamConsumerAcquireKHR;
        /*  154 */ PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALATTRIBSNVPROC StreamConsumerGLTextureExternalAttribsNV;
        /*  155 */ PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC StreamConsumerGLTextureExternalKHR;
        /*  156 */ PFNEGLSTREAMCONSUMEROUTPUTEXTPROC StreamConsumerOutputEXT;
        /*  157 */ PFNEGLSTREAMCONSUMERRELEASEATTRIBKHRPROC StreamConsumerReleaseAttribKHR;
        /*  158 */ PFNEGLSTREAMCONSUMERRELEASEKHRPROC StreamConsumerReleaseKHR;
        /*  159 */ PFNEGLSTREAMFLUSHNVPROC StreamFlushNV;
        /*  160 */ PFNEGLSTREAMIMAGECONSUMERCONNECTNVPROC StreamImageConsumerConnectNV;
        /*  161 */ PFNEGLSTREAMPOSTD3DTEXTUREANGLEPROC StreamPostD3DTextureANGLE;
        /*  162 */ PFNEGLSTREAMRELEASEIMAGENVPROC StreamReleaseImageNV;
        /*  163 */ PFNEGLSURFACEATTRIBPROC SurfaceAttrib;
        /*  164 */ PFNEGLSWAPBUFFERSPROC SwapBuffers;
        /*  165 */ PFNEGLSWAPBUFFERSREGION2NOKPROC SwapBuffersRegion2NOK;
        /*  166 */ PFNEGLSWAPBUFFERSREGIONNOKPROC SwapBuffersRegionNOK;
        /*  167 */ PFNEGLSWAPBUFFERSWITHDAMAGEEXTPROC SwapBuffersWithDamageEXT;
        /*  168 */ PFNEGLSWAPBUFFERSWITHDAMAGEKHRPROC SwapBuffersWithDamageKHR;
        /*  169 */ PFNEGLSWAPBUFFERSWITHFRAMETOKENANGLEPROC SwapBuffersWithFrameTokenANGLE;
        /*  170 */ PFNEGLSWAPINTERVALPROC SwapInterval;
        /*  171 */ PFNEGLTERMINATEPROC Terminate;
        /*  172 */ PFNEGLUNBINDWAYLANDDISPLAYWLPROC UnbindWaylandDisplayWL;
        /*  173 */ PFNEGLUNLOCKSURFACEKHRPROC UnlockSurfaceKHR;
        /*  174 */ PFNEGLUNSIGNALSYNCEXTPROC UnsignalSyncEXT;
        /*  175 */ PFNEGLWAITCLIENTPROC WaitClient;
        /*  176 */ PFNEGLWAITGLPROC WaitGL;
        /*  177 */ PFNEGLWAITNATIVEPROC WaitNative;
        /*  178 */ PFNEGLWAITSYNCPROC WaitSync;
        /*  179 */ PFNEGLWAITSYNCKHRPROC WaitSyncKHR;
        /*  180 */ PFNEGLWAITUNTILWORKSCHEDULEDANGLEPROC WaitUntilWorkScheduledANGLE;
        };
    };

    void* glad_loader_handle;
} GladEGLContext;

GLAD_API_CALL GladEGLContext glad_egl_context;

#define GLAD_EGL_VERSION_1_0 (glad_egl_context.VERSION_1_0)
#define GLAD_EGL_VERSION_1_1 (glad_egl_context.VERSION_1_1)
#define GLAD_EGL_VERSION_1_2 (glad_egl_context.VERSION_1_2)
#define GLAD_EGL_VERSION_1_3 (glad_egl_context.VERSION_1_3)
#define GLAD_EGL_VERSION_1_4 (glad_egl_context.VERSION_1_4)
#define GLAD_EGL_VERSION_1_5 (glad_egl_context.VERSION_1_5)
#define GLAD_EGL_ANDROID_GLES_layers (glad_egl_context.ANDROID_GLES_layers)
#define GLAD_EGL_ANDROID_blob_cache (glad_egl_context.ANDROID_blob_cache)
#define GLAD_EGL_ANDROID_create_native_client_buffer (glad_egl_context.ANDROID_create_native_client_buffer)
#define GLAD_EGL_ANDROID_framebuffer_target (glad_egl_context.ANDROID_framebuffer_target)
#define GLAD_EGL_ANDROID_front_buffer_auto_refresh (glad_egl_context.ANDROID_front_buffer_auto_refresh)
#define GLAD_EGL_ANDROID_get_frame_timestamps (glad_egl_context.ANDROID_get_frame_timestamps)
#define GLAD_EGL_ANDROID_get_native_client_buffer (glad_egl_context.ANDROID_get_native_client_buffer)
#define GLAD_EGL_ANDROID_image_native_buffer (glad_egl_context.ANDROID_image_native_buffer)
#define GLAD_EGL_ANDROID_native_fence_sync (glad_egl_context.ANDROID_native_fence_sync)
#define GLAD_EGL_ANDROID_presentation_time (glad_egl_context.ANDROID_presentation_time)
#define GLAD_EGL_ANDROID_recordable (glad_egl_context.ANDROID_recordable)
#define GLAD_EGL_ANDROID_telemetry_hint (glad_egl_context.ANDROID_telemetry_hint)
#define GLAD_EGL_ANGLE_colorspace_attribute_passthrough (glad_egl_context.ANGLE_colorspace_attribute_passthrough)
#define GLAD_EGL_ANGLE_context_virtualization (glad_egl_context.ANGLE_context_virtualization)
#define GLAD_EGL_ANGLE_create_context_backwards_compatible (glad_egl_context.ANGLE_create_context_backwards_compatible)
#define GLAD_EGL_ANGLE_create_context_client_arrays (glad_egl_context.ANGLE_create_context_client_arrays)
#define GLAD_EGL_ANGLE_create_context_extensions_enabled (glad_egl_context.ANGLE_create_context_extensions_enabled)
#define GLAD_EGL_ANGLE_create_context_webgl_compatibility (glad_egl_context.ANGLE_create_context_webgl_compatibility)
#define GLAD_EGL_ANGLE_create_surface_swap_interval (glad_egl_context.ANGLE_create_surface_swap_interval)
#define GLAD_EGL_ANGLE_d3d_share_handle_client_buffer (glad_egl_context.ANGLE_d3d_share_handle_client_buffer)
#define GLAD_EGL_ANGLE_d3d_texture_client_buffer (glad_egl_context.ANGLE_d3d_texture_client_buffer)
#define GLAD_EGL_ANGLE_device_cgl (glad_egl_context.ANGLE_device_cgl)
#define GLAD_EGL_ANGLE_device_creation (glad_egl_context.ANGLE_device_creation)
#define GLAD_EGL_ANGLE_device_d3d (glad_egl_context.ANGLE_device_d3d)
#define GLAD_EGL_ANGLE_device_d3d11 (glad_egl_context.ANGLE_device_d3d11)
#define GLAD_EGL_ANGLE_device_d3d9 (glad_egl_context.ANGLE_device_d3d9)
#define GLAD_EGL_ANGLE_device_eagl (glad_egl_context.ANGLE_device_eagl)
#define GLAD_EGL_ANGLE_device_metal (glad_egl_context.ANGLE_device_metal)
#define GLAD_EGL_ANGLE_device_vulkan (glad_egl_context.ANGLE_device_vulkan)
#define GLAD_EGL_ANGLE_direct_composition (glad_egl_context.ANGLE_direct_composition)
#define GLAD_EGL_ANGLE_display_power_preference (glad_egl_context.ANGLE_display_power_preference)
#define GLAD_EGL_ANGLE_display_semaphore_share_group (glad_egl_context.ANGLE_display_semaphore_share_group)
#define GLAD_EGL_ANGLE_display_texture_share_group (glad_egl_context.ANGLE_display_texture_share_group)
#define GLAD_EGL_ANGLE_experimental_present_path (glad_egl_context.ANGLE_experimental_present_path)
#define GLAD_EGL_ANGLE_external_context_and_surface (glad_egl_context.ANGLE_external_context_and_surface)
#define GLAD_EGL_ANGLE_feature_control (glad_egl_context.ANGLE_feature_control)
#define GLAD_EGL_ANGLE_ggp_stream_descriptor (glad_egl_context.ANGLE_ggp_stream_descriptor)
#define GLAD_EGL_ANGLE_global_fence_sync (glad_egl_context.ANGLE_global_fence_sync)
#define GLAD_EGL_ANGLE_iosurface_client_buffer (glad_egl_context.ANGLE_iosurface_client_buffer)
#define GLAD_EGL_ANGLE_keyed_mutex (glad_egl_context.ANGLE_keyed_mutex)
#define GLAD_EGL_ANGLE_memory_usage_report (glad_egl_context.ANGLE_memory_usage_report)
#define GLAD_EGL_ANGLE_metal_create_context_ownership_identity (glad_egl_context.ANGLE_metal_create_context_ownership_identity)
#define GLAD_EGL_ANGLE_metal_shared_event_sync (glad_egl_context.ANGLE_metal_shared_event_sync)
#define GLAD_EGL_ANGLE_metal_texture_client_buffer (glad_egl_context.ANGLE_metal_texture_client_buffer)
#define GLAD_EGL_ANGLE_no_error (glad_egl_context.ANGLE_no_error)
#define GLAD_EGL_ANGLE_platform_angle (glad_egl_context.ANGLE_platform_angle)
#define GLAD_EGL_ANGLE_platform_angle_d3d (glad_egl_context.ANGLE_platform_angle_d3d)
#define GLAD_EGL_ANGLE_platform_angle_d3d11on12 (glad_egl_context.ANGLE_platform_angle_d3d11on12)
#define GLAD_EGL_ANGLE_platform_angle_d3d_luid (glad_egl_context.ANGLE_platform_angle_d3d_luid)
#define GLAD_EGL_ANGLE_platform_angle_device_context_volatile_cgl (glad_egl_context.ANGLE_platform_angle_device_context_volatile_cgl)
#define GLAD_EGL_ANGLE_platform_angle_device_context_volatile_eagl (glad_egl_context.ANGLE_platform_angle_device_context_volatile_eagl)
#define GLAD_EGL_ANGLE_platform_angle_device_id (glad_egl_context.ANGLE_platform_angle_device_id)
#define GLAD_EGL_ANGLE_platform_angle_device_type_egl (glad_egl_context.ANGLE_platform_angle_device_type_egl)
#define GLAD_EGL_ANGLE_platform_angle_device_type_swiftshader (glad_egl_context.ANGLE_platform_angle_device_type_swiftshader)
#define GLAD_EGL_ANGLE_platform_angle_metal (glad_egl_context.ANGLE_platform_angle_metal)
#define GLAD_EGL_ANGLE_platform_angle_null (glad_egl_context.ANGLE_platform_angle_null)
#define GLAD_EGL_ANGLE_platform_angle_opengl (glad_egl_context.ANGLE_platform_angle_opengl)
#define GLAD_EGL_ANGLE_platform_angle_vulkan (glad_egl_context.ANGLE_platform_angle_vulkan)
#define GLAD_EGL_ANGLE_platform_angle_vulkan_device_uuid (glad_egl_context.ANGLE_platform_angle_vulkan_device_uuid)
#define GLAD_EGL_ANGLE_platform_angle_webgpu (glad_egl_context.ANGLE_platform_angle_webgpu)
#define GLAD_EGL_ANGLE_power_preference (glad_egl_context.ANGLE_power_preference)
#define GLAD_EGL_ANGLE_prepare_swap_buffers (glad_egl_context.ANGLE_prepare_swap_buffers)
#define GLAD_EGL_ANGLE_program_cache_control (glad_egl_context.ANGLE_program_cache_control)
#define GLAD_EGL_ANGLE_query_surface_pointer (glad_egl_context.ANGLE_query_surface_pointer)
#define GLAD_EGL_ANGLE_robust_resource_initialization (glad_egl_context.ANGLE_robust_resource_initialization)
#define GLAD_EGL_ANGLE_stream_producer_d3d_texture (glad_egl_context.ANGLE_stream_producer_d3d_texture)
#define GLAD_EGL_ANGLE_surface_d3d_texture_2d_share_handle (glad_egl_context.ANGLE_surface_d3d_texture_2d_share_handle)
#define GLAD_EGL_ANGLE_surface_orientation (glad_egl_context.ANGLE_surface_orientation)
#define GLAD_EGL_ANGLE_swap_with_frame_token (glad_egl_context.ANGLE_swap_with_frame_token)
#define GLAD_EGL_ANGLE_sync_control_rate (glad_egl_context.ANGLE_sync_control_rate)
#define GLAD_EGL_ANGLE_vulkan_display (glad_egl_context.ANGLE_vulkan_display)
#define GLAD_EGL_ANGLE_vulkan_image (glad_egl_context.ANGLE_vulkan_image)
#define GLAD_EGL_ANGLE_wait_until_work_scheduled (glad_egl_context.ANGLE_wait_until_work_scheduled)
#define GLAD_EGL_ANGLE_window_fixed_size (glad_egl_context.ANGLE_window_fixed_size)
#define GLAD_EGL_ANGLE_x11_visual (glad_egl_context.ANGLE_x11_visual)
#define GLAD_EGL_ARM_image_format (glad_egl_context.ARM_image_format)
#define GLAD_EGL_ARM_implicit_external_sync (glad_egl_context.ARM_implicit_external_sync)
#define GLAD_EGL_ARM_pixmap_multisample_discard (glad_egl_context.ARM_pixmap_multisample_discard)
#define GLAD_EGL_CHROMIUM_sync_control (glad_egl_context.CHROMIUM_sync_control)
#define GLAD_EGL_EXT_bind_to_front (glad_egl_context.EXT_bind_to_front)
#define GLAD_EGL_EXT_buffer_age (glad_egl_context.EXT_buffer_age)
#define GLAD_EGL_EXT_client_extensions (glad_egl_context.EXT_client_extensions)
#define GLAD_EGL_EXT_client_sync (glad_egl_context.EXT_client_sync)
#define GLAD_EGL_EXT_compositor (glad_egl_context.EXT_compositor)
#define GLAD_EGL_EXT_config_select_group (glad_egl_context.EXT_config_select_group)
#define GLAD_EGL_EXT_create_context_robustness (glad_egl_context.EXT_create_context_robustness)
#define GLAD_EGL_EXT_device_base (glad_egl_context.EXT_device_base)
#define GLAD_EGL_EXT_device_drm (glad_egl_context.EXT_device_drm)
#define GLAD_EGL_EXT_device_drm_render_node (glad_egl_context.EXT_device_drm_render_node)
#define GLAD_EGL_EXT_device_enumeration (glad_egl_context.EXT_device_enumeration)
#define GLAD_EGL_EXT_device_openwf (glad_egl_context.EXT_device_openwf)
#define GLAD_EGL_EXT_device_persistent_id (glad_egl_context.EXT_device_persistent_id)
#define GLAD_EGL_EXT_device_query (glad_egl_context.EXT_device_query)
#define GLAD_EGL_EXT_device_query_name (glad_egl_context.EXT_device_query_name)
#define GLAD_EGL_EXT_display_alloc (glad_egl_context.EXT_display_alloc)
#define GLAD_EGL_EXT_explicit_device (glad_egl_context.EXT_explicit_device)
#define GLAD_EGL_EXT_gl_colorspace_bt2020_hlg (glad_egl_context.EXT_gl_colorspace_bt2020_hlg)
#define GLAD_EGL_EXT_gl_colorspace_bt2020_linear (glad_egl_context.EXT_gl_colorspace_bt2020_linear)
#define GLAD_EGL_EXT_gl_colorspace_bt2020_pq (glad_egl_context.EXT_gl_colorspace_bt2020_pq)
#define GLAD_EGL_EXT_gl_colorspace_display_p3 (glad_egl_context.EXT_gl_colorspace_display_p3)
#define GLAD_EGL_EXT_gl_colorspace_display_p3_linear (glad_egl_context.EXT_gl_colorspace_display_p3_linear)
#define GLAD_EGL_EXT_gl_colorspace_display_p3_passthrough (glad_egl_context.EXT_gl_colorspace_display_p3_passthrough)
#define GLAD_EGL_EXT_gl_colorspace_scrgb (glad_egl_context.EXT_gl_colorspace_scrgb)
#define GLAD_EGL_EXT_gl_colorspace_scrgb_linear (glad_egl_context.EXT_gl_colorspace_scrgb_linear)
#define GLAD_EGL_EXT_image_dma_buf_import (glad_egl_context.EXT_image_dma_buf_import)
#define GLAD_EGL_EXT_image_dma_buf_import_modifiers (glad_egl_context.EXT_image_dma_buf_import_modifiers)
#define GLAD_EGL_EXT_image_gl_colorspace (glad_egl_context.EXT_image_gl_colorspace)
#define GLAD_EGL_EXT_image_implicit_sync_control (glad_egl_context.EXT_image_implicit_sync_control)
#define GLAD_EGL_EXT_multiview_window (glad_egl_context.EXT_multiview_window)
#define GLAD_EGL_EXT_output_base (glad_egl_context.EXT_output_base)
#define GLAD_EGL_EXT_output_drm (glad_egl_context.EXT_output_drm)
#define GLAD_EGL_EXT_output_openwf (glad_egl_context.EXT_output_openwf)
#define GLAD_EGL_EXT_pixel_format_float (glad_egl_context.EXT_pixel_format_float)
#define GLAD_EGL_EXT_platform_base (glad_egl_context.EXT_platform_base)
#define GLAD_EGL_EXT_platform_device (glad_egl_context.EXT_platform_device)
#define GLAD_EGL_EXT_platform_wayland (glad_egl_context.EXT_platform_wayland)
#define GLAD_EGL_EXT_platform_x11 (glad_egl_context.EXT_platform_x11)
#define GLAD_EGL_EXT_platform_xcb (glad_egl_context.EXT_platform_xcb)
#define GLAD_EGL_EXT_present_opaque (glad_egl_context.EXT_present_opaque)
#define GLAD_EGL_EXT_protected_content (glad_egl_context.EXT_protected_content)
#define GLAD_EGL_EXT_protected_surface (glad_egl_context.EXT_protected_surface)
#define GLAD_EGL_EXT_query_reset_notification_strategy (glad_egl_context.EXT_query_reset_notification_strategy)
#define GLAD_EGL_EXT_stream_consumer_egloutput (glad_egl_context.EXT_stream_consumer_egloutput)
#define GLAD_EGL_EXT_surface_CTA861_3_metadata (glad_egl_context.EXT_surface_CTA861_3_metadata)
#define GLAD_EGL_EXT_surface_SMPTE2086_metadata (glad_egl_context.EXT_surface_SMPTE2086_metadata)
#define GLAD_EGL_EXT_surface_compression (glad_egl_context.EXT_surface_compression)
#define GLAD_EGL_EXT_swap_buffers_with_damage (glad_egl_context.EXT_swap_buffers_with_damage)
#define GLAD_EGL_EXT_sync_reuse (glad_egl_context.EXT_sync_reuse)
#define GLAD_EGL_EXT_yuv_surface (glad_egl_context.EXT_yuv_surface)
#define GLAD_EGL_HI_clientpixmap (glad_egl_context.HI_clientpixmap)
#define GLAD_EGL_HI_colorformats (glad_egl_context.HI_colorformats)
#define GLAD_EGL_IMG_context_priority (glad_egl_context.IMG_context_priority)
#define GLAD_EGL_IMG_image_plane_attribs (glad_egl_context.IMG_image_plane_attribs)
#define GLAD_EGL_KHR_cl_event (glad_egl_context.KHR_cl_event)
#define GLAD_EGL_KHR_cl_event2 (glad_egl_context.KHR_cl_event2)
#define GLAD_EGL_KHR_client_get_all_proc_addresses (glad_egl_context.KHR_client_get_all_proc_addresses)
#define GLAD_EGL_KHR_config_attribs (glad_egl_context.KHR_config_attribs)
#define GLAD_EGL_KHR_context_flush_control (glad_egl_context.KHR_context_flush_control)
#define GLAD_EGL_KHR_create_context (glad_egl_context.KHR_create_context)
#define GLAD_EGL_KHR_create_context_no_error (glad_egl_context.KHR_create_context_no_error)
#define GLAD_EGL_KHR_debug (glad_egl_context.KHR_debug)
#define GLAD_EGL_KHR_display_reference (glad_egl_context.KHR_display_reference)
#define GLAD_EGL_KHR_fence_sync (glad_egl_context.KHR_fence_sync)
#define GLAD_EGL_KHR_get_all_proc_addresses (glad_egl_context.KHR_get_all_proc_addresses)
#define GLAD_EGL_KHR_gl_colorspace (glad_egl_context.KHR_gl_colorspace)
#define GLAD_EGL_KHR_gl_renderbuffer_image (glad_egl_context.KHR_gl_renderbuffer_image)
#define GLAD_EGL_KHR_gl_texture_2D_image (glad_egl_context.KHR_gl_texture_2D_image)
#define GLAD_EGL_KHR_gl_texture_3D_image (glad_egl_context.KHR_gl_texture_3D_image)
#define GLAD_EGL_KHR_gl_texture_cubemap_image (glad_egl_context.KHR_gl_texture_cubemap_image)
#define GLAD_EGL_KHR_image (glad_egl_context.KHR_image)
#define GLAD_EGL_KHR_image_base (glad_egl_context.KHR_image_base)
#define GLAD_EGL_KHR_image_pixmap (glad_egl_context.KHR_image_pixmap)
#define GLAD_EGL_KHR_lock_surface (glad_egl_context.KHR_lock_surface)
#define GLAD_EGL_KHR_lock_surface2 (glad_egl_context.KHR_lock_surface2)
#define GLAD_EGL_KHR_lock_surface3 (glad_egl_context.KHR_lock_surface3)
#define GLAD_EGL_KHR_mutable_render_buffer (glad_egl_context.KHR_mutable_render_buffer)
#define GLAD_EGL_KHR_no_config_context (glad_egl_context.KHR_no_config_context)
#define GLAD_EGL_KHR_partial_update (glad_egl_context.KHR_partial_update)
#define GLAD_EGL_KHR_platform_android (glad_egl_context.KHR_platform_android)
#define GLAD_EGL_KHR_platform_gbm (glad_egl_context.KHR_platform_gbm)
#define GLAD_EGL_KHR_platform_wayland (glad_egl_context.KHR_platform_wayland)
#define GLAD_EGL_KHR_platform_x11 (glad_egl_context.KHR_platform_x11)
#define GLAD_EGL_KHR_reusable_sync (glad_egl_context.KHR_reusable_sync)
#define GLAD_EGL_KHR_stream (glad_egl_context.KHR_stream)
#define GLAD_EGL_KHR_stream_attrib (glad_egl_context.KHR_stream_attrib)
#define GLAD_EGL_KHR_stream_consumer_gltexture (glad_egl_context.KHR_stream_consumer_gltexture)
#define GLAD_EGL_KHR_stream_cross_process_fd (glad_egl_context.KHR_stream_cross_process_fd)
#define GLAD_EGL_KHR_stream_fifo (glad_egl_context.KHR_stream_fifo)
#define GLAD_EGL_KHR_stream_producer_aldatalocator (glad_egl_context.KHR_stream_producer_aldatalocator)
#define GLAD_EGL_KHR_stream_producer_eglsurface (glad_egl_context.KHR_stream_producer_eglsurface)
#define GLAD_EGL_KHR_surfaceless_context (glad_egl_context.KHR_surfaceless_context)
#define GLAD_EGL_KHR_swap_buffers_with_damage (glad_egl_context.KHR_swap_buffers_with_damage)
#define GLAD_EGL_KHR_vg_parent_image (glad_egl_context.KHR_vg_parent_image)
#define GLAD_EGL_KHR_wait_sync (glad_egl_context.KHR_wait_sync)
#define GLAD_EGL_MESA_drm_image (glad_egl_context.MESA_drm_image)
#define GLAD_EGL_MESA_image_dma_buf_export (glad_egl_context.MESA_image_dma_buf_export)
#define GLAD_EGL_MESA_platform_gbm (glad_egl_context.MESA_platform_gbm)
#define GLAD_EGL_MESA_platform_surfaceless (glad_egl_context.MESA_platform_surfaceless)
#define GLAD_EGL_MESA_query_driver (glad_egl_context.MESA_query_driver)
#define GLAD_EGL_NOK_swap_region (glad_egl_context.NOK_swap_region)
#define GLAD_EGL_NOK_swap_region2 (glad_egl_context.NOK_swap_region2)
#define GLAD_EGL_NOK_texture_from_pixmap (glad_egl_context.NOK_texture_from_pixmap)
#define GLAD_EGL_NV_3dvision_surface (glad_egl_context.NV_3dvision_surface)
#define GLAD_EGL_NV_context_priority_realtime (glad_egl_context.NV_context_priority_realtime)
#define GLAD_EGL_NV_coverage_sample (glad_egl_context.NV_coverage_sample)
#define GLAD_EGL_NV_coverage_sample_resolve (glad_egl_context.NV_coverage_sample_resolve)
#define GLAD_EGL_NV_cuda_event (glad_egl_context.NV_cuda_event)
#define GLAD_EGL_NV_depth_nonlinear (glad_egl_context.NV_depth_nonlinear)
#define GLAD_EGL_NV_device_cuda (glad_egl_context.NV_device_cuda)
#define GLAD_EGL_NV_native_query (glad_egl_context.NV_native_query)
#define GLAD_EGL_NV_post_convert_rounding (glad_egl_context.NV_post_convert_rounding)
#define GLAD_EGL_NV_post_sub_buffer (glad_egl_context.NV_post_sub_buffer)
#define GLAD_EGL_NV_quadruple_buffer (glad_egl_context.NV_quadruple_buffer)
#define GLAD_EGL_NV_robustness_video_memory_purge (glad_egl_context.NV_robustness_video_memory_purge)
#define GLAD_EGL_NV_stream_consumer_eglimage (glad_egl_context.NV_stream_consumer_eglimage)
#define GLAD_EGL_NV_stream_consumer_eglimage_use_scanout_attrib (glad_egl_context.NV_stream_consumer_eglimage_use_scanout_attrib)
#define GLAD_EGL_NV_stream_consumer_gltexture_yuv (glad_egl_context.NV_stream_consumer_gltexture_yuv)
#define GLAD_EGL_NV_stream_cross_display (glad_egl_context.NV_stream_cross_display)
#define GLAD_EGL_NV_stream_cross_object (glad_egl_context.NV_stream_cross_object)
#define GLAD_EGL_NV_stream_cross_partition (glad_egl_context.NV_stream_cross_partition)
#define GLAD_EGL_NV_stream_cross_process (glad_egl_context.NV_stream_cross_process)
#define GLAD_EGL_NV_stream_cross_system (glad_egl_context.NV_stream_cross_system)
#define GLAD_EGL_NV_stream_dma (glad_egl_context.NV_stream_dma)
#define GLAD_EGL_NV_stream_fifo_next (glad_egl_context.NV_stream_fifo_next)
#define GLAD_EGL_NV_stream_fifo_synchronous (glad_egl_context.NV_stream_fifo_synchronous)
#define GLAD_EGL_NV_stream_flush (glad_egl_context.NV_stream_flush)
#define GLAD_EGL_NV_stream_frame_limits (glad_egl_context.NV_stream_frame_limits)
#define GLAD_EGL_NV_stream_metadata (glad_egl_context.NV_stream_metadata)
#define GLAD_EGL_NV_stream_origin (glad_egl_context.NV_stream_origin)
#define GLAD_EGL_NV_stream_remote (glad_egl_context.NV_stream_remote)
#define GLAD_EGL_NV_stream_reset (glad_egl_context.NV_stream_reset)
#define GLAD_EGL_NV_stream_socket (glad_egl_context.NV_stream_socket)
#define GLAD_EGL_NV_stream_socket_inet (glad_egl_context.NV_stream_socket_inet)
#define GLAD_EGL_NV_stream_socket_unix (glad_egl_context.NV_stream_socket_unix)
#define GLAD_EGL_NV_stream_sync (glad_egl_context.NV_stream_sync)
#define GLAD_EGL_NV_sync (glad_egl_context.NV_sync)
#define GLAD_EGL_NV_system_time (glad_egl_context.NV_system_time)
#define GLAD_EGL_NV_triple_buffer (glad_egl_context.NV_triple_buffer)
#define GLAD_EGL_QNX_image_native_buffer (glad_egl_context.QNX_image_native_buffer)
#define GLAD_EGL_QNX_platform_screen (glad_egl_context.QNX_platform_screen)
#define GLAD_EGL_TIZEN_image_native_buffer (glad_egl_context.TIZEN_image_native_buffer)
#define GLAD_EGL_TIZEN_image_native_surface (glad_egl_context.TIZEN_image_native_surface)
#define GLAD_EGL_WL_bind_wayland_display (glad_egl_context.WL_bind_wayland_display)
#define GLAD_EGL_WL_create_wayland_buffer_from_image (glad_egl_context.WL_create_wayland_buffer_from_image)

#ifdef __INTELLISENSE__
void eglAcquireExternalContextANGLE(EGLDisplay dpy, EGLSurface drawAndRead);
EGLBoolean eglBindAPI(EGLenum api);
EGLBoolean eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer);
EGLBoolean eglBindWaylandDisplayWL(EGLDisplay dpy, struct wl_display * display);
EGLBoolean eglChooseConfig(EGLDisplay dpy, const EGLint * attrib_list, EGLConfig * configs, EGLint config_size, EGLint * num_config);
EGLBoolean eglClientSignalSyncEXT(EGLDisplay dpy, EGLSync sync, const EGLAttrib * attrib_list);
EGLint eglClientWaitSync(EGLDisplay dpy, EGLSync sync, EGLint flags, EGLTime timeout);
EGLint eglClientWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout);
EGLint eglClientWaitSyncNV(EGLSyncNV sync, EGLint flags, EGLTimeNV timeout);
EGLBoolean eglCompositorBindTexWindowEXT(EGLint external_win_id);
EGLBoolean eglCompositorSetContextAttributesEXT(EGLint external_ref_id, const EGLint * context_attributes, EGLint num_entries);
EGLBoolean eglCompositorSetContextListEXT(const EGLint * external_ref_ids, EGLint num_entries);
EGLBoolean eglCompositorSetSizeEXT(EGLint external_win_id, EGLint width, EGLint height);
EGLBoolean eglCompositorSetWindowAttributesEXT(EGLint external_win_id, const EGLint * window_attributes, EGLint num_entries);
EGLBoolean eglCompositorSetWindowListEXT(EGLint external_ref_id, const EGLint * external_win_ids, EGLint num_entries);
EGLBoolean eglCompositorSwapPolicyEXT(EGLint external_win_id, EGLint policy);
EGLBoolean eglCopyBuffers(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target);
void * eglCopyMetalSharedEventANGLE(EGLDisplay dpy, EGLSyncKHR sync);
EGLContext eglCreateContext(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint * attrib_list);
EGLImageKHR eglCreateDRMImageMESA(EGLDisplay dpy, const EGLint * attrib_list);
EGLDeviceEXT eglCreateDeviceANGLE(EGLint device_type, void * native_device, const EGLAttrib * attrib_list);
EGLSyncNV eglCreateFenceSyncNV(EGLDisplay dpy, EGLenum condition, const EGLint * attrib_list);
EGLImage eglCreateImage(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLAttrib * attrib_list);
EGLImageKHR eglCreateImageKHR(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint * attrib_list);
EGLClientBuffer eglCreateNativeClientBufferANDROID(const EGLint * attrib_list);
EGLSurface eglCreatePbufferFromClientBuffer(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint * attrib_list);
EGLSurface eglCreatePbufferSurface(EGLDisplay dpy, EGLConfig config, const EGLint * attrib_list);
EGLSurface eglCreatePixmapSurface(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint * attrib_list);
EGLSurface eglCreatePixmapSurfaceHI(EGLDisplay dpy, EGLConfig config, struct EGLClientPixmapHI * pixmap);
EGLSurface eglCreatePlatformPixmapSurface(EGLDisplay dpy, EGLConfig config, void * native_pixmap, const EGLAttrib * attrib_list);
EGLSurface eglCreatePlatformPixmapSurfaceEXT(EGLDisplay dpy, EGLConfig config, void * native_pixmap, const EGLint * attrib_list);
EGLSurface eglCreatePlatformWindowSurface(EGLDisplay dpy, EGLConfig config, void * native_window, const EGLAttrib * attrib_list);
EGLSurface eglCreatePlatformWindowSurfaceEXT(EGLDisplay dpy, EGLConfig config, void * native_window, const EGLint * attrib_list);
EGLStreamKHR eglCreateStreamAttribKHR(EGLDisplay dpy, const EGLAttrib * attrib_list);
EGLStreamKHR eglCreateStreamFromFileDescriptorKHR(EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor);
EGLStreamKHR eglCreateStreamKHR(EGLDisplay dpy, const EGLint * attrib_list);
EGLBoolean eglCreateStreamProducerD3DTextureANGLE(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib * attrib_list);
EGLSurface eglCreateStreamProducerSurfaceKHR(EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint * attrib_list);
EGLSyncKHR eglCreateStreamSyncNV(EGLDisplay dpy, EGLStreamKHR stream, EGLenum type, const EGLint * attrib_list);
EGLSync eglCreateSync(EGLDisplay dpy, EGLenum type, const EGLAttrib * attrib_list);
EGLSyncKHR eglCreateSync64KHR(EGLDisplay dpy, EGLenum type, const EGLAttribKHR * attrib_list);
EGLSyncKHR eglCreateSyncKHR(EGLDisplay dpy, EGLenum type, const EGLint * attrib_list);
struct wl_buffer * eglCreateWaylandBufferFromImageWL(EGLDisplay dpy, EGLImageKHR image);
EGLSurface eglCreateWindowSurface(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint * attrib_list);
EGLint eglDebugMessageControlKHR(EGLDEBUGPROCKHR callback, const EGLAttrib * attrib_list);
EGLBoolean eglDestroyContext(EGLDisplay dpy, EGLContext ctx);
EGLBoolean eglDestroyDisplayEXT(EGLDisplay dpy);
EGLBoolean eglDestroyImage(EGLDisplay dpy, EGLImage image);
EGLBoolean eglDestroyImageKHR(EGLDisplay dpy, EGLImageKHR image);
EGLBoolean eglDestroyStreamKHR(EGLDisplay dpy, EGLStreamKHR stream);
EGLBoolean eglDestroySurface(EGLDisplay dpy, EGLSurface surface);
EGLBoolean eglDestroySync(EGLDisplay dpy, EGLSync sync);
EGLBoolean eglDestroySyncKHR(EGLDisplay dpy, EGLSyncKHR sync);
EGLBoolean eglDestroySyncNV(EGLSyncNV sync);
EGLint eglDupNativeFenceFDANDROID(EGLDisplay dpy, EGLSyncKHR sync);
EGLBoolean eglExportDMABUFImageMESA(EGLDisplay dpy, EGLImageKHR image, int * fds, EGLint * strides, EGLint * offsets);
EGLBoolean eglExportDMABUFImageQueryMESA(EGLDisplay dpy, EGLImageKHR image, int * fourcc, int * num_planes, EGLuint64KHR * modifiers);
EGLBoolean eglExportDRMImageMESA(EGLDisplay dpy, EGLImageKHR image, EGLint * name, EGLint * handle, EGLint * stride);
EGLBoolean eglExportVkImageANGLE(EGLDisplay dpy, EGLImage image, void * vk_image, void * vk_image_create_info);
EGLBoolean eglFenceNV(EGLSyncNV sync);
void eglForceGPUSwitchANGLE(EGLDisplay dpy, EGLint gpuIDHigh, EGLint gpuIDLow);
EGLBoolean eglGetCompositorTimingANDROID(EGLDisplay dpy, EGLSurface surface, EGLint numTimestamps, const EGLint * names, EGLnsecsANDROID * values);
EGLBoolean eglGetCompositorTimingSupportedANDROID(EGLDisplay dpy, EGLSurface surface, EGLint name);
EGLBoolean eglGetConfigAttrib(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint * value);
EGLBoolean eglGetConfigs(EGLDisplay dpy, EGLConfig * configs, EGLint config_size, EGLint * num_config);
EGLContext eglGetCurrentContext(void);
EGLDisplay eglGetCurrentDisplay(void);
EGLSurface eglGetCurrentSurface(EGLint readdraw);
EGLDisplay eglGetDisplay(EGLNativeDisplayType display_id);
char * eglGetDisplayDriverConfig(EGLDisplay dpy);
const char * eglGetDisplayDriverName(EGLDisplay dpy);
EGLint eglGetError(void);
EGLBoolean eglGetFrameTimestampSupportedANDROID(EGLDisplay dpy, EGLSurface surface, EGLint timestamp);
EGLBoolean eglGetFrameTimestampsANDROID(EGLDisplay dpy, EGLSurface surface, EGLuint64KHR frameId, EGLint numTimestamps, const EGLint * timestamps, EGLnsecsANDROID * values);
EGLBoolean eglGetMscRateANGLE(EGLDisplay dpy, EGLSurface surface, EGLint * numerator, EGLint * denominator);
EGLClientBuffer eglGetNativeClientBufferANDROID(const struct AHardwareBuffer * buffer);
EGLBoolean eglGetNextFrameIdANDROID(EGLDisplay dpy, EGLSurface surface, EGLuint64KHR * frameId);
EGLBoolean eglGetOutputLayersEXT(EGLDisplay dpy, const EGLAttrib * attrib_list, EGLOutputLayerEXT * layers, EGLint max_layers, EGLint * num_layers);
EGLBoolean eglGetOutputPortsEXT(EGLDisplay dpy, const EGLAttrib * attrib_list, EGLOutputPortEXT * ports, EGLint max_ports, EGLint * num_ports);
EGLDisplay eglGetPlatformDisplay(EGLenum platform, void * native_display, const EGLAttrib * attrib_list);
EGLDisplay eglGetPlatformDisplayEXT(EGLenum platform, void * native_display, const EGLint * attrib_list);
__eglMustCastToProperFunctionPointerType eglGetProcAddress(const char * procname);
EGLNativeFileDescriptorKHR eglGetStreamFileDescriptorKHR(EGLDisplay dpy, EGLStreamKHR stream);
EGLBoolean eglGetSyncAttrib(EGLDisplay dpy, EGLSync sync, EGLint attribute, EGLAttrib * value);
EGLBoolean eglGetSyncAttribKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint * value);
EGLBoolean eglGetSyncAttribNV(EGLSyncNV sync, EGLint attribute, EGLint * value);
EGLBoolean eglGetSyncValuesCHROMIUM(EGLDisplay dpy, EGLSurface surface, EGLuint64KHR * ust, EGLuint64KHR * msc, EGLuint64KHR * sbc);
EGLuint64NV eglGetSystemTimeFrequencyNV(void);
EGLuint64NV eglGetSystemTimeNV(void);
void eglHandleGPUSwitchANGLE(EGLDisplay dpy);
EGLBoolean eglInitialize(EGLDisplay dpy, EGLint * major, EGLint * minor);
EGLint eglLabelObjectKHR(EGLDisplay display, EGLenum objectType, EGLObjectKHR object, EGLLabelKHR label);
EGLBoolean eglLockSurfaceKHR(EGLDisplay dpy, EGLSurface surface, const EGLint * attrib_list);
EGLBoolean eglMakeCurrent(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx);
EGLBoolean eglOutputLayerAttribEXT(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib value);
EGLBoolean eglOutputPortAttribEXT(EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib value);
EGLBoolean eglPostSubBufferNV(EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height);
EGLBoolean eglPrepareSwapBuffersANGLE(EGLDisplay dpy, EGLSurface surface);
EGLBoolean eglPresentationTimeANDROID(EGLDisplay dpy, EGLSurface surface, EGLnsecsANDROID time);
EGLint eglProgramCacheGetAttribANGLE(EGLDisplay dpy, EGLenum attrib);
void eglProgramCachePopulateANGLE(EGLDisplay dpy, const void * key, EGLint keysize, const void * binary, EGLint binarysize);
void eglProgramCacheQueryANGLE(EGLDisplay dpy, EGLint index, void * key, EGLint * keysize, void * binary, EGLint * binarysize);
EGLint eglProgramCacheResizeANGLE(EGLDisplay dpy, EGLint limit, EGLint mode);
EGLenum eglQueryAPI(void);
EGLBoolean eglQueryContext(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint * value);
EGLBoolean eglQueryDebugKHR(EGLint attribute, EGLAttrib * value);
EGLBoolean eglQueryDeviceAttribEXT(EGLDeviceEXT device, EGLint attribute, EGLAttrib * value);
EGLBoolean eglQueryDeviceBinaryEXT(EGLDeviceEXT device, EGLint name, EGLint max_size, void * value, EGLint * size);
const char * eglQueryDeviceStringEXT(EGLDeviceEXT device, EGLint name);
EGLBoolean eglQueryDevicesEXT(EGLint max_devices, EGLDeviceEXT * devices, EGLint * num_devices);
EGLBoolean eglQueryDisplayAttribANGLE(EGLDisplay dpy, EGLint attribute, EGLAttrib * value);
EGLBoolean eglQueryDisplayAttribEXT(EGLDisplay dpy, EGLint attribute, EGLAttrib * value);
EGLBoolean eglQueryDisplayAttribKHR(EGLDisplay dpy, EGLint name, EGLAttrib * value);
EGLBoolean eglQueryDisplayAttribNV(EGLDisplay dpy, EGLint attribute, EGLAttrib * value);
EGLBoolean eglQueryDmaBufFormatsEXT(EGLDisplay dpy, EGLint max_formats, EGLint * formats, EGLint * num_formats);
EGLBoolean eglQueryDmaBufModifiersEXT(EGLDisplay dpy, EGLint format, EGLint max_modifiers, EGLuint64KHR * modifiers, EGLBoolean * external_only, EGLint * num_modifiers);
EGLBoolean eglQueryNativeDisplayNV(EGLDisplay dpy, EGLNativeDisplayType * display_id);
EGLBoolean eglQueryNativePixmapNV(EGLDisplay dpy, EGLSurface surf, EGLNativePixmapType * pixmap);
EGLBoolean eglQueryNativeWindowNV(EGLDisplay dpy, EGLSurface surf, EGLNativeWindowType * window);
EGLBoolean eglQueryOutputLayerAttribEXT(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib * value);
const char * eglQueryOutputLayerStringEXT(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint name);
EGLBoolean eglQueryOutputPortAttribEXT(EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib * value);
const char * eglQueryOutputPortStringEXT(EGLDisplay dpy, EGLOutputPortEXT port, EGLint name);
EGLBoolean eglQueryStreamAttribKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLAttrib * value);
EGLint eglQueryStreamConsumerEventNV(EGLDisplay dpy, EGLStreamKHR stream, EGLTime timeout, EGLenum * event, EGLAttrib * aux);
EGLBoolean eglQueryStreamKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint * value);
EGLBoolean eglQueryStreamMetadataNV(EGLDisplay dpy, EGLStreamKHR stream, EGLenum name, EGLint n, EGLint offset, EGLint size, void * data);
EGLBoolean eglQueryStreamTimeKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLTimeKHR * value);
EGLBoolean eglQueryStreamu64KHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLuint64KHR * value);
const char * eglQueryString(EGLDisplay dpy, EGLint name);
const char * eglQueryStringiANGLE(EGLDisplay dpy, EGLint name, EGLint index);
EGLBoolean eglQuerySupportedCompressionRatesEXT(EGLDisplay dpy, EGLConfig config, const EGLAttrib * attrib_list, EGLint * rates, EGLint rate_size, EGLint * num_rates);
EGLBoolean eglQuerySurface(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint * value);
EGLBoolean eglQuerySurface64KHR(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLAttribKHR * value);
EGLBoolean eglQuerySurfacePointerANGLE(EGLDisplay dpy, EGLSurface surface, EGLint attribute, void ** value);
EGLBoolean eglQueryWaylandBufferWL(EGLDisplay dpy, struct wl_resource * buffer, EGLint attribute, EGLint * value);
void eglReacquireHighPowerGPUANGLE(EGLDisplay dpy, EGLContext ctx);
EGLBoolean eglReleaseDeviceANGLE(EGLDeviceEXT device);
void eglReleaseExternalContextANGLE(EGLDisplay dpy);
void eglReleaseHighPowerGPUANGLE(EGLDisplay dpy, EGLContext ctx);
EGLBoolean eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer);
EGLBoolean eglReleaseThread(void);
EGLBoolean eglResetStreamNV(EGLDisplay dpy, EGLStreamKHR stream);
void eglSetBlobCacheFuncsANDROID(EGLDisplay dpy, EGLSetBlobFuncANDROID set, EGLGetBlobFuncANDROID get);
EGLBoolean eglSetDamageRegionKHR(EGLDisplay dpy, EGLSurface surface, EGLint * rects, EGLint n_rects);
EGLBoolean eglSetStreamAttribKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLAttrib value);
EGLBoolean eglSetStreamMetadataNV(EGLDisplay dpy, EGLStreamKHR stream, EGLint n, EGLint offset, EGLint size, const void * data);
void eglSetValidationEnabledANGLE(EGLBoolean validationState);
EGLBoolean eglSignalSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode);
EGLBoolean eglSignalSyncNV(EGLSyncNV sync, EGLenum mode);
EGLBoolean eglStreamAcquireImageNV(EGLDisplay dpy, EGLStreamKHR stream, EGLImage * pImage, EGLSync sync);
EGLBoolean eglStreamAttribKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint value);
EGLBoolean eglStreamConsumerAcquireAttribKHR(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib * attrib_list);
EGLBoolean eglStreamConsumerAcquireKHR(EGLDisplay dpy, EGLStreamKHR stream);
EGLBoolean eglStreamConsumerGLTextureExternalAttribsNV(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib * attrib_list);
EGLBoolean eglStreamConsumerGLTextureExternalKHR(EGLDisplay dpy, EGLStreamKHR stream);
EGLBoolean eglStreamConsumerOutputEXT(EGLDisplay dpy, EGLStreamKHR stream, EGLOutputLayerEXT layer);
EGLBoolean eglStreamConsumerReleaseAttribKHR(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib * attrib_list);
EGLBoolean eglStreamConsumerReleaseKHR(EGLDisplay dpy, EGLStreamKHR stream);
EGLBoolean eglStreamFlushNV(EGLDisplay dpy, EGLStreamKHR stream);
EGLBoolean eglStreamImageConsumerConnectNV(EGLDisplay dpy, EGLStreamKHR stream, EGLint num_modifiers, const EGLuint64KHR * modifiers, const EGLAttrib * attrib_list);
EGLBoolean eglStreamPostD3DTextureANGLE(EGLDisplay dpy, EGLStreamKHR stream, void * texture, const EGLAttrib * attrib_list);
EGLBoolean eglStreamReleaseImageNV(EGLDisplay dpy, EGLStreamKHR stream, EGLImage image, EGLSync sync);
EGLBoolean eglSurfaceAttrib(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value);
EGLBoolean eglSwapBuffers(EGLDisplay dpy, EGLSurface surface);
EGLBoolean eglSwapBuffersRegion2NOK(EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint * rects);
EGLBoolean eglSwapBuffersRegionNOK(EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint * rects);
EGLBoolean eglSwapBuffersWithDamageEXT(EGLDisplay dpy, EGLSurface surface, const EGLint * rects, EGLint n_rects);
EGLBoolean eglSwapBuffersWithDamageKHR(EGLDisplay dpy, EGLSurface surface, const EGLint * rects, EGLint n_rects);
EGLBoolean eglSwapBuffersWithFrameTokenANGLE(EGLDisplay dpy, EGLSurface surface, EGLFrameTokenANGLE frametoken);
EGLBoolean eglSwapInterval(EGLDisplay dpy, EGLint interval);
EGLBoolean eglTerminate(EGLDisplay dpy);
EGLBoolean eglUnbindWaylandDisplayWL(EGLDisplay dpy, struct wl_display * display);
EGLBoolean eglUnlockSurfaceKHR(EGLDisplay dpy, EGLSurface surface);
EGLBoolean eglUnsignalSyncEXT(EGLDisplay dpy, EGLSync sync, const EGLAttrib * attrib_list);
EGLBoolean eglWaitClient(void);
EGLBoolean eglWaitGL(void);
EGLBoolean eglWaitNative(EGLint engine);
EGLBoolean eglWaitSync(EGLDisplay dpy, EGLSync sync, EGLint flags);
EGLint eglWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags);
void eglWaitUntilWorkScheduledANGLE(EGLDisplay dpy);

#else
#define eglAcquireExternalContextANGLE (glad_egl_context.AcquireExternalContextANGLE)
#define eglBindAPI (glad_egl_context.BindAPI)
#define eglBindTexImage (glad_egl_context.BindTexImage)
#define eglBindWaylandDisplayWL (glad_egl_context.BindWaylandDisplayWL)
#define eglChooseConfig (glad_egl_context.ChooseConfig)
#define eglClientSignalSyncEXT (glad_egl_context.ClientSignalSyncEXT)
#define eglClientWaitSync (glad_egl_context.ClientWaitSync)
#define eglClientWaitSyncKHR (glad_egl_context.ClientWaitSyncKHR)
#define eglClientWaitSyncNV (glad_egl_context.ClientWaitSyncNV)
#define eglCompositorBindTexWindowEXT (glad_egl_context.CompositorBindTexWindowEXT)
#define eglCompositorSetContextAttributesEXT (glad_egl_context.CompositorSetContextAttributesEXT)
#define eglCompositorSetContextListEXT (glad_egl_context.CompositorSetContextListEXT)
#define eglCompositorSetSizeEXT (glad_egl_context.CompositorSetSizeEXT)
#define eglCompositorSetWindowAttributesEXT (glad_egl_context.CompositorSetWindowAttributesEXT)
#define eglCompositorSetWindowListEXT (glad_egl_context.CompositorSetWindowListEXT)
#define eglCompositorSwapPolicyEXT (glad_egl_context.CompositorSwapPolicyEXT)
#define eglCopyBuffers (glad_egl_context.CopyBuffers)
#define eglCopyMetalSharedEventANGLE (glad_egl_context.CopyMetalSharedEventANGLE)
#define eglCreateContext (glad_egl_context.CreateContext)
#define eglCreateDRMImageMESA (glad_egl_context.CreateDRMImageMESA)
#define eglCreateDeviceANGLE (glad_egl_context.CreateDeviceANGLE)
#define eglCreateFenceSyncNV (glad_egl_context.CreateFenceSyncNV)
#define eglCreateImage (glad_egl_context.CreateImage)
#define eglCreateImageKHR (glad_egl_context.CreateImageKHR)
#define eglCreateNativeClientBufferANDROID (glad_egl_context.CreateNativeClientBufferANDROID)
#define eglCreatePbufferFromClientBuffer (glad_egl_context.CreatePbufferFromClientBuffer)
#define eglCreatePbufferSurface (glad_egl_context.CreatePbufferSurface)
#define eglCreatePixmapSurface (glad_egl_context.CreatePixmapSurface)
#define eglCreatePixmapSurfaceHI (glad_egl_context.CreatePixmapSurfaceHI)
#define eglCreatePlatformPixmapSurface (glad_egl_context.CreatePlatformPixmapSurface)
#define eglCreatePlatformPixmapSurfaceEXT (glad_egl_context.CreatePlatformPixmapSurfaceEXT)
#define eglCreatePlatformWindowSurface (glad_egl_context.CreatePlatformWindowSurface)
#define eglCreatePlatformWindowSurfaceEXT (glad_egl_context.CreatePlatformWindowSurfaceEXT)
#define eglCreateStreamAttribKHR (glad_egl_context.CreateStreamAttribKHR)
#define eglCreateStreamFromFileDescriptorKHR (glad_egl_context.CreateStreamFromFileDescriptorKHR)
#define eglCreateStreamKHR (glad_egl_context.CreateStreamKHR)
#define eglCreateStreamProducerD3DTextureANGLE (glad_egl_context.CreateStreamProducerD3DTextureANGLE)
#define eglCreateStreamProducerSurfaceKHR (glad_egl_context.CreateStreamProducerSurfaceKHR)
#define eglCreateStreamSyncNV (glad_egl_context.CreateStreamSyncNV)
#define eglCreateSync (glad_egl_context.CreateSync)
#define eglCreateSync64KHR (glad_egl_context.CreateSync64KHR)
#define eglCreateSyncKHR (glad_egl_context.CreateSyncKHR)
#define eglCreateWaylandBufferFromImageWL (glad_egl_context.CreateWaylandBufferFromImageWL)
#define eglCreateWindowSurface (glad_egl_context.CreateWindowSurface)
#define eglDebugMessageControlKHR (glad_egl_context.DebugMessageControlKHR)
#define eglDestroyContext (glad_egl_context.DestroyContext)
#define eglDestroyDisplayEXT (glad_egl_context.DestroyDisplayEXT)
#define eglDestroyImage (glad_egl_context.DestroyImage)
#define eglDestroyImageKHR (glad_egl_context.DestroyImageKHR)
#define eglDestroyStreamKHR (glad_egl_context.DestroyStreamKHR)
#define eglDestroySurface (glad_egl_context.DestroySurface)
#define eglDestroySync (glad_egl_context.DestroySync)
#define eglDestroySyncKHR (glad_egl_context.DestroySyncKHR)
#define eglDestroySyncNV (glad_egl_context.DestroySyncNV)
#define eglDupNativeFenceFDANDROID (glad_egl_context.DupNativeFenceFDANDROID)
#define eglExportDMABUFImageMESA (glad_egl_context.ExportDMABUFImageMESA)
#define eglExportDMABUFImageQueryMESA (glad_egl_context.ExportDMABUFImageQueryMESA)
#define eglExportDRMImageMESA (glad_egl_context.ExportDRMImageMESA)
#define eglExportVkImageANGLE (glad_egl_context.ExportVkImageANGLE)
#define eglFenceNV (glad_egl_context.FenceNV)
#define eglForceGPUSwitchANGLE (glad_egl_context.ForceGPUSwitchANGLE)
#define eglGetCompositorTimingANDROID (glad_egl_context.GetCompositorTimingANDROID)
#define eglGetCompositorTimingSupportedANDROID (glad_egl_context.GetCompositorTimingSupportedANDROID)
#define eglGetConfigAttrib (glad_egl_context.GetConfigAttrib)
#define eglGetConfigs (glad_egl_context.GetConfigs)
#define eglGetCurrentContext (glad_egl_context.GetCurrentContext)
#define eglGetCurrentDisplay (glad_egl_context.GetCurrentDisplay)
#define eglGetCurrentSurface (glad_egl_context.GetCurrentSurface)
#define eglGetDisplay (glad_egl_context.GetDisplay)
#define eglGetDisplayDriverConfig (glad_egl_context.GetDisplayDriverConfig)
#define eglGetDisplayDriverName (glad_egl_context.GetDisplayDriverName)
#define eglGetError (glad_egl_context.GetError)
#define eglGetFrameTimestampSupportedANDROID (glad_egl_context.GetFrameTimestampSupportedANDROID)
#define eglGetFrameTimestampsANDROID (glad_egl_context.GetFrameTimestampsANDROID)
#define eglGetMscRateANGLE (glad_egl_context.GetMscRateANGLE)
#define eglGetNativeClientBufferANDROID (glad_egl_context.GetNativeClientBufferANDROID)
#define eglGetNextFrameIdANDROID (glad_egl_context.GetNextFrameIdANDROID)
#define eglGetOutputLayersEXT (glad_egl_context.GetOutputLayersEXT)
#define eglGetOutputPortsEXT (glad_egl_context.GetOutputPortsEXT)
#define eglGetPlatformDisplay (glad_egl_context.GetPlatformDisplay)
#define eglGetPlatformDisplayEXT (glad_egl_context.GetPlatformDisplayEXT)
#define eglGetProcAddress (glad_egl_context.GetProcAddress)
#define eglGetStreamFileDescriptorKHR (glad_egl_context.GetStreamFileDescriptorKHR)
#define eglGetSyncAttrib (glad_egl_context.GetSyncAttrib)
#define eglGetSyncAttribKHR (glad_egl_context.GetSyncAttribKHR)
#define eglGetSyncAttribNV (glad_egl_context.GetSyncAttribNV)
#define eglGetSyncValuesCHROMIUM (glad_egl_context.GetSyncValuesCHROMIUM)
#define eglGetSystemTimeFrequencyNV (glad_egl_context.GetSystemTimeFrequencyNV)
#define eglGetSystemTimeNV (glad_egl_context.GetSystemTimeNV)
#define eglHandleGPUSwitchANGLE (glad_egl_context.HandleGPUSwitchANGLE)
#define eglInitialize (glad_egl_context.Initialize)
#define eglLabelObjectKHR (glad_egl_context.LabelObjectKHR)
#define eglLockSurfaceKHR (glad_egl_context.LockSurfaceKHR)
#define eglMakeCurrent (glad_egl_context.MakeCurrent)
#define eglOutputLayerAttribEXT (glad_egl_context.OutputLayerAttribEXT)
#define eglOutputPortAttribEXT (glad_egl_context.OutputPortAttribEXT)
#define eglPostSubBufferNV (glad_egl_context.PostSubBufferNV)
#define eglPrepareSwapBuffersANGLE (glad_egl_context.PrepareSwapBuffersANGLE)
#define eglPresentationTimeANDROID (glad_egl_context.PresentationTimeANDROID)
#define eglProgramCacheGetAttribANGLE (glad_egl_context.ProgramCacheGetAttribANGLE)
#define eglProgramCachePopulateANGLE (glad_egl_context.ProgramCachePopulateANGLE)
#define eglProgramCacheQueryANGLE (glad_egl_context.ProgramCacheQueryANGLE)
#define eglProgramCacheResizeANGLE (glad_egl_context.ProgramCacheResizeANGLE)
#define eglQueryAPI (glad_egl_context.QueryAPI)
#define eglQueryContext (glad_egl_context.QueryContext)
#define eglQueryDebugKHR (glad_egl_context.QueryDebugKHR)
#define eglQueryDeviceAttribEXT (glad_egl_context.QueryDeviceAttribEXT)
#define eglQueryDeviceBinaryEXT (glad_egl_context.QueryDeviceBinaryEXT)
#define eglQueryDeviceStringEXT (glad_egl_context.QueryDeviceStringEXT)
#define eglQueryDevicesEXT (glad_egl_context.QueryDevicesEXT)
#define eglQueryDisplayAttribANGLE (glad_egl_context.QueryDisplayAttribANGLE)
#define eglQueryDisplayAttribEXT (glad_egl_context.QueryDisplayAttribEXT)
#define eglQueryDisplayAttribKHR (glad_egl_context.QueryDisplayAttribKHR)
#define eglQueryDisplayAttribNV (glad_egl_context.QueryDisplayAttribNV)
#define eglQueryDmaBufFormatsEXT (glad_egl_context.QueryDmaBufFormatsEXT)
#define eglQueryDmaBufModifiersEXT (glad_egl_context.QueryDmaBufModifiersEXT)
#define eglQueryNativeDisplayNV (glad_egl_context.QueryNativeDisplayNV)
#define eglQueryNativePixmapNV (glad_egl_context.QueryNativePixmapNV)
#define eglQueryNativeWindowNV (glad_egl_context.QueryNativeWindowNV)
#define eglQueryOutputLayerAttribEXT (glad_egl_context.QueryOutputLayerAttribEXT)
#define eglQueryOutputLayerStringEXT (glad_egl_context.QueryOutputLayerStringEXT)
#define eglQueryOutputPortAttribEXT (glad_egl_context.QueryOutputPortAttribEXT)
#define eglQueryOutputPortStringEXT (glad_egl_context.QueryOutputPortStringEXT)
#define eglQueryStreamAttribKHR (glad_egl_context.QueryStreamAttribKHR)
#define eglQueryStreamConsumerEventNV (glad_egl_context.QueryStreamConsumerEventNV)
#define eglQueryStreamKHR (glad_egl_context.QueryStreamKHR)
#define eglQueryStreamMetadataNV (glad_egl_context.QueryStreamMetadataNV)
#define eglQueryStreamTimeKHR (glad_egl_context.QueryStreamTimeKHR)
#define eglQueryStreamu64KHR (glad_egl_context.QueryStreamu64KHR)
#define eglQueryString (glad_egl_context.QueryString)
#define eglQueryStringiANGLE (glad_egl_context.QueryStringiANGLE)
#define eglQuerySupportedCompressionRatesEXT (glad_egl_context.QuerySupportedCompressionRatesEXT)
#define eglQuerySurface (glad_egl_context.QuerySurface)
#define eglQuerySurface64KHR (glad_egl_context.QuerySurface64KHR)
#define eglQuerySurfacePointerANGLE (glad_egl_context.QuerySurfacePointerANGLE)
#define eglQueryWaylandBufferWL (glad_egl_context.QueryWaylandBufferWL)
#define eglReacquireHighPowerGPUANGLE (glad_egl_context.ReacquireHighPowerGPUANGLE)
#define eglReleaseDeviceANGLE (glad_egl_context.ReleaseDeviceANGLE)
#define eglReleaseExternalContextANGLE (glad_egl_context.ReleaseExternalContextANGLE)
#define eglReleaseHighPowerGPUANGLE (glad_egl_context.ReleaseHighPowerGPUANGLE)
#define eglReleaseTexImage (glad_egl_context.ReleaseTexImage)
#define eglReleaseThread (glad_egl_context.ReleaseThread)
#define eglResetStreamNV (glad_egl_context.ResetStreamNV)
#define eglSetBlobCacheFuncsANDROID (glad_egl_context.SetBlobCacheFuncsANDROID)
#define eglSetDamageRegionKHR (glad_egl_context.SetDamageRegionKHR)
#define eglSetStreamAttribKHR (glad_egl_context.SetStreamAttribKHR)
#define eglSetStreamMetadataNV (glad_egl_context.SetStreamMetadataNV)
#define eglSetValidationEnabledANGLE (glad_egl_context.SetValidationEnabledANGLE)
#define eglSignalSyncKHR (glad_egl_context.SignalSyncKHR)
#define eglSignalSyncNV (glad_egl_context.SignalSyncNV)
#define eglStreamAcquireImageNV (glad_egl_context.StreamAcquireImageNV)
#define eglStreamAttribKHR (glad_egl_context.StreamAttribKHR)
#define eglStreamConsumerAcquireAttribKHR (glad_egl_context.StreamConsumerAcquireAttribKHR)
#define eglStreamConsumerAcquireKHR (glad_egl_context.StreamConsumerAcquireKHR)
#define eglStreamConsumerGLTextureExternalAttribsNV (glad_egl_context.StreamConsumerGLTextureExternalAttribsNV)
#define eglStreamConsumerGLTextureExternalKHR (glad_egl_context.StreamConsumerGLTextureExternalKHR)
#define eglStreamConsumerOutputEXT (glad_egl_context.StreamConsumerOutputEXT)
#define eglStreamConsumerReleaseAttribKHR (glad_egl_context.StreamConsumerReleaseAttribKHR)
#define eglStreamConsumerReleaseKHR (glad_egl_context.StreamConsumerReleaseKHR)
#define eglStreamFlushNV (glad_egl_context.StreamFlushNV)
#define eglStreamImageConsumerConnectNV (glad_egl_context.StreamImageConsumerConnectNV)
#define eglStreamPostD3DTextureANGLE (glad_egl_context.StreamPostD3DTextureANGLE)
#define eglStreamReleaseImageNV (glad_egl_context.StreamReleaseImageNV)
#define eglSurfaceAttrib (glad_egl_context.SurfaceAttrib)
#define eglSwapBuffers (glad_egl_context.SwapBuffers)
#define eglSwapBuffersRegion2NOK (glad_egl_context.SwapBuffersRegion2NOK)
#define eglSwapBuffersRegionNOK (glad_egl_context.SwapBuffersRegionNOK)
#define eglSwapBuffersWithDamageEXT (glad_egl_context.SwapBuffersWithDamageEXT)
#define eglSwapBuffersWithDamageKHR (glad_egl_context.SwapBuffersWithDamageKHR)
#define eglSwapBuffersWithFrameTokenANGLE (glad_egl_context.SwapBuffersWithFrameTokenANGLE)
#define eglSwapInterval (glad_egl_context.SwapInterval)
#define eglTerminate (glad_egl_context.Terminate)
#define eglUnbindWaylandDisplayWL (glad_egl_context.UnbindWaylandDisplayWL)
#define eglUnlockSurfaceKHR (glad_egl_context.UnlockSurfaceKHR)
#define eglUnsignalSyncEXT (glad_egl_context.UnsignalSyncEXT)
#define eglWaitClient (glad_egl_context.WaitClient)
#define eglWaitGL (glad_egl_context.WaitGL)
#define eglWaitNative (glad_egl_context.WaitNative)
#define eglWaitSync (glad_egl_context.WaitSync)
#define eglWaitSyncKHR (glad_egl_context.WaitSyncKHR)
#define eglWaitUntilWorkScheduledANGLE (glad_egl_context.WaitUntilWorkScheduledANGLE)
#endif


GLAD_API_CALL GladEGLContext* gladGetEGLContext(void);
GLAD_API_CALL void gladSetEGLContext(GladEGLContext *context);


GLAD_API_CALL int gladLoadEGLContextUserPtr(GladEGLContext *context, EGLDisplay display, GLADuserptrloadfunc load, void *userptr);
GLAD_API_CALL int gladLoadEGLContext(GladEGLContext *context, EGLDisplay display, GLADloadfunc load);

GLAD_API_CALL int gladLoadEGLUserPtr(EGLDisplay display, GLADuserptrloadfunc load, void *userptr);
GLAD_API_CALL int gladLoadEGL(EGLDisplay display, GLADloadfunc load);

#ifdef GLAD_EGL

GLAD_API_CALL int gladLoaderLoadEGLContext(GladEGLContext *context, EGLDisplay display);
GLAD_API_CALL void gladLoaderUnloadEGLContext(GladEGLContext *context);
GLAD_API_CALL void gladLoaderResetEGLContext(GladEGLContext *context);
GLAD_API_CALL int gladLoaderLoadEGL(EGLDisplay display);
GLAD_API_CALL void gladLoaderUnloadEGL(void);
GLAD_API_CALL void gladLoaderResetEGL(void);

#endif

#ifdef __cplusplus
}
#endif
#endif
