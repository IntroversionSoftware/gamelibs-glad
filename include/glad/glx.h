/**
 * Loader generated by glad 2.0.8 on -
 *
 * SPDX-License-Identifier: (WTFPL OR CC0-1.0) AND Apache-2.0
 *
 * Generator: C/C++
 * Specification: glx
 * Extensions: 66
 *
 * APIs:
 *  - glx=1.4
 *
 * Options:
 *  - ALIAS = True
 *  - HEADER_ONLY = False
 *  - LOADER = True
 *  - MX = True
 *  - MX_GLOBAL = True
 *  - USE_PFN_RANGES = True
 *
 * Commandline:
 *    --merge --api='glx=1.4' --extensions='GLX_3DFX_multisample,GLX_AMD_gpu_association,GLX_ARB_context_flush_control,GLX_ARB_create_context,GLX_ARB_create_context_no_error,GLX_ARB_create_context_profile,GLX_ARB_create_context_robustness,GLX_ARB_fbconfig_float,GLX_ARB_framebuffer_sRGB,GLX_ARB_get_proc_address,GLX_ARB_multisample,GLX_ARB_robustness_application_isolation,GLX_ARB_robustness_share_group_isolation,GLX_ARB_vertex_buffer_object,GLX_EXT_buffer_age,GLX_EXT_context_priority,GLX_EXT_create_context_es2_profile,GLX_EXT_create_context_es_profile,GLX_EXT_fbconfig_packed_float,GLX_EXT_framebuffer_sRGB,GLX_EXT_get_drawable_type,GLX_EXT_import_context,GLX_EXT_libglvnd,GLX_EXT_no_config_context,GLX_EXT_stereo_tree,GLX_EXT_swap_control,GLX_EXT_swap_control_tear,GLX_EXT_texture_from_pixmap,GLX_EXT_visual_info,GLX_EXT_visual_rating,GLX_INTEL_swap_event,GLX_MESA_agp_offset,GLX_MESA_copy_sub_buffer,GLX_MESA_pixmap_colormap,GLX_MESA_query_renderer,GLX_MESA_release_buffers,GLX_MESA_set_3dfx_mode,GLX_MESA_swap_control,GLX_NV_copy_buffer,GLX_NV_copy_image,GLX_NV_delay_before_swap,GLX_NV_float_buffer,GLX_NV_multigpu_context,GLX_NV_multisample_coverage,GLX_NV_present_video,GLX_NV_robustness_video_memory_purge,GLX_NV_swap_group,GLX_NV_video_capture,GLX_NV_video_out,GLX_OML_swap_method,GLX_OML_sync_control,GLX_SGIS_blended_overlay,GLX_SGIS_multisample,GLX_SGIS_shared_multisample,GLX_SGIX_fbconfig,GLX_SGIX_hyperpipe,GLX_SGIX_pbuffer,GLX_SGIX_swap_barrier,GLX_SGIX_swap_group,GLX_SGIX_video_resize,GLX_SGIX_visual_select_group,GLX_SGI_cushion,GLX_SGI_make_current_read,GLX_SGI_swap_control,GLX_SGI_video_sync,GLX_SUN_get_transparent_index' c --alias --loader --mx --mx-global --use-pfn-ranges
 *
 * Online:
 *    http://glad.sh/#api=glx%3D1.4&extensions=GLX_3DFX_multisample%2CGLX_AMD_gpu_association%2CGLX_ARB_context_flush_control%2CGLX_ARB_create_context%2CGLX_ARB_create_context_no_error%2CGLX_ARB_create_context_profile%2CGLX_ARB_create_context_robustness%2CGLX_ARB_fbconfig_float%2CGLX_ARB_framebuffer_sRGB%2CGLX_ARB_get_proc_address%2CGLX_ARB_multisample%2CGLX_ARB_robustness_application_isolation%2CGLX_ARB_robustness_share_group_isolation%2CGLX_ARB_vertex_buffer_object%2CGLX_EXT_buffer_age%2CGLX_EXT_context_priority%2CGLX_EXT_create_context_es2_profile%2CGLX_EXT_create_context_es_profile%2CGLX_EXT_fbconfig_packed_float%2CGLX_EXT_framebuffer_sRGB%2CGLX_EXT_get_drawable_type%2CGLX_EXT_import_context%2CGLX_EXT_libglvnd%2CGLX_EXT_no_config_context%2CGLX_EXT_stereo_tree%2CGLX_EXT_swap_control%2CGLX_EXT_swap_control_tear%2CGLX_EXT_texture_from_pixmap%2CGLX_EXT_visual_info%2CGLX_EXT_visual_rating%2CGLX_INTEL_swap_event%2CGLX_MESA_agp_offset%2CGLX_MESA_copy_sub_buffer%2CGLX_MESA_pixmap_colormap%2CGLX_MESA_query_renderer%2CGLX_MESA_release_buffers%2CGLX_MESA_set_3dfx_mode%2CGLX_MESA_swap_control%2CGLX_NV_copy_buffer%2CGLX_NV_copy_image%2CGLX_NV_delay_before_swap%2CGLX_NV_float_buffer%2CGLX_NV_multigpu_context%2CGLX_NV_multisample_coverage%2CGLX_NV_present_video%2CGLX_NV_robustness_video_memory_purge%2CGLX_NV_swap_group%2CGLX_NV_video_capture%2CGLX_NV_video_out%2CGLX_OML_swap_method%2CGLX_OML_sync_control%2CGLX_SGIS_blended_overlay%2CGLX_SGIS_multisample%2CGLX_SGIS_shared_multisample%2CGLX_SGIX_fbconfig%2CGLX_SGIX_hyperpipe%2CGLX_SGIX_pbuffer%2CGLX_SGIX_swap_barrier%2CGLX_SGIX_swap_group%2CGLX_SGIX_video_resize%2CGLX_SGIX_visual_select_group%2CGLX_SGI_cushion%2CGLX_SGI_make_current_read%2CGLX_SGI_swap_control%2CGLX_SGI_video_sync%2CGLX_SUN_get_transparent_index&generator=c&options=MERGE%2CALIAS%2CLOADER%2CMX%2CMX_GLOBAL%2CUSE_PFN_RANGES
 *
 */

#ifndef GLAD_GLX_H_
#define GLAD_GLX_H_

#ifdef __linux__

#ifdef GLX_H
  #error GLX header already included (API: glx), remove previous include!
#endif
#define GLX_H 1


#include <X11/X.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>

#include <glad/gl.h>

#define GLAD_GLX
#define GLAD_OPTION_GLX_ALIAS
#define GLAD_OPTION_GLX_LOADER
#define GLAD_OPTION_GLX_MX
#define GLAD_OPTION_GLX_MX_GLOBAL
#define GLAD_OPTION_GLX_USE_PFN_RANGES

#ifdef __cplusplus
extern "C" {
#endif

#ifndef GLAD_PLATFORM_H_
#define GLAD_PLATFORM_H_

#ifndef GLAD_PLATFORM_WIN32
  #if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__MINGW32__)
    #define GLAD_PLATFORM_WIN32 1
  #else
    #define GLAD_PLATFORM_WIN32 0
  #endif
#endif

#ifndef GLAD_PLATFORM_APPLE
  #ifdef __APPLE__
    #define GLAD_PLATFORM_APPLE 1
  #else
    #define GLAD_PLATFORM_APPLE 0
  #endif
#endif

#ifndef GLAD_PLATFORM_EMSCRIPTEN
  #ifdef __EMSCRIPTEN__
    #define GLAD_PLATFORM_EMSCRIPTEN 1
  #else
    #define GLAD_PLATFORM_EMSCRIPTEN 0
  #endif
#endif

#ifndef GLAD_PLATFORM_UWP
  #if defined(_MSC_VER) && !defined(GLAD_INTERNAL_HAVE_WINAPIFAMILY)
    #ifdef __has_include
      #if __has_include(<winapifamily.h>)
        #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
      #endif
    #elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
      #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
    #endif
  #endif

  #ifdef GLAD_INTERNAL_HAVE_WINAPIFAMILY
    #include <winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
      #define GLAD_PLATFORM_UWP 1
    #endif
  #endif

  #ifndef GLAD_PLATFORM_UWP
    #define GLAD_PLATFORM_UWP 0
  #endif
#endif

#ifdef __GNUC__
  #define GLAD_GNUC_EXTENSION __extension__
#else
  #define GLAD_GNUC_EXTENSION
#endif

#define GLAD_UNUSED(x) (void)(x)

#ifndef GLAD_API_CALL
  #if defined(GLAD_API_CALL_EXPORT)
    #if GLAD_PLATFORM_WIN32 || defined(__CYGWIN__)
      #if defined(GLAD_API_CALL_EXPORT_BUILD)
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllexport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllexport) extern
        #endif
      #else
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllimport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllimport) extern
        #endif
      #endif
    #elif defined(__GNUC__) && defined(GLAD_API_CALL_EXPORT_BUILD)
      #define GLAD_API_CALL __attribute__ ((visibility ("default"))) extern
    #else
      #define GLAD_API_CALL extern
    #endif
  #else
    #define GLAD_API_CALL extern
  #endif
#endif

#ifdef APIENTRY
  #define GLAD_API_PTR APIENTRY
#elif GLAD_PLATFORM_WIN32
  #define GLAD_API_PTR __stdcall
#else
  #define GLAD_API_PTR
#endif

#ifndef GLAPI
#define GLAPI GLAD_API_CALL
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY GLAD_API_PTR
#endif

#define GLAD_MAKE_VERSION(major, minor) (major * 10000 + minor)
#define GLAD_VERSION_MAJOR(version) (version / 10000)
#define GLAD_VERSION_MINOR(version) (version % 10000)

#define GLAD_GENERATOR_VERSION "2.0.8"

typedef void (*GLADapiproc)(void);

typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(void *userptr, const char *name);

typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc, int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...);

#endif /* GLAD_PLATFORM_H_ */

#define GLX_3DFX_FULLSCREEN_MODE_MESA 0x2
#define GLX_3DFX_WINDOW_MODE_MESA 0x1
#define GLX_ACCUM_ALPHA_SIZE 17
#define GLX_ACCUM_BLUE_SIZE 16
#define GLX_ACCUM_BUFFER_BIT 0x00000080
#define GLX_ACCUM_BUFFER_BIT_SGIX 0x00000080
#define GLX_ACCUM_GREEN_SIZE 15
#define GLX_ACCUM_RED_SIZE 14
#define GLX_ALPHA_SIZE 11
#define GLX_AUX0_EXT 0x20E2
#define GLX_AUX1_EXT 0x20E3
#define GLX_AUX2_EXT 0x20E4
#define GLX_AUX3_EXT 0x20E5
#define GLX_AUX4_EXT 0x20E6
#define GLX_AUX5_EXT 0x20E7
#define GLX_AUX6_EXT 0x20E8
#define GLX_AUX7_EXT 0x20E9
#define GLX_AUX8_EXT 0x20EA
#define GLX_AUX9_EXT 0x20EB
#define GLX_AUX_BUFFERS 7
#define GLX_AUX_BUFFERS_BIT 0x00000010
#define GLX_AUX_BUFFERS_BIT_SGIX 0x00000010
#define GLX_BACK_BUFFER_AGE_EXT 0x20F4
#define GLX_BACK_EXT 0x20E0
#define GLX_BACK_LEFT_BUFFER_BIT 0x00000004
#define GLX_BACK_LEFT_BUFFER_BIT_SGIX 0x00000004
#define GLX_BACK_LEFT_EXT 0x20E0
#define GLX_BACK_RIGHT_BUFFER_BIT 0x00000008
#define GLX_BACK_RIGHT_BUFFER_BIT_SGIX 0x00000008
#define GLX_BACK_RIGHT_EXT 0x20E1
#define GLX_BAD_ATTRIBUTE 2
#define GLX_BAD_CONTEXT 5
#define GLX_BAD_ENUM 7
#define GLX_BAD_HYPERPIPE_CONFIG_SGIX 91
#define GLX_BAD_HYPERPIPE_SGIX 92
#define GLX_BAD_SCREEN 1
#define GLX_BAD_VALUE 6
#define GLX_BAD_VISUAL 4
#define GLX_BIND_TO_MIPMAP_TEXTURE_EXT 0x20D2
#define GLX_BIND_TO_TEXTURE_RGBA_EXT 0x20D1
#define GLX_BIND_TO_TEXTURE_RGB_EXT 0x20D0
#define GLX_BIND_TO_TEXTURE_TARGETS_EXT 0x20D3
#define GLX_BLENDED_RGBA_SGIS 0x8025
#define GLX_BLUE_SIZE 10
#define GLX_BUFFER_CLOBBER_MASK_SGIX 0x08000000
#define GLX_BUFFER_SIZE 2
#define GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK 0x04000000
#define GLX_BufferSwapComplete 1
#define GLX_COLOR_INDEX_BIT 0x00000002
#define GLX_COLOR_INDEX_BIT_SGIX 0x00000002
#define GLX_COLOR_INDEX_TYPE 0x8015
#define GLX_COLOR_INDEX_TYPE_SGIX 0x8015
#define GLX_COLOR_SAMPLES_NV 0x20B3
#define GLX_CONFIG_CAVEAT 0x20
#define GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB 0x2095
#define GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB 0x00000002
#define GLX_CONTEXT_CORE_PROFILE_BIT_ARB 0x00000001
#define GLX_CONTEXT_DEBUG_BIT_ARB 0x00000001
#define GLX_CONTEXT_ES2_PROFILE_BIT_EXT 0x00000004
#define GLX_CONTEXT_ES_PROFILE_BIT_EXT 0x00000004
#define GLX_CONTEXT_FLAGS_ARB 0x2094
#define GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB 0x00000002
#define GLX_CONTEXT_MAJOR_VERSION_ARB 0x2091
#define GLX_CONTEXT_MINOR_VERSION_ARB 0x2092
#define GLX_CONTEXT_MULTIGPU_ATTRIB_AFR_NV 0x20AC
#define GLX_CONTEXT_MULTIGPU_ATTRIB_MULTICAST_NV 0x20AD
#define GLX_CONTEXT_MULTIGPU_ATTRIB_MULTI_DISPLAY_MULTICAST_NV 0x20AE
#define GLX_CONTEXT_MULTIGPU_ATTRIB_NV 0x20AA
#define GLX_CONTEXT_MULTIGPU_ATTRIB_SINGLE_NV 0x20AB
#define GLX_CONTEXT_OPENGL_NO_ERROR_ARB 0x31B3
#define GLX_CONTEXT_PRIORITY_HIGH_EXT 0x3101
#define GLX_CONTEXT_PRIORITY_LEVEL_EXT 0x3100
#define GLX_CONTEXT_PRIORITY_LOW_EXT 0x3103
#define GLX_CONTEXT_PRIORITY_MEDIUM_EXT 0x3102
#define GLX_CONTEXT_PROFILE_MASK_ARB 0x9126
#define GLX_CONTEXT_RELEASE_BEHAVIOR_ARB 0x2097
#define GLX_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB 0x2098
#define GLX_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB 0
#define GLX_CONTEXT_RESET_ISOLATION_BIT_ARB 0x00000008
#define GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB 0x00000004
#define GLX_COPY_COMPLETE_INTEL 0x8181
#define GLX_COVERAGE_SAMPLES_NV 100001
#define GLX_DAMAGED 0x8020
#define GLX_DAMAGED_SGIX 0x8020
#define GLX_DEPTH_BUFFER_BIT 0x00000020
#define GLX_DEPTH_BUFFER_BIT_SGIX 0x00000020
#define GLX_DEPTH_SIZE 12
#define GLX_DEVICE_ID_NV 0x20CD
#define GLX_DIRECT_COLOR 0x8003
#define GLX_DIRECT_COLOR_EXT 0x8003
#define GLX_DONT_CARE 0xFFFFFFFF
#define GLX_DOUBLEBUFFER 5
#define GLX_DRAWABLE_TYPE 0x8010
#define GLX_DRAWABLE_TYPE_SGIX 0x8010
#define GLX_EVENT_MASK 0x801F
#define GLX_EVENT_MASK_SGIX 0x801F
#define GLX_EXCHANGE_COMPLETE_INTEL 0x8180
#define GLX_EXTENSIONS 0x3
#define GLX_EXTENSION_NAME "GLX"
#define GLX_FBCONFIG_ID 0x8013
#define GLX_FBCONFIG_ID_SGIX 0x8013
#define GLX_FLIP_COMPLETE_INTEL 0x8182
#define GLX_FLOAT_COMPONENTS_NV 0x20B0
#define GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB 0x20B2
#define GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x20B2
#define GLX_FRONT_EXT 0x20DE
#define GLX_FRONT_LEFT_BUFFER_BIT 0x00000001
#define GLX_FRONT_LEFT_BUFFER_BIT_SGIX 0x00000001
#define GLX_FRONT_LEFT_EXT 0x20DE
#define GLX_FRONT_RIGHT_BUFFER_BIT 0x00000002
#define GLX_FRONT_RIGHT_BUFFER_BIT_SGIX 0x00000002
#define GLX_FRONT_RIGHT_EXT 0x20DF
#define GLX_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV 0x20F7
#define GLX_GPU_CLOCK_AMD 0x21A4
#define GLX_GPU_FASTEST_TARGET_GPUS_AMD 0x21A2
#define GLX_GPU_NUM_PIPES_AMD 0x21A5
#define GLX_GPU_NUM_RB_AMD 0x21A7
#define GLX_GPU_NUM_SIMD_AMD 0x21A6
#define GLX_GPU_NUM_SPI_AMD 0x21A8
#define GLX_GPU_OPENGL_VERSION_STRING_AMD 0x1F02
#define GLX_GPU_RAM_AMD 0x21A3
#define GLX_GPU_RENDERER_STRING_AMD 0x1F01
#define GLX_GPU_VENDOR_AMD 0x1F00
#define GLX_GRAY_SCALE 0x8006
#define GLX_GRAY_SCALE_EXT 0x8006
#define GLX_GREEN_SIZE 9
#define GLX_HEIGHT 0x801E
#define GLX_HEIGHT_SGIX 0x801E
#define GLX_HYPERPIPE_DISPLAY_PIPE_SGIX 0x00000001
#define GLX_HYPERPIPE_ID_SGIX 0x8030
#define GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX 80
#define GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX 0x00000004
#define GLX_HYPERPIPE_RENDER_PIPE_SGIX 0x00000002
#define GLX_HYPERPIPE_STEREO_SGIX 0x00000003
#define GLX_LARGEST_PBUFFER 0x801C
#define GLX_LARGEST_PBUFFER_SGIX 0x801C
#define GLX_LATE_SWAPS_TEAR_EXT 0x20F3
#define GLX_LEVEL 3
#define GLX_LOSE_CONTEXT_ON_RESET_ARB 0x8252
#define GLX_MAX_PBUFFER_HEIGHT 0x8017
#define GLX_MAX_PBUFFER_HEIGHT_SGIX 0x8017
#define GLX_MAX_PBUFFER_PIXELS 0x8018
#define GLX_MAX_PBUFFER_PIXELS_SGIX 0x8018
#define GLX_MAX_PBUFFER_WIDTH 0x8016
#define GLX_MAX_PBUFFER_WIDTH_SGIX 0x8016
#define GLX_MAX_SWAP_INTERVAL_EXT 0x20F2
#define GLX_MIPMAP_TEXTURE_EXT 0x20D7
#define GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS 0x8027
#define GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS 0x8026
#define GLX_NONE 0x8000
#define GLX_NONE_EXT 0x8000
#define GLX_NON_CONFORMANT_CONFIG 0x800D
#define GLX_NON_CONFORMANT_VISUAL_EXT 0x800D
#define GLX_NO_EXTENSION 3
#define GLX_NO_RESET_NOTIFICATION_ARB 0x8261
#define GLX_NUM_VIDEO_CAPTURE_SLOTS_NV 0x20CF
#define GLX_NUM_VIDEO_SLOTS_NV 0x20F0
#define GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX 0x801A
#define GLX_OPTIMAL_PBUFFER_WIDTH_SGIX 0x8019
#define GLX_PBUFFER 0x8023
#define GLX_PBUFFER_BIT 0x00000004
#define GLX_PBUFFER_BIT_SGIX 0x00000004
#define GLX_PBUFFER_CLOBBER_MASK 0x08000000
#define GLX_PBUFFER_HEIGHT 0x8040
#define GLX_PBUFFER_SGIX 0x8023
#define GLX_PBUFFER_WIDTH 0x8041
#define GLX_PIPE_RECT_LIMITS_SGIX 0x00000002
#define GLX_PIPE_RECT_SGIX 0x00000001
#define GLX_PIXMAP_BIT 0x00000002
#define GLX_PIXMAP_BIT_SGIX 0x00000002
#define GLX_PRESERVED_CONTENTS 0x801B
#define GLX_PRESERVED_CONTENTS_SGIX 0x801B
#define GLX_PSEUDO_COLOR 0x8004
#define GLX_PSEUDO_COLOR_EXT 0x8004
#define GLX_PbufferClobber 0
#define GLX_RED_SIZE 8
#define GLX_RENDERER_ACCELERATED_MESA 0x8186
#define GLX_RENDERER_DEVICE_ID_MESA 0x8184
#define GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA 0x818B
#define GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA 0x818A
#define GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA 0x818D
#define GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA 0x818C
#define GLX_RENDERER_PREFERRED_PROFILE_MESA 0x8189
#define GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA 0x8188
#define GLX_RENDERER_VENDOR_ID_MESA 0x8183
#define GLX_RENDERER_VERSION_MESA 0x8185
#define GLX_RENDERER_VIDEO_MEMORY_MESA 0x8187
#define GLX_RENDER_TYPE 0x8011
#define GLX_RENDER_TYPE_SGIX 0x8011
#define GLX_RGBA 4
#define GLX_RGBA_BIT 0x00000001
#define GLX_RGBA_BIT_SGIX 0x00000001
#define GLX_RGBA_FLOAT_BIT_ARB 0x00000004
#define GLX_RGBA_FLOAT_TYPE_ARB 0x20B9
#define GLX_RGBA_TYPE 0x8014
#define GLX_RGBA_TYPE_SGIX 0x8014
#define GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT 0x00000008
#define GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT 0x20B1
#define GLX_SAMPLES 100001
#define GLX_SAMPLES_3DFX 0x8051
#define GLX_SAMPLES_ARB 100001
#define GLX_SAMPLES_SGIS 100001
#define GLX_SAMPLE_BUFFERS 100000
#define GLX_SAMPLE_BUFFERS_3DFX 0x8050
#define GLX_SAMPLE_BUFFERS_ARB 100000
#define GLX_SAMPLE_BUFFERS_BIT_SGIX 0x00000100
#define GLX_SAMPLE_BUFFERS_SGIS 100000
#define GLX_SAVED 0x8021
#define GLX_SAVED_SGIX 0x8021
#define GLX_SCREEN 0x800C
#define GLX_SCREEN_EXT 0x800C
#define GLX_SHARE_CONTEXT_EXT 0x800A
#define GLX_SLOW_CONFIG 0x8001
#define GLX_SLOW_VISUAL_EXT 0x8001
#define GLX_STATIC_COLOR 0x8005
#define GLX_STATIC_COLOR_EXT 0x8005
#define GLX_STATIC_GRAY 0x8007
#define GLX_STATIC_GRAY_EXT 0x8007
#define GLX_STENCIL_BUFFER_BIT 0x00000040
#define GLX_STENCIL_BUFFER_BIT_SGIX 0x00000040
#define GLX_STENCIL_SIZE 13
#define GLX_STEREO 6
#define GLX_STEREO_NOTIFY_EXT 0x00000000
#define GLX_STEREO_NOTIFY_MASK_EXT 0x00000001
#define GLX_STEREO_TREE_EXT 0x20F5
#define GLX_SWAP_COPY_OML 0x8062
#define GLX_SWAP_EXCHANGE_OML 0x8061
#define GLX_SWAP_INTERVAL_EXT 0x20F1
#define GLX_SWAP_METHOD_OML 0x8060
#define GLX_SWAP_UNDEFINED_OML 0x8063
#define GLX_SYNC_FRAME_SGIX 0x00000000
#define GLX_SYNC_SWAP_SGIX 0x00000001
#define GLX_TEXTURE_1D_BIT_EXT 0x00000001
#define GLX_TEXTURE_1D_EXT 0x20DB
#define GLX_TEXTURE_2D_BIT_EXT 0x00000002
#define GLX_TEXTURE_2D_EXT 0x20DC
#define GLX_TEXTURE_FORMAT_EXT 0x20D5
#define GLX_TEXTURE_FORMAT_NONE_EXT 0x20D8
#define GLX_TEXTURE_FORMAT_RGBA_EXT 0x20DA
#define GLX_TEXTURE_FORMAT_RGB_EXT 0x20D9
#define GLX_TEXTURE_RECTANGLE_BIT_EXT 0x00000004
#define GLX_TEXTURE_RECTANGLE_EXT 0x20DD
#define GLX_TEXTURE_TARGET_EXT 0x20D6
#define GLX_TRANSPARENT_ALPHA_VALUE 0x28
#define GLX_TRANSPARENT_ALPHA_VALUE_EXT 0x28
#define GLX_TRANSPARENT_BLUE_VALUE 0x27
#define GLX_TRANSPARENT_BLUE_VALUE_EXT 0x27
#define GLX_TRANSPARENT_GREEN_VALUE 0x26
#define GLX_TRANSPARENT_GREEN_VALUE_EXT 0x26
#define GLX_TRANSPARENT_INDEX 0x8009
#define GLX_TRANSPARENT_INDEX_EXT 0x8009
#define GLX_TRANSPARENT_INDEX_VALUE 0x24
#define GLX_TRANSPARENT_INDEX_VALUE_EXT 0x24
#define GLX_TRANSPARENT_RED_VALUE 0x25
#define GLX_TRANSPARENT_RED_VALUE_EXT 0x25
#define GLX_TRANSPARENT_RGB 0x8008
#define GLX_TRANSPARENT_RGB_EXT 0x8008
#define GLX_TRANSPARENT_TYPE 0x23
#define GLX_TRANSPARENT_TYPE_EXT 0x23
#define GLX_TRUE_COLOR 0x8002
#define GLX_TRUE_COLOR_EXT 0x8002
#define GLX_UNIQUE_ID_NV 0x20CE
#define GLX_USE_GL 1
#define GLX_VENDOR 0x1
#define GLX_VENDOR_NAMES_EXT 0x20F6
#define GLX_VERSION 0x2
#define GLX_VIDEO_OUT_ALPHA_NV 0x20C4
#define GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV 0x20C6
#define GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV 0x20C7
#define GLX_VIDEO_OUT_COLOR_NV 0x20C3
#define GLX_VIDEO_OUT_DEPTH_NV 0x20C5
#define GLX_VIDEO_OUT_FIELD_1_NV 0x20C9
#define GLX_VIDEO_OUT_FIELD_2_NV 0x20CA
#define GLX_VIDEO_OUT_FRAME_NV 0x20C8
#define GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV 0x20CB
#define GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV 0x20CC
#define GLX_VISUAL_CAVEAT_EXT 0x20
#define GLX_VISUAL_ID 0x800B
#define GLX_VISUAL_ID_EXT 0x800B
#define GLX_VISUAL_SELECT_GROUP_SGIX 0x8028
#define GLX_WIDTH 0x801D
#define GLX_WIDTH_SGIX 0x801D
#define GLX_WINDOW 0x8022
#define GLX_WINDOW_BIT 0x00000001
#define GLX_WINDOW_BIT_SGIX 0x00000001
#define GLX_WINDOW_SGIX 0x8022
#define GLX_X_RENDERABLE 0x8012
#define GLX_X_RENDERABLE_SGIX 0x8012
#define GLX_X_VISUAL_TYPE 0x22
#define GLX_X_VISUAL_TYPE_EXT 0x22
#define GLX_Y_INVERTED_EXT 0x20D4
#define __GLX_NUMBER_EVENTS 17

#ifndef GLEXT_64_TYPES_DEFINED
/* This code block is duplicated in glext.h, so must be protected */
#define GLEXT_64_TYPES_DEFINED
/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
/* (as used in the GLX_OML_sync_control extension). */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
#elif defined(__sun__) || defined(__digital__)
#include <inttypes.h>
#if defined(__STDC__)
#if defined(__arch64__) || defined(_LP64)
typedef long int int64_t;
typedef unsigned long int uint64_t;
#else
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#endif /* __arch64__ */
#endif /* __STDC__ */
#elif defined( __VMS ) || defined(__sgi)
#include <inttypes.h>
#elif defined(__SCO__) || defined(__USLC__)
#include <stdint.h>
#elif defined(__UNIXOS2__) || defined(__SOL64__)
typedef long int int32_t;
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#elif defined(_WIN32) && defined(__GNUC__)
#include <stdint.h>
#elif defined(_WIN32)
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
/* Fallback if nothing above works */
#include <inttypes.h>
#endif
#endif

#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)

#else

#endif

#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)

#else

#endif

typedef XID GLXFBConfigID;

typedef struct __GLXFBConfigRec *GLXFBConfig;

typedef XID GLXContextID;

typedef struct __GLXcontextRec *GLXContext;

typedef XID GLXPixmap;

typedef XID GLXDrawable;

typedef XID GLXWindow;

typedef XID GLXPbuffer;

typedef void (GLAD_API_PTR *__GLXextFuncPtr)(void);

typedef XID GLXVideoCaptureDeviceNV;

typedef unsigned int GLXVideoDeviceNV;

typedef XID GLXVideoSourceSGIX;

typedef XID GLXFBConfigIDSGIX;

typedef struct __GLXFBConfigRec *GLXFBConfigSGIX;

typedef XID GLXPbufferSGIX;

typedef struct {
    int event_type;             /* GLX_DAMAGED or GLX_SAVED */
    int draw_type;              /* GLX_WINDOW or GLX_PBUFFER */
    unsigned long serial;       /* # of last request processed by server */
    Bool send_event;            /* true if this came for SendEvent request */
    Display *display;           /* display the event was read from */
    GLXDrawable drawable;       /* XID of Drawable */
    unsigned int buffer_mask;   /* mask indicating which buffers are affected */
    unsigned int aux_buffer;    /* which aux buffer was affected */
    int x, y;
    int width, height;
    int count;                  /* if nonzero, at least this many more */
} GLXPbufferClobberEvent;

typedef struct {
    int type;
    unsigned long serial;       /* # of last request processed by server */
    Bool send_event;            /* true if this came from a SendEvent request */
    Display *display;           /* Display the event was read from */
    GLXDrawable drawable;       /* drawable on which event was requested in event mask */
    int event_type;
    int64_t ust;
    int64_t msc;
    int64_t sbc;
} GLXBufferSwapComplete;

typedef union __GLXEvent {
    GLXPbufferClobberEvent glxpbufferclobber;
    GLXBufferSwapComplete glxbufferswapcomplete;
    long pad[24];
} GLXEvent;

typedef struct {
    int type;
    unsigned long serial;
    Bool send_event;
    Display *display;
    int extension;
    int evtype;
    GLXDrawable window;
    Bool stereo_tree;
} GLXStereoNotifyEventEXT;

typedef struct {
    int type;
    unsigned long serial;   /* # of last request processed by server */
    Bool send_event;        /* true if this came for SendEvent request */
    Display *display;       /* display the event was read from */
    GLXDrawable drawable;   /* i.d. of Drawable */
    int event_type;         /* GLX_DAMAGED_SGIX or GLX_SAVED_SGIX */
    int draw_type;          /* GLX_WINDOW_SGIX or GLX_PBUFFER_SGIX */
    unsigned int mask;      /* mask indicating which buffers are affected*/
    int x, y;
    int width, height;
    int count;              /* if nonzero, at least this many more */
} GLXBufferClobberEventSGIX;

typedef struct {
    char    pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
    int     networkId;
} GLXHyperpipeNetworkSGIX;

typedef struct {
    char    pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
    int     channel;
    unsigned int participationType;
    int     timeSlice;
} GLXHyperpipeConfigSGIX;

typedef struct {
    char pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
    int srcXOrigin, srcYOrigin, srcWidth, srcHeight;
    int destXOrigin, destYOrigin, destWidth, destHeight;
} GLXPipeRect;

typedef struct {
    char pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
    int XOrigin, YOrigin, maxHeight, maxWidth;
} GLXPipeRectLimits;


#define GLX_VERSION_1_0 1
#define GLX_VERSION_1_1 1
#define GLX_VERSION_1_2 1
#define GLX_VERSION_1_3 1
#define GLX_VERSION_1_4 1
#define GLX_3DFX_multisample 1
#define GLX_AMD_gpu_association 1
#define GLX_ARB_context_flush_control 1
#define GLX_ARB_create_context 1
#define GLX_ARB_create_context_no_error 1
#define GLX_ARB_create_context_profile 1
#define GLX_ARB_create_context_robustness 1
#define GLX_ARB_fbconfig_float 1
#define GLX_ARB_framebuffer_sRGB 1
#define GLX_ARB_get_proc_address 1
#define GLX_ARB_multisample 1
#define GLX_ARB_robustness_application_isolation 1
#define GLX_ARB_robustness_share_group_isolation 1
#define GLX_ARB_vertex_buffer_object 1
#define GLX_EXT_buffer_age 1
#define GLX_EXT_context_priority 1
#define GLX_EXT_create_context_es2_profile 1
#define GLX_EXT_create_context_es_profile 1
#define GLX_EXT_fbconfig_packed_float 1
#define GLX_EXT_framebuffer_sRGB 1
#define GLX_EXT_get_drawable_type 1
#define GLX_EXT_import_context 1
#define GLX_EXT_libglvnd 1
#define GLX_EXT_no_config_context 1
#define GLX_EXT_stereo_tree 1
#define GLX_EXT_swap_control 1
#define GLX_EXT_swap_control_tear 1
#define GLX_EXT_texture_from_pixmap 1
#define GLX_EXT_visual_info 1
#define GLX_EXT_visual_rating 1
#define GLX_INTEL_swap_event 1
#define GLX_MESA_agp_offset 1
#define GLX_MESA_copy_sub_buffer 1
#define GLX_MESA_pixmap_colormap 1
#define GLX_MESA_query_renderer 1
#define GLX_MESA_release_buffers 1
#define GLX_MESA_set_3dfx_mode 1
#define GLX_MESA_swap_control 1
#define GLX_NV_copy_buffer 1
#define GLX_NV_copy_image 1
#define GLX_NV_delay_before_swap 1
#define GLX_NV_float_buffer 1
#define GLX_NV_multigpu_context 1
#define GLX_NV_multisample_coverage 1
#define GLX_NV_present_video 1
#define GLX_NV_robustness_video_memory_purge 1
#define GLX_NV_swap_group 1
#define GLX_NV_video_capture 1
#define GLX_NV_video_out 1
#define GLX_OML_swap_method 1
#define GLX_OML_sync_control 1
#define GLX_SGIS_blended_overlay 1
#define GLX_SGIS_multisample 1
#define GLX_SGIS_shared_multisample 1
#define GLX_SGIX_fbconfig 1
#define GLX_SGIX_hyperpipe 1
#define GLX_SGIX_pbuffer 1
#define GLX_SGIX_swap_barrier 1
#define GLX_SGIX_swap_group 1
#define GLX_SGIX_video_resize 1
#define GLX_SGIX_visual_select_group 1
#define GLX_SGI_cushion 1
#define GLX_SGI_make_current_read 1
#define GLX_SGI_swap_control 1
#define GLX_SGI_video_sync 1
#define GLX_SUN_get_transparent_index 1


typedef XVisualInfo * (GLAD_API_PTR *PFNGLXCHOOSEVISUALPROC)(Display * dpy, int screen, int * attribList);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATECONTEXTPROC)(Display * dpy, XVisualInfo * vis, GLXContext shareList, Bool direct);
typedef void (GLAD_API_PTR *PFNGLXDESTROYCONTEXTPROC)(Display * dpy, GLXContext ctx);
typedef Bool (GLAD_API_PTR *PFNGLXMAKECURRENTPROC)(Display * dpy, GLXDrawable drawable, GLXContext ctx);
typedef void (GLAD_API_PTR *PFNGLXCOPYCONTEXTPROC)(Display * dpy, GLXContext src, GLXContext dst, unsigned long mask);
typedef void (GLAD_API_PTR *PFNGLXSWAPBUFFERSPROC)(Display * dpy, GLXDrawable drawable);
typedef GLXPixmap (GLAD_API_PTR *PFNGLXCREATEGLXPIXMAPPROC)(Display * dpy, XVisualInfo * visual, Pixmap pixmap);
typedef void (GLAD_API_PTR *PFNGLXDESTROYGLXPIXMAPPROC)(Display * dpy, GLXPixmap pixmap);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYEXTENSIONPROC)(Display * dpy, int * errorb, int * event);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYVERSIONPROC)(Display * dpy, int * maj, int * min);
typedef Bool (GLAD_API_PTR *PFNGLXISDIRECTPROC)(Display * dpy, GLXContext ctx);
typedef int (GLAD_API_PTR *PFNGLXGETCONFIGPROC)(Display * dpy, XVisualInfo * visual, int attrib, int * value);
typedef GLXContext (GLAD_API_PTR *PFNGLXGETCURRENTCONTEXTPROC)(void);
typedef GLXDrawable (GLAD_API_PTR *PFNGLXGETCURRENTDRAWABLEPROC)(void);
typedef void (GLAD_API_PTR *PFNGLXWAITGLPROC)(void);
typedef void (GLAD_API_PTR *PFNGLXWAITXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLXUSEXFONTPROC)(Font font, int first, int count, int list);
typedef const char * (GLAD_API_PTR *PFNGLXQUERYEXTENSIONSSTRINGPROC)(Display * dpy, int screen);
typedef const char * (GLAD_API_PTR *PFNGLXQUERYSERVERSTRINGPROC)(Display * dpy, int screen, int name);
typedef const char * (GLAD_API_PTR *PFNGLXGETCLIENTSTRINGPROC)(Display * dpy, int name);
typedef Display * (GLAD_API_PTR *PFNGLXGETCURRENTDISPLAYPROC)(void);
typedef GLXFBConfig * (GLAD_API_PTR *PFNGLXGETFBCONFIGSPROC)(Display * dpy, int screen, int * nelements);
typedef GLXFBConfig * (GLAD_API_PTR *PFNGLXCHOOSEFBCONFIGPROC)(Display * dpy, int screen, const int * attrib_list, int * nelements);
typedef int (GLAD_API_PTR *PFNGLXGETFBCONFIGATTRIBPROC)(Display * dpy, GLXFBConfig config, int attribute, int * value);
typedef XVisualInfo * (GLAD_API_PTR *PFNGLXGETVISUALFROMFBCONFIGPROC)(Display * dpy, GLXFBConfig config);
typedef GLXWindow (GLAD_API_PTR *PFNGLXCREATEWINDOWPROC)(Display * dpy, GLXFBConfig config, Window win, const int * attrib_list);
typedef void (GLAD_API_PTR *PFNGLXDESTROYWINDOWPROC)(Display * dpy, GLXWindow win);
typedef GLXPixmap (GLAD_API_PTR *PFNGLXCREATEPIXMAPPROC)(Display * dpy, GLXFBConfig config, Pixmap pixmap, const int * attrib_list);
typedef void (GLAD_API_PTR *PFNGLXDESTROYPIXMAPPROC)(Display * dpy, GLXPixmap pixmap);
typedef GLXPbuffer (GLAD_API_PTR *PFNGLXCREATEPBUFFERPROC)(Display * dpy, GLXFBConfig config, const int * attrib_list);
typedef void (GLAD_API_PTR *PFNGLXDESTROYPBUFFERPROC)(Display * dpy, GLXPbuffer pbuf);
typedef void (GLAD_API_PTR *PFNGLXQUERYDRAWABLEPROC)(Display * dpy, GLXDrawable draw, int attribute, unsigned int * value);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATENEWCONTEXTPROC)(Display * dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
typedef Bool (GLAD_API_PTR *PFNGLXMAKECONTEXTCURRENTPROC)(Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
typedef GLXDrawable (GLAD_API_PTR *PFNGLXGETCURRENTREADDRAWABLEPROC)(void);
typedef int (GLAD_API_PTR *PFNGLXQUERYCONTEXTPROC)(Display * dpy, GLXContext ctx, int attribute, int * value);
typedef void (GLAD_API_PTR *PFNGLXSELECTEVENTPROC)(Display * dpy, GLXDrawable draw, unsigned long event_mask);
typedef void (GLAD_API_PTR *PFNGLXGETSELECTEDEVENTPROC)(Display * dpy, GLXDrawable draw, unsigned long * event_mask);
typedef __GLXextFuncPtr (GLAD_API_PTR *PFNGLXGETPROCADDRESSPROC)(const GLubyte * procName);
typedef unsigned int (GLAD_API_PTR *PFNGLXGETGPUIDSAMDPROC)(unsigned int maxCount, unsigned int * ids);
typedef int (GLAD_API_PTR *PFNGLXGETGPUINFOAMDPROC)(unsigned int id, int property, GLenum dataType, unsigned int size, void * data);
typedef unsigned int (GLAD_API_PTR *PFNGLXGETCONTEXTGPUIDAMDPROC)(GLXContext ctx);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC)(unsigned int id, GLXContext share_list);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC)(unsigned int id, GLXContext share_context, const int * attribList);
typedef Bool (GLAD_API_PTR *PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC)(GLXContext ctx);
typedef Bool (GLAD_API_PTR *PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC)(GLXContext ctx);
typedef GLXContext (GLAD_API_PTR *PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC)(void);
typedef void (GLAD_API_PTR *PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC)(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATECONTEXTATTRIBSARBPROC)(Display * dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int * attrib_list);
typedef __GLXextFuncPtr (GLAD_API_PTR *PFNGLXGETPROCADDRESSARBPROC)(const GLubyte * procName);
typedef Display * (GLAD_API_PTR *PFNGLXGETCURRENTDISPLAYEXTPROC)(void);
typedef int (GLAD_API_PTR *PFNGLXQUERYCONTEXTINFOEXTPROC)(Display * dpy, GLXContext context, int attribute, int * value);
typedef GLXContextID (GLAD_API_PTR *PFNGLXGETCONTEXTIDEXTPROC)(const GLXContext context);
typedef GLXContext (GLAD_API_PTR *PFNGLXIMPORTCONTEXTEXTPROC)(Display * dpy, GLXContextID contextID);
typedef void (GLAD_API_PTR *PFNGLXFREECONTEXTEXTPROC)(Display * dpy, GLXContext context);
typedef void (GLAD_API_PTR *PFNGLXSWAPINTERVALEXTPROC)(Display * dpy, GLXDrawable drawable, int interval);
typedef void (GLAD_API_PTR *PFNGLXBINDTEXIMAGEEXTPROC)(Display * dpy, GLXDrawable drawable, int buffer, const int * attrib_list);
typedef void (GLAD_API_PTR *PFNGLXRELEASETEXIMAGEEXTPROC)(Display * dpy, GLXDrawable drawable, int buffer);
typedef unsigned int (GLAD_API_PTR *PFNGLXGETAGPOFFSETMESAPROC)(const void * pointer);
typedef void (GLAD_API_PTR *PFNGLXCOPYSUBBUFFERMESAPROC)(Display * dpy, GLXDrawable drawable, int x, int y, int width, int height);
typedef GLXPixmap (GLAD_API_PTR *PFNGLXCREATEGLXPIXMAPMESAPROC)(Display * dpy, XVisualInfo * visual, Pixmap pixmap, Colormap cmap);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC)(int attribute, unsigned int * value);
typedef const char * (GLAD_API_PTR *PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC)(int attribute);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYRENDERERINTEGERMESAPROC)(Display * dpy, int screen, int renderer, int attribute, unsigned int * value);
typedef const char * (GLAD_API_PTR *PFNGLXQUERYRENDERERSTRINGMESAPROC)(Display * dpy, int screen, int renderer, int attribute);
typedef Bool (GLAD_API_PTR *PFNGLXRELEASEBUFFERSMESAPROC)(Display * dpy, GLXDrawable drawable);
typedef GLboolean (GLAD_API_PTR *PFNGLXSET3DFXMODEMESAPROC)(GLint mode);
typedef int (GLAD_API_PTR *PFNGLXGETSWAPINTERVALMESAPROC)(void);
typedef int (GLAD_API_PTR *PFNGLXSWAPINTERVALMESAPROC)(unsigned int interval);
typedef void (GLAD_API_PTR *PFNGLXCOPYBUFFERSUBDATANVPROC)(Display * dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC)(Display * dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLXCOPYIMAGESUBDATANVPROC)(Display * dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
typedef Bool (GLAD_API_PTR *PFNGLXDELAYBEFORESWAPNVPROC)(Display * dpy, GLXDrawable drawable, GLfloat seconds);
typedef unsigned int * (GLAD_API_PTR *PFNGLXENUMERATEVIDEODEVICESNVPROC)(Display * dpy, int screen, int * nelements);
typedef int (GLAD_API_PTR *PFNGLXBINDVIDEODEVICENVPROC)(Display * dpy, unsigned int video_slot, unsigned int video_device, const int * attrib_list);
typedef Bool (GLAD_API_PTR *PFNGLXJOINSWAPGROUPNVPROC)(Display * dpy, GLXDrawable drawable, GLuint group);
typedef Bool (GLAD_API_PTR *PFNGLXBINDSWAPBARRIERNVPROC)(Display * dpy, GLuint group, GLuint barrier);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYSWAPGROUPNVPROC)(Display * dpy, GLXDrawable drawable, GLuint * group, GLuint * barrier);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYMAXSWAPGROUPSNVPROC)(Display * dpy, int screen, GLuint * maxGroups, GLuint * maxBarriers);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYFRAMECOUNTNVPROC)(Display * dpy, int screen, GLuint * count);
typedef Bool (GLAD_API_PTR *PFNGLXRESETFRAMECOUNTNVPROC)(Display * dpy, int screen);
typedef int (GLAD_API_PTR *PFNGLXBINDVIDEOCAPTUREDEVICENVPROC)(Display * dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device);
typedef GLXVideoCaptureDeviceNV * (GLAD_API_PTR *PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC)(Display * dpy, int screen, int * nelements);
typedef void (GLAD_API_PTR *PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC)(Display * dpy, GLXVideoCaptureDeviceNV device);
typedef int (GLAD_API_PTR *PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC)(Display * dpy, GLXVideoCaptureDeviceNV device, int attribute, int * value);
typedef void (GLAD_API_PTR *PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC)(Display * dpy, GLXVideoCaptureDeviceNV device);
typedef int (GLAD_API_PTR *PFNGLXGETVIDEODEVICENVPROC)(Display * dpy, int screen, int numVideoDevices, GLXVideoDeviceNV * pVideoDevice);
typedef int (GLAD_API_PTR *PFNGLXRELEASEVIDEODEVICENVPROC)(Display * dpy, int screen, GLXVideoDeviceNV VideoDevice);
typedef int (GLAD_API_PTR *PFNGLXBINDVIDEOIMAGENVPROC)(Display * dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer);
typedef int (GLAD_API_PTR *PFNGLXRELEASEVIDEOIMAGENVPROC)(Display * dpy, GLXPbuffer pbuf);
typedef int (GLAD_API_PTR *PFNGLXSENDPBUFFERTOVIDEONVPROC)(Display * dpy, GLXPbuffer pbuf, int iBufferType, unsigned long * pulCounterPbuffer, GLboolean bBlock);
typedef int (GLAD_API_PTR *PFNGLXGETVIDEOINFONVPROC)(Display * dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo);
typedef Bool (GLAD_API_PTR *PFNGLXGETSYNCVALUESOMLPROC)(Display * dpy, GLXDrawable drawable, int64_t * ust, int64_t * msc, int64_t * sbc);
typedef Bool (GLAD_API_PTR *PFNGLXGETMSCRATEOMLPROC)(Display * dpy, GLXDrawable drawable, int32_t * numerator, int32_t * denominator);
typedef int64_t (GLAD_API_PTR *PFNGLXSWAPBUFFERSMSCOMLPROC)(Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
typedef Bool (GLAD_API_PTR *PFNGLXWAITFORMSCOMLPROC)(Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t * ust, int64_t * msc, int64_t * sbc);
typedef Bool (GLAD_API_PTR *PFNGLXWAITFORSBCOMLPROC)(Display * dpy, GLXDrawable drawable, int64_t target_sbc, int64_t * ust, int64_t * msc, int64_t * sbc);
typedef void (GLAD_API_PTR *PFNGLXCUSHIONSGIPROC)(Display * dpy, Window window, float cushion);
typedef Bool (GLAD_API_PTR *PFNGLXMAKECURRENTREADSGIPROC)(Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
typedef GLXDrawable (GLAD_API_PTR *PFNGLXGETCURRENTREADDRAWABLESGIPROC)(void);
typedef int (GLAD_API_PTR *PFNGLXSWAPINTERVALSGIPROC)(int interval);
typedef int (GLAD_API_PTR *PFNGLXGETVIDEOSYNCSGIPROC)(unsigned int * count);
typedef int (GLAD_API_PTR *PFNGLXWAITVIDEOSYNCSGIPROC)(int divisor, int remainder, unsigned int * count);
typedef int (GLAD_API_PTR *PFNGLXGETFBCONFIGATTRIBSGIXPROC)(Display * dpy, GLXFBConfigSGIX config, int attribute, int * value);
typedef GLXFBConfigSGIX * (GLAD_API_PTR *PFNGLXCHOOSEFBCONFIGSGIXPROC)(Display * dpy, int screen, int * attrib_list, int * nelements);
typedef GLXPixmap (GLAD_API_PTR *PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC)(Display * dpy, GLXFBConfigSGIX config, Pixmap pixmap);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC)(Display * dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct);
typedef XVisualInfo * (GLAD_API_PTR *PFNGLXGETVISUALFROMFBCONFIGSGIXPROC)(Display * dpy, GLXFBConfigSGIX config);
typedef GLXFBConfigSGIX (GLAD_API_PTR *PFNGLXGETFBCONFIGFROMVISUALSGIXPROC)(Display * dpy, XVisualInfo * vis);
typedef GLXHyperpipeNetworkSGIX * (GLAD_API_PTR *PFNGLXQUERYHYPERPIPENETWORKSGIXPROC)(Display * dpy, int * npipes);
typedef int (GLAD_API_PTR *PFNGLXHYPERPIPECONFIGSGIXPROC)(Display * dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX * cfg, int * hpId);
typedef GLXHyperpipeConfigSGIX * (GLAD_API_PTR *PFNGLXQUERYHYPERPIPECONFIGSGIXPROC)(Display * dpy, int hpId, int * npipes);
typedef int (GLAD_API_PTR *PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC)(Display * dpy, int hpId);
typedef int (GLAD_API_PTR *PFNGLXBINDHYPERPIPESGIXPROC)(Display * dpy, int hpId);
typedef int (GLAD_API_PTR *PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC)(Display * dpy, int timeSlice, int attrib, int size, void * attribList, void * returnAttribList);
typedef int (GLAD_API_PTR *PFNGLXHYPERPIPEATTRIBSGIXPROC)(Display * dpy, int timeSlice, int attrib, int size, void * attribList);
typedef int (GLAD_API_PTR *PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC)(Display * dpy, int timeSlice, int attrib, int size, void * returnAttribList);
typedef GLXPbufferSGIX (GLAD_API_PTR *PFNGLXCREATEGLXPBUFFERSGIXPROC)(Display * dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int * attrib_list);
typedef void (GLAD_API_PTR *PFNGLXDESTROYGLXPBUFFERSGIXPROC)(Display * dpy, GLXPbufferSGIX pbuf);
typedef void (GLAD_API_PTR *PFNGLXQUERYGLXPBUFFERSGIXPROC)(Display * dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int * value);
typedef void (GLAD_API_PTR *PFNGLXSELECTEVENTSGIXPROC)(Display * dpy, GLXDrawable drawable, unsigned long mask);
typedef void (GLAD_API_PTR *PFNGLXGETSELECTEDEVENTSGIXPROC)(Display * dpy, GLXDrawable drawable, unsigned long * mask);
typedef void (GLAD_API_PTR *PFNGLXBINDSWAPBARRIERSGIXPROC)(Display * dpy, GLXDrawable drawable, int barrier);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC)(Display * dpy, int screen, int * max);
typedef void (GLAD_API_PTR *PFNGLXJOINSWAPGROUPSGIXPROC)(Display * dpy, GLXDrawable drawable, GLXDrawable member);
typedef int (GLAD_API_PTR *PFNGLXBINDCHANNELTOWINDOWSGIXPROC)(Display * display, int screen, int channel, Window window);
typedef int (GLAD_API_PTR *PFNGLXCHANNELRECTSGIXPROC)(Display * display, int screen, int channel, int x, int y, int w, int h);
typedef int (GLAD_API_PTR *PFNGLXQUERYCHANNELRECTSGIXPROC)(Display * display, int screen, int channel, int * dx, int * dy, int * dw, int * dh);
typedef int (GLAD_API_PTR *PFNGLXQUERYCHANNELDELTASSGIXPROC)(Display * display, int screen, int channel, int * x, int * y, int * w, int * h);
typedef int (GLAD_API_PTR *PFNGLXCHANNELRECTSYNCSGIXPROC)(Display * display, int screen, int channel, GLenum synctype);
typedef Status (GLAD_API_PTR *PFNGLXGETTRANSPARENTINDEXSUNPROC)(Display * dpy, Window overlay, Window underlay, unsigned long * pTransparentIndex);

typedef struct GladGLXContext {
    void* userptr;

    union {
        unsigned char featArray[5];
        struct {
        /*    0 */ unsigned char VERSION_1_0;
        /*    1 */ unsigned char VERSION_1_1;
        /*    2 */ unsigned char VERSION_1_2;
        /*    3 */ unsigned char VERSION_1_3;
        /*    4 */ unsigned char VERSION_1_4;
        };
    };

    union {
        unsigned char extArray[66];
        struct {
        /*    0 */ unsigned char _3DFX_multisample;
        /*    1 */ unsigned char AMD_gpu_association;
        /*    2 */ unsigned char ARB_context_flush_control;
        /*    3 */ unsigned char ARB_create_context;
        /*    4 */ unsigned char ARB_create_context_no_error;
        /*    5 */ unsigned char ARB_create_context_profile;
        /*    6 */ unsigned char ARB_create_context_robustness;
        /*    7 */ unsigned char ARB_fbconfig_float;
        /*    8 */ unsigned char ARB_framebuffer_sRGB;
        /*    9 */ unsigned char ARB_get_proc_address;
        /*   10 */ unsigned char ARB_multisample;
        /*   11 */ unsigned char ARB_robustness_application_isolation;
        /*   12 */ unsigned char ARB_robustness_share_group_isolation;
        /*   13 */ unsigned char ARB_vertex_buffer_object;
        /*   14 */ unsigned char EXT_buffer_age;
        /*   15 */ unsigned char EXT_context_priority;
        /*   16 */ unsigned char EXT_create_context_es2_profile;
        /*   17 */ unsigned char EXT_create_context_es_profile;
        /*   18 */ unsigned char EXT_fbconfig_packed_float;
        /*   19 */ unsigned char EXT_framebuffer_sRGB;
        /*   20 */ unsigned char EXT_get_drawable_type;
        /*   21 */ unsigned char EXT_import_context;
        /*   22 */ unsigned char EXT_libglvnd;
        /*   23 */ unsigned char EXT_no_config_context;
        /*   24 */ unsigned char EXT_stereo_tree;
        /*   25 */ unsigned char EXT_swap_control;
        /*   26 */ unsigned char EXT_swap_control_tear;
        /*   27 */ unsigned char EXT_texture_from_pixmap;
        /*   28 */ unsigned char EXT_visual_info;
        /*   29 */ unsigned char EXT_visual_rating;
        /*   30 */ unsigned char INTEL_swap_event;
        /*   31 */ unsigned char MESA_agp_offset;
        /*   32 */ unsigned char MESA_copy_sub_buffer;
        /*   33 */ unsigned char MESA_pixmap_colormap;
        /*   34 */ unsigned char MESA_query_renderer;
        /*   35 */ unsigned char MESA_release_buffers;
        /*   36 */ unsigned char MESA_set_3dfx_mode;
        /*   37 */ unsigned char MESA_swap_control;
        /*   38 */ unsigned char NV_copy_buffer;
        /*   39 */ unsigned char NV_copy_image;
        /*   40 */ unsigned char NV_delay_before_swap;
        /*   41 */ unsigned char NV_float_buffer;
        /*   42 */ unsigned char NV_multigpu_context;
        /*   43 */ unsigned char NV_multisample_coverage;
        /*   44 */ unsigned char NV_present_video;
        /*   45 */ unsigned char NV_robustness_video_memory_purge;
        /*   46 */ unsigned char NV_swap_group;
        /*   47 */ unsigned char NV_video_capture;
        /*   48 */ unsigned char NV_video_out;
        /*   49 */ unsigned char OML_swap_method;
        /*   50 */ unsigned char OML_sync_control;
        /*   51 */ unsigned char SGIS_blended_overlay;
        /*   52 */ unsigned char SGIS_multisample;
        /*   53 */ unsigned char SGIS_shared_multisample;
        /*   54 */ unsigned char SGIX_fbconfig;
        /*   55 */ unsigned char SGIX_hyperpipe;
        /*   56 */ unsigned char SGIX_pbuffer;
        /*   57 */ unsigned char SGIX_swap_barrier;
        /*   58 */ unsigned char SGIX_swap_group;
        /*   59 */ unsigned char SGIX_video_resize;
        /*   60 */ unsigned char SGIX_visual_select_group;
        /*   61 */ unsigned char SGI_cushion;
        /*   62 */ unsigned char SGI_make_current_read;
        /*   63 */ unsigned char SGI_swap_control;
        /*   64 */ unsigned char SGI_video_sync;
        /*   65 */ unsigned char SUN_get_transparent_index;
        };
    };

    union {
        void *pfnArray[131];
        struct {
        /*    0 */ PFNGLXCHOOSEVISUALPROC ChooseVisual;
        /*    1 */ PFNGLXCREATECONTEXTPROC CreateContext;
        /*    2 */ PFNGLXDESTROYCONTEXTPROC DestroyContext;
        /*    3 */ PFNGLXMAKECURRENTPROC MakeCurrent;
        /*    4 */ PFNGLXCOPYCONTEXTPROC CopyContext;
        /*    5 */ PFNGLXSWAPBUFFERSPROC SwapBuffers;
        /*    6 */ PFNGLXCREATEGLXPIXMAPPROC CreateGLXPixmap;
        /*    7 */ PFNGLXDESTROYGLXPIXMAPPROC DestroyGLXPixmap;
        /*    8 */ PFNGLXQUERYEXTENSIONPROC QueryExtension;
        /*    9 */ PFNGLXQUERYVERSIONPROC QueryVersion;
        /*   10 */ PFNGLXISDIRECTPROC IsDirect;
        /*   11 */ PFNGLXGETCONFIGPROC GetConfig;
        /*   12 */ PFNGLXGETCURRENTCONTEXTPROC GetCurrentContext;
        /*   13 */ PFNGLXGETCURRENTDRAWABLEPROC GetCurrentDrawable;
        /*   14 */ PFNGLXWAITGLPROC WaitGL;
        /*   15 */ PFNGLXWAITXPROC WaitX;
        /*   16 */ PFNGLXUSEXFONTPROC UseXFont;
        /*   17 */ PFNGLXQUERYEXTENSIONSSTRINGPROC QueryExtensionsString;
        /*   18 */ PFNGLXQUERYSERVERSTRINGPROC QueryServerString;
        /*   19 */ PFNGLXGETCLIENTSTRINGPROC GetClientString;
        /*   20 */ PFNGLXGETCURRENTDISPLAYPROC GetCurrentDisplay;
        /*   21 */ PFNGLXGETFBCONFIGSPROC GetFBConfigs;
        /*   22 */ PFNGLXCHOOSEFBCONFIGPROC ChooseFBConfig;
        /*   23 */ PFNGLXGETFBCONFIGATTRIBPROC GetFBConfigAttrib;
        /*   24 */ PFNGLXGETVISUALFROMFBCONFIGPROC GetVisualFromFBConfig;
        /*   25 */ PFNGLXCREATEWINDOWPROC CreateWindow;
        /*   26 */ PFNGLXDESTROYWINDOWPROC DestroyWindow;
        /*   27 */ PFNGLXCREATEPIXMAPPROC CreatePixmap;
        /*   28 */ PFNGLXDESTROYPIXMAPPROC DestroyPixmap;
        /*   29 */ PFNGLXCREATEPBUFFERPROC CreatePbuffer;
        /*   30 */ PFNGLXDESTROYPBUFFERPROC DestroyPbuffer;
        /*   31 */ PFNGLXQUERYDRAWABLEPROC QueryDrawable;
        /*   32 */ PFNGLXCREATENEWCONTEXTPROC CreateNewContext;
        /*   33 */ PFNGLXMAKECONTEXTCURRENTPROC MakeContextCurrent;
        /*   34 */ PFNGLXGETCURRENTREADDRAWABLEPROC GetCurrentReadDrawable;
        /*   35 */ PFNGLXQUERYCONTEXTPROC QueryContext;
        /*   36 */ PFNGLXSELECTEVENTPROC SelectEvent;
        /*   37 */ PFNGLXGETSELECTEDEVENTPROC GetSelectedEvent;
        /*   38 */ PFNGLXGETPROCADDRESSPROC GetProcAddress;
        /*   39 */ PFNGLXGETGPUIDSAMDPROC GetGPUIDsAMD;
        /*   40 */ PFNGLXGETGPUINFOAMDPROC GetGPUInfoAMD;
        /*   41 */ PFNGLXGETCONTEXTGPUIDAMDPROC GetContextGPUIDAMD;
        /*   42 */ PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC CreateAssociatedContextAMD;
        /*   43 */ PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC CreateAssociatedContextAttribsAMD;
        /*   44 */ PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC DeleteAssociatedContextAMD;
        /*   45 */ PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC MakeAssociatedContextCurrentAMD;
        /*   46 */ PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC GetCurrentAssociatedContextAMD;
        /*   47 */ PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC BlitContextFramebufferAMD;
        /*   48 */ PFNGLXCREATECONTEXTATTRIBSARBPROC CreateContextAttribsARB;
        /*   49 */ PFNGLXGETPROCADDRESSARBPROC GetProcAddressARB;
        /*   50 */ PFNGLXGETCURRENTDISPLAYEXTPROC GetCurrentDisplayEXT;
        /*   51 */ PFNGLXQUERYCONTEXTINFOEXTPROC QueryContextInfoEXT;
        /*   52 */ PFNGLXGETCONTEXTIDEXTPROC GetContextIDEXT;
        /*   53 */ PFNGLXIMPORTCONTEXTEXTPROC ImportContextEXT;
        /*   54 */ PFNGLXFREECONTEXTEXTPROC FreeContextEXT;
        /*   55 */ PFNGLXSWAPINTERVALEXTPROC SwapIntervalEXT;
        /*   56 */ PFNGLXBINDTEXIMAGEEXTPROC BindTexImageEXT;
        /*   57 */ PFNGLXRELEASETEXIMAGEEXTPROC ReleaseTexImageEXT;
        /*   58 */ PFNGLXGETAGPOFFSETMESAPROC GetAGPOffsetMESA;
        /*   59 */ PFNGLXCOPYSUBBUFFERMESAPROC CopySubBufferMESA;
        /*   60 */ PFNGLXCREATEGLXPIXMAPMESAPROC CreateGLXPixmapMESA;
        /*   61 */ PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC QueryCurrentRendererIntegerMESA;
        /*   62 */ PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC QueryCurrentRendererStringMESA;
        /*   63 */ PFNGLXQUERYRENDERERINTEGERMESAPROC QueryRendererIntegerMESA;
        /*   64 */ PFNGLXQUERYRENDERERSTRINGMESAPROC QueryRendererStringMESA;
        /*   65 */ PFNGLXRELEASEBUFFERSMESAPROC ReleaseBuffersMESA;
        /*   66 */ PFNGLXSET3DFXMODEMESAPROC Set3DfxModeMESA;
        /*   67 */ PFNGLXGETSWAPINTERVALMESAPROC GetSwapIntervalMESA;
        /*   68 */ PFNGLXSWAPINTERVALMESAPROC SwapIntervalMESA;
        /*   69 */ PFNGLXCOPYBUFFERSUBDATANVPROC CopyBufferSubDataNV;
        /*   70 */ PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC NamedCopyBufferSubDataNV;
        /*   71 */ PFNGLXCOPYIMAGESUBDATANVPROC CopyImageSubDataNV;
        /*   72 */ PFNGLXDELAYBEFORESWAPNVPROC DelayBeforeSwapNV;
        /*   73 */ PFNGLXENUMERATEVIDEODEVICESNVPROC EnumerateVideoDevicesNV;
        /*   74 */ PFNGLXBINDVIDEODEVICENVPROC BindVideoDeviceNV;
        /*   75 */ PFNGLXJOINSWAPGROUPNVPROC JoinSwapGroupNV;
        /*   76 */ PFNGLXBINDSWAPBARRIERNVPROC BindSwapBarrierNV;
        /*   77 */ PFNGLXQUERYSWAPGROUPNVPROC QuerySwapGroupNV;
        /*   78 */ PFNGLXQUERYMAXSWAPGROUPSNVPROC QueryMaxSwapGroupsNV;
        /*   79 */ PFNGLXQUERYFRAMECOUNTNVPROC QueryFrameCountNV;
        /*   80 */ PFNGLXRESETFRAMECOUNTNVPROC ResetFrameCountNV;
        /*   81 */ PFNGLXBINDVIDEOCAPTUREDEVICENVPROC BindVideoCaptureDeviceNV;
        /*   82 */ PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC EnumerateVideoCaptureDevicesNV;
        /*   83 */ PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC LockVideoCaptureDeviceNV;
        /*   84 */ PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC QueryVideoCaptureDeviceNV;
        /*   85 */ PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC ReleaseVideoCaptureDeviceNV;
        /*   86 */ PFNGLXGETVIDEODEVICENVPROC GetVideoDeviceNV;
        /*   87 */ PFNGLXRELEASEVIDEODEVICENVPROC ReleaseVideoDeviceNV;
        /*   88 */ PFNGLXBINDVIDEOIMAGENVPROC BindVideoImageNV;
        /*   89 */ PFNGLXRELEASEVIDEOIMAGENVPROC ReleaseVideoImageNV;
        /*   90 */ PFNGLXSENDPBUFFERTOVIDEONVPROC SendPbufferToVideoNV;
        /*   91 */ PFNGLXGETVIDEOINFONVPROC GetVideoInfoNV;
        /*   92 */ PFNGLXGETSYNCVALUESOMLPROC GetSyncValuesOML;
        /*   93 */ PFNGLXGETMSCRATEOMLPROC GetMscRateOML;
        /*   94 */ PFNGLXSWAPBUFFERSMSCOMLPROC SwapBuffersMscOML;
        /*   95 */ PFNGLXWAITFORMSCOMLPROC WaitForMscOML;
        /*   96 */ PFNGLXWAITFORSBCOMLPROC WaitForSbcOML;
        /*   97 */ PFNGLXCUSHIONSGIPROC CushionSGI;
        /*   98 */ PFNGLXMAKECURRENTREADSGIPROC MakeCurrentReadSGI;
        /*   99 */ PFNGLXGETCURRENTREADDRAWABLESGIPROC GetCurrentReadDrawableSGI;
        /*  100 */ PFNGLXSWAPINTERVALSGIPROC SwapIntervalSGI;
        /*  101 */ PFNGLXGETVIDEOSYNCSGIPROC GetVideoSyncSGI;
        /*  102 */ PFNGLXWAITVIDEOSYNCSGIPROC WaitVideoSyncSGI;
        /*  103 */ PFNGLXGETFBCONFIGATTRIBSGIXPROC GetFBConfigAttribSGIX;
        /*  104 */ PFNGLXCHOOSEFBCONFIGSGIXPROC ChooseFBConfigSGIX;
        /*  105 */ PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC CreateGLXPixmapWithConfigSGIX;
        /*  106 */ PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC CreateContextWithConfigSGIX;
        /*  107 */ PFNGLXGETVISUALFROMFBCONFIGSGIXPROC GetVisualFromFBConfigSGIX;
        /*  108 */ PFNGLXGETFBCONFIGFROMVISUALSGIXPROC GetFBConfigFromVisualSGIX;
        /*  109 */ PFNGLXQUERYHYPERPIPENETWORKSGIXPROC QueryHyperpipeNetworkSGIX;
        /*  110 */ PFNGLXHYPERPIPECONFIGSGIXPROC HyperpipeConfigSGIX;
        /*  111 */ PFNGLXQUERYHYPERPIPECONFIGSGIXPROC QueryHyperpipeConfigSGIX;
        /*  112 */ PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC DestroyHyperpipeConfigSGIX;
        /*  113 */ PFNGLXBINDHYPERPIPESGIXPROC BindHyperpipeSGIX;
        /*  114 */ PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC QueryHyperpipeBestAttribSGIX;
        /*  115 */ PFNGLXHYPERPIPEATTRIBSGIXPROC HyperpipeAttribSGIX;
        /*  116 */ PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC QueryHyperpipeAttribSGIX;
        /*  117 */ PFNGLXCREATEGLXPBUFFERSGIXPROC CreateGLXPbufferSGIX;
        /*  118 */ PFNGLXDESTROYGLXPBUFFERSGIXPROC DestroyGLXPbufferSGIX;
        /*  119 */ PFNGLXQUERYGLXPBUFFERSGIXPROC QueryGLXPbufferSGIX;
        /*  120 */ PFNGLXSELECTEVENTSGIXPROC SelectEventSGIX;
        /*  121 */ PFNGLXGETSELECTEDEVENTSGIXPROC GetSelectedEventSGIX;
        /*  122 */ PFNGLXBINDSWAPBARRIERSGIXPROC BindSwapBarrierSGIX;
        /*  123 */ PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC QueryMaxSwapBarriersSGIX;
        /*  124 */ PFNGLXJOINSWAPGROUPSGIXPROC JoinSwapGroupSGIX;
        /*  125 */ PFNGLXBINDCHANNELTOWINDOWSGIXPROC BindChannelToWindowSGIX;
        /*  126 */ PFNGLXCHANNELRECTSGIXPROC ChannelRectSGIX;
        /*  127 */ PFNGLXQUERYCHANNELRECTSGIXPROC QueryChannelRectSGIX;
        /*  128 */ PFNGLXQUERYCHANNELDELTASSGIXPROC QueryChannelDeltasSGIX;
        /*  129 */ PFNGLXCHANNELRECTSYNCSGIXPROC ChannelRectSyncSGIX;
        /*  130 */ PFNGLXGETTRANSPARENTINDEXSUNPROC GetTransparentIndexSUN;
        };
    };

    void* glad_loader_handle;
} GladGLXContext;

GLAD_API_CALL GladGLXContext glad_glx_context;

#define GLAD_GLX_VERSION_1_0 (glad_glx_context.VERSION_1_0)
#define GLAD_GLX_VERSION_1_1 (glad_glx_context.VERSION_1_1)
#define GLAD_GLX_VERSION_1_2 (glad_glx_context.VERSION_1_2)
#define GLAD_GLX_VERSION_1_3 (glad_glx_context.VERSION_1_3)
#define GLAD_GLX_VERSION_1_4 (glad_glx_context.VERSION_1_4)
#define GLAD_GLX_3DFX_multisample (glad_glx_context._3DFX_multisample)
#define GLAD_GLX_AMD_gpu_association (glad_glx_context.AMD_gpu_association)
#define GLAD_GLX_ARB_context_flush_control (glad_glx_context.ARB_context_flush_control)
#define GLAD_GLX_ARB_create_context (glad_glx_context.ARB_create_context)
#define GLAD_GLX_ARB_create_context_no_error (glad_glx_context.ARB_create_context_no_error)
#define GLAD_GLX_ARB_create_context_profile (glad_glx_context.ARB_create_context_profile)
#define GLAD_GLX_ARB_create_context_robustness (glad_glx_context.ARB_create_context_robustness)
#define GLAD_GLX_ARB_fbconfig_float (glad_glx_context.ARB_fbconfig_float)
#define GLAD_GLX_ARB_framebuffer_sRGB (glad_glx_context.ARB_framebuffer_sRGB)
#define GLAD_GLX_ARB_get_proc_address (glad_glx_context.ARB_get_proc_address)
#define GLAD_GLX_ARB_multisample (glad_glx_context.ARB_multisample)
#define GLAD_GLX_ARB_robustness_application_isolation (glad_glx_context.ARB_robustness_application_isolation)
#define GLAD_GLX_ARB_robustness_share_group_isolation (glad_glx_context.ARB_robustness_share_group_isolation)
#define GLAD_GLX_ARB_vertex_buffer_object (glad_glx_context.ARB_vertex_buffer_object)
#define GLAD_GLX_EXT_buffer_age (glad_glx_context.EXT_buffer_age)
#define GLAD_GLX_EXT_context_priority (glad_glx_context.EXT_context_priority)
#define GLAD_GLX_EXT_create_context_es2_profile (glad_glx_context.EXT_create_context_es2_profile)
#define GLAD_GLX_EXT_create_context_es_profile (glad_glx_context.EXT_create_context_es_profile)
#define GLAD_GLX_EXT_fbconfig_packed_float (glad_glx_context.EXT_fbconfig_packed_float)
#define GLAD_GLX_EXT_framebuffer_sRGB (glad_glx_context.EXT_framebuffer_sRGB)
#define GLAD_GLX_EXT_get_drawable_type (glad_glx_context.EXT_get_drawable_type)
#define GLAD_GLX_EXT_import_context (glad_glx_context.EXT_import_context)
#define GLAD_GLX_EXT_libglvnd (glad_glx_context.EXT_libglvnd)
#define GLAD_GLX_EXT_no_config_context (glad_glx_context.EXT_no_config_context)
#define GLAD_GLX_EXT_stereo_tree (glad_glx_context.EXT_stereo_tree)
#define GLAD_GLX_EXT_swap_control (glad_glx_context.EXT_swap_control)
#define GLAD_GLX_EXT_swap_control_tear (glad_glx_context.EXT_swap_control_tear)
#define GLAD_GLX_EXT_texture_from_pixmap (glad_glx_context.EXT_texture_from_pixmap)
#define GLAD_GLX_EXT_visual_info (glad_glx_context.EXT_visual_info)
#define GLAD_GLX_EXT_visual_rating (glad_glx_context.EXT_visual_rating)
#define GLAD_GLX_INTEL_swap_event (glad_glx_context.INTEL_swap_event)
#define GLAD_GLX_MESA_agp_offset (glad_glx_context.MESA_agp_offset)
#define GLAD_GLX_MESA_copy_sub_buffer (glad_glx_context.MESA_copy_sub_buffer)
#define GLAD_GLX_MESA_pixmap_colormap (glad_glx_context.MESA_pixmap_colormap)
#define GLAD_GLX_MESA_query_renderer (glad_glx_context.MESA_query_renderer)
#define GLAD_GLX_MESA_release_buffers (glad_glx_context.MESA_release_buffers)
#define GLAD_GLX_MESA_set_3dfx_mode (glad_glx_context.MESA_set_3dfx_mode)
#define GLAD_GLX_MESA_swap_control (glad_glx_context.MESA_swap_control)
#define GLAD_GLX_NV_copy_buffer (glad_glx_context.NV_copy_buffer)
#define GLAD_GLX_NV_copy_image (glad_glx_context.NV_copy_image)
#define GLAD_GLX_NV_delay_before_swap (glad_glx_context.NV_delay_before_swap)
#define GLAD_GLX_NV_float_buffer (glad_glx_context.NV_float_buffer)
#define GLAD_GLX_NV_multigpu_context (glad_glx_context.NV_multigpu_context)
#define GLAD_GLX_NV_multisample_coverage (glad_glx_context.NV_multisample_coverage)
#define GLAD_GLX_NV_present_video (glad_glx_context.NV_present_video)
#define GLAD_GLX_NV_robustness_video_memory_purge (glad_glx_context.NV_robustness_video_memory_purge)
#define GLAD_GLX_NV_swap_group (glad_glx_context.NV_swap_group)
#define GLAD_GLX_NV_video_capture (glad_glx_context.NV_video_capture)
#define GLAD_GLX_NV_video_out (glad_glx_context.NV_video_out)
#define GLAD_GLX_OML_swap_method (glad_glx_context.OML_swap_method)
#define GLAD_GLX_OML_sync_control (glad_glx_context.OML_sync_control)
#define GLAD_GLX_SGIS_blended_overlay (glad_glx_context.SGIS_blended_overlay)
#define GLAD_GLX_SGIS_multisample (glad_glx_context.SGIS_multisample)
#define GLAD_GLX_SGIS_shared_multisample (glad_glx_context.SGIS_shared_multisample)
#define GLAD_GLX_SGIX_fbconfig (glad_glx_context.SGIX_fbconfig)
#define GLAD_GLX_SGIX_hyperpipe (glad_glx_context.SGIX_hyperpipe)
#define GLAD_GLX_SGIX_pbuffer (glad_glx_context.SGIX_pbuffer)
#define GLAD_GLX_SGIX_swap_barrier (glad_glx_context.SGIX_swap_barrier)
#define GLAD_GLX_SGIX_swap_group (glad_glx_context.SGIX_swap_group)
#define GLAD_GLX_SGIX_video_resize (glad_glx_context.SGIX_video_resize)
#define GLAD_GLX_SGIX_visual_select_group (glad_glx_context.SGIX_visual_select_group)
#define GLAD_GLX_SGI_cushion (glad_glx_context.SGI_cushion)
#define GLAD_GLX_SGI_make_current_read (glad_glx_context.SGI_make_current_read)
#define GLAD_GLX_SGI_swap_control (glad_glx_context.SGI_swap_control)
#define GLAD_GLX_SGI_video_sync (glad_glx_context.SGI_video_sync)
#define GLAD_GLX_SUN_get_transparent_index (glad_glx_context.SUN_get_transparent_index)

#ifdef __INTELLISENSE__
XVisualInfo * glXChooseVisual(Display * dpy, int screen, int * attribList);
GLXContext glXCreateContext(Display * dpy, XVisualInfo * vis, GLXContext shareList, Bool direct);
void glXDestroyContext(Display * dpy, GLXContext ctx);
Bool glXMakeCurrent(Display * dpy, GLXDrawable drawable, GLXContext ctx);
void glXCopyContext(Display * dpy, GLXContext src, GLXContext dst, unsigned long mask);
void glXSwapBuffers(Display * dpy, GLXDrawable drawable);
GLXPixmap glXCreateGLXPixmap(Display * dpy, XVisualInfo * visual, Pixmap pixmap);
void glXDestroyGLXPixmap(Display * dpy, GLXPixmap pixmap);
Bool glXQueryExtension(Display * dpy, int * errorb, int * event);
Bool glXQueryVersion(Display * dpy, int * maj, int * min);
Bool glXIsDirect(Display * dpy, GLXContext ctx);
int glXGetConfig(Display * dpy, XVisualInfo * visual, int attrib, int * value);
GLXContext glXGetCurrentContext(void);
GLXDrawable glXGetCurrentDrawable(void);
void glXWaitGL(void);
void glXWaitX(void);
void glXUseXFont(Font font, int first, int count, int list);
const char * glXQueryExtensionsString(Display * dpy, int screen);
const char * glXQueryServerString(Display * dpy, int screen, int name);
const char * glXGetClientString(Display * dpy, int name);
Display * glXGetCurrentDisplay(void);
GLXFBConfig * glXGetFBConfigs(Display * dpy, int screen, int * nelements);
GLXFBConfig * glXChooseFBConfig(Display * dpy, int screen, const int * attrib_list, int * nelements);
int glXGetFBConfigAttrib(Display * dpy, GLXFBConfig config, int attribute, int * value);
XVisualInfo * glXGetVisualFromFBConfig(Display * dpy, GLXFBConfig config);
GLXWindow glXCreateWindow(Display * dpy, GLXFBConfig config, Window win, const int * attrib_list);
void glXDestroyWindow(Display * dpy, GLXWindow win);
GLXPixmap glXCreatePixmap(Display * dpy, GLXFBConfig config, Pixmap pixmap, const int * attrib_list);
void glXDestroyPixmap(Display * dpy, GLXPixmap pixmap);
GLXPbuffer glXCreatePbuffer(Display * dpy, GLXFBConfig config, const int * attrib_list);
void glXDestroyPbuffer(Display * dpy, GLXPbuffer pbuf);
void glXQueryDrawable(Display * dpy, GLXDrawable draw, int attribute, unsigned int * value);
GLXContext glXCreateNewContext(Display * dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
Bool glXMakeContextCurrent(Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
GLXDrawable glXGetCurrentReadDrawable(void);
int glXQueryContext(Display * dpy, GLXContext ctx, int attribute, int * value);
void glXSelectEvent(Display * dpy, GLXDrawable draw, unsigned long event_mask);
void glXGetSelectedEvent(Display * dpy, GLXDrawable draw, unsigned long * event_mask);
__GLXextFuncPtr glXGetProcAddress(const GLubyte * procName);
unsigned int glXGetGPUIDsAMD(unsigned int maxCount, unsigned int * ids);
int glXGetGPUInfoAMD(unsigned int id, int property, GLenum dataType, unsigned int size, void * data);
unsigned int glXGetContextGPUIDAMD(GLXContext ctx);
GLXContext glXCreateAssociatedContextAMD(unsigned int id, GLXContext share_list);
GLXContext glXCreateAssociatedContextAttribsAMD(unsigned int id, GLXContext share_context, const int * attribList);
Bool glXDeleteAssociatedContextAMD(GLXContext ctx);
Bool glXMakeAssociatedContextCurrentAMD(GLXContext ctx);
GLXContext glXGetCurrentAssociatedContextAMD(void);
void glXBlitContextFramebufferAMD(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLXContext glXCreateContextAttribsARB(Display * dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int * attrib_list);
__GLXextFuncPtr glXGetProcAddressARB(const GLubyte * procName);
Display * glXGetCurrentDisplayEXT(void);
int glXQueryContextInfoEXT(Display * dpy, GLXContext context, int attribute, int * value);
GLXContextID glXGetContextIDEXT(const GLXContext context);
GLXContext glXImportContextEXT(Display * dpy, GLXContextID contextID);
void glXFreeContextEXT(Display * dpy, GLXContext context);
void glXSwapIntervalEXT(Display * dpy, GLXDrawable drawable, int interval);
void glXBindTexImageEXT(Display * dpy, GLXDrawable drawable, int buffer, const int * attrib_list);
void glXReleaseTexImageEXT(Display * dpy, GLXDrawable drawable, int buffer);
unsigned int glXGetAGPOffsetMESA(const void * pointer);
void glXCopySubBufferMESA(Display * dpy, GLXDrawable drawable, int x, int y, int width, int height);
GLXPixmap glXCreateGLXPixmapMESA(Display * dpy, XVisualInfo * visual, Pixmap pixmap, Colormap cmap);
Bool glXQueryCurrentRendererIntegerMESA(int attribute, unsigned int * value);
const char * glXQueryCurrentRendererStringMESA(int attribute);
Bool glXQueryRendererIntegerMESA(Display * dpy, int screen, int renderer, int attribute, unsigned int * value);
const char * glXQueryRendererStringMESA(Display * dpy, int screen, int renderer, int attribute);
Bool glXReleaseBuffersMESA(Display * dpy, GLXDrawable drawable);
GLboolean glXSet3DfxModeMESA(GLint mode);
int glXGetSwapIntervalMESA(void);
int glXSwapIntervalMESA(unsigned int interval);
void glXCopyBufferSubDataNV(Display * dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void glXNamedCopyBufferSubDataNV(Display * dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void glXCopyImageSubDataNV(Display * dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
Bool glXDelayBeforeSwapNV(Display * dpy, GLXDrawable drawable, GLfloat seconds);
unsigned int * glXEnumerateVideoDevicesNV(Display * dpy, int screen, int * nelements);
int glXBindVideoDeviceNV(Display * dpy, unsigned int video_slot, unsigned int video_device, const int * attrib_list);
Bool glXJoinSwapGroupNV(Display * dpy, GLXDrawable drawable, GLuint group);
Bool glXBindSwapBarrierNV(Display * dpy, GLuint group, GLuint barrier);
Bool glXQuerySwapGroupNV(Display * dpy, GLXDrawable drawable, GLuint * group, GLuint * barrier);
Bool glXQueryMaxSwapGroupsNV(Display * dpy, int screen, GLuint * maxGroups, GLuint * maxBarriers);
Bool glXQueryFrameCountNV(Display * dpy, int screen, GLuint * count);
Bool glXResetFrameCountNV(Display * dpy, int screen);
int glXBindVideoCaptureDeviceNV(Display * dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device);
GLXVideoCaptureDeviceNV * glXEnumerateVideoCaptureDevicesNV(Display * dpy, int screen, int * nelements);
void glXLockVideoCaptureDeviceNV(Display * dpy, GLXVideoCaptureDeviceNV device);
int glXQueryVideoCaptureDeviceNV(Display * dpy, GLXVideoCaptureDeviceNV device, int attribute, int * value);
void glXReleaseVideoCaptureDeviceNV(Display * dpy, GLXVideoCaptureDeviceNV device);
int glXGetVideoDeviceNV(Display * dpy, int screen, int numVideoDevices, GLXVideoDeviceNV * pVideoDevice);
int glXReleaseVideoDeviceNV(Display * dpy, int screen, GLXVideoDeviceNV VideoDevice);
int glXBindVideoImageNV(Display * dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer);
int glXReleaseVideoImageNV(Display * dpy, GLXPbuffer pbuf);
int glXSendPbufferToVideoNV(Display * dpy, GLXPbuffer pbuf, int iBufferType, unsigned long * pulCounterPbuffer, GLboolean bBlock);
int glXGetVideoInfoNV(Display * dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo);
Bool glXGetSyncValuesOML(Display * dpy, GLXDrawable drawable, int64_t * ust, int64_t * msc, int64_t * sbc);
Bool glXGetMscRateOML(Display * dpy, GLXDrawable drawable, int32_t * numerator, int32_t * denominator);
int64_t glXSwapBuffersMscOML(Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
Bool glXWaitForMscOML(Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t * ust, int64_t * msc, int64_t * sbc);
Bool glXWaitForSbcOML(Display * dpy, GLXDrawable drawable, int64_t target_sbc, int64_t * ust, int64_t * msc, int64_t * sbc);
void glXCushionSGI(Display * dpy, Window window, float cushion);
Bool glXMakeCurrentReadSGI(Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
GLXDrawable glXGetCurrentReadDrawableSGI(void);
int glXSwapIntervalSGI(int interval);
int glXGetVideoSyncSGI(unsigned int * count);
int glXWaitVideoSyncSGI(int divisor, int remainder, unsigned int * count);
int glXGetFBConfigAttribSGIX(Display * dpy, GLXFBConfigSGIX config, int attribute, int * value);
GLXFBConfigSGIX * glXChooseFBConfigSGIX(Display * dpy, int screen, int * attrib_list, int * nelements);
GLXPixmap glXCreateGLXPixmapWithConfigSGIX(Display * dpy, GLXFBConfigSGIX config, Pixmap pixmap);
GLXContext glXCreateContextWithConfigSGIX(Display * dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct);
XVisualInfo * glXGetVisualFromFBConfigSGIX(Display * dpy, GLXFBConfigSGIX config);
GLXFBConfigSGIX glXGetFBConfigFromVisualSGIX(Display * dpy, XVisualInfo * vis);
GLXHyperpipeNetworkSGIX * glXQueryHyperpipeNetworkSGIX(Display * dpy, int * npipes);
int glXHyperpipeConfigSGIX(Display * dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX * cfg, int * hpId);
GLXHyperpipeConfigSGIX * glXQueryHyperpipeConfigSGIX(Display * dpy, int hpId, int * npipes);
int glXDestroyHyperpipeConfigSGIX(Display * dpy, int hpId);
int glXBindHyperpipeSGIX(Display * dpy, int hpId);
int glXQueryHyperpipeBestAttribSGIX(Display * dpy, int timeSlice, int attrib, int size, void * attribList, void * returnAttribList);
int glXHyperpipeAttribSGIX(Display * dpy, int timeSlice, int attrib, int size, void * attribList);
int glXQueryHyperpipeAttribSGIX(Display * dpy, int timeSlice, int attrib, int size, void * returnAttribList);
GLXPbufferSGIX glXCreateGLXPbufferSGIX(Display * dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int * attrib_list);
void glXDestroyGLXPbufferSGIX(Display * dpy, GLXPbufferSGIX pbuf);
void glXQueryGLXPbufferSGIX(Display * dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int * value);
void glXSelectEventSGIX(Display * dpy, GLXDrawable drawable, unsigned long mask);
void glXGetSelectedEventSGIX(Display * dpy, GLXDrawable drawable, unsigned long * mask);
void glXBindSwapBarrierSGIX(Display * dpy, GLXDrawable drawable, int barrier);
Bool glXQueryMaxSwapBarriersSGIX(Display * dpy, int screen, int * max);
void glXJoinSwapGroupSGIX(Display * dpy, GLXDrawable drawable, GLXDrawable member);
int glXBindChannelToWindowSGIX(Display * display, int screen, int channel, Window window);
int glXChannelRectSGIX(Display * display, int screen, int channel, int x, int y, int w, int h);
int glXQueryChannelRectSGIX(Display * display, int screen, int channel, int * dx, int * dy, int * dw, int * dh);
int glXQueryChannelDeltasSGIX(Display * display, int screen, int channel, int * x, int * y, int * w, int * h);
int glXChannelRectSyncSGIX(Display * display, int screen, int channel, GLenum synctype);
Status glXGetTransparentIndexSUN(Display * dpy, Window overlay, Window underlay, unsigned long * pTransparentIndex);

#else
#define glXChooseVisual (glad_glx_context.ChooseVisual)
#define glXCreateContext (glad_glx_context.CreateContext)
#define glXDestroyContext (glad_glx_context.DestroyContext)
#define glXMakeCurrent (glad_glx_context.MakeCurrent)
#define glXCopyContext (glad_glx_context.CopyContext)
#define glXSwapBuffers (glad_glx_context.SwapBuffers)
#define glXCreateGLXPixmap (glad_glx_context.CreateGLXPixmap)
#define glXDestroyGLXPixmap (glad_glx_context.DestroyGLXPixmap)
#define glXQueryExtension (glad_glx_context.QueryExtension)
#define glXQueryVersion (glad_glx_context.QueryVersion)
#define glXIsDirect (glad_glx_context.IsDirect)
#define glXGetConfig (glad_glx_context.GetConfig)
#define glXGetCurrentContext (glad_glx_context.GetCurrentContext)
#define glXGetCurrentDrawable (glad_glx_context.GetCurrentDrawable)
#define glXWaitGL (glad_glx_context.WaitGL)
#define glXWaitX (glad_glx_context.WaitX)
#define glXUseXFont (glad_glx_context.UseXFont)
#define glXQueryExtensionsString (glad_glx_context.QueryExtensionsString)
#define glXQueryServerString (glad_glx_context.QueryServerString)
#define glXGetClientString (glad_glx_context.GetClientString)
#define glXGetCurrentDisplay (glad_glx_context.GetCurrentDisplay)
#define glXGetFBConfigs (glad_glx_context.GetFBConfigs)
#define glXChooseFBConfig (glad_glx_context.ChooseFBConfig)
#define glXGetFBConfigAttrib (glad_glx_context.GetFBConfigAttrib)
#define glXGetVisualFromFBConfig (glad_glx_context.GetVisualFromFBConfig)
#define glXCreateWindow (glad_glx_context.CreateWindow)
#define glXDestroyWindow (glad_glx_context.DestroyWindow)
#define glXCreatePixmap (glad_glx_context.CreatePixmap)
#define glXDestroyPixmap (glad_glx_context.DestroyPixmap)
#define glXCreatePbuffer (glad_glx_context.CreatePbuffer)
#define glXDestroyPbuffer (glad_glx_context.DestroyPbuffer)
#define glXQueryDrawable (glad_glx_context.QueryDrawable)
#define glXCreateNewContext (glad_glx_context.CreateNewContext)
#define glXMakeContextCurrent (glad_glx_context.MakeContextCurrent)
#define glXGetCurrentReadDrawable (glad_glx_context.GetCurrentReadDrawable)
#define glXQueryContext (glad_glx_context.QueryContext)
#define glXSelectEvent (glad_glx_context.SelectEvent)
#define glXGetSelectedEvent (glad_glx_context.GetSelectedEvent)
#define glXGetProcAddress (glad_glx_context.GetProcAddress)
#define glXGetGPUIDsAMD (glad_glx_context.GetGPUIDsAMD)
#define glXGetGPUInfoAMD (glad_glx_context.GetGPUInfoAMD)
#define glXGetContextGPUIDAMD (glad_glx_context.GetContextGPUIDAMD)
#define glXCreateAssociatedContextAMD (glad_glx_context.CreateAssociatedContextAMD)
#define glXCreateAssociatedContextAttribsAMD (glad_glx_context.CreateAssociatedContextAttribsAMD)
#define glXDeleteAssociatedContextAMD (glad_glx_context.DeleteAssociatedContextAMD)
#define glXMakeAssociatedContextCurrentAMD (glad_glx_context.MakeAssociatedContextCurrentAMD)
#define glXGetCurrentAssociatedContextAMD (glad_glx_context.GetCurrentAssociatedContextAMD)
#define glXBlitContextFramebufferAMD (glad_glx_context.BlitContextFramebufferAMD)
#define glXCreateContextAttribsARB (glad_glx_context.CreateContextAttribsARB)
#define glXGetProcAddressARB (glad_glx_context.GetProcAddressARB)
#define glXGetCurrentDisplayEXT (glad_glx_context.GetCurrentDisplayEXT)
#define glXQueryContextInfoEXT (glad_glx_context.QueryContextInfoEXT)
#define glXGetContextIDEXT (glad_glx_context.GetContextIDEXT)
#define glXImportContextEXT (glad_glx_context.ImportContextEXT)
#define glXFreeContextEXT (glad_glx_context.FreeContextEXT)
#define glXSwapIntervalEXT (glad_glx_context.SwapIntervalEXT)
#define glXBindTexImageEXT (glad_glx_context.BindTexImageEXT)
#define glXReleaseTexImageEXT (glad_glx_context.ReleaseTexImageEXT)
#define glXGetAGPOffsetMESA (glad_glx_context.GetAGPOffsetMESA)
#define glXCopySubBufferMESA (glad_glx_context.CopySubBufferMESA)
#define glXCreateGLXPixmapMESA (glad_glx_context.CreateGLXPixmapMESA)
#define glXQueryCurrentRendererIntegerMESA (glad_glx_context.QueryCurrentRendererIntegerMESA)
#define glXQueryCurrentRendererStringMESA (glad_glx_context.QueryCurrentRendererStringMESA)
#define glXQueryRendererIntegerMESA (glad_glx_context.QueryRendererIntegerMESA)
#define glXQueryRendererStringMESA (glad_glx_context.QueryRendererStringMESA)
#define glXReleaseBuffersMESA (glad_glx_context.ReleaseBuffersMESA)
#define glXSet3DfxModeMESA (glad_glx_context.Set3DfxModeMESA)
#define glXGetSwapIntervalMESA (glad_glx_context.GetSwapIntervalMESA)
#define glXSwapIntervalMESA (glad_glx_context.SwapIntervalMESA)
#define glXCopyBufferSubDataNV (glad_glx_context.CopyBufferSubDataNV)
#define glXNamedCopyBufferSubDataNV (glad_glx_context.NamedCopyBufferSubDataNV)
#define glXCopyImageSubDataNV (glad_glx_context.CopyImageSubDataNV)
#define glXDelayBeforeSwapNV (glad_glx_context.DelayBeforeSwapNV)
#define glXEnumerateVideoDevicesNV (glad_glx_context.EnumerateVideoDevicesNV)
#define glXBindVideoDeviceNV (glad_glx_context.BindVideoDeviceNV)
#define glXJoinSwapGroupNV (glad_glx_context.JoinSwapGroupNV)
#define glXBindSwapBarrierNV (glad_glx_context.BindSwapBarrierNV)
#define glXQuerySwapGroupNV (glad_glx_context.QuerySwapGroupNV)
#define glXQueryMaxSwapGroupsNV (glad_glx_context.QueryMaxSwapGroupsNV)
#define glXQueryFrameCountNV (glad_glx_context.QueryFrameCountNV)
#define glXResetFrameCountNV (glad_glx_context.ResetFrameCountNV)
#define glXBindVideoCaptureDeviceNV (glad_glx_context.BindVideoCaptureDeviceNV)
#define glXEnumerateVideoCaptureDevicesNV (glad_glx_context.EnumerateVideoCaptureDevicesNV)
#define glXLockVideoCaptureDeviceNV (glad_glx_context.LockVideoCaptureDeviceNV)
#define glXQueryVideoCaptureDeviceNV (glad_glx_context.QueryVideoCaptureDeviceNV)
#define glXReleaseVideoCaptureDeviceNV (glad_glx_context.ReleaseVideoCaptureDeviceNV)
#define glXGetVideoDeviceNV (glad_glx_context.GetVideoDeviceNV)
#define glXReleaseVideoDeviceNV (glad_glx_context.ReleaseVideoDeviceNV)
#define glXBindVideoImageNV (glad_glx_context.BindVideoImageNV)
#define glXReleaseVideoImageNV (glad_glx_context.ReleaseVideoImageNV)
#define glXSendPbufferToVideoNV (glad_glx_context.SendPbufferToVideoNV)
#define glXGetVideoInfoNV (glad_glx_context.GetVideoInfoNV)
#define glXGetSyncValuesOML (glad_glx_context.GetSyncValuesOML)
#define glXGetMscRateOML (glad_glx_context.GetMscRateOML)
#define glXSwapBuffersMscOML (glad_glx_context.SwapBuffersMscOML)
#define glXWaitForMscOML (glad_glx_context.WaitForMscOML)
#define glXWaitForSbcOML (glad_glx_context.WaitForSbcOML)
#define glXCushionSGI (glad_glx_context.CushionSGI)
#define glXMakeCurrentReadSGI (glad_glx_context.MakeCurrentReadSGI)
#define glXGetCurrentReadDrawableSGI (glad_glx_context.GetCurrentReadDrawableSGI)
#define glXSwapIntervalSGI (glad_glx_context.SwapIntervalSGI)
#define glXGetVideoSyncSGI (glad_glx_context.GetVideoSyncSGI)
#define glXWaitVideoSyncSGI (glad_glx_context.WaitVideoSyncSGI)
#define glXGetFBConfigAttribSGIX (glad_glx_context.GetFBConfigAttribSGIX)
#define glXChooseFBConfigSGIX (glad_glx_context.ChooseFBConfigSGIX)
#define glXCreateGLXPixmapWithConfigSGIX (glad_glx_context.CreateGLXPixmapWithConfigSGIX)
#define glXCreateContextWithConfigSGIX (glad_glx_context.CreateContextWithConfigSGIX)
#define glXGetVisualFromFBConfigSGIX (glad_glx_context.GetVisualFromFBConfigSGIX)
#define glXGetFBConfigFromVisualSGIX (glad_glx_context.GetFBConfigFromVisualSGIX)
#define glXQueryHyperpipeNetworkSGIX (glad_glx_context.QueryHyperpipeNetworkSGIX)
#define glXHyperpipeConfigSGIX (glad_glx_context.HyperpipeConfigSGIX)
#define glXQueryHyperpipeConfigSGIX (glad_glx_context.QueryHyperpipeConfigSGIX)
#define glXDestroyHyperpipeConfigSGIX (glad_glx_context.DestroyHyperpipeConfigSGIX)
#define glXBindHyperpipeSGIX (glad_glx_context.BindHyperpipeSGIX)
#define glXQueryHyperpipeBestAttribSGIX (glad_glx_context.QueryHyperpipeBestAttribSGIX)
#define glXHyperpipeAttribSGIX (glad_glx_context.HyperpipeAttribSGIX)
#define glXQueryHyperpipeAttribSGIX (glad_glx_context.QueryHyperpipeAttribSGIX)
#define glXCreateGLXPbufferSGIX (glad_glx_context.CreateGLXPbufferSGIX)
#define glXDestroyGLXPbufferSGIX (glad_glx_context.DestroyGLXPbufferSGIX)
#define glXQueryGLXPbufferSGIX (glad_glx_context.QueryGLXPbufferSGIX)
#define glXSelectEventSGIX (glad_glx_context.SelectEventSGIX)
#define glXGetSelectedEventSGIX (glad_glx_context.GetSelectedEventSGIX)
#define glXBindSwapBarrierSGIX (glad_glx_context.BindSwapBarrierSGIX)
#define glXQueryMaxSwapBarriersSGIX (glad_glx_context.QueryMaxSwapBarriersSGIX)
#define glXJoinSwapGroupSGIX (glad_glx_context.JoinSwapGroupSGIX)
#define glXBindChannelToWindowSGIX (glad_glx_context.BindChannelToWindowSGIX)
#define glXChannelRectSGIX (glad_glx_context.ChannelRectSGIX)
#define glXQueryChannelRectSGIX (glad_glx_context.QueryChannelRectSGIX)
#define glXQueryChannelDeltasSGIX (glad_glx_context.QueryChannelDeltasSGIX)
#define glXChannelRectSyncSGIX (glad_glx_context.ChannelRectSyncSGIX)
#define glXGetTransparentIndexSUN (glad_glx_context.GetTransparentIndexSUN)
#endif


GLAD_API_CALL GladGLXContext* gladGetGLXContext(void);
GLAD_API_CALL void gladSetGLXContext(GladGLXContext *context);

GLAD_API_CALL int gladLoadGLXContextUserPtr(GladGLXContext *context, Display *display, int screen, GLADuserptrloadfunc load, void *userptr);
GLAD_API_CALL int gladLoadGLXContext(GladGLXContext *context, Display *display, int screen, GLADloadfunc load);

GLAD_API_CALL int gladLoadGLXUserPtr(Display *display, int screen, GLADuserptrloadfunc load, void *userptr);
GLAD_API_CALL int gladLoadGLX(Display *display, int screen, GLADloadfunc load);

#ifdef GLAD_GLX

GLAD_API_CALL int gladLoaderLoadGLX(Display *display, int screen);
GLAD_API_CALL void gladLoaderUnloadGLX(void);
GLAD_API_CALL void gladLoaderResetGLXContext(GladGLXContext *context);

#endif
#ifdef __cplusplus
}
#endif
#endif
#endif
